// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.gr_status_painel_pedido_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: gr_status_painel_pedido Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class gr_status_painel_pedido implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(dias != null){
				
					this.setProperty("dias", dias.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public Integer dias;
public Integer getDias(){
	return this.dias;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "gr_status_painel_pedido";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				gr_status_painel_pedido.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(gr_status_painel_pedido.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName=status_painel_pedido";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class map3Struct implements routines.system.IPersistableRow<map3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}

				public Boolean yearIsNullable(){
				    return true;
				}
				public Boolean yearIsKey(){
				    return false;
				}
				public Integer yearLength(){
				    return null;
				}
				public Integer yearPrecision(){
				    return null;
				}
				public String yearDefault(){
				
					return null;
				
				}
				public String yearComment(){
				
				    return "";
				
				}
				public String yearPattern(){
				
					return "";
				
				}
				public String yearOriginalDbColumnName(){
				
					return "year";
				
				}

				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}

				public Boolean monthIsNullable(){
				    return true;
				}
				public Boolean monthIsKey(){
				    return false;
				}
				public Integer monthLength(){
				    return null;
				}
				public Integer monthPrecision(){
				    return null;
				}
				public String monthDefault(){
				
					return null;
				
				}
				public String monthComment(){
				
				    return "";
				
				}
				public String monthPattern(){
				
					return "";
				
				}
				public String monthOriginalDbColumnName(){
				
					return "month";
				
				}

				
			    public java.util.Date start_job;

				public java.util.Date getStart_job () {
					return this.start_job;
				}

				public Boolean start_jobIsNullable(){
				    return true;
				}
				public Boolean start_jobIsKey(){
				    return false;
				}
				public Integer start_jobLength(){
				    return null;
				}
				public Integer start_jobPrecision(){
				    return null;
				}
				public String start_jobDefault(){
				
					return null;
				
				}
				public String start_jobComment(){
				
				    return "";
				
				}
				public String start_jobPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String start_jobOriginalDbColumnName(){
				
					return "start_job";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
					this.start_job = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
					this.start_job = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// java.util.Date
				
						writeDate(this.start_job,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// java.util.Date
				
						writeDate(this.start_job,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",start_job="+String.valueOf(start_job));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				
			    public java.util.Date PARAMETRO;

				public java.util.Date getPARAMETRO () {
					return this.PARAMETRO;
				}

				public Boolean PARAMETROIsNullable(){
				    return true;
				}
				public Boolean PARAMETROIsKey(){
				    return false;
				}
				public Integer PARAMETROLength(){
				    return null;
				}
				public Integer PARAMETROPrecision(){
				    return null;
				}
				public String PARAMETRODefault(){
				
					return null;
				
				}
				public String PARAMETROComment(){
				
				    return "";
				
				}
				public String PARAMETROPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String PARAMETROOriginalDbColumnName(){
				
					return "PARAMETRO";
				
				}

				
			    public java.util.Date DATA_START;

				public java.util.Date getDATA_START () {
					return this.DATA_START;
				}

				public Boolean DATA_STARTIsNullable(){
				    return true;
				}
				public Boolean DATA_STARTIsKey(){
				    return false;
				}
				public Integer DATA_STARTLength(){
				    return null;
				}
				public Integer DATA_STARTPrecision(){
				    return null;
				}
				public String DATA_STARTDefault(){
				
					return null;
				
				}
				public String DATA_STARTComment(){
				
				    return "";
				
				}
				public String DATA_STARTPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_STARTOriginalDbColumnName(){
				
					return "DATA_START";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",PARAMETRO="+String.valueOf(PARAMETRO));
		sb.append(",DATA_START="+String.valueOf(DATA_START));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				
			    public java.util.Date PARAMETRO;

				public java.util.Date getPARAMETRO () {
					return this.PARAMETRO;
				}

				public Boolean PARAMETROIsNullable(){
				    return true;
				}
				public Boolean PARAMETROIsKey(){
				    return false;
				}
				public Integer PARAMETROLength(){
				    return null;
				}
				public Integer PARAMETROPrecision(){
				    return null;
				}
				public String PARAMETRODefault(){
				
					return null;
				
				}
				public String PARAMETROComment(){
				
				    return "";
				
				}
				public String PARAMETROPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String PARAMETROOriginalDbColumnName(){
				
					return "PARAMETRO";
				
				}

				
			    public java.util.Date DATA_START;

				public java.util.Date getDATA_START () {
					return this.DATA_START;
				}

				public Boolean DATA_STARTIsNullable(){
				    return true;
				}
				public Boolean DATA_STARTIsKey(){
				    return false;
				}
				public Integer DATA_STARTLength(){
				    return null;
				}
				public Integer DATA_STARTPrecision(){
				    return null;
				}
				public String DATA_STARTDefault(){
				
					return null;
				
				}
				public String DATA_STARTComment(){
				
				    return "";
				
				}
				public String DATA_STARTPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_STARTOriginalDbColumnName(){
				
					return "DATA_START";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",PARAMETRO="+String.valueOf(PARAMETRO));
		sb.append(",DATA_START="+String.valueOf(DATA_START));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row8Struct row11 = row8;
map3Struct map3 = new map3Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map3");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
		


	class Util_tLogRow_2 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_2";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 9;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "year");
				for(int i=0; i<titleWidth -"year".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "month");
				for(int i=0; i<titleWidth -"month".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "start_job");
				for(int i=0; i<titleWidth -"start_job".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[2]);
				for(int i=0; row[2] == null && i<dataWidth - 3 || row[2] != null && i<dataWidth -row[2].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();




	java.io.PrintStream consoleOut_tLogRow_2 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
    }

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
map3Struct map3_tmp = new map3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nSELECT YEAR(CURRENT_DATE()) ANO, (MONTH(CURRENT_DATE()) ) MES, SUBDATE(CURDATE(), 1)PARAMETRO, NOW() AS DATA_START\n"
+"\n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row8.ANO = null;
							} else {
		                          
            row8.ANO = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    row8.ANO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row8.MES = null;
							} else {
		                          
            row8.MES = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    row8.MES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row8.PARAMETRO = null;
							} else {
										
				if(rs_tDBInput_2.getString(3) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row8.PARAMETRO = rs_tDBInput_2.getTimestamp(3);
					} else {
						row8.PARAMETRO = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row8.PARAMETRO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row8.DATA_START = null;
							} else {
										
				if(rs_tDBInput_2.getString(4) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row8.DATA_START = rs_tDBInput_2.getTimestamp(4);
					} else {
						row8.DATA_START = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row8.DATA_START =  null;
				}
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_2 = new row8Struct();
				
					oneRow_tHashOutput_2.ANO = row8.ANO;
					oneRow_tHashOutput_2.MES = row8.MES;
					oneRow_tHashOutput_2.PARAMETRO = row8.PARAMETRO;
					oneRow_tHashOutput_2.DATA_START = row8.DATA_START;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 
     row11 = row8;


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

map3 = null;


// # Output table : 'map3'
map3_tmp.year = row11.ANO;
map3_tmp.month = row11.MES;
map3_tmp.start_job = row11.DATA_START;
map3 = map3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "map3"
if(map3 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"map3"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(map3.year != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(map3.year)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(map3.month != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(map3.month)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(map3.start_job != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(map3.start_job, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

				
				String[] row_tLogRow_2 = new String[3];
   				
	    		if(map3.year != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(map3.year)			
					          ;	
							
	    		} //			
    			   				
	    		if(map3.month != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(map3.month)			
					          ;	
							
	    		} //			
    			   				
	    		if(map3.start_job != null) { //              
                 row_tLogRow_2[2]=    						
								FormatterUtils.format_Date(map3.start_job, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_2++;
                consoleOut_tLogRow_2.println(util_tLogRow_2.print(row_tLogRow_2,nb_line_tLogRow_2));
                consoleOut_tLogRow_2.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "map3"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map3");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
insert_logStruct insert_log = new insert_logStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row3.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row3.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row4 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row4 = new row4Struct();
                                row4.nm_programa = insert_log.nm_programa;
                                row4.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row4.data_termino_execucao = insert_log.data_termino_execucao;
                                row4.mensagem = insert_log.mensagem;
                                row4.uuid = insert_log.uuid;
                                row4.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.nm_programa = row4.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row4.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row4.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row4.mensagem;
					oneRow_tHashOutput_1.uuid = row4.uuid;
					oneRow_tHashOutput_1.versao = row4.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insertStruct other = (insertStruct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insertStruct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            other.OPEEXP = this.OPEEXP;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(insertStruct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();

		row12Struct row12 = new row12Struct();

		row13Struct row13 = new row13Struct();

		row14Struct row14 = new row14Struct();

		row15Struct row15 = new row15Struct();

		row19Struct row19 = new row19Struct();

		row25Struct row25 = new row25Struct();

			row16Struct row16 = new row16Struct();
row17Struct row17 = new row17Struct();
insertStruct insert = new insertStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("gr_status_painel_pedido");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("gr_status_painel_pedido");
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_3 = 100;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
            try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_3 = new java.lang.StringBuilder();
        sb_tDBOutput_3.append("INSERT INTO \"").append(tableName_tDBOutput_3).append("\" (\"DATA\",\"FGO_NUMPOK\",\"FGO_NUMDOC\",\"FGO_NUMFAT\",\"FGO_CODVEN\",\"CLI_NOMCLI\",\"CLI_C_G_C_\",\"FGO_VLRCON\",\"TRA_CODTRA\",\"TRA_NOMTRA\",\"DIA_PREVIS\",\"FGO_SEQSEP\",\"STATUS\",\"DT_PEDIDO\",\"GER_NUMROM\",\"DTAROM\",\"DTALAN\",\"FGO_TOTRET\",\"FGO_CODEMP\",\"ICD_VALFCP\",\"TOTLAN\",\"OPEEXP\",\"DATA_EXECUCAO\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_3 = sb_tDBOutput_3.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String DATA;
					String FGO_NUMPOK;
					String FGO_NUMDOC;
					String FGO_NUMFAT;
					String FGO_CODVEN;
					String CLI_NOMCLI;
					String CLI_C_G_C_;
					BigDecimal FGO_VLRCON;
					String TRA_CODTRA;
					String TRA_NOMTRA;
					String DIA_PREVIS;
					String FGO_SEQSEP;
					String STATUS;
					java.util.Date DT_PEDIDO;
					String GER_NUMROM;
					java.util.Date DTAROM;
					java.util.Date DTALAN;
					BigDecimal FGO_TOTRET;
					String FGO_CODEMP;
					BigDecimal ICD_VALFCP;
					BigDecimal TOTLAN;
					String OPEEXP;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.DATA == null) ? 0 : this.DATA.hashCode());
								
								result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
								
								result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
								
								result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
								
								result = prime * result + ((this.FGO_CODVEN == null) ? 0 : this.FGO_CODVEN.hashCode());
								
								result = prime * result + ((this.CLI_NOMCLI == null) ? 0 : this.CLI_NOMCLI.hashCode());
								
								result = prime * result + ((this.CLI_C_G_C_ == null) ? 0 : this.CLI_C_G_C_.hashCode());
								
								result = prime * result + ((this.FGO_VLRCON == null) ? 0 : this.FGO_VLRCON.hashCode());
								
								result = prime * result + ((this.TRA_CODTRA == null) ? 0 : this.TRA_CODTRA.hashCode());
								
								result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
								
								result = prime * result + ((this.DIA_PREVIS == null) ? 0 : this.DIA_PREVIS.hashCode());
								
								result = prime * result + ((this.FGO_SEQSEP == null) ? 0 : this.FGO_SEQSEP.hashCode());
								
								result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
								
								result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
								
								result = prime * result + ((this.GER_NUMROM == null) ? 0 : this.GER_NUMROM.hashCode());
								
								result = prime * result + ((this.DTAROM == null) ? 0 : this.DTAROM.hashCode());
								
								result = prime * result + ((this.DTALAN == null) ? 0 : this.DTALAN.hashCode());
								
								result = prime * result + ((this.FGO_TOTRET == null) ? 0 : this.FGO_TOTRET.hashCode());
								
								result = prime * result + ((this.FGO_CODEMP == null) ? 0 : this.FGO_CODEMP.hashCode());
								
								result = prime * result + ((this.ICD_VALFCP == null) ? 0 : this.ICD_VALFCP.hashCode());
								
								result = prime * result + ((this.TOTLAN == null) ? 0 : this.TOTLAN.hashCode());
								
								result = prime * result + ((this.OPEEXP == null) ? 0 : this.OPEEXP.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.DATA == null) {
										if (other.DATA != null) 
											return false;
								
									} else if (!this.DATA.equals(other.DATA))
								 
										return false;
								
									if (this.FGO_NUMPOK == null) {
										if (other.FGO_NUMPOK != null) 
											return false;
								
									} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
								 
										return false;
								
									if (this.FGO_NUMDOC == null) {
										if (other.FGO_NUMDOC != null) 
											return false;
								
									} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
								 
										return false;
								
									if (this.FGO_NUMFAT == null) {
										if (other.FGO_NUMFAT != null) 
											return false;
								
									} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT))
								 
										return false;
								
									if (this.FGO_CODVEN == null) {
										if (other.FGO_CODVEN != null) 
											return false;
								
									} else if (!this.FGO_CODVEN.equals(other.FGO_CODVEN))
								 
										return false;
								
									if (this.CLI_NOMCLI == null) {
										if (other.CLI_NOMCLI != null) 
											return false;
								
									} else if (!this.CLI_NOMCLI.equals(other.CLI_NOMCLI))
								 
										return false;
								
									if (this.CLI_C_G_C_ == null) {
										if (other.CLI_C_G_C_ != null) 
											return false;
								
									} else if (!this.CLI_C_G_C_.equals(other.CLI_C_G_C_))
								 
										return false;
								
									if (this.FGO_VLRCON == null) {
										if (other.FGO_VLRCON != null) 
											return false;
								
									} else if (!this.FGO_VLRCON.equals(other.FGO_VLRCON))
								 
										return false;
								
									if (this.TRA_CODTRA == null) {
										if (other.TRA_CODTRA != null) 
											return false;
								
									} else if (!this.TRA_CODTRA.equals(other.TRA_CODTRA))
								 
										return false;
								
									if (this.TRA_NOMTRA == null) {
										if (other.TRA_NOMTRA != null) 
											return false;
								
									} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA))
								 
										return false;
								
									if (this.DIA_PREVIS == null) {
										if (other.DIA_PREVIS != null) 
											return false;
								
									} else if (!this.DIA_PREVIS.equals(other.DIA_PREVIS))
								 
										return false;
								
									if (this.FGO_SEQSEP == null) {
										if (other.FGO_SEQSEP != null) 
											return false;
								
									} else if (!this.FGO_SEQSEP.equals(other.FGO_SEQSEP))
								 
										return false;
								
									if (this.STATUS == null) {
										if (other.STATUS != null) 
											return false;
								
									} else if (!this.STATUS.equals(other.STATUS))
								 
										return false;
								
									if (this.DT_PEDIDO == null) {
										if (other.DT_PEDIDO != null) 
											return false;
								
									} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO))
								 
										return false;
								
									if (this.GER_NUMROM == null) {
										if (other.GER_NUMROM != null) 
											return false;
								
									} else if (!this.GER_NUMROM.equals(other.GER_NUMROM))
								 
										return false;
								
									if (this.DTAROM == null) {
										if (other.DTAROM != null) 
											return false;
								
									} else if (!this.DTAROM.equals(other.DTAROM))
								 
										return false;
								
									if (this.DTALAN == null) {
										if (other.DTALAN != null) 
											return false;
								
									} else if (!this.DTALAN.equals(other.DTALAN))
								 
										return false;
								
									if (this.FGO_TOTRET == null) {
										if (other.FGO_TOTRET != null) 
											return false;
								
									} else if (!this.FGO_TOTRET.equals(other.FGO_TOTRET))
								 
										return false;
								
									if (this.FGO_CODEMP == null) {
										if (other.FGO_CODEMP != null) 
											return false;
								
									} else if (!this.FGO_CODEMP.equals(other.FGO_CODEMP))
								 
										return false;
								
									if (this.ICD_VALFCP == null) {
										if (other.ICD_VALFCP != null) 
											return false;
								
									} else if (!this.ICD_VALFCP.equals(other.ICD_VALFCP))
								 
										return false;
								
									if (this.TOTLAN == null) {
										if (other.TOTLAN != null) 
											return false;
								
									} else if (!this.TOTLAN.equals(other.TOTLAN))
								 
										return false;
								
									if (this.OPEEXP == null) {
										if (other.OPEEXP != null) 
											return false;
								
									} else if (!this.OPEEXP.equals(other.OPEEXP))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10","row25","row14","row15","row12","row13","row19");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    out1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row10.DATA = next_tHashInput_1.DATA;
	row10.FGO_NUMPOK = next_tHashInput_1.FGO_NUMPOK;
	row10.FGO_NUMDOC = next_tHashInput_1.FGO_NUMDOC;
	row10.FGO_NUMFAT = next_tHashInput_1.FGO_NUMFAT;
	row10.FGO_CODVEN = next_tHashInput_1.FGO_CODVEN;
	row10.CLI_NOMCLI = next_tHashInput_1.CLI_NOMCLI;
	row10.CLI_C_G_C_ = next_tHashInput_1.CLI_C_G_C_;
	row10.FGO_VLRCON = next_tHashInput_1.FGO_VLRCON;
	row10.TRA_CODTRA = next_tHashInput_1.TRA_CODTRA;
	row10.TRA_NOMTRA = next_tHashInput_1.TRA_NOMTRA;
	row10.DIA_PREVIS = next_tHashInput_1.DIA_PREVIS;
	row10.FGO_SEQSEP = next_tHashInput_1.FGO_SEQSEP;
	row10.STATUS = next_tHashInput_1.STATUS;
	row10.DT_PEDIDO = next_tHashInput_1.DT_PEDIDO;
	row10.GER_NUMROM = next_tHashInput_1.GER_NUMROM;
	row10.DTAROM = next_tHashInput_1.DTAROM;
	row10.DTALAN = next_tHashInput_1.DTALAN;
	row10.FGO_TOTRET = next_tHashInput_1.FGO_TOTRET;
	row10.FGO_CODEMP = next_tHashInput_1.FGO_CODEMP;
	row10.ICD_VALFCP = next_tHashInput_1.ICD_VALFCP;
	row10.TOTLAN = next_tHashInput_1.TOTLAN;
	row10.OPEEXP = next_tHashInput_1.OPEEXP;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row10"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row10.DATA;								
			row16.FGO_NUMPOK = row10.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row10.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row10.FGO_NUMFAT;								
			row16.FGO_CODVEN = row10.FGO_CODVEN;								
			row16.CLI_NOMCLI = row10.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row10.CLI_C_G_C_;								
			row16.FGO_VLRCON = row10.FGO_VLRCON;								
			row16.TRA_CODTRA = row10.TRA_CODTRA;								
			row16.TRA_NOMTRA = row10.TRA_NOMTRA;								
			row16.DIA_PREVIS = row10.DIA_PREVIS;								
			row16.FGO_SEQSEP = row10.FGO_SEQSEP;								
			row16.STATUS = row10.STATUS;								
			row16.DT_PEDIDO = row10.DT_PEDIDO;								
			row16.GER_NUMROM = row10.GER_NUMROM;								
			row16.DTAROM = row10.DTAROM;								
			row16.DTALAN = row10.DTALAN;								
			row16.FGO_TOTRET = row10.FGO_TOTRET;								
			row16.FGO_CODEMP = row10.FGO_CODEMP;								
			row16.ICD_VALFCP = row10.ICD_VALFCP;								
			row16.TOTLAN = row10.TOTLAN;								
			row16.OPEEXP = row10.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout1Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    copyOfout1Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row12.DATA = next_tHashInput_5.DATA;
	row12.FGO_NUMPOK = next_tHashInput_5.FGO_NUMPOK;
	row12.FGO_NUMDOC = next_tHashInput_5.FGO_NUMDOC;
	row12.FGO_NUMFAT = next_tHashInput_5.FGO_NUMFAT;
	row12.FGO_CODVEN = next_tHashInput_5.FGO_CODVEN;
	row12.CLI_NOMCLI = next_tHashInput_5.CLI_NOMCLI;
	row12.CLI_C_G_C_ = next_tHashInput_5.CLI_C_G_C_;
	row12.FGO_VLRCON = next_tHashInput_5.FGO_VLRCON;
	row12.TRA_CODTRA = next_tHashInput_5.TRA_CODTRA;
	row12.TRA_NOMTRA = next_tHashInput_5.TRA_NOMTRA;
	row12.DIA_PREVIS = next_tHashInput_5.DIA_PREVIS;
	row12.FGO_SEQSEP = next_tHashInput_5.FGO_SEQSEP;
	row12.STATUS = next_tHashInput_5.STATUS;
	row12.DT_PEDIDO = next_tHashInput_5.DT_PEDIDO;
	row12.GER_NUMROM = next_tHashInput_5.GER_NUMROM;
	row12.DTAROM = next_tHashInput_5.DTAROM;
	row12.DTALAN = next_tHashInput_5.DTALAN;
	row12.FGO_TOTRET = next_tHashInput_5.FGO_TOTRET;
	row12.FGO_CODEMP = next_tHashInput_5.FGO_CODEMP;
	row12.ICD_VALFCP = next_tHashInput_5.ICD_VALFCP;
	row12.TOTLAN = next_tHashInput_5.TOTLAN;
	row12.OPEEXP = next_tHashInput_5.OPEEXP;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row12"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row12.DATA;								
			row16.FGO_NUMPOK = row12.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row12.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row12.FGO_NUMFAT;								
			row16.FGO_CODVEN = row12.FGO_CODVEN;								
			row16.CLI_NOMCLI = row12.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row12.CLI_C_G_C_;								
			row16.FGO_VLRCON = row12.FGO_VLRCON;								
			row16.TRA_CODTRA = row12.TRA_CODTRA;								
			row16.TRA_NOMTRA = row12.TRA_NOMTRA;								
			row16.DIA_PREVIS = row12.DIA_PREVIS;								
			row16.FGO_SEQSEP = row12.FGO_SEQSEP;								
			row16.STATUS = row12.STATUS;								
			row16.DT_PEDIDO = row12.DT_PEDIDO;								
			row16.GER_NUMROM = row12.GER_NUMROM;								
			row16.DTAROM = row12.DTAROM;								
			row16.DTALAN = row12.DTALAN;								
			row16.FGO_TOTRET = row12.FGO_TOTRET;								
			row16.FGO_CODEMP = row12.FGO_CODEMP;								
			row16.ICD_VALFCP = row12.ICD_VALFCP;								
			row16.TOTLAN = row12.TOTLAN;								
			row16.OPEEXP = row12.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */
	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row20Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row20Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row13.DATA = next_tHashInput_4.DATA;
	row13.FGO_NUMPOK = next_tHashInput_4.FGO_NUMPOK;
	row13.FGO_NUMDOC = next_tHashInput_4.FGO_NUMDOC;
	row13.FGO_NUMFAT = next_tHashInput_4.FGO_NUMFAT;
	row13.FGO_CODVEN = next_tHashInput_4.FGO_CODVEN;
	row13.CLI_NOMCLI = next_tHashInput_4.CLI_NOMCLI;
	row13.CLI_C_G_C_ = next_tHashInput_4.CLI_C_G_C_;
	row13.FGO_VLRCON = next_tHashInput_4.FGO_VLRCON;
	row13.TRA_CODTRA = next_tHashInput_4.TRA_CODTRA;
	row13.TRA_NOMTRA = next_tHashInput_4.TRA_NOMTRA;
	row13.DIA_PREVIS = next_tHashInput_4.DIA_PREVIS;
	row13.FGO_SEQSEP = next_tHashInput_4.FGO_SEQSEP;
	row13.STATUS = next_tHashInput_4.STATUS;
	row13.DT_PEDIDO = next_tHashInput_4.DT_PEDIDO;
	row13.GER_NUMROM = next_tHashInput_4.GER_NUMROM;
	row13.DTAROM = next_tHashInput_4.DTAROM;
	row13.DTALAN = next_tHashInput_4.DTALAN;
	row13.FGO_TOTRET = next_tHashInput_4.FGO_TOTRET;
	row13.FGO_CODEMP = next_tHashInput_4.FGO_CODEMP;
	row13.ICD_VALFCP = next_tHashInput_4.ICD_VALFCP;
	row13.TOTLAN = next_tHashInput_4.TOTLAN;
	row13.OPEEXP = next_tHashInput_4.OPEEXP;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row13"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row13.DATA;								
			row16.FGO_NUMPOK = row13.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row13.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row13.FGO_NUMFAT;								
			row16.FGO_CODVEN = row13.FGO_CODVEN;								
			row16.CLI_NOMCLI = row13.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row13.CLI_C_G_C_;								
			row16.FGO_VLRCON = row13.FGO_VLRCON;								
			row16.TRA_CODTRA = row13.TRA_CODTRA;								
			row16.TRA_NOMTRA = row13.TRA_NOMTRA;								
			row16.DIA_PREVIS = row13.DIA_PREVIS;								
			row16.FGO_SEQSEP = row13.FGO_SEQSEP;								
			row16.STATUS = row13.STATUS;								
			row16.DT_PEDIDO = row13.DT_PEDIDO;								
			row16.GER_NUMROM = row13.GER_NUMROM;								
			row16.DTAROM = row13.DTAROM;								
			row16.DTALAN = row13.DTALAN;								
			row16.FGO_TOTRET = row13.FGO_TOTRET;								
			row16.FGO_CODEMP = row13.FGO_CODEMP;								
			row16.ICD_VALFCP = row13.ICD_VALFCP;								
			row16.TOTLAN = row13.TOTLAN;								
			row16.OPEEXP = row13.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */
	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row22Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row14.DATA = next_tHashInput_6.DATA;
	row14.FGO_NUMPOK = next_tHashInput_6.FGO_NUMPOK;
	row14.FGO_NUMDOC = next_tHashInput_6.FGO_NUMDOC;
	row14.FGO_NUMFAT = next_tHashInput_6.FGO_NUMFAT;
	row14.FGO_CODVEN = next_tHashInput_6.FGO_CODVEN;
	row14.CLI_NOMCLI = next_tHashInput_6.CLI_NOMCLI;
	row14.CLI_C_G_C_ = next_tHashInput_6.CLI_C_G_C_;
	row14.FGO_VLRCON = next_tHashInput_6.FGO_VLRCON;
	row14.TRA_CODTRA = next_tHashInput_6.TRA_CODTRA;
	row14.TRA_NOMTRA = next_tHashInput_6.TRA_NOMTRA;
	row14.DIA_PREVIS = next_tHashInput_6.DIA_PREVIS;
	row14.FGO_SEQSEP = next_tHashInput_6.FGO_SEQSEP;
	row14.STATUS = next_tHashInput_6.STATUS;
	row14.DT_PEDIDO = next_tHashInput_6.DT_PEDIDO;
	row14.GER_NUMROM = next_tHashInput_6.GER_NUMROM;
	row14.DTAROM = next_tHashInput_6.DTAROM;
	row14.DTALAN = next_tHashInput_6.DTALAN;
	row14.FGO_TOTRET = next_tHashInput_6.FGO_TOTRET;
	row14.FGO_CODEMP = next_tHashInput_6.FGO_CODEMP;
	row14.ICD_VALFCP = next_tHashInput_6.ICD_VALFCP;
	row14.TOTLAN = next_tHashInput_6.TOTLAN;
	row14.OPEEXP = next_tHashInput_6.OPEEXP;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row14"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row14.DATA;								
			row16.FGO_NUMPOK = row14.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row14.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row14.FGO_NUMFAT;								
			row16.FGO_CODVEN = row14.FGO_CODVEN;								
			row16.CLI_NOMCLI = row14.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row14.CLI_C_G_C_;								
			row16.FGO_VLRCON = row14.FGO_VLRCON;								
			row16.TRA_CODTRA = row14.TRA_CODTRA;								
			row16.TRA_NOMTRA = row14.TRA_NOMTRA;								
			row16.DIA_PREVIS = row14.DIA_PREVIS;								
			row16.FGO_SEQSEP = row14.FGO_SEQSEP;								
			row16.STATUS = row14.STATUS;								
			row16.DT_PEDIDO = row14.DT_PEDIDO;								
			row16.GER_NUMROM = row14.GER_NUMROM;								
			row16.DTAROM = row14.DTAROM;								
			row16.DTALAN = row14.DTALAN;								
			row16.FGO_TOTRET = row14.FGO_TOTRET;								
			row16.FGO_CODEMP = row14.FGO_CODEMP;								
			row16.ICD_VALFCP = row14.ICD_VALFCP;								
			row16.TOTLAN = row14.TOTLAN;								
			row16.OPEEXP = row14.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row21Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row21Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row15.DATA = next_tHashInput_2.DATA;
	row15.FGO_NUMPOK = next_tHashInput_2.FGO_NUMPOK;
	row15.FGO_NUMDOC = next_tHashInput_2.FGO_NUMDOC;
	row15.FGO_NUMFAT = next_tHashInput_2.FGO_NUMFAT;
	row15.FGO_CODVEN = next_tHashInput_2.FGO_CODVEN;
	row15.CLI_NOMCLI = next_tHashInput_2.CLI_NOMCLI;
	row15.CLI_C_G_C_ = next_tHashInput_2.CLI_C_G_C_;
	row15.FGO_VLRCON = next_tHashInput_2.FGO_VLRCON;
	row15.TRA_CODTRA = next_tHashInput_2.TRA_CODTRA;
	row15.TRA_NOMTRA = next_tHashInput_2.TRA_NOMTRA;
	row15.DIA_PREVIS = next_tHashInput_2.DIA_PREVIS;
	row15.FGO_SEQSEP = next_tHashInput_2.FGO_SEQSEP;
	row15.STATUS = next_tHashInput_2.STATUS;
	row15.DT_PEDIDO = next_tHashInput_2.DT_PEDIDO;
	row15.GER_NUMROM = next_tHashInput_2.GER_NUMROM;
	row15.DTAROM = next_tHashInput_2.DTAROM;
	row15.DTALAN = next_tHashInput_2.DTALAN;
	row15.FGO_TOTRET = next_tHashInput_2.FGO_TOTRET;
	row15.FGO_CODEMP = next_tHashInput_2.FGO_CODEMP;
	row15.ICD_VALFCP = next_tHashInput_2.ICD_VALFCP;
	row15.TOTLAN = next_tHashInput_2.TOTLAN;
	row15.OPEEXP = next_tHashInput_2.OPEEXP;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row15"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row15.DATA;								
			row16.FGO_NUMPOK = row15.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row15.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row15.FGO_NUMFAT;								
			row16.FGO_CODVEN = row15.FGO_CODVEN;								
			row16.CLI_NOMCLI = row15.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row15.CLI_C_G_C_;								
			row16.FGO_VLRCON = row15.FGO_VLRCON;								
			row16.TRA_CODTRA = row15.TRA_CODTRA;								
			row16.TRA_NOMTRA = row15.TRA_NOMTRA;								
			row16.DIA_PREVIS = row15.DIA_PREVIS;								
			row16.FGO_SEQSEP = row15.FGO_SEQSEP;								
			row16.STATUS = row15.STATUS;								
			row16.DT_PEDIDO = row15.DT_PEDIDO;								
			row16.GER_NUMROM = row15.GER_NUMROM;								
			row16.DTAROM = row15.DTAROM;								
			row16.DTALAN = row15.DTALAN;								
			row16.FGO_TOTRET = row15.FGO_TOTRET;								
			row16.FGO_CODEMP = row15.FGO_CODEMP;								
			row16.ICD_VALFCP = row15.ICD_VALFCP;								
			row16.TOTLAN = row15.TOTLAN;								
			row16.OPEEXP = row15.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row23Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row23Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row23Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row19.DATA = next_tHashInput_7.DATA;
	row19.FGO_NUMPOK = next_tHashInput_7.FGO_NUMPOK;
	row19.FGO_NUMDOC = next_tHashInput_7.FGO_NUMDOC;
	row19.FGO_NUMFAT = next_tHashInput_7.FGO_NUMFAT;
	row19.FGO_CODVEN = next_tHashInput_7.FGO_CODVEN;
	row19.CLI_NOMCLI = next_tHashInput_7.CLI_NOMCLI;
	row19.CLI_C_G_C_ = next_tHashInput_7.CLI_C_G_C_;
	row19.FGO_VLRCON = next_tHashInput_7.FGO_VLRCON;
	row19.TRA_CODTRA = next_tHashInput_7.TRA_CODTRA;
	row19.TRA_NOMTRA = next_tHashInput_7.TRA_NOMTRA;
	row19.DIA_PREVIS = next_tHashInput_7.DIA_PREVIS;
	row19.FGO_SEQSEP = next_tHashInput_7.FGO_SEQSEP;
	row19.STATUS = next_tHashInput_7.STATUS;
	row19.DT_PEDIDO = next_tHashInput_7.DT_PEDIDO;
	row19.GER_NUMROM = next_tHashInput_7.GER_NUMROM;
	row19.DTAROM = next_tHashInput_7.DTAROM;
	row19.DTALAN = next_tHashInput_7.DTALAN;
	row19.FGO_TOTRET = next_tHashInput_7.FGO_TOTRET;
	row19.FGO_CODEMP = next_tHashInput_7.FGO_CODEMP;
	row19.ICD_VALFCP = next_tHashInput_7.ICD_VALFCP;
	row19.TOTLAN = next_tHashInput_7.TOTLAN;
	row19.OPEEXP = next_tHashInput_7.OPEEXP;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row19"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row19.DATA;								
			row16.FGO_NUMPOK = row19.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row19.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row19.FGO_NUMFAT;								
			row16.FGO_CODVEN = row19.FGO_CODVEN;								
			row16.CLI_NOMCLI = row19.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row19.CLI_C_G_C_;								
			row16.FGO_VLRCON = row19.FGO_VLRCON;								
			row16.TRA_CODTRA = row19.TRA_CODTRA;								
			row16.TRA_NOMTRA = row19.TRA_NOMTRA;								
			row16.DIA_PREVIS = row19.DIA_PREVIS;								
			row16.FGO_SEQSEP = row19.FGO_SEQSEP;								
			row16.STATUS = row19.STATUS;								
			row16.DT_PEDIDO = row19.DT_PEDIDO;								
			row16.GER_NUMROM = row19.GER_NUMROM;								
			row16.DTAROM = row19.DTAROM;								
			row16.DTALAN = row19.DTALAN;								
			row16.FGO_TOTRET = row19.FGO_TOTRET;								
			row16.FGO_CODEMP = row19.FGO_CODEMP;								
			row16.ICD_VALFCP = row19.ICD_VALFCP;								
			row16.TOTLAN = row19.TOTLAN;								
			row16.OPEEXP = row19.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */
	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1_0Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout1_0Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    copyOfout1_0Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row25.DATA = next_tHashInput_8.DATA;
	row25.FGO_NUMPOK = next_tHashInput_8.FGO_NUMPOK;
	row25.FGO_NUMDOC = next_tHashInput_8.FGO_NUMDOC;
	row25.FGO_NUMFAT = next_tHashInput_8.FGO_NUMFAT;
	row25.FGO_CODVEN = next_tHashInput_8.FGO_CODVEN;
	row25.CLI_NOMCLI = next_tHashInput_8.CLI_NOMCLI;
	row25.CLI_C_G_C_ = next_tHashInput_8.CLI_C_G_C_;
	row25.FGO_VLRCON = next_tHashInput_8.FGO_VLRCON;
	row25.TRA_CODTRA = next_tHashInput_8.TRA_CODTRA;
	row25.TRA_NOMTRA = next_tHashInput_8.TRA_NOMTRA;
	row25.DIA_PREVIS = next_tHashInput_8.DIA_PREVIS;
	row25.FGO_SEQSEP = next_tHashInput_8.FGO_SEQSEP;
	row25.STATUS = next_tHashInput_8.STATUS;
	row25.DT_PEDIDO = next_tHashInput_8.DT_PEDIDO;
	row25.GER_NUMROM = next_tHashInput_8.GER_NUMROM;
	row25.DTAROM = next_tHashInput_8.DTAROM;
	row25.DTALAN = next_tHashInput_8.DTALAN;
	row25.FGO_TOTRET = next_tHashInput_8.FGO_TOTRET;
	row25.FGO_CODEMP = next_tHashInput_8.FGO_CODEMP;
	row25.ICD_VALFCP = next_tHashInput_8.ICD_VALFCP;
	row25.TOTLAN = next_tHashInput_8.TOTLAN;
	row25.OPEEXP = next_tHashInput_8.OPEEXP;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row25"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.DATA = row25.DATA;								
			row16.FGO_NUMPOK = row25.FGO_NUMPOK;								
			row16.FGO_NUMDOC = row25.FGO_NUMDOC;								
			row16.FGO_NUMFAT = row25.FGO_NUMFAT;								
			row16.FGO_CODVEN = row25.FGO_CODVEN;								
			row16.CLI_NOMCLI = row25.CLI_NOMCLI;								
			row16.CLI_C_G_C_ = row25.CLI_C_G_C_;								
			row16.FGO_VLRCON = row25.FGO_VLRCON;								
			row16.TRA_CODTRA = row25.TRA_CODTRA;								
			row16.TRA_NOMTRA = row25.TRA_NOMTRA;								
			row16.DIA_PREVIS = row25.DIA_PREVIS;								
			row16.FGO_SEQSEP = row25.FGO_SEQSEP;								
			row16.STATUS = row25.STATUS;								
			row16.DT_PEDIDO = row25.DT_PEDIDO;								
			row16.GER_NUMROM = row25.GER_NUMROM;								
			row16.DTAROM = row25.DTAROM;								
			row16.DTALAN = row25.DTALAN;								
			row16.FGO_TOTRET = row25.FGO_TOTRET;								
			row16.FGO_CODEMP = row25.FGO_CODEMP;								
			row16.ICD_VALFCP = row25.ICD_VALFCP;								
			row16.TOTLAN = row25.TOTLAN;								
			row16.OPEEXP = row25.OPEEXP;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
row17 = null;			
if(row16.DATA == null){
	finder_tUniqRow_1.DATA = null;
}else{
	finder_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	finder_tUniqRow_1.FGO_NUMPOK = null;
}else{
	finder_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	finder_tUniqRow_1.FGO_NUMDOC = null;
}else{
	finder_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	finder_tUniqRow_1.FGO_NUMFAT = null;
}else{
	finder_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	finder_tUniqRow_1.FGO_CODVEN = null;
}else{
	finder_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	finder_tUniqRow_1.CLI_NOMCLI = null;
}else{
	finder_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	finder_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	finder_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
finder_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	finder_tUniqRow_1.TRA_CODTRA = null;
}else{
	finder_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	finder_tUniqRow_1.DIA_PREVIS = null;
}else{
	finder_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	finder_tUniqRow_1.FGO_SEQSEP = null;
}else{
	finder_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	finder_tUniqRow_1.STATUS = null;
}else{
	finder_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
finder_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	finder_tUniqRow_1.GER_NUMROM = null;
}else{
	finder_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
finder_tUniqRow_1.DTAROM = row16.DTAROM;
finder_tUniqRow_1.DTALAN = row16.DTALAN;
finder_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	finder_tUniqRow_1.FGO_CODEMP = null;
}else{
	finder_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
finder_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
finder_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	finder_tUniqRow_1.OPEEXP = null;
}else{
	finder_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row16.DATA == null){
	new_tUniqRow_1.DATA = null;
}else{
	new_tUniqRow_1.DATA = row16.DATA.toLowerCase();
}
if(row16.FGO_NUMPOK == null){
	new_tUniqRow_1.FGO_NUMPOK = null;
}else{
	new_tUniqRow_1.FGO_NUMPOK = row16.FGO_NUMPOK.toLowerCase();
}
if(row16.FGO_NUMDOC == null){
	new_tUniqRow_1.FGO_NUMDOC = null;
}else{
	new_tUniqRow_1.FGO_NUMDOC = row16.FGO_NUMDOC.toLowerCase();
}
if(row16.FGO_NUMFAT == null){
	new_tUniqRow_1.FGO_NUMFAT = null;
}else{
	new_tUniqRow_1.FGO_NUMFAT = row16.FGO_NUMFAT.toLowerCase();
}
if(row16.FGO_CODVEN == null){
	new_tUniqRow_1.FGO_CODVEN = null;
}else{
	new_tUniqRow_1.FGO_CODVEN = row16.FGO_CODVEN.toLowerCase();
}
if(row16.CLI_NOMCLI == null){
	new_tUniqRow_1.CLI_NOMCLI = null;
}else{
	new_tUniqRow_1.CLI_NOMCLI = row16.CLI_NOMCLI.toLowerCase();
}
if(row16.CLI_C_G_C_ == null){
	new_tUniqRow_1.CLI_C_G_C_ = null;
}else{
	new_tUniqRow_1.CLI_C_G_C_ = row16.CLI_C_G_C_.toLowerCase();
}
new_tUniqRow_1.FGO_VLRCON = row16.FGO_VLRCON;
if(row16.TRA_CODTRA == null){
	new_tUniqRow_1.TRA_CODTRA = null;
}else{
	new_tUniqRow_1.TRA_CODTRA = row16.TRA_CODTRA.toLowerCase();
}
if(row16.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row16.TRA_NOMTRA.toLowerCase();
}
if(row16.DIA_PREVIS == null){
	new_tUniqRow_1.DIA_PREVIS = null;
}else{
	new_tUniqRow_1.DIA_PREVIS = row16.DIA_PREVIS.toLowerCase();
}
if(row16.FGO_SEQSEP == null){
	new_tUniqRow_1.FGO_SEQSEP = null;
}else{
	new_tUniqRow_1.FGO_SEQSEP = row16.FGO_SEQSEP.toLowerCase();
}
if(row16.STATUS == null){
	new_tUniqRow_1.STATUS = null;
}else{
	new_tUniqRow_1.STATUS = row16.STATUS.toLowerCase();
}
new_tUniqRow_1.DT_PEDIDO = row16.DT_PEDIDO;
if(row16.GER_NUMROM == null){
	new_tUniqRow_1.GER_NUMROM = null;
}else{
	new_tUniqRow_1.GER_NUMROM = row16.GER_NUMROM.toLowerCase();
}
new_tUniqRow_1.DTAROM = row16.DTAROM;
new_tUniqRow_1.DTALAN = row16.DTALAN;
new_tUniqRow_1.FGO_TOTRET = row16.FGO_TOTRET;
if(row16.FGO_CODEMP == null){
	new_tUniqRow_1.FGO_CODEMP = null;
}else{
	new_tUniqRow_1.FGO_CODEMP = row16.FGO_CODEMP.toLowerCase();
}
new_tUniqRow_1.ICD_VALFCP = row16.ICD_VALFCP;
new_tUniqRow_1.TOTLAN = row16.TOTLAN;
if(row16.OPEEXP == null){
	new_tUniqRow_1.OPEEXP = null;
}else{
	new_tUniqRow_1.OPEEXP = row16.OPEEXP.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.DATA = row16.DATA;			row17.FGO_NUMPOK = row16.FGO_NUMPOK;			row17.FGO_NUMDOC = row16.FGO_NUMDOC;			row17.FGO_NUMFAT = row16.FGO_NUMFAT;			row17.FGO_CODVEN = row16.FGO_CODVEN;			row17.CLI_NOMCLI = row16.CLI_NOMCLI;			row17.CLI_C_G_C_ = row16.CLI_C_G_C_;			row17.FGO_VLRCON = row16.FGO_VLRCON;			row17.TRA_CODTRA = row16.TRA_CODTRA;			row17.TRA_NOMTRA = row16.TRA_NOMTRA;			row17.DIA_PREVIS = row16.DIA_PREVIS;			row17.FGO_SEQSEP = row16.FGO_SEQSEP;			row17.STATUS = row16.STATUS;			row17.DT_PEDIDO = row16.DT_PEDIDO;			row17.GER_NUMROM = row16.GER_NUMROM;			row17.DTAROM = row16.DTAROM;			row17.DTALAN = row16.DTALAN;			row17.FGO_TOTRET = row16.FGO_TOTRET;			row17.FGO_CODEMP = row16.FGO_CODEMP;			row17.ICD_VALFCP = row16.ICD_VALFCP;			row17.TOTLAN = row16.TOTLAN;			row17.OPEEXP = row16.OPEEXP;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.DATA = row17.DATA ;
insert_tmp.FGO_NUMPOK = row17.FGO_NUMPOK ;
insert_tmp.FGO_NUMDOC = row17.FGO_NUMDOC ;
insert_tmp.FGO_NUMFAT = row17.FGO_NUMFAT ;
insert_tmp.FGO_CODVEN = row17.FGO_CODVEN ;
insert_tmp.CLI_NOMCLI = row17.CLI_NOMCLI ;
insert_tmp.CLI_C_G_C_ = row17.CLI_C_G_C_ ;
insert_tmp.FGO_VLRCON = row17.FGO_VLRCON ;
insert_tmp.TRA_CODTRA = row17.TRA_CODTRA ;
insert_tmp.TRA_NOMTRA = row17.TRA_NOMTRA ;
insert_tmp.DIA_PREVIS = row17.DIA_PREVIS ;
insert_tmp.FGO_SEQSEP = row17.FGO_SEQSEP ;
insert_tmp.STATUS = row17.STATUS ;
insert_tmp.DT_PEDIDO = row17.DT_PEDIDO ;
insert_tmp.GER_NUMROM = row17.GER_NUMROM ;
insert_tmp.DTAROM = row17.DTAROM ;
insert_tmp.DTALAN = row17.DTALAN ;
insert_tmp.FGO_TOTRET = row17.FGO_TOTRET ;
insert_tmp.FGO_CODEMP = row17.FGO_CODEMP ;
insert_tmp.ICD_VALFCP = row17.ICD_VALFCP ;
insert_tmp.TOTLAN = row17.TOTLAN ;
insert_tmp.OPEEXP = row17.OPEEXP ;
insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert.DATA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert.DATA);
}

                    if(insert.FGO_NUMPOK == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert.FGO_NUMPOK);
}

                    if(insert.FGO_NUMDOC == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert.FGO_NUMDOC);
}

                    if(insert.FGO_NUMFAT == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert.FGO_NUMFAT);
}

                    if(insert.FGO_CODVEN == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert.FGO_CODVEN);
}

                    if(insert.CLI_NOMCLI == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert.CLI_NOMCLI);
}

                    if(insert.CLI_C_G_C_ == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, insert.CLI_C_G_C_);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, insert.FGO_VLRCON);

                    if(insert.TRA_CODTRA == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert.TRA_CODTRA);
}

                    if(insert.TRA_NOMTRA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, insert.TRA_NOMTRA);
}

                    if(insert.DIA_PREVIS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, insert.DIA_PREVIS);
}

                    if(insert.FGO_SEQSEP == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, insert.FGO_SEQSEP);
}

                    if(insert.STATUS == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, insert.STATUS);
}

                    if(insert.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(insert.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(insert.GER_NUMROM == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, insert.GER_NUMROM);
}

                    if(insert.DTAROM != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(insert.DTAROM.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(insert.DTALAN != null) {
pstmt_tDBOutput_3.setTimestamp(17, new java.sql.Timestamp(insert.DTALAN.getTime()));
} else {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(18, insert.FGO_TOTRET);

                    if(insert.FGO_CODEMP == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, insert.FGO_CODEMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(20, insert.ICD_VALFCP);

                    pstmt_tDBOutput_3.setBigDecimal(21, insert.TOTLAN);

                    if(insert.OPEEXP == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert.OPEEXP);
}

                    if(insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10","row25","row14","row15","row12","row13","row19");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row4Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row5.nm_programa = next_tHashInput_3.nm_programa;
	row5.data_inicio_execucao = next_tHashInput_3.data_inicio_execucao;
	row5.data_termino_execucao = next_tHashInput_3.data_termino_execucao;
	row5.mensagem = next_tHashInput_3.mensagem;
	row5.uuid = next_tHashInput_3.uuid;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row5.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row5.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_status_painel_pedido_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row32Struct row32 = new row32Struct();
out1Struct out1 = new out1Struct();






	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tConvertType_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_7", false);
		start_Hash.put("tConvertType_7", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tConvertType_7 = 0;
		
	int nb_line_tConvertType_7 = 0;  
 



/**
 * [tConvertType_7 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "--  AGUARDANDO ADIANTAMENTO\nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y')AS DATA, FGO_NUMPOK, FGO_NUMDOC, null AS FGO"
+"_NUMFAT, F.FGO_CODVEN, C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA, T.TRA_NOMTRA,\n		IF(FGO_PREVIS = CURDATE(),"
+"'HOJE',IF(FGO_PREVIS<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, '' AS FGO_SEQSEP, 'AGUARDANDO ADIANTAMENTO' as STATUS,"
+"\n		CONCAT(F.FGO_DTAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n		MG.GER_NUMROM,\n		CONCAT(MG.GER_DTAROM,' ',MG.GER_HORROM) as DTAR"
+"OM,\n		DATE_FORMAT(A.ADT_DTALAN, '%d-%m-%Y') AS DTALAN,\n      	F.FGO_TOTRET,\n		F.FGO_CODEMP,\n		R.ICD_VALFCP,\n		SUM(I"
+"F(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VALLAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) TOTLAN\n        FROM FATGOR AS F\n      "
+"  INNER JOIN EXTGOR AS E ON F.AUTOINCREM = E.FGO_SEQFGO\n        INNER JOIN CADCLI AS C ON F.FGO_CODCLI = C.CLI_CODCLI\n"
+"        INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n        INNER JOIN CADOPE AS V ON F.FGO_CODVEN = V.OPE_CO"
+"DOPE\n        LEFT JOIN FATDOR AS D ON F.AUTOINCREM = D.FDO_SEQGER\n        LEFT JOIN DORICD AS R ON D.AUTOINCREM = R.IC"
+"D_SEQFDO\n        LEFT JOIN ADTCLI AS A ON F.FGO_NUMDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND F.FGO_CODEMP "
+"= A.ADT_CODEMP\n        LEFT JOIN MOVGER AS MG ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT = MG.GER_ESPDOC AND F.FG"
+"O_EMPFAT = MG.GER_CODEMP AND F.FGO_CODCLI = MG.GER_CODCLI  \n        WHERE F.FGO_CODEMP IN ('001', '010', '201')\n      "
+"  AND F.FGO_JAFATU = '0'\n        AND F.FGO_ESPDOC = 'PD'\n        AND F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DA"
+"Y)\n        AND IFNULL(E.FGO_OPEDES, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        AND IFNULL(E.FGO_SEPEXP, 0) "
+"NOT IN ('599', '804', 'C16', '880', '881')\n        AND V.OPE_CODDEP IN ('014', '002')\n        AND F.FGO_MOTBAI IS NULL"
+"\n        GROUP BY F.AUTOINCREM\n        HAVING TOTLAN = 0\n        ORDER BY FGO_PREVIS;\n  ";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.DATA = null;
							} else {
	                         		
        	row2.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.FGO_NUMPOK = null;
							} else {
	                         		
        	row2.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.FGO_NUMDOC = null;
							} else {
	                         		
        	row2.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.FGO_NUMFAT = null;
							} else {
	                         		
        	row2.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.FGO_CODVEN = null;
							} else {
	                         		
        	row2.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.CLI_NOMCLI = null;
							} else {
	                         		
        	row2.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.CLI_C_G_C_ = null;
							} else {
	                         		
        	row2.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.FGO_VLRCON = null;
							} else {
		                          
            row2.FGO_VLRCON = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    row2.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.TRA_CODTRA = null;
							} else {
	                         		
        	row2.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.TRA_NOMTRA = null;
							} else {
	                         		
        	row2.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.DIA_PREVIS = null;
							} else {
	                         		
        	row2.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.FGO_SEQSEP = null;
							} else {
	                         		
        	row2.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.STATUS = null;
							} else {
	                         		
        	row2.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_1.getString(14) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row2.DT_PEDIDO = rs_tDBInput_1.getTimestamp(14);
					} else {
						row2.DT_PEDIDO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row2.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row2.GER_NUMROM = null;
							} else {
	                         		
        	row2.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row2.DTAROM = null;
							} else {
										
				if(rs_tDBInput_1.getString(16) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row2.DTAROM = rs_tDBInput_1.getTimestamp(16);
					} else {
						row2.DTAROM = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row2.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row2.DTALAN = null;
							} else {
	                         		
        	row2.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row2.FGO_TOTRET = null;
							} else {
		                          
            row2.FGO_TOTRET = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    row2.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row2.FGO_CODEMP = null;
							} else {
	                         		
        	row2.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row2.ICD_VALFCP = null;
							} else {
		                          
            row2.ICD_VALFCP = rs_tDBInput_1.getBigDecimal(20);
            if(rs_tDBInput_1.wasNull()){
                    row2.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row2.TOTLAN = null;
							} else {
		                          
            row2.TOTLAN = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    row2.TOTLAN = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_7 main ] start
	 */

	

	
	
	currentComponent="tConvertType_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


  row32 = new row32Struct();
  boolean bHasError_tConvertType_7 = false;             
          try {
              row32.DATA=TypeConvert.String2String(row2.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_NUMPOK=TypeConvert.String2String(row2.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_NUMDOC=TypeConvert.String2String(row2.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_NUMFAT=TypeConvert.String2String(row2.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_CODVEN=TypeConvert.String2String(row2.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.CLI_NOMCLI=TypeConvert.String2String(row2.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.CLI_C_G_C_=TypeConvert.String2String(row2.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row2.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.TRA_CODTRA=TypeConvert.String2String(row2.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.TRA_NOMTRA=TypeConvert.String2String(row2.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.DIA_PREVIS=TypeConvert.String2String(row2.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_SEQSEP=TypeConvert.String2String(row2.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.STATUS=TypeConvert.String2String(row2.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.DT_PEDIDO=TypeConvert.Date2Date(row2.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.GER_NUMROM=TypeConvert.String2String(row2.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.DTAROM=TypeConvert.Date2Date(row2.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.DTALAN=TypeConvert.String2Date(row2.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row2.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.FGO_CODEMP=TypeConvert.String2String(row2.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row2.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row32.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row2.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_7_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_7 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_7) {row32 = null;}

  nb_line_tConvertType_7 ++ ;

 


	tos_count_tConvertType_7++;

/**
 * [tConvertType_7 main ] stop
 */
	
	/**
	 * [tConvertType_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_7";
	
	

 



/**
 * [tConvertType_7 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.DATA = row32.DATA ;
out1_tmp.FGO_NUMPOK = row32.FGO_NUMPOK ;
out1_tmp.FGO_NUMDOC = row32.FGO_NUMDOC ;
out1_tmp.FGO_NUMFAT = row32.FGO_NUMFAT ;
out1_tmp.FGO_CODVEN = row32.FGO_CODVEN ;
out1_tmp.CLI_NOMCLI = row32.CLI_NOMCLI ;
out1_tmp.CLI_C_G_C_ = row32.CLI_C_G_C_ ;
out1_tmp.FGO_VLRCON = row32.FGO_VLRCON ;
out1_tmp.TRA_CODTRA = row32.TRA_CODTRA ;
out1_tmp.TRA_NOMTRA = row32.TRA_NOMTRA ;
out1_tmp.DIA_PREVIS = row32.DIA_PREVIS ;
out1_tmp.FGO_SEQSEP = row32.FGO_SEQSEP ;
out1_tmp.STATUS = row32.STATUS ;
out1_tmp.DT_PEDIDO = row32.DT_PEDIDO ;
out1_tmp.GER_NUMROM = row32.GER_NUMROM ;
out1_tmp.DTAROM = row32.DTAROM ;
out1_tmp.DTALAN = row32.DTALAN ;
out1_tmp.FGO_TOTRET = row32.FGO_TOTRET ;
out1_tmp.FGO_CODEMP = row32.FGO_CODEMP ;
out1_tmp.ICD_VALFCP = row32.ICD_VALFCP ;
out1_tmp.TOTLAN = row32.TOTLAN ;
out1_tmp.OPEEXP = null;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



    
		out1Struct oneRow_tHashOutput_4 = new out1Struct();
				
					oneRow_tHashOutput_4.DATA = out1.DATA;
					oneRow_tHashOutput_4.FGO_NUMPOK = out1.FGO_NUMPOK;
					oneRow_tHashOutput_4.FGO_NUMDOC = out1.FGO_NUMDOC;
					oneRow_tHashOutput_4.FGO_NUMFAT = out1.FGO_NUMFAT;
					oneRow_tHashOutput_4.FGO_CODVEN = out1.FGO_CODVEN;
					oneRow_tHashOutput_4.CLI_NOMCLI = out1.CLI_NOMCLI;
					oneRow_tHashOutput_4.CLI_C_G_C_ = out1.CLI_C_G_C_;
					oneRow_tHashOutput_4.FGO_VLRCON = out1.FGO_VLRCON;
					oneRow_tHashOutput_4.TRA_CODTRA = out1.TRA_CODTRA;
					oneRow_tHashOutput_4.TRA_NOMTRA = out1.TRA_NOMTRA;
					oneRow_tHashOutput_4.DIA_PREVIS = out1.DIA_PREVIS;
					oneRow_tHashOutput_4.FGO_SEQSEP = out1.FGO_SEQSEP;
					oneRow_tHashOutput_4.STATUS = out1.STATUS;
					oneRow_tHashOutput_4.DT_PEDIDO = out1.DT_PEDIDO;
					oneRow_tHashOutput_4.GER_NUMROM = out1.GER_NUMROM;
					oneRow_tHashOutput_4.DTAROM = out1.DTAROM;
					oneRow_tHashOutput_4.DTALAN = out1.DTALAN;
					oneRow_tHashOutput_4.FGO_TOTRET = out1.FGO_TOTRET;
					oneRow_tHashOutput_4.FGO_CODEMP = out1.FGO_CODEMP;
					oneRow_tHashOutput_4.ICD_VALFCP = out1.ICD_VALFCP;
					oneRow_tHashOutput_4.TOTLAN = out1.TOTLAN;
					oneRow_tHashOutput_4.OPEEXP = out1.OPEEXP;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tConvertType_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_7";
	
	

 



/**
 * [tConvertType_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tConvertType_7 end ] start
	 */

	

	
	
	currentComponent="tConvertType_7";
	
	
      globalMap.put("tConvertType_7_NB_LINE", nb_line_tConvertType_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tConvertType_7", true);
end_Hash.put("tConvertType_7", System.currentTimeMillis());




/**
 * [tConvertType_7 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tConvertType_7 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_7";
	
	

 



/**
 * [tConvertType_7 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public String FDO_CODITE;

				public String getFDO_CODITE () {
					return this.FDO_CODITE;
				}

				public Boolean FDO_CODITEIsNullable(){
				    return true;
				}
				public Boolean FDO_CODITEIsKey(){
				    return false;
				}
				public Integer FDO_CODITELength(){
				    return null;
				}
				public Integer FDO_CODITEPrecision(){
				    return null;
				}
				public String FDO_CODITEDefault(){
				
					return null;
				
				}
				public String FDO_CODITEComment(){
				
				    return "";
				
				}
				public String FDO_CODITEPattern(){
				
					return "";
				
				}
				public String FDO_CODITEOriginalDbColumnName(){
				
					return "FDO_CODITE";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
					this.FDO_CODITE = readString(dis);
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
					this.FDO_CODITE = readString(dis);
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// String
				
						writeString(this.FDO_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// String
				
						writeString(this.FDO_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",FDO_CODITE="+FDO_CODITE);
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public String FDO_CODITE;

				public String getFDO_CODITE () {
					return this.FDO_CODITE;
				}

				public Boolean FDO_CODITEIsNullable(){
				    return true;
				}
				public Boolean FDO_CODITEIsKey(){
				    return false;
				}
				public Integer FDO_CODITELength(){
				    return null;
				}
				public Integer FDO_CODITEPrecision(){
				    return null;
				}
				public String FDO_CODITEDefault(){
				
					return null;
				
				}
				public String FDO_CODITEComment(){
				
				    return "";
				
				}
				public String FDO_CODITEPattern(){
				
					return "";
				
				}
				public String FDO_CODITEOriginalDbColumnName(){
				
					return "FDO_CODITE";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.FDO_CODITE = this.FDO_CODITE;
	            other.TOTLAN = this.TOTLAN;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
					this.FDO_CODITE = readString(dis);
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
					this.FDO_CODITE = readString(dis);
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// String
				
						writeString(this.FDO_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// String
				
						writeString(this.FDO_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",FDO_CODITE="+FDO_CODITE);
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row27Struct row27 = new row27Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();






	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, FGO_NUMDOC, null AS FGO_NUMFAT, F.FGO_CODVEN, C.CLI"
+"_NOMCLI, C.CLI_C_G_C_, \n		FGO_VLRCON, \n		T.TRA_CODTRA, T.TRA_NOMTRA,\n  		IF(FGO_PREVIS = CURDATE(),'HOJE',IF(FGO_PREV"
+"IS < CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, E.FGO_SEQSEP, 'AGUARDANDO LIBERAÇÃO' as STATUS,\n        CONCAT(F.FGO_D"
+"TAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n        MG.GER_NUMROM, \n        CONCAT(MG.GER_DTAROM,' ',MG.GER_HORROM) as DTAROM,"
+"\n        DATE_FORMAT(A.ADT_DTALAN, '%d-%m-%Y') AS DTALAN,\n        F.FGO_TOTRET,\n  		F.FGO_CODEMP,\n  		R.ICD_VALFCP,\n"
+"		D.FDO_CODITE,\n		(SELECT SUM(IF(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VALLAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) FROM ADT"
+"CLI A WHERE A.ADT_NUMDOC = FGO_NUMDOC AND A.ADT_ESPDOC = FGO_ESPDOC AND A.ADT_CODEMP = FGO_CODEMP) AS TOTLAN\n        FR"
+"OM FATGOR AS F\n        INNER JOIN EXTGOR AS E ON F.AUTOINCREM = E.FGO_SEQFGO\n        INNER JOIN CADCLI AS C ON F.FGO_C"
+"ODCLI = C.CLI_CODCLI\n        INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n        INNER JOIN CADOPE AS V ON F"
+".FGO_CODVEN = V.OPE_CODOPE\n        LEFT JOIN ADTCLI A ON F.FGO_NUMDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AN"
+"D F.FGO_CODEMP = A.ADT_CODEMP\n        LEFT JOIN FATDOR AS D ON F.AUTOINCREM = D.FDO_SEQGER\n        LEFT JOIN DORICD AS"
+" R ON D.AUTOINCREM = R.ICD_SEQFDO\n        LEFT JOIN MOVGER MG ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT = MG.GER"
+"_ESPDOC AND F.FGO_EMPFAT = MG.GER_CODEMP AND F.FGO_CODCLI = MG.GER_CODCLI\n        WHERE F.FGO_CODEMP IN ('001', '010', "
+"'201')\n        AND F.FGO_JAFATU = '0'\n        AND F.FGO_ESPDOC = 'PD'\n        AND F.FGO_MOTBAI IS NULL\n        AND I"
+"FNULL(F.FGO_OPELIB, F.FGO_DTALIB) IS NULL\n        AND F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DAY)\n        AND "
+"IFNULL(E.FGO_OPEDES, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        AND IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '"
+"804', 'C16', '880', '881')\n        AND V.OPE_CODDEP IN ('014', '002')\n        AND IFNULL(E.FGO_DTIMSE, E.FGO_ONDADT) I"
+"S NULL\n        AND FGO_JAFATU = '0'\n        HAVING TOTLAN >= F.FGO_VLRCON\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row1.DATA = null;
							} else {
	                         		
        	row1.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row1.FGO_NUMPOK = null;
							} else {
	                         		
        	row1.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row1.FGO_NUMDOC = null;
							} else {
	                         		
        	row1.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row1.FGO_NUMFAT = null;
							} else {
	                         		
        	row1.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row1.FGO_CODVEN = null;
							} else {
	                         		
        	row1.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row1.CLI_NOMCLI = null;
							} else {
	                         		
        	row1.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row1.CLI_C_G_C_ = null;
							} else {
	                         		
        	row1.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row1.FGO_VLRCON = null;
							} else {
		                          
            row1.FGO_VLRCON = rs_tDBInput_3.getBigDecimal(8);
            if(rs_tDBInput_3.wasNull()){
                    row1.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row1.TRA_CODTRA = null;
							} else {
	                         		
        	row1.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row1.TRA_NOMTRA = null;
							} else {
	                         		
        	row1.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row1.DIA_PREVIS = null;
							} else {
	                         		
        	row1.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row1.FGO_SEQSEP = null;
							} else {
	                         		
        	row1.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row1.STATUS = null;
							} else {
	                         		
        	row1.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row1.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_3.getString(14) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row1.DT_PEDIDO = rs_tDBInput_3.getTimestamp(14);
					} else {
						row1.DT_PEDIDO = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row1.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row1.GER_NUMROM = null;
							} else {
	                         		
        	row1.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row1.DTAROM = null;
							} else {
										
				if(rs_tDBInput_3.getString(16) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row1.DTAROM = rs_tDBInput_3.getTimestamp(16);
					} else {
						row1.DTAROM = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row1.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row1.DTALAN = null;
							} else {
	                         		
        	row1.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row1.FGO_TOTRET = null;
							} else {
		                          
            row1.FGO_TOTRET = rs_tDBInput_3.getBigDecimal(18);
            if(rs_tDBInput_3.wasNull()){
                    row1.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row1.FGO_CODEMP = null;
							} else {
	                         		
        	row1.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row1.ICD_VALFCP = null;
							} else {
		                          
            row1.ICD_VALFCP = rs_tDBInput_3.getBigDecimal(20);
            if(rs_tDBInput_3.wasNull()){
                    row1.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row1.FDO_CODITE = null;
							} else {
	                         		
        	row1.FDO_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row1.TOTLAN = null;
							} else {
		                          
            row1.TOTLAN = rs_tDBInput_3.getBigDecimal(22);
            if(rs_tDBInput_3.wasNull()){
                    row1.TOTLAN = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


  row27 = new row27Struct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              row27.DATA=TypeConvert.String2String(row1.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_NUMPOK=TypeConvert.String2String(row1.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_NUMDOC=TypeConvert.String2String(row1.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_NUMFAT=TypeConvert.String2String(row1.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_CODVEN=TypeConvert.String2String(row1.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.CLI_NOMCLI=TypeConvert.String2String(row1.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.CLI_C_G_C_=TypeConvert.String2String(row1.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row1.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.TRA_CODTRA=TypeConvert.String2String(row1.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.TRA_NOMTRA=TypeConvert.String2String(row1.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.DIA_PREVIS=TypeConvert.String2String(row1.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_SEQSEP=TypeConvert.String2String(row1.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.STATUS=TypeConvert.String2String(row1.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.DT_PEDIDO=TypeConvert.Date2Date(row1.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.GER_NUMROM=TypeConvert.String2String(row1.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.DTAROM=TypeConvert.Date2Date(row1.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.DTALAN=TypeConvert.String2Date(row1.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row1.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FGO_CODEMP=TypeConvert.String2String(row1.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row1.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.FDO_CODITE=TypeConvert.String2String(row1.FDO_CODITE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row27.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row1.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {row27 = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.DATA = row27.DATA ;
copyOfout1_tmp.FGO_NUMPOK = row27.FGO_NUMPOK ;
copyOfout1_tmp.FGO_NUMDOC = row27.FGO_NUMDOC ;
copyOfout1_tmp.FGO_NUMFAT = row27.FGO_NUMFAT ;
copyOfout1_tmp.FGO_CODVEN = row27.FGO_CODVEN ;
copyOfout1_tmp.CLI_NOMCLI = row27.CLI_NOMCLI ;
copyOfout1_tmp.CLI_C_G_C_ = row27.CLI_C_G_C_ ;
copyOfout1_tmp.FGO_VLRCON = row27.FGO_VLRCON ;
copyOfout1_tmp.TRA_CODTRA = row27.TRA_CODTRA ;
copyOfout1_tmp.TRA_NOMTRA = row27.TRA_NOMTRA ;
copyOfout1_tmp.DIA_PREVIS = row27.DIA_PREVIS ;
copyOfout1_tmp.FGO_SEQSEP = row27.FGO_SEQSEP ;
copyOfout1_tmp.STATUS = row27.STATUS ;
copyOfout1_tmp.DT_PEDIDO = row27.DT_PEDIDO ;
copyOfout1_tmp.GER_NUMROM = row27.GER_NUMROM ;
copyOfout1_tmp.DTAROM = row27.DTAROM ;
copyOfout1_tmp.DTALAN = row27.DTALAN ;
copyOfout1_tmp.FGO_TOTRET = row27.FGO_TOTRET ;
copyOfout1_tmp.FGO_CODEMP = row27.FGO_CODEMP ;
copyOfout1_tmp.ICD_VALFCP = row27.ICD_VALFCP ;
copyOfout1_tmp.TOTLAN = row27.TOTLAN ;
copyOfout1_tmp.OPEEXP = null;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					



    
		copyOfout1Struct oneRow_tHashOutput_3 = new copyOfout1Struct();
				
					oneRow_tHashOutput_3.DATA = copyOfout1.DATA;
					oneRow_tHashOutput_3.FGO_NUMPOK = copyOfout1.FGO_NUMPOK;
					oneRow_tHashOutput_3.FGO_NUMDOC = copyOfout1.FGO_NUMDOC;
					oneRow_tHashOutput_3.FGO_NUMFAT = copyOfout1.FGO_NUMFAT;
					oneRow_tHashOutput_3.FGO_CODVEN = copyOfout1.FGO_CODVEN;
					oneRow_tHashOutput_3.CLI_NOMCLI = copyOfout1.CLI_NOMCLI;
					oneRow_tHashOutput_3.CLI_C_G_C_ = copyOfout1.CLI_C_G_C_;
					oneRow_tHashOutput_3.FGO_VLRCON = copyOfout1.FGO_VLRCON;
					oneRow_tHashOutput_3.TRA_CODTRA = copyOfout1.TRA_CODTRA;
					oneRow_tHashOutput_3.TRA_NOMTRA = copyOfout1.TRA_NOMTRA;
					oneRow_tHashOutput_3.DIA_PREVIS = copyOfout1.DIA_PREVIS;
					oneRow_tHashOutput_3.FGO_SEQSEP = copyOfout1.FGO_SEQSEP;
					oneRow_tHashOutput_3.STATUS = copyOfout1.STATUS;
					oneRow_tHashOutput_3.DT_PEDIDO = copyOfout1.DT_PEDIDO;
					oneRow_tHashOutput_3.GER_NUMROM = copyOfout1.GER_NUMROM;
					oneRow_tHashOutput_3.DTAROM = copyOfout1.DTAROM;
					oneRow_tHashOutput_3.DTALAN = copyOfout1.DTALAN;
					oneRow_tHashOutput_3.FGO_TOTRET = copyOfout1.FGO_TOTRET;
					oneRow_tHashOutput_3.FGO_CODEMP = copyOfout1.FGO_CODEMP;
					oneRow_tHashOutput_3.ICD_VALFCP = copyOfout1.ICD_VALFCP;
					oneRow_tHashOutput_3.TOTLAN = copyOfout1.TOTLAN;
					oneRow_tHashOutput_3.OPEEXP = copyOfout1.OPEEXP;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row30Struct row30 = new row30Struct();
copyOfcopyOfout1Struct copyOfcopyOfout1 = new copyOfcopyOfout1Struct();
row20Struct row20 = new row20Struct();






	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout1");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String DATA;
    				String FGO_NUMPOK;
    				String FGO_NUMDOC;
    				String FGO_NUMFAT;
    				String FGO_CODVEN;
    				String CLI_NOMCLI;
    				String CLI_C_G_C_;
    				BigDecimal FGO_VLRCON;
    				String TRA_CODTRA;
    				String TRA_NOMTRA;
    				String DIA_PREVIS;
    				String FGO_SEQSEP;
    				String STATUS;
    				java.util.Date DT_PEDIDO;
    				String GER_NUMROM;
    				java.util.Date DTAROM;
    				BigDecimal FGO_TOTRET;
    				String FGO_CODEMP;
    				BigDecimal ICD_VALFCP;
    				BigDecimal TOTLAN;
         			java.util.Date DTALAN_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATA == null) ? 0 : this.DATA.hashCode());
							
							result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
							
							result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
							
							result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
							
							result = prime * result + ((this.FGO_CODVEN == null) ? 0 : this.FGO_CODVEN.hashCode());
							
							result = prime * result + ((this.CLI_NOMCLI == null) ? 0 : this.CLI_NOMCLI.hashCode());
							
							result = prime * result + ((this.CLI_C_G_C_ == null) ? 0 : this.CLI_C_G_C_.hashCode());
							
							result = prime * result + ((this.FGO_VLRCON == null) ? 0 : this.FGO_VLRCON.hashCode());
							
							result = prime * result + ((this.TRA_CODTRA == null) ? 0 : this.TRA_CODTRA.hashCode());
							
							result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
							
							result = prime * result + ((this.DIA_PREVIS == null) ? 0 : this.DIA_PREVIS.hashCode());
							
							result = prime * result + ((this.FGO_SEQSEP == null) ? 0 : this.FGO_SEQSEP.hashCode());
							
							result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
							
							result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
							
							result = prime * result + ((this.GER_NUMROM == null) ? 0 : this.GER_NUMROM.hashCode());
							
							result = prime * result + ((this.DTAROM == null) ? 0 : this.DTAROM.hashCode());
							
							result = prime * result + ((this.FGO_TOTRET == null) ? 0 : this.FGO_TOTRET.hashCode());
							
							result = prime * result + ((this.FGO_CODEMP == null) ? 0 : this.FGO_CODEMP.hashCode());
							
							result = prime * result + ((this.ICD_VALFCP == null) ? 0 : this.ICD_VALFCP.hashCode());
							
							result = prime * result + ((this.TOTLAN == null) ? 0 : this.TOTLAN.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.DATA == null) {
								if (other.DATA != null) 
									return false;
							} else if (!this.DATA.equals(other.DATA)) 
								return false;
						
							if (this.FGO_NUMPOK == null) {
								if (other.FGO_NUMPOK != null) 
									return false;
							} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK)) 
								return false;
						
							if (this.FGO_NUMDOC == null) {
								if (other.FGO_NUMDOC != null) 
									return false;
							} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC)) 
								return false;
						
							if (this.FGO_NUMFAT == null) {
								if (other.FGO_NUMFAT != null) 
									return false;
							} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT)) 
								return false;
						
							if (this.FGO_CODVEN == null) {
								if (other.FGO_CODVEN != null) 
									return false;
							} else if (!this.FGO_CODVEN.equals(other.FGO_CODVEN)) 
								return false;
						
							if (this.CLI_NOMCLI == null) {
								if (other.CLI_NOMCLI != null) 
									return false;
							} else if (!this.CLI_NOMCLI.equals(other.CLI_NOMCLI)) 
								return false;
						
							if (this.CLI_C_G_C_ == null) {
								if (other.CLI_C_G_C_ != null) 
									return false;
							} else if (!this.CLI_C_G_C_.equals(other.CLI_C_G_C_)) 
								return false;
						
							if (this.FGO_VLRCON == null) {
								if (other.FGO_VLRCON != null) 
									return false;
							} else if (!this.FGO_VLRCON.equals(other.FGO_VLRCON)) 
								return false;
						
							if (this.TRA_CODTRA == null) {
								if (other.TRA_CODTRA != null) 
									return false;
							} else if (!this.TRA_CODTRA.equals(other.TRA_CODTRA)) 
								return false;
						
							if (this.TRA_NOMTRA == null) {
								if (other.TRA_NOMTRA != null) 
									return false;
							} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA)) 
								return false;
						
							if (this.DIA_PREVIS == null) {
								if (other.DIA_PREVIS != null) 
									return false;
							} else if (!this.DIA_PREVIS.equals(other.DIA_PREVIS)) 
								return false;
						
							if (this.FGO_SEQSEP == null) {
								if (other.FGO_SEQSEP != null) 
									return false;
							} else if (!this.FGO_SEQSEP.equals(other.FGO_SEQSEP)) 
								return false;
						
							if (this.STATUS == null) {
								if (other.STATUS != null) 
									return false;
							} else if (!this.STATUS.equals(other.STATUS)) 
								return false;
						
							if (this.DT_PEDIDO == null) {
								if (other.DT_PEDIDO != null) 
									return false;
							} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO)) 
								return false;
						
							if (this.GER_NUMROM == null) {
								if (other.GER_NUMROM != null) 
									return false;
							} else if (!this.GER_NUMROM.equals(other.GER_NUMROM)) 
								return false;
						
							if (this.DTAROM == null) {
								if (other.DTAROM != null) 
									return false;
							} else if (!this.DTAROM.equals(other.DTAROM)) 
								return false;
						
							if (this.FGO_TOTRET == null) {
								if (other.FGO_TOTRET != null) 
									return false;
							} else if (!this.FGO_TOTRET.equals(other.FGO_TOTRET)) 
								return false;
						
							if (this.FGO_CODEMP == null) {
								if (other.FGO_CODEMP != null) 
									return false;
							} else if (!this.FGO_CODEMP.equals(other.FGO_CODEMP)) 
								return false;
						
							if (this.ICD_VALFCP == null) {
								if (other.ICD_VALFCP != null) 
									return false;
							} else if (!this.ICD_VALFCP.equals(other.ICD_VALFCP)) 
								return false;
						
							if (this.TOTLAN == null) {
								if (other.TOTLAN != null) 
									return false;
							} else if (!this.TOTLAN.equals(other.TOTLAN)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout1Struct copyOfcopyOfout1_tmp = new copyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tConvertType_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_5", false);
		start_Hash.put("tConvertType_5", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tConvertType_5 = 0;
		
	int nb_line_tConvertType_5 = 0;  
 



/**
 * [tConvertType_5 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\n-- AGUARDANDO SEPARACAO\nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, IF(COUNT(CASE WHEN I.ITE"
+"_LOCFIS IS NULL OR I.ITE_LOCFIS = '' OR I.ITE_LOCFIS = 'SEM' THEN 1 END) > 0, CONCAT('*', FGO_NUMDOC), FGO_NUMDOC) AS FG"
+"O_NUMDOC, FGO_NUMFAT, FGO_CODVEN, C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA, T.TRA_NOMTRA,  \n		IF(FGO_PREVIS"
+" = CURDATE(),'HOJE',IF(FGO_PREVIS<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, E.FGO_SEQSEP, 'AGUARDANDO SEPARAÇÃO' as ST"
+"ATUS,\n		CONCAT(F.FGO_DTAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n		MG.GER_NUMROM, \n		CONCAT(MG.GER_DTAROM,' ',MG.GER_HORROM) "
+"as DTAROM,\n		DATE_FORMAT(A.ADT_DTALAN,'%d-%m-%Y') AS DTALAN,\n		F.FGO_TOTRET,\n		F.FGO_CODEMP,\n		R.ICD_VALFCP,\n		SUM("
+"IF(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VALLAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) TOTLAN\n        FROM FATGOR AS F\n     "
+"   INNER JOIN FATDOR D ON F.AUTOINCREM = D.FDO_SEQGER \n        LEFT JOIN DORICD AS R ON D.AUTOINCREM = R.ICD_SEQFDO\n  "
+"      INNER JOIN ITEGER I ON D.FDO_CODITE = I.ITE_CODITE AND D.FDO_CODEMP = I.ITE_CODEMP\n        INNER JOIN CADOPE AS V"
+" ON F.FGO_CODVEN = V.OPE_CODOPE\n        LEFT JOIN MOVGER MG ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT = MG.GER_E"
+"SPDOC AND F.FGO_EMPFAT = MG.GER_CODEMP AND F.FGO_CODCLI = MG.GER_CODCLI\n        LEFT JOIN ADTCLI A ON F.FGO_NUMDOC = A."
+"ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND F.FGO_CODEMP = A.ADT_CODEMP\n        INNER JOIN CADCLI AS C ON F.FGO_CODC"
+"LI = C.CLI_CODCLI\n        INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n        INNER JOIN EXTGOR AS E ON F.AU"
+"TOINCREM = E.FGO_SEQFGO\n        WHERE F.FGO_CODEMP IN ('001', '010', '201')\n        AND F.FGO_JAFATU = '0'\n        AN"
+"D F.FGO_ESPDOC = 'PD'\n        AND F.FGO_MOTBAI IS NULL\n        AND F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DAY)"
+"\n        AND V.OPE_CODDEP IN ('014', '002')\n        AND IFNULL(F.FGO_OPELIB, F.FGO_DTALIB) IS NOT NULL\n        AND IF"
+"NULL(E.FGO_OPBXSE, E.FGO_SEPEXP) IS NULL\n        AND IFNULL(E.FGO_DTIMSE, E.FGO_ONDADT) IS NULL\n        AND IFNULL(E.F"
+"GO_OPEDES, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        AND IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '804', 'C16"
+"', '880', '881')\n        AND (F.FGO_NUMFAT IS NULL OR F.FGO_NUMFAT = '')\n        GROUP BY F.AUTOINCREM\n        HAVING"
+" TOTLAN >= F.FGO_VLRCON\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row6.DATA = null;
							} else {
	                         		
        	row6.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row6.FGO_NUMPOK = null;
							} else {
	                         		
        	row6.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row6.FGO_NUMDOC = null;
							} else {
	                         		
        	row6.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row6.FGO_NUMFAT = null;
							} else {
	                         		
        	row6.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row6.FGO_CODVEN = null;
							} else {
	                         		
        	row6.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row6.CLI_NOMCLI = null;
							} else {
	                         		
        	row6.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row6.CLI_C_G_C_ = null;
							} else {
	                         		
        	row6.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row6.FGO_VLRCON = null;
							} else {
		                          
            row6.FGO_VLRCON = rs_tDBInput_4.getBigDecimal(8);
            if(rs_tDBInput_4.wasNull()){
                    row6.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row6.TRA_CODTRA = null;
							} else {
	                         		
        	row6.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row6.TRA_NOMTRA = null;
							} else {
	                         		
        	row6.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row6.DIA_PREVIS = null;
							} else {
	                         		
        	row6.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row6.FGO_SEQSEP = null;
							} else {
	                         		
        	row6.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row6.STATUS = null;
							} else {
	                         		
        	row6.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row6.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_4.getString(14) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row6.DT_PEDIDO = rs_tDBInput_4.getTimestamp(14);
					} else {
						row6.DT_PEDIDO = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row6.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row6.GER_NUMROM = null;
							} else {
	                         		
        	row6.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row6.DTAROM = null;
							} else {
										
				if(rs_tDBInput_4.getString(16) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row6.DTAROM = rs_tDBInput_4.getTimestamp(16);
					} else {
						row6.DTAROM = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row6.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row6.DTALAN = null;
							} else {
	                         		
        	row6.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row6.FGO_TOTRET = null;
							} else {
		                          
            row6.FGO_TOTRET = rs_tDBInput_4.getBigDecimal(18);
            if(rs_tDBInput_4.wasNull()){
                    row6.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row6.FGO_CODEMP = null;
							} else {
	                         		
        	row6.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row6.ICD_VALFCP = null;
							} else {
		                          
            row6.ICD_VALFCP = rs_tDBInput_4.getBigDecimal(20);
            if(rs_tDBInput_4.wasNull()){
                    row6.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row6.TOTLAN = null;
							} else {
		                          
            row6.TOTLAN = rs_tDBInput_4.getBigDecimal(21);
            if(rs_tDBInput_4.wasNull()){
                    row6.TOTLAN = null;
            }
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_5 main ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


  row30 = new row30Struct();
  boolean bHasError_tConvertType_5 = false;             
          try {
              row30.DATA=TypeConvert.String2String(row6.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_NUMPOK=TypeConvert.String2String(row6.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_NUMDOC=TypeConvert.String2String(row6.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_NUMFAT=TypeConvert.String2String(row6.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_CODVEN=TypeConvert.String2String(row6.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.CLI_NOMCLI=TypeConvert.String2String(row6.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.CLI_C_G_C_=TypeConvert.String2String(row6.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row6.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.TRA_CODTRA=TypeConvert.String2String(row6.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.TRA_NOMTRA=TypeConvert.String2String(row6.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.DIA_PREVIS=TypeConvert.String2String(row6.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_SEQSEP=TypeConvert.String2String(row6.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.STATUS=TypeConvert.String2String(row6.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.DT_PEDIDO=TypeConvert.Date2Date(row6.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.GER_NUMROM=TypeConvert.String2String(row6.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.DTAROM=TypeConvert.Date2Date(row6.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.DTALAN=TypeConvert.String2Date(row6.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row6.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.FGO_CODEMP=TypeConvert.String2String(row6.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row6.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row30.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row6.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_5) {row30 = null;}

  nb_line_tConvertType_5 ++ ;

 


	tos_count_tConvertType_5++;

/**
 * [tConvertType_5 main ] stop
 */
	
	/**
	 * [tConvertType_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfout1'
copyOfcopyOfout1_tmp.DATA = row30.DATA ;
copyOfcopyOfout1_tmp.FGO_NUMPOK = row30.FGO_NUMPOK ;
copyOfcopyOfout1_tmp.FGO_NUMDOC = row30.FGO_NUMDOC ;
copyOfcopyOfout1_tmp.FGO_NUMFAT = row30.FGO_NUMFAT ;
copyOfcopyOfout1_tmp.FGO_CODVEN = row30.FGO_CODVEN ;
copyOfcopyOfout1_tmp.CLI_NOMCLI = row30.CLI_NOMCLI ;
copyOfcopyOfout1_tmp.CLI_C_G_C_ = row30.CLI_C_G_C_ ;
copyOfcopyOfout1_tmp.FGO_VLRCON = row30.FGO_VLRCON ;
copyOfcopyOfout1_tmp.TRA_CODTRA = row30.TRA_CODTRA ;
copyOfcopyOfout1_tmp.TRA_NOMTRA = row30.TRA_NOMTRA ;
copyOfcopyOfout1_tmp.DIA_PREVIS = row30.DIA_PREVIS ;
copyOfcopyOfout1_tmp.FGO_SEQSEP = row30.FGO_SEQSEP ;
copyOfcopyOfout1_tmp.STATUS = row30.STATUS ;
copyOfcopyOfout1_tmp.DT_PEDIDO = row30.DT_PEDIDO ;
copyOfcopyOfout1_tmp.GER_NUMROM = row30.GER_NUMROM ;
copyOfcopyOfout1_tmp.DTAROM = row30.DTAROM ;
copyOfcopyOfout1_tmp.DTALAN = row30.DTALAN ;
copyOfcopyOfout1_tmp.FGO_TOTRET = row30.FGO_TOTRET ;
copyOfcopyOfout1_tmp.FGO_CODEMP = row30.FGO_CODEMP ;
copyOfcopyOfout1_tmp.ICD_VALFCP = row30.ICD_VALFCP ;
copyOfcopyOfout1_tmp.TOTLAN = row30.TOTLAN ;
copyOfcopyOfout1_tmp.OPEEXP = null;
copyOfcopyOfout1 = copyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout1"
if(copyOfcopyOfout1 != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfout1"
						
						);
					}
					
	
operation_finder_tAggregateRow_2.DATA = copyOfcopyOfout1.DATA;
			operation_finder_tAggregateRow_2.FGO_NUMPOK = copyOfcopyOfout1.FGO_NUMPOK;
			operation_finder_tAggregateRow_2.FGO_NUMDOC = copyOfcopyOfout1.FGO_NUMDOC;
			operation_finder_tAggregateRow_2.FGO_NUMFAT = copyOfcopyOfout1.FGO_NUMFAT;
			operation_finder_tAggregateRow_2.FGO_CODVEN = copyOfcopyOfout1.FGO_CODVEN;
			operation_finder_tAggregateRow_2.CLI_NOMCLI = copyOfcopyOfout1.CLI_NOMCLI;
			operation_finder_tAggregateRow_2.CLI_C_G_C_ = copyOfcopyOfout1.CLI_C_G_C_;
			operation_finder_tAggregateRow_2.FGO_VLRCON = copyOfcopyOfout1.FGO_VLRCON;
			operation_finder_tAggregateRow_2.TRA_CODTRA = copyOfcopyOfout1.TRA_CODTRA;
			operation_finder_tAggregateRow_2.TRA_NOMTRA = copyOfcopyOfout1.TRA_NOMTRA;
			operation_finder_tAggregateRow_2.DIA_PREVIS = copyOfcopyOfout1.DIA_PREVIS;
			operation_finder_tAggregateRow_2.FGO_SEQSEP = copyOfcopyOfout1.FGO_SEQSEP;
			operation_finder_tAggregateRow_2.STATUS = copyOfcopyOfout1.STATUS;
			operation_finder_tAggregateRow_2.DT_PEDIDO = copyOfcopyOfout1.DT_PEDIDO;
			operation_finder_tAggregateRow_2.GER_NUMROM = copyOfcopyOfout1.GER_NUMROM;
			operation_finder_tAggregateRow_2.DTAROM = copyOfcopyOfout1.DTAROM;
			operation_finder_tAggregateRow_2.FGO_TOTRET = copyOfcopyOfout1.FGO_TOTRET;
			operation_finder_tAggregateRow_2.FGO_CODEMP = copyOfcopyOfout1.FGO_CODEMP;
			operation_finder_tAggregateRow_2.ICD_VALFCP = copyOfcopyOfout1.ICD_VALFCP;
			operation_finder_tAggregateRow_2.TOTLAN = copyOfcopyOfout1.TOTLAN;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	
		boolean isFirstAdd_tAggregateRow_2 = false;
	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.DATA = operation_finder_tAggregateRow_2.DATA;
				operation_result_tAggregateRow_2.FGO_NUMPOK = operation_finder_tAggregateRow_2.FGO_NUMPOK;
				operation_result_tAggregateRow_2.FGO_NUMDOC = operation_finder_tAggregateRow_2.FGO_NUMDOC;
				operation_result_tAggregateRow_2.FGO_NUMFAT = operation_finder_tAggregateRow_2.FGO_NUMFAT;
				operation_result_tAggregateRow_2.FGO_CODVEN = operation_finder_tAggregateRow_2.FGO_CODVEN;
				operation_result_tAggregateRow_2.CLI_NOMCLI = operation_finder_tAggregateRow_2.CLI_NOMCLI;
				operation_result_tAggregateRow_2.CLI_C_G_C_ = operation_finder_tAggregateRow_2.CLI_C_G_C_;
				operation_result_tAggregateRow_2.FGO_VLRCON = operation_finder_tAggregateRow_2.FGO_VLRCON;
				operation_result_tAggregateRow_2.TRA_CODTRA = operation_finder_tAggregateRow_2.TRA_CODTRA;
				operation_result_tAggregateRow_2.TRA_NOMTRA = operation_finder_tAggregateRow_2.TRA_NOMTRA;
				operation_result_tAggregateRow_2.DIA_PREVIS = operation_finder_tAggregateRow_2.DIA_PREVIS;
				operation_result_tAggregateRow_2.FGO_SEQSEP = operation_finder_tAggregateRow_2.FGO_SEQSEP;
				operation_result_tAggregateRow_2.STATUS = operation_finder_tAggregateRow_2.STATUS;
				operation_result_tAggregateRow_2.DT_PEDIDO = operation_finder_tAggregateRow_2.DT_PEDIDO;
				operation_result_tAggregateRow_2.GER_NUMROM = operation_finder_tAggregateRow_2.GER_NUMROM;
				operation_result_tAggregateRow_2.DTAROM = operation_finder_tAggregateRow_2.DTAROM;
				operation_result_tAggregateRow_2.FGO_TOTRET = operation_finder_tAggregateRow_2.FGO_TOTRET;
				operation_result_tAggregateRow_2.FGO_CODEMP = operation_finder_tAggregateRow_2.FGO_CODEMP;
				operation_result_tAggregateRow_2.ICD_VALFCP = operation_finder_tAggregateRow_2.ICD_VALFCP;
				operation_result_tAggregateRow_2.TOTLAN = operation_finder_tAggregateRow_2.TOTLAN;
				
		
		
			isFirstAdd_tAggregateRow_2 = true;
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if( 
						
							operation_result_tAggregateRow_2.DTALAN_max == null || copyOfcopyOfout1.DTALAN.compareTo(operation_result_tAggregateRow_2.DTALAN_max) > 0
						
					) {
						operation_result_tAggregateRow_2.DTALAN_max = copyOfcopyOfout1.DTALAN;
					}
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout1"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tConvertType_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tConvertType_5 end ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	
      globalMap.put("tConvertType_5_NB_LINE", nb_line_tConvertType_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tConvertType_5", true);
end_Hash.put("tConvertType_5", System.currentTimeMillis());




/**
 * [tConvertType_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

            				    row20.DATA = aggregated_row_tAggregateRow_2.DATA;
            				    
            				    row20.FGO_NUMPOK = aggregated_row_tAggregateRow_2.FGO_NUMPOK;
            				    
            				    row20.FGO_NUMDOC = aggregated_row_tAggregateRow_2.FGO_NUMDOC;
            				    
            				    row20.FGO_NUMFAT = aggregated_row_tAggregateRow_2.FGO_NUMFAT;
            				    
            				    row20.FGO_CODVEN = aggregated_row_tAggregateRow_2.FGO_CODVEN;
            				    
            				    row20.CLI_NOMCLI = aggregated_row_tAggregateRow_2.CLI_NOMCLI;
            				    
            				    row20.CLI_C_G_C_ = aggregated_row_tAggregateRow_2.CLI_C_G_C_;
            				    
            				    row20.FGO_VLRCON = aggregated_row_tAggregateRow_2.FGO_VLRCON;
            				    
            				    row20.TRA_CODTRA = aggregated_row_tAggregateRow_2.TRA_CODTRA;
            				    
            				    row20.TRA_NOMTRA = aggregated_row_tAggregateRow_2.TRA_NOMTRA;
            				    
            				    row20.DIA_PREVIS = aggregated_row_tAggregateRow_2.DIA_PREVIS;
            				    
            				    row20.FGO_SEQSEP = aggregated_row_tAggregateRow_2.FGO_SEQSEP;
            				    
            				    row20.STATUS = aggregated_row_tAggregateRow_2.STATUS;
            				    
            				    row20.DT_PEDIDO = aggregated_row_tAggregateRow_2.DT_PEDIDO;
            				    
            				    row20.GER_NUMROM = aggregated_row_tAggregateRow_2.GER_NUMROM;
            				    
            				    row20.DTAROM = aggregated_row_tAggregateRow_2.DTAROM;
            				    
                                row20.DTALAN = aggregated_row_tAggregateRow_2.DTALAN_max;
            				    row20.FGO_TOTRET = aggregated_row_tAggregateRow_2.FGO_TOTRET;
            				    
            				    row20.FGO_CODEMP = aggregated_row_tAggregateRow_2.FGO_CODEMP;
            				    
            				    row20.ICD_VALFCP = aggregated_row_tAggregateRow_2.ICD_VALFCP;
            				    
            				    row20.TOTLAN = aggregated_row_tAggregateRow_2.TOTLAN;
            				    

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					



    
		row20Struct oneRow_tHashOutput_5 = new row20Struct();
				
					oneRow_tHashOutput_5.DATA = row20.DATA;
					oneRow_tHashOutput_5.FGO_NUMPOK = row20.FGO_NUMPOK;
					oneRow_tHashOutput_5.FGO_NUMDOC = row20.FGO_NUMDOC;
					oneRow_tHashOutput_5.FGO_NUMFAT = row20.FGO_NUMFAT;
					oneRow_tHashOutput_5.FGO_CODVEN = row20.FGO_CODVEN;
					oneRow_tHashOutput_5.CLI_NOMCLI = row20.CLI_NOMCLI;
					oneRow_tHashOutput_5.CLI_C_G_C_ = row20.CLI_C_G_C_;
					oneRow_tHashOutput_5.FGO_VLRCON = row20.FGO_VLRCON;
					oneRow_tHashOutput_5.TRA_CODTRA = row20.TRA_CODTRA;
					oneRow_tHashOutput_5.TRA_NOMTRA = row20.TRA_NOMTRA;
					oneRow_tHashOutput_5.DIA_PREVIS = row20.DIA_PREVIS;
					oneRow_tHashOutput_5.FGO_SEQSEP = row20.FGO_SEQSEP;
					oneRow_tHashOutput_5.STATUS = row20.STATUS;
					oneRow_tHashOutput_5.DT_PEDIDO = row20.DT_PEDIDO;
					oneRow_tHashOutput_5.GER_NUMROM = row20.GER_NUMROM;
					oneRow_tHashOutput_5.DTAROM = row20.DTAROM;
					oneRow_tHashOutput_5.DTALAN = row20.DTALAN;
					oneRow_tHashOutput_5.FGO_TOTRET = row20.FGO_TOTRET;
					oneRow_tHashOutput_5.FGO_CODEMP = row20.FGO_CODEMP;
					oneRow_tHashOutput_5.ICD_VALFCP = row20.ICD_VALFCP;
					oneRow_tHashOutput_5.TOTLAN = row20.TOTLAN;
					oneRow_tHashOutput_5.OPEEXP = row20.OPEEXP;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tConvertType_5 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return null;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            other.OPEEXP = this.OPEEXP;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row31Struct row31 = new row31Struct();
copyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfout1 = new copyOfcopyOfcopyOfout1Struct();
row22Struct row22 = new row22Struct();






	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfout1");
					}
				
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

	

	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String DATA;
    				String FGO_NUMPOK;
    				String FGO_NUMDOC;
    				String FGO_NUMFAT;
    				String FGO_CODVEN;
    				String CLI_NOMCLI;
    				String CLI_C_G_C_;
    				BigDecimal FGO_VLRCON;
    				String TRA_CODTRA;
    				String TRA_NOMTRA;
    				String DIA_PREVIS;
    				String FGO_SEQSEP;
    				String STATUS;
    				java.util.Date DT_PEDIDO;
    				String GER_NUMROM;
    				java.util.Date DTAROM;
    				BigDecimal FGO_TOTRET;
    				String FGO_CODEMP;
    				BigDecimal ICD_VALFCP;
    				BigDecimal TOTLAN;
    				String OPEEXP;
         			java.util.Date DTALAN_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATA == null) ? 0 : this.DATA.hashCode());
							
							result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
							
							result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
							
							result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
							
							result = prime * result + ((this.FGO_CODVEN == null) ? 0 : this.FGO_CODVEN.hashCode());
							
							result = prime * result + ((this.CLI_NOMCLI == null) ? 0 : this.CLI_NOMCLI.hashCode());
							
							result = prime * result + ((this.CLI_C_G_C_ == null) ? 0 : this.CLI_C_G_C_.hashCode());
							
							result = prime * result + ((this.FGO_VLRCON == null) ? 0 : this.FGO_VLRCON.hashCode());
							
							result = prime * result + ((this.TRA_CODTRA == null) ? 0 : this.TRA_CODTRA.hashCode());
							
							result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
							
							result = prime * result + ((this.DIA_PREVIS == null) ? 0 : this.DIA_PREVIS.hashCode());
							
							result = prime * result + ((this.FGO_SEQSEP == null) ? 0 : this.FGO_SEQSEP.hashCode());
							
							result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
							
							result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
							
							result = prime * result + ((this.GER_NUMROM == null) ? 0 : this.GER_NUMROM.hashCode());
							
							result = prime * result + ((this.DTAROM == null) ? 0 : this.DTAROM.hashCode());
							
							result = prime * result + ((this.FGO_TOTRET == null) ? 0 : this.FGO_TOTRET.hashCode());
							
							result = prime * result + ((this.FGO_CODEMP == null) ? 0 : this.FGO_CODEMP.hashCode());
							
							result = prime * result + ((this.ICD_VALFCP == null) ? 0 : this.ICD_VALFCP.hashCode());
							
							result = prime * result + ((this.TOTLAN == null) ? 0 : this.TOTLAN.hashCode());
							
							result = prime * result + ((this.OPEEXP == null) ? 0 : this.OPEEXP.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
							if (this.DATA == null) {
								if (other.DATA != null) 
									return false;
							} else if (!this.DATA.equals(other.DATA)) 
								return false;
						
							if (this.FGO_NUMPOK == null) {
								if (other.FGO_NUMPOK != null) 
									return false;
							} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK)) 
								return false;
						
							if (this.FGO_NUMDOC == null) {
								if (other.FGO_NUMDOC != null) 
									return false;
							} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC)) 
								return false;
						
							if (this.FGO_NUMFAT == null) {
								if (other.FGO_NUMFAT != null) 
									return false;
							} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT)) 
								return false;
						
							if (this.FGO_CODVEN == null) {
								if (other.FGO_CODVEN != null) 
									return false;
							} else if (!this.FGO_CODVEN.equals(other.FGO_CODVEN)) 
								return false;
						
							if (this.CLI_NOMCLI == null) {
								if (other.CLI_NOMCLI != null) 
									return false;
							} else if (!this.CLI_NOMCLI.equals(other.CLI_NOMCLI)) 
								return false;
						
							if (this.CLI_C_G_C_ == null) {
								if (other.CLI_C_G_C_ != null) 
									return false;
							} else if (!this.CLI_C_G_C_.equals(other.CLI_C_G_C_)) 
								return false;
						
							if (this.FGO_VLRCON == null) {
								if (other.FGO_VLRCON != null) 
									return false;
							} else if (!this.FGO_VLRCON.equals(other.FGO_VLRCON)) 
								return false;
						
							if (this.TRA_CODTRA == null) {
								if (other.TRA_CODTRA != null) 
									return false;
							} else if (!this.TRA_CODTRA.equals(other.TRA_CODTRA)) 
								return false;
						
							if (this.TRA_NOMTRA == null) {
								if (other.TRA_NOMTRA != null) 
									return false;
							} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA)) 
								return false;
						
							if (this.DIA_PREVIS == null) {
								if (other.DIA_PREVIS != null) 
									return false;
							} else if (!this.DIA_PREVIS.equals(other.DIA_PREVIS)) 
								return false;
						
							if (this.FGO_SEQSEP == null) {
								if (other.FGO_SEQSEP != null) 
									return false;
							} else if (!this.FGO_SEQSEP.equals(other.FGO_SEQSEP)) 
								return false;
						
							if (this.STATUS == null) {
								if (other.STATUS != null) 
									return false;
							} else if (!this.STATUS.equals(other.STATUS)) 
								return false;
						
							if (this.DT_PEDIDO == null) {
								if (other.DT_PEDIDO != null) 
									return false;
							} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO)) 
								return false;
						
							if (this.GER_NUMROM == null) {
								if (other.GER_NUMROM != null) 
									return false;
							} else if (!this.GER_NUMROM.equals(other.GER_NUMROM)) 
								return false;
						
							if (this.DTAROM == null) {
								if (other.DTAROM != null) 
									return false;
							} else if (!this.DTAROM.equals(other.DTAROM)) 
								return false;
						
							if (this.FGO_TOTRET == null) {
								if (other.FGO_TOTRET != null) 
									return false;
							} else if (!this.FGO_TOTRET.equals(other.FGO_TOTRET)) 
								return false;
						
							if (this.FGO_CODEMP == null) {
								if (other.FGO_CODEMP != null) 
									return false;
							} else if (!this.FGO_CODEMP.equals(other.FGO_CODEMP)) 
								return false;
						
							if (this.ICD_VALFCP == null) {
								if (other.ICD_VALFCP != null) 
									return false;
							} else if (!this.ICD_VALFCP.equals(other.ICD_VALFCP)) 
								return false;
						
							if (this.TOTLAN == null) {
								if (other.TOTLAN != null) 
									return false;
							} else if (!this.TOTLAN.equals(other.TOTLAN)) 
								return false;
						
							if (this.OPEEXP == null) {
								if (other.OPEEXP != null) 
									return false;
							} else if (!this.OPEEXP.equals(other.OPEEXP)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfout1_tmp = new copyOfcopyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tConvertType_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_6", false);
		start_Hash.put("tConvertType_6", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tConvertType_6 = 0;
		
	int nb_line_tConvertType_6 = 0;  
 



/**
 * [tConvertType_6 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "-- AGUARDANDO EXPEDICAO\nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, FGO_NUMDOC, FGO_NUMFAT AS "
+"FGO_NUMFAT, F.FGO_CODVEN, C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA, T.TRA_NOMTRA, \n		IF(FGO_PREVIS = CURDAT"
+"E(),'HOJE',IF(FGO_PREVIS<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, E.FGO_SEQSEP, 'AGUARDANDO EXPEDIÇÃO' AS STATUS,\n  "
+"      CONCAT(F.FGO_DTAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n        MG.GER_NUMROM, \n        CONCAT(MG.GER_DTAROM,' ',MG.GER"
+"_HORROM) as DTAROM,\n        DATE_FORMAT(A.ADT_DTALAN, '%d-%m-%Y') AS DTALAN,\n        F.FGO_TOTRET,\n		F.FGO_CODEMP,\n	"
+"	R.ICD_VALFCP,\n		SUM(IF(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VALLAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) TOTLAN,\n		IF(MG."
+"GER_DTLBEX, MG.GER_OPEEXP, MG.GER_OPLBEX) AS OPEEXP\n        FROM FATGOR AS F\n        INNER JOIN CADCLI AS C ON F.FGO_C"
+"ODCLI = C.CLI_CODCLI\n        INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n        INNER JOIN EXTGOR AS E ON F"
+".AUTOINCREM = E.FGO_SEQFGO\n        INNER JOIN CADOPE AS V ON F.FGO_CODVEN = V.OPE_CODOPE\n        INNER JOIN FATDOR D O"
+"N F.AUTOINCREM = D.FDO_SEQGER \n        LEFT JOIN DORICD AS R ON D.AUTOINCREM = R.ICD_SEQFDO\n        LEFT JOIN MOVGER M"
+"G ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT = MG.GER_ESPDOC AND F.FGO_EMPFAT = MG.GER_CODEMP AND F.FGO_CODCLI = M"
+"G.GER_CODCLI \n        LEFT JOIN MOVDET DV ON MG.GER_NUMDOC = DV.DET_DOCDEV AND DV.DET_ESPDEV = MG.GER_ESPDOC AND DV.DET"
+"_EMPDEV = MG.GER_CODEMP \n        LEFT JOIN ADTCLI A ON F.FGO_NUMDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND "
+"F.FGO_CODEMP = A.ADT_CODEMP\n        WHERE F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DAY)\n        AND F.FGO_CODEMP"
+" IN ('001', '010', '201')\n        AND F.FGO_JAFATU = '0'\n        AND MG.GER_DTLBEX IS NULL\n        AND MG.GER_DTAROM "
+"IS NULL\n        AND DV.AUTOINCREM IS NULL\n        AND F.FGO_ESPDOC = 'PD'\n        AND F.FGO_MOTBAI IS NULL\n        A"
+"ND V.OPE_CODDEP IN ('014', '002')\n        AND IFNULL(F.FGO_OPELIB, F.FGO_DTALIB) IS NOT NULL\n        AND IFNULL(E.FGO_"
+"OPBXSE, E.FGO_SEPEXP) IS NOT NULL\n        AND E.FGO_OPEEXP IS NULL \n        AND E.FGO_DTBXSE IS NOT NULL\n        AND "
+"IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '804', 'C16', '880', '881')\n		AND IFNULL(E.FGO_OPEDES, 0) NOT IN ('599', '804', "
+"'C16', '880', '881')\n		GROUP BY F.AUTOINCREM\n		HAVING TOTLAN >= F.FGO_VLRCON\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);

		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row7.DATA = null;
							} else {
	                         		
        	row7.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row7.FGO_NUMPOK = null;
							} else {
	                         		
        	row7.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row7.FGO_NUMDOC = null;
							} else {
	                         		
        	row7.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row7.FGO_NUMFAT = null;
							} else {
	                         		
        	row7.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row7.FGO_CODVEN = null;
							} else {
	                         		
        	row7.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row7.CLI_NOMCLI = null;
							} else {
	                         		
        	row7.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row7.CLI_C_G_C_ = null;
							} else {
	                         		
        	row7.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row7.FGO_VLRCON = null;
							} else {
		                          
            row7.FGO_VLRCON = rs_tDBInput_5.getBigDecimal(8);
            if(rs_tDBInput_5.wasNull()){
                    row7.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row7.TRA_CODTRA = null;
							} else {
	                         		
        	row7.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row7.TRA_NOMTRA = null;
							} else {
	                         		
        	row7.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row7.DIA_PREVIS = null;
							} else {
	                         		
        	row7.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 11, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row7.FGO_SEQSEP = null;
							} else {
	                         		
        	row7.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 12, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row7.STATUS = null;
							} else {
	                         		
        	row7.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row7.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_5.getString(14) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row7.DT_PEDIDO = rs_tDBInput_5.getTimestamp(14);
					} else {
						row7.DT_PEDIDO = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row7.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row7.GER_NUMROM = null;
							} else {
	                         		
        	row7.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row7.DTAROM = null;
							} else {
										
				if(rs_tDBInput_5.getString(16) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row7.DTAROM = rs_tDBInput_5.getTimestamp(16);
					} else {
						row7.DTAROM = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row7.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row7.DTALAN = null;
							} else {
	                         		
        	row7.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row7.FGO_TOTRET = null;
							} else {
		                          
            row7.FGO_TOTRET = rs_tDBInput_5.getBigDecimal(18);
            if(rs_tDBInput_5.wasNull()){
                    row7.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row7.FGO_CODEMP = null;
							} else {
	                         		
        	row7.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row7.ICD_VALFCP = null;
							} else {
		                          
            row7.ICD_VALFCP = rs_tDBInput_5.getBigDecimal(20);
            if(rs_tDBInput_5.wasNull()){
                    row7.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row7.TOTLAN = null;
							} else {
		                          
            row7.TOTLAN = rs_tDBInput_5.getBigDecimal(21);
            if(rs_tDBInput_5.wasNull()){
                    row7.TOTLAN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row7.OPEEXP = null;
							} else {
	                         		
        	row7.OPEEXP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22, false);
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_6 main ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


  row31 = new row31Struct();
  boolean bHasError_tConvertType_6 = false;             
          try {
              row31.DATA=TypeConvert.String2String(row7.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_NUMPOK=TypeConvert.String2String(row7.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_NUMDOC=TypeConvert.String2String(row7.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_NUMFAT=TypeConvert.String2String(row7.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_CODVEN=TypeConvert.String2String(row7.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.CLI_NOMCLI=TypeConvert.String2String(row7.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.CLI_C_G_C_=TypeConvert.String2String(row7.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row7.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.TRA_CODTRA=TypeConvert.String2String(row7.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.TRA_NOMTRA=TypeConvert.String2String(row7.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.DIA_PREVIS=TypeConvert.String2String(row7.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_SEQSEP=TypeConvert.String2String(row7.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.STATUS=TypeConvert.String2String(row7.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.DT_PEDIDO=TypeConvert.Date2Date(row7.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.GER_NUMROM=TypeConvert.String2String(row7.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.DTAROM=TypeConvert.Date2Date(row7.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.DTALAN=TypeConvert.String2Date(row7.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row7.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.FGO_CODEMP=TypeConvert.String2String(row7.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row7.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row7.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row31.OPEEXP=TypeConvert.String2String(row7.OPEEXP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_6) {row31 = null;}

  nb_line_tConvertType_6 ++ ;

 


	tos_count_tConvertType_6++;

/**
 * [tConvertType_6 main ] stop
 */
	
	/**
	 * [tConvertType_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfcopyOfout1'
copyOfcopyOfcopyOfout1_tmp.DATA = row31.DATA ;
copyOfcopyOfcopyOfout1_tmp.FGO_NUMPOK = row31.FGO_NUMPOK ;
copyOfcopyOfcopyOfout1_tmp.FGO_NUMDOC = row31.FGO_NUMDOC ;
copyOfcopyOfcopyOfout1_tmp.FGO_NUMFAT = row31.FGO_NUMFAT ;
copyOfcopyOfcopyOfout1_tmp.FGO_CODVEN = row31.FGO_CODVEN ;
copyOfcopyOfcopyOfout1_tmp.CLI_NOMCLI = row31.CLI_NOMCLI ;
copyOfcopyOfcopyOfout1_tmp.CLI_C_G_C_ = row31.CLI_C_G_C_ ;
copyOfcopyOfcopyOfout1_tmp.FGO_VLRCON = row31.FGO_VLRCON ;
copyOfcopyOfcopyOfout1_tmp.TRA_CODTRA = row31.TRA_CODTRA ;
copyOfcopyOfcopyOfout1_tmp.TRA_NOMTRA = row31.TRA_NOMTRA ;
copyOfcopyOfcopyOfout1_tmp.DIA_PREVIS = row31.DIA_PREVIS ;
copyOfcopyOfcopyOfout1_tmp.FGO_SEQSEP = row31.FGO_SEQSEP ;
copyOfcopyOfcopyOfout1_tmp.STATUS = row31.STATUS ;
copyOfcopyOfcopyOfout1_tmp.DT_PEDIDO = row31.DT_PEDIDO ;
copyOfcopyOfcopyOfout1_tmp.GER_NUMROM = row31.GER_NUMROM ;
copyOfcopyOfcopyOfout1_tmp.DTAROM = row31.DTAROM ;
copyOfcopyOfcopyOfout1_tmp.DTALAN = row31.DTALAN ;
copyOfcopyOfcopyOfout1_tmp.FGO_TOTRET = row31.FGO_TOTRET ;
copyOfcopyOfcopyOfout1_tmp.FGO_CODEMP = row31.FGO_CODEMP ;
copyOfcopyOfcopyOfout1_tmp.ICD_VALFCP = row31.ICD_VALFCP ;
copyOfcopyOfcopyOfout1_tmp.TOTLAN = row31.TOTLAN ;
copyOfcopyOfcopyOfout1_tmp.OPEEXP = row31.OPEEXP ;
copyOfcopyOfcopyOfout1 = copyOfcopyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfout1"
if(copyOfcopyOfcopyOfout1 != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfout1"
						
						);
					}
					
	
operation_finder_tAggregateRow_4.DATA = copyOfcopyOfcopyOfout1.DATA;
			operation_finder_tAggregateRow_4.FGO_NUMPOK = copyOfcopyOfcopyOfout1.FGO_NUMPOK;
			operation_finder_tAggregateRow_4.FGO_NUMDOC = copyOfcopyOfcopyOfout1.FGO_NUMDOC;
			operation_finder_tAggregateRow_4.FGO_NUMFAT = copyOfcopyOfcopyOfout1.FGO_NUMFAT;
			operation_finder_tAggregateRow_4.FGO_CODVEN = copyOfcopyOfcopyOfout1.FGO_CODVEN;
			operation_finder_tAggregateRow_4.CLI_NOMCLI = copyOfcopyOfcopyOfout1.CLI_NOMCLI;
			operation_finder_tAggregateRow_4.CLI_C_G_C_ = copyOfcopyOfcopyOfout1.CLI_C_G_C_;
			operation_finder_tAggregateRow_4.FGO_VLRCON = copyOfcopyOfcopyOfout1.FGO_VLRCON;
			operation_finder_tAggregateRow_4.TRA_CODTRA = copyOfcopyOfcopyOfout1.TRA_CODTRA;
			operation_finder_tAggregateRow_4.TRA_NOMTRA = copyOfcopyOfcopyOfout1.TRA_NOMTRA;
			operation_finder_tAggregateRow_4.DIA_PREVIS = copyOfcopyOfcopyOfout1.DIA_PREVIS;
			operation_finder_tAggregateRow_4.FGO_SEQSEP = copyOfcopyOfcopyOfout1.FGO_SEQSEP;
			operation_finder_tAggregateRow_4.STATUS = copyOfcopyOfcopyOfout1.STATUS;
			operation_finder_tAggregateRow_4.DT_PEDIDO = copyOfcopyOfcopyOfout1.DT_PEDIDO;
			operation_finder_tAggregateRow_4.GER_NUMROM = copyOfcopyOfcopyOfout1.GER_NUMROM;
			operation_finder_tAggregateRow_4.DTAROM = copyOfcopyOfcopyOfout1.DTAROM;
			operation_finder_tAggregateRow_4.FGO_TOTRET = copyOfcopyOfcopyOfout1.FGO_TOTRET;
			operation_finder_tAggregateRow_4.FGO_CODEMP = copyOfcopyOfcopyOfout1.FGO_CODEMP;
			operation_finder_tAggregateRow_4.ICD_VALFCP = copyOfcopyOfcopyOfout1.ICD_VALFCP;
			operation_finder_tAggregateRow_4.TOTLAN = copyOfcopyOfcopyOfout1.TOTLAN;
			operation_finder_tAggregateRow_4.OPEEXP = copyOfcopyOfcopyOfout1.OPEEXP;
			

	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	
		boolean isFirstAdd_tAggregateRow_4 = false;
	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		operation_result_tAggregateRow_4.DATA = operation_finder_tAggregateRow_4.DATA;
				operation_result_tAggregateRow_4.FGO_NUMPOK = operation_finder_tAggregateRow_4.FGO_NUMPOK;
				operation_result_tAggregateRow_4.FGO_NUMDOC = operation_finder_tAggregateRow_4.FGO_NUMDOC;
				operation_result_tAggregateRow_4.FGO_NUMFAT = operation_finder_tAggregateRow_4.FGO_NUMFAT;
				operation_result_tAggregateRow_4.FGO_CODVEN = operation_finder_tAggregateRow_4.FGO_CODVEN;
				operation_result_tAggregateRow_4.CLI_NOMCLI = operation_finder_tAggregateRow_4.CLI_NOMCLI;
				operation_result_tAggregateRow_4.CLI_C_G_C_ = operation_finder_tAggregateRow_4.CLI_C_G_C_;
				operation_result_tAggregateRow_4.FGO_VLRCON = operation_finder_tAggregateRow_4.FGO_VLRCON;
				operation_result_tAggregateRow_4.TRA_CODTRA = operation_finder_tAggregateRow_4.TRA_CODTRA;
				operation_result_tAggregateRow_4.TRA_NOMTRA = operation_finder_tAggregateRow_4.TRA_NOMTRA;
				operation_result_tAggregateRow_4.DIA_PREVIS = operation_finder_tAggregateRow_4.DIA_PREVIS;
				operation_result_tAggregateRow_4.FGO_SEQSEP = operation_finder_tAggregateRow_4.FGO_SEQSEP;
				operation_result_tAggregateRow_4.STATUS = operation_finder_tAggregateRow_4.STATUS;
				operation_result_tAggregateRow_4.DT_PEDIDO = operation_finder_tAggregateRow_4.DT_PEDIDO;
				operation_result_tAggregateRow_4.GER_NUMROM = operation_finder_tAggregateRow_4.GER_NUMROM;
				operation_result_tAggregateRow_4.DTAROM = operation_finder_tAggregateRow_4.DTAROM;
				operation_result_tAggregateRow_4.FGO_TOTRET = operation_finder_tAggregateRow_4.FGO_TOTRET;
				operation_result_tAggregateRow_4.FGO_CODEMP = operation_finder_tAggregateRow_4.FGO_CODEMP;
				operation_result_tAggregateRow_4.ICD_VALFCP = operation_finder_tAggregateRow_4.ICD_VALFCP;
				operation_result_tAggregateRow_4.TOTLAN = operation_finder_tAggregateRow_4.TOTLAN;
				operation_result_tAggregateRow_4.OPEEXP = operation_finder_tAggregateRow_4.OPEEXP;
				
		
		
			isFirstAdd_tAggregateRow_4 = true;
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	
				if(copyOfcopyOfcopyOfout1.DTALAN != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_4.DTALAN_max == null || copyOfcopyOfcopyOfout1.DTALAN.compareTo(operation_result_tAggregateRow_4.DTALAN_max) > 0
						
					) {
						operation_result_tAggregateRow_4.DTALAN_max = copyOfcopyOfcopyOfout1.DTALAN;
					}
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfout1"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tConvertType_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tConvertType_6 end ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	
      globalMap.put("tConvertType_6_NB_LINE", nb_line_tConvertType_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tConvertType_6", true);
end_Hash.put("tConvertType_6", System.currentTimeMillis());




/**
 * [tConvertType_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

            				    row22.DATA = aggregated_row_tAggregateRow_4.DATA;
            				    
            				    row22.FGO_NUMPOK = aggregated_row_tAggregateRow_4.FGO_NUMPOK;
            				    
            				    row22.FGO_NUMDOC = aggregated_row_tAggregateRow_4.FGO_NUMDOC;
            				    
            				    row22.FGO_NUMFAT = aggregated_row_tAggregateRow_4.FGO_NUMFAT;
            				    
            				    row22.FGO_CODVEN = aggregated_row_tAggregateRow_4.FGO_CODVEN;
            				    
            				    row22.CLI_NOMCLI = aggregated_row_tAggregateRow_4.CLI_NOMCLI;
            				    
            				    row22.CLI_C_G_C_ = aggregated_row_tAggregateRow_4.CLI_C_G_C_;
            				    
            				    row22.FGO_VLRCON = aggregated_row_tAggregateRow_4.FGO_VLRCON;
            				    
            				    row22.TRA_CODTRA = aggregated_row_tAggregateRow_4.TRA_CODTRA;
            				    
            				    row22.TRA_NOMTRA = aggregated_row_tAggregateRow_4.TRA_NOMTRA;
            				    
            				    row22.DIA_PREVIS = aggregated_row_tAggregateRow_4.DIA_PREVIS;
            				    
            				    row22.FGO_SEQSEP = aggregated_row_tAggregateRow_4.FGO_SEQSEP;
            				    
            				    row22.STATUS = aggregated_row_tAggregateRow_4.STATUS;
            				    
            				    row22.DT_PEDIDO = aggregated_row_tAggregateRow_4.DT_PEDIDO;
            				    
            				    row22.GER_NUMROM = aggregated_row_tAggregateRow_4.GER_NUMROM;
            				    
            				    row22.DTAROM = aggregated_row_tAggregateRow_4.DTAROM;
            				    
                                row22.DTALAN = aggregated_row_tAggregateRow_4.DTALAN_max;
            				    row22.FGO_TOTRET = aggregated_row_tAggregateRow_4.FGO_TOTRET;
            				    
            				    row22.FGO_CODEMP = aggregated_row_tAggregateRow_4.FGO_CODEMP;
            				    
            				    row22.ICD_VALFCP = aggregated_row_tAggregateRow_4.ICD_VALFCP;
            				    
            				    row22.TOTLAN = aggregated_row_tAggregateRow_4.TOTLAN;
            				    
            				    row22.OPEEXP = aggregated_row_tAggregateRow_4.OPEEXP;
            				    

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



    
		row22Struct oneRow_tHashOutput_6 = new row22Struct();
				
					oneRow_tHashOutput_6.DATA = row22.DATA;
					oneRow_tHashOutput_6.FGO_NUMPOK = row22.FGO_NUMPOK;
					oneRow_tHashOutput_6.FGO_NUMDOC = row22.FGO_NUMDOC;
					oneRow_tHashOutput_6.FGO_NUMFAT = row22.FGO_NUMFAT;
					oneRow_tHashOutput_6.FGO_CODVEN = row22.FGO_CODVEN;
					oneRow_tHashOutput_6.CLI_NOMCLI = row22.CLI_NOMCLI;
					oneRow_tHashOutput_6.CLI_C_G_C_ = row22.CLI_C_G_C_;
					oneRow_tHashOutput_6.FGO_VLRCON = row22.FGO_VLRCON;
					oneRow_tHashOutput_6.TRA_CODTRA = row22.TRA_CODTRA;
					oneRow_tHashOutput_6.TRA_NOMTRA = row22.TRA_NOMTRA;
					oneRow_tHashOutput_6.DIA_PREVIS = row22.DIA_PREVIS;
					oneRow_tHashOutput_6.FGO_SEQSEP = row22.FGO_SEQSEP;
					oneRow_tHashOutput_6.STATUS = row22.STATUS;
					oneRow_tHashOutput_6.DT_PEDIDO = row22.DT_PEDIDO;
					oneRow_tHashOutput_6.GER_NUMROM = row22.GER_NUMROM;
					oneRow_tHashOutput_6.DTAROM = row22.DTAROM;
					oneRow_tHashOutput_6.DTALAN = row22.DTALAN;
					oneRow_tHashOutput_6.FGO_TOTRET = row22.FGO_TOTRET;
					oneRow_tHashOutput_6.FGO_CODEMP = row22.FGO_CODEMP;
					oneRow_tHashOutput_6.ICD_VALFCP = row22.ICD_VALFCP;
					oneRow_tHashOutput_6.TOTLAN = row22.TOTLAN;
					oneRow_tHashOutput_6.OPEEXP = row22.OPEEXP;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tConvertType_6 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            other.OPEEXP = this.OPEEXP;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row29Struct row29 = new row29Struct();
copyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfout1 = new copyOfcopyOfcopyOfcopyOfout1Struct();
row21Struct row21 = new row21Struct();






	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfout1");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String DATA;
    				String FGO_NUMPOK;
    				String FGO_NUMDOC;
    				String FGO_NUMFAT;
    				String FGO_CODVEN;
    				String CLI_NOMCLI;
    				String CLI_C_G_C_;
    				BigDecimal FGO_VLRCON;
    				String TRA_CODTRA;
    				String TRA_NOMTRA;
    				String DIA_PREVIS;
    				String FGO_SEQSEP;
    				String STATUS;
    				java.util.Date DT_PEDIDO;
    				String GER_NUMROM;
    				java.util.Date DTAROM;
    				BigDecimal FGO_TOTRET;
    				String FGO_CODEMP;
    				BigDecimal ICD_VALFCP;
    				BigDecimal TOTLAN;
    				String OPEEXP;
         			java.util.Date DTALAN_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATA == null) ? 0 : this.DATA.hashCode());
							
							result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
							
							result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
							
							result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
							
							result = prime * result + ((this.FGO_CODVEN == null) ? 0 : this.FGO_CODVEN.hashCode());
							
							result = prime * result + ((this.CLI_NOMCLI == null) ? 0 : this.CLI_NOMCLI.hashCode());
							
							result = prime * result + ((this.CLI_C_G_C_ == null) ? 0 : this.CLI_C_G_C_.hashCode());
							
							result = prime * result + ((this.FGO_VLRCON == null) ? 0 : this.FGO_VLRCON.hashCode());
							
							result = prime * result + ((this.TRA_CODTRA == null) ? 0 : this.TRA_CODTRA.hashCode());
							
							result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
							
							result = prime * result + ((this.DIA_PREVIS == null) ? 0 : this.DIA_PREVIS.hashCode());
							
							result = prime * result + ((this.FGO_SEQSEP == null) ? 0 : this.FGO_SEQSEP.hashCode());
							
							result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
							
							result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
							
							result = prime * result + ((this.GER_NUMROM == null) ? 0 : this.GER_NUMROM.hashCode());
							
							result = prime * result + ((this.DTAROM == null) ? 0 : this.DTAROM.hashCode());
							
							result = prime * result + ((this.FGO_TOTRET == null) ? 0 : this.FGO_TOTRET.hashCode());
							
							result = prime * result + ((this.FGO_CODEMP == null) ? 0 : this.FGO_CODEMP.hashCode());
							
							result = prime * result + ((this.ICD_VALFCP == null) ? 0 : this.ICD_VALFCP.hashCode());
							
							result = prime * result + ((this.TOTLAN == null) ? 0 : this.TOTLAN.hashCode());
							
							result = prime * result + ((this.OPEEXP == null) ? 0 : this.OPEEXP.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.DATA == null) {
								if (other.DATA != null) 
									return false;
							} else if (!this.DATA.equals(other.DATA)) 
								return false;
						
							if (this.FGO_NUMPOK == null) {
								if (other.FGO_NUMPOK != null) 
									return false;
							} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK)) 
								return false;
						
							if (this.FGO_NUMDOC == null) {
								if (other.FGO_NUMDOC != null) 
									return false;
							} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC)) 
								return false;
						
							if (this.FGO_NUMFAT == null) {
								if (other.FGO_NUMFAT != null) 
									return false;
							} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT)) 
								return false;
						
							if (this.FGO_CODVEN == null) {
								if (other.FGO_CODVEN != null) 
									return false;
							} else if (!this.FGO_CODVEN.equals(other.FGO_CODVEN)) 
								return false;
						
							if (this.CLI_NOMCLI == null) {
								if (other.CLI_NOMCLI != null) 
									return false;
							} else if (!this.CLI_NOMCLI.equals(other.CLI_NOMCLI)) 
								return false;
						
							if (this.CLI_C_G_C_ == null) {
								if (other.CLI_C_G_C_ != null) 
									return false;
							} else if (!this.CLI_C_G_C_.equals(other.CLI_C_G_C_)) 
								return false;
						
							if (this.FGO_VLRCON == null) {
								if (other.FGO_VLRCON != null) 
									return false;
							} else if (!this.FGO_VLRCON.equals(other.FGO_VLRCON)) 
								return false;
						
							if (this.TRA_CODTRA == null) {
								if (other.TRA_CODTRA != null) 
									return false;
							} else if (!this.TRA_CODTRA.equals(other.TRA_CODTRA)) 
								return false;
						
							if (this.TRA_NOMTRA == null) {
								if (other.TRA_NOMTRA != null) 
									return false;
							} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA)) 
								return false;
						
							if (this.DIA_PREVIS == null) {
								if (other.DIA_PREVIS != null) 
									return false;
							} else if (!this.DIA_PREVIS.equals(other.DIA_PREVIS)) 
								return false;
						
							if (this.FGO_SEQSEP == null) {
								if (other.FGO_SEQSEP != null) 
									return false;
							} else if (!this.FGO_SEQSEP.equals(other.FGO_SEQSEP)) 
								return false;
						
							if (this.STATUS == null) {
								if (other.STATUS != null) 
									return false;
							} else if (!this.STATUS.equals(other.STATUS)) 
								return false;
						
							if (this.DT_PEDIDO == null) {
								if (other.DT_PEDIDO != null) 
									return false;
							} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO)) 
								return false;
						
							if (this.GER_NUMROM == null) {
								if (other.GER_NUMROM != null) 
									return false;
							} else if (!this.GER_NUMROM.equals(other.GER_NUMROM)) 
								return false;
						
							if (this.DTAROM == null) {
								if (other.DTAROM != null) 
									return false;
							} else if (!this.DTAROM.equals(other.DTAROM)) 
								return false;
						
							if (this.FGO_TOTRET == null) {
								if (other.FGO_TOTRET != null) 
									return false;
							} else if (!this.FGO_TOTRET.equals(other.FGO_TOTRET)) 
								return false;
						
							if (this.FGO_CODEMP == null) {
								if (other.FGO_CODEMP != null) 
									return false;
							} else if (!this.FGO_CODEMP.equals(other.FGO_CODEMP)) 
								return false;
						
							if (this.ICD_VALFCP == null) {
								if (other.ICD_VALFCP != null) 
									return false;
							} else if (!this.ICD_VALFCP.equals(other.ICD_VALFCP)) 
								return false;
						
							if (this.TOTLAN == null) {
								if (other.TOTLAN != null) 
									return false;
							} else if (!this.TOTLAN.equals(other.TOTLAN)) 
								return false;
						
							if (this.OPEEXP == null) {
								if (other.OPEEXP != null) 
									return false;
							} else if (!this.OPEEXP.equals(other.OPEEXP)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfout1_tmp = new copyOfcopyOfcopyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tConvertType_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_4", false);
		start_Hash.put("tConvertType_4", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tConvertType_4 = 0;
		
	int nb_line_tConvertType_4 = 0;  
 



/**
 * [tConvertType_4 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";
	
	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "-- AGUARDANDO ROMANEIO              \nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, FGO_NUMDOC, F"
+".FGO_CODVEN, C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA,	T.TRA_NOMTRA, FGO_NUMFAT,\n		IF(FGO_PREVIS = CURDATE("
+"),'HOJE',IF(FGO_PREVIS<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, E.FGO_SEQSEP, 'AGUARDANDO ROMANEIO' AS STATUS,\n     "
+"   CONCAT(F.FGO_DTAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n        M.GER_NUMROM, \n        CONCAT(M.GER_DTAROM, ' ',M.GER_HORR"
+"OM) as DTAROM,\n        DATE_FORMAT(A.ADT_DTALAN, '%d-%m-%Y') AS DTALAN,\n        F.FGO_TOTRET,\n		F.FGO_CODEMP,\n		R.IC"
+"D_VALFCP,\n		null as TOTLAN,\n		IF(M.GER_DTLBEX, M.GER_OPEEXP, M.GER_OPLBEX) AS OPEEXP\n        FROM FATGOR F\n        I"
+"NNER JOIN EXTGOR E ON F.AUTOINCREM = E.FGO_SEQFGO\n        INNER JOIN MOVGER M ON F.FGO_NUMFAT = M.GER_NUMDOC AND F.FGO_"
+"TIPFAT = M.GER_ESPDOC AND F.FGO_EMPFAT = M.GER_CODEMP AND F.FGO_CODCLI = M.GER_CODCLI\n        INNER JOIN CADOPE AS V ON"
+" F.FGO_CODVEN = V.OPE_CODOPE\n        INNER JOIN FATDOR D ON F.AUTOINCREM = D.FDO_SEQGER \n        LEFT JOIN DORICD AS R"
+" ON D.AUTOINCREM = R.ICD_SEQFDO\n        LEFT JOIN MOVDET DV ON M.GER_NUMDOC = DV.DET_DOCDEV AND DV.DET_ESPDEV = M.GER_E"
+"SPDOC AND DV.DET_EMPDEV = M.GER_CODEMP \n        LEFT JOIN MOVOCO MO ON F.FGO_NUMDOC = MO.OCO_NUMDOC AND F.FGO_ESPDOC = "
+"MO.OCO_ESPDOC AND F.FGO_CODEMP = MO.OCO_CODEMP AND F.FGO_CODCLI = MO.OCO_CODCLI \n        LEFT JOIN ADTCLI A ON F.FGO_NU"
+"MDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND F.FGO_CODEMP = A.ADT_CODEMP\n        INNER JOIN CADCLI AS C ON F"
+".FGO_CODCLI = C.CLI_CODCLI\n        INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n        WHERE TRUE\n        A"
+"ND F.FGO_JAFATU = 1\n        AND F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DAY)\n        AND F.FGO_CODEMP IN ('001'"
+", '010', '201')\n        AND M.GER_CODEMP IN ('001', '010', '201')\n        AND M.GER_NUMDOC IS NOT NULL\n        AND V."
+"OPE_CODDEP IN ('014', '002')\n        AND IFNULL(E.FGO_OPEDES, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        AN"
+"D IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        AND DV.AUTOINCREM IS NULL\n        AND M.G"
+"ER_NUMROM IS NULL\n        GROUP BY F.AUTOINCREM\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);

		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row9.DATA = null;
							} else {
	                         		
        	row9.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row9.FGO_NUMPOK = null;
							} else {
	                         		
        	row9.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row9.FGO_NUMDOC = null;
							} else {
	                         		
        	row9.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row9.FGO_CODVEN = null;
							} else {
	                         		
        	row9.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row9.CLI_NOMCLI = null;
							} else {
	                         		
        	row9.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row9.CLI_C_G_C_ = null;
							} else {
	                         		
        	row9.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row9.FGO_VLRCON = null;
							} else {
		                          
            row9.FGO_VLRCON = rs_tDBInput_6.getBigDecimal(7);
            if(rs_tDBInput_6.wasNull()){
                    row9.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row9.TRA_CODTRA = null;
							} else {
	                         		
        	row9.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row9.TRA_NOMTRA = null;
							} else {
	                         		
        	row9.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row9.FGO_NUMFAT = null;
							} else {
	                         		
        	row9.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 11) {
								row9.DIA_PREVIS = null;
							} else {
	                         		
        	row9.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 11, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 12) {
								row9.FGO_SEQSEP = null;
							} else {
	                         		
        	row9.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 12, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 13) {
								row9.STATUS = null;
							} else {
	                         		
        	row9.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 13, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 14) {
								row9.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_6.getString(14) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row9.DT_PEDIDO = rs_tDBInput_6.getTimestamp(14);
					} else {
						row9.DT_PEDIDO = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row9.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 15) {
								row9.GER_NUMROM = null;
							} else {
	                         		
        	row9.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 16) {
								row9.DTAROM = null;
							} else {
										
				if(rs_tDBInput_6.getString(16) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row9.DTAROM = rs_tDBInput_6.getTimestamp(16);
					} else {
						row9.DTAROM = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row9.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 17) {
								row9.DTALAN = null;
							} else {
	                         		
        	row9.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 17, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 18) {
								row9.FGO_TOTRET = null;
							} else {
		                          
            row9.FGO_TOTRET = rs_tDBInput_6.getBigDecimal(18);
            if(rs_tDBInput_6.wasNull()){
                    row9.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 19) {
								row9.FGO_CODEMP = null;
							} else {
	                         		
        	row9.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 19, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 20) {
								row9.ICD_VALFCP = null;
							} else {
		                          
            row9.ICD_VALFCP = rs_tDBInput_6.getBigDecimal(20);
            if(rs_tDBInput_6.wasNull()){
                    row9.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 21) {
								row9.TOTLAN = null;
							} else {
		                          
            row9.TOTLAN = rs_tDBInput_6.getBigDecimal(21);
            if(rs_tDBInput_6.wasNull()){
                    row9.TOTLAN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 22) {
								row9.OPEEXP = null;
							} else {
	                         		
        	row9.OPEEXP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 22, false);
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_4 main ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


  row29 = new row29Struct();
  boolean bHasError_tConvertType_4 = false;             
          try {
              row29.DATA=TypeConvert.String2String(row9.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_NUMPOK=TypeConvert.String2String(row9.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_NUMDOC=TypeConvert.String2String(row9.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_CODVEN=TypeConvert.String2String(row9.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.CLI_NOMCLI=TypeConvert.String2String(row9.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.CLI_C_G_C_=TypeConvert.String2String(row9.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row9.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.TRA_CODTRA=TypeConvert.String2String(row9.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.TRA_NOMTRA=TypeConvert.String2String(row9.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_NUMFAT=TypeConvert.String2String(row9.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.DIA_PREVIS=TypeConvert.String2String(row9.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_SEQSEP=TypeConvert.String2String(row9.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.STATUS=TypeConvert.String2String(row9.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.DT_PEDIDO=TypeConvert.Date2Date(row9.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.GER_NUMROM=TypeConvert.String2String(row9.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.DTAROM=TypeConvert.Date2Date(row9.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.DTALAN=TypeConvert.String2Date(row9.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row9.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.FGO_CODEMP=TypeConvert.String2String(row9.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row9.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row9.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row29.OPEEXP=TypeConvert.String2String(row9.OPEEXP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_4) {row29 = null;}

  nb_line_tConvertType_4 ++ ;

 


	tos_count_tConvertType_4++;

/**
 * [tConvertType_4 main ] stop
 */
	
	/**
	 * [tConvertType_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfout1'
copyOfcopyOfcopyOfcopyOfout1_tmp.DATA = row29.DATA ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMPOK = row29.FGO_NUMPOK ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMDOC = row29.FGO_NUMDOC ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMFAT = row29.FGO_NUMFAT ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_CODVEN = row29.FGO_CODVEN ;
copyOfcopyOfcopyOfcopyOfout1_tmp.CLI_NOMCLI = row29.CLI_NOMCLI ;
copyOfcopyOfcopyOfcopyOfout1_tmp.CLI_C_G_C_ = row29.CLI_C_G_C_ ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_VLRCON = row29.FGO_VLRCON ;
copyOfcopyOfcopyOfcopyOfout1_tmp.TRA_CODTRA = row29.TRA_CODTRA ;
copyOfcopyOfcopyOfcopyOfout1_tmp.TRA_NOMTRA = row29.TRA_NOMTRA ;
copyOfcopyOfcopyOfcopyOfout1_tmp.DIA_PREVIS = row29.DIA_PREVIS ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_SEQSEP = row29.FGO_SEQSEP ;
copyOfcopyOfcopyOfcopyOfout1_tmp.STATUS = row29.STATUS ;
copyOfcopyOfcopyOfcopyOfout1_tmp.DT_PEDIDO = row29.DT_PEDIDO ;
copyOfcopyOfcopyOfcopyOfout1_tmp.GER_NUMROM = row29.GER_NUMROM ;
copyOfcopyOfcopyOfcopyOfout1_tmp.DTAROM = row29.DTAROM ;
copyOfcopyOfcopyOfcopyOfout1_tmp.DTALAN = row29.DTALAN ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_TOTRET = row29.FGO_TOTRET ;
copyOfcopyOfcopyOfcopyOfout1_tmp.FGO_CODEMP = row29.FGO_CODEMP ;
copyOfcopyOfcopyOfcopyOfout1_tmp.ICD_VALFCP = row29.ICD_VALFCP ;
copyOfcopyOfcopyOfcopyOfout1_tmp.TOTLAN = row29.TOTLAN ;
copyOfcopyOfcopyOfcopyOfout1_tmp.OPEEXP = row29.OPEEXP ;
copyOfcopyOfcopyOfcopyOfout1 = copyOfcopyOfcopyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfout1"
if(copyOfcopyOfcopyOfcopyOfout1 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOfout1"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.DATA = copyOfcopyOfcopyOfcopyOfout1.DATA;
			operation_finder_tAggregateRow_1.FGO_NUMPOK = copyOfcopyOfcopyOfcopyOfout1.FGO_NUMPOK;
			operation_finder_tAggregateRow_1.FGO_NUMDOC = copyOfcopyOfcopyOfcopyOfout1.FGO_NUMDOC;
			operation_finder_tAggregateRow_1.FGO_NUMFAT = copyOfcopyOfcopyOfcopyOfout1.FGO_NUMFAT;
			operation_finder_tAggregateRow_1.FGO_CODVEN = copyOfcopyOfcopyOfcopyOfout1.FGO_CODVEN;
			operation_finder_tAggregateRow_1.CLI_NOMCLI = copyOfcopyOfcopyOfcopyOfout1.CLI_NOMCLI;
			operation_finder_tAggregateRow_1.CLI_C_G_C_ = copyOfcopyOfcopyOfcopyOfout1.CLI_C_G_C_;
			operation_finder_tAggregateRow_1.FGO_VLRCON = copyOfcopyOfcopyOfcopyOfout1.FGO_VLRCON;
			operation_finder_tAggregateRow_1.TRA_CODTRA = copyOfcopyOfcopyOfcopyOfout1.TRA_CODTRA;
			operation_finder_tAggregateRow_1.TRA_NOMTRA = copyOfcopyOfcopyOfcopyOfout1.TRA_NOMTRA;
			operation_finder_tAggregateRow_1.DIA_PREVIS = copyOfcopyOfcopyOfcopyOfout1.DIA_PREVIS;
			operation_finder_tAggregateRow_1.FGO_SEQSEP = copyOfcopyOfcopyOfcopyOfout1.FGO_SEQSEP;
			operation_finder_tAggregateRow_1.STATUS = copyOfcopyOfcopyOfcopyOfout1.STATUS;
			operation_finder_tAggregateRow_1.DT_PEDIDO = copyOfcopyOfcopyOfcopyOfout1.DT_PEDIDO;
			operation_finder_tAggregateRow_1.GER_NUMROM = copyOfcopyOfcopyOfcopyOfout1.GER_NUMROM;
			operation_finder_tAggregateRow_1.DTAROM = copyOfcopyOfcopyOfcopyOfout1.DTAROM;
			operation_finder_tAggregateRow_1.FGO_TOTRET = copyOfcopyOfcopyOfcopyOfout1.FGO_TOTRET;
			operation_finder_tAggregateRow_1.FGO_CODEMP = copyOfcopyOfcopyOfcopyOfout1.FGO_CODEMP;
			operation_finder_tAggregateRow_1.ICD_VALFCP = copyOfcopyOfcopyOfcopyOfout1.ICD_VALFCP;
			operation_finder_tAggregateRow_1.TOTLAN = copyOfcopyOfcopyOfcopyOfout1.TOTLAN;
			operation_finder_tAggregateRow_1.OPEEXP = copyOfcopyOfcopyOfcopyOfout1.OPEEXP;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	
		boolean isFirstAdd_tAggregateRow_1 = false;
	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.DATA = operation_finder_tAggregateRow_1.DATA;
				operation_result_tAggregateRow_1.FGO_NUMPOK = operation_finder_tAggregateRow_1.FGO_NUMPOK;
				operation_result_tAggregateRow_1.FGO_NUMDOC = operation_finder_tAggregateRow_1.FGO_NUMDOC;
				operation_result_tAggregateRow_1.FGO_NUMFAT = operation_finder_tAggregateRow_1.FGO_NUMFAT;
				operation_result_tAggregateRow_1.FGO_CODVEN = operation_finder_tAggregateRow_1.FGO_CODVEN;
				operation_result_tAggregateRow_1.CLI_NOMCLI = operation_finder_tAggregateRow_1.CLI_NOMCLI;
				operation_result_tAggregateRow_1.CLI_C_G_C_ = operation_finder_tAggregateRow_1.CLI_C_G_C_;
				operation_result_tAggregateRow_1.FGO_VLRCON = operation_finder_tAggregateRow_1.FGO_VLRCON;
				operation_result_tAggregateRow_1.TRA_CODTRA = operation_finder_tAggregateRow_1.TRA_CODTRA;
				operation_result_tAggregateRow_1.TRA_NOMTRA = operation_finder_tAggregateRow_1.TRA_NOMTRA;
				operation_result_tAggregateRow_1.DIA_PREVIS = operation_finder_tAggregateRow_1.DIA_PREVIS;
				operation_result_tAggregateRow_1.FGO_SEQSEP = operation_finder_tAggregateRow_1.FGO_SEQSEP;
				operation_result_tAggregateRow_1.STATUS = operation_finder_tAggregateRow_1.STATUS;
				operation_result_tAggregateRow_1.DT_PEDIDO = operation_finder_tAggregateRow_1.DT_PEDIDO;
				operation_result_tAggregateRow_1.GER_NUMROM = operation_finder_tAggregateRow_1.GER_NUMROM;
				operation_result_tAggregateRow_1.DTAROM = operation_finder_tAggregateRow_1.DTAROM;
				operation_result_tAggregateRow_1.FGO_TOTRET = operation_finder_tAggregateRow_1.FGO_TOTRET;
				operation_result_tAggregateRow_1.FGO_CODEMP = operation_finder_tAggregateRow_1.FGO_CODEMP;
				operation_result_tAggregateRow_1.ICD_VALFCP = operation_finder_tAggregateRow_1.ICD_VALFCP;
				operation_result_tAggregateRow_1.TOTLAN = operation_finder_tAggregateRow_1.TOTLAN;
				operation_result_tAggregateRow_1.OPEEXP = operation_finder_tAggregateRow_1.OPEEXP;
				
		
		
			isFirstAdd_tAggregateRow_1 = true;
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(copyOfcopyOfcopyOfcopyOfout1.DTALAN != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.DTALAN_max == null || copyOfcopyOfcopyOfcopyOfout1.DTALAN.compareTo(operation_result_tAggregateRow_1.DTALAN_max) > 0
						
					) {
						operation_result_tAggregateRow_1.DTALAN_max = copyOfcopyOfcopyOfcopyOfout1.DTALAN;
					}
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfout1"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tConvertType_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tConvertType_4 end ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	
      globalMap.put("tConvertType_4_NB_LINE", nb_line_tConvertType_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tConvertType_4", true);
end_Hash.put("tConvertType_4", System.currentTimeMillis());




/**
 * [tConvertType_4 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row21.DATA = aggregated_row_tAggregateRow_1.DATA;
            				    
            				    row21.FGO_NUMPOK = aggregated_row_tAggregateRow_1.FGO_NUMPOK;
            				    
            				    row21.FGO_NUMDOC = aggregated_row_tAggregateRow_1.FGO_NUMDOC;
            				    
            				    row21.FGO_NUMFAT = aggregated_row_tAggregateRow_1.FGO_NUMFAT;
            				    
            				    row21.FGO_CODVEN = aggregated_row_tAggregateRow_1.FGO_CODVEN;
            				    
            				    row21.CLI_NOMCLI = aggregated_row_tAggregateRow_1.CLI_NOMCLI;
            				    
            				    row21.CLI_C_G_C_ = aggregated_row_tAggregateRow_1.CLI_C_G_C_;
            				    
            				    row21.FGO_VLRCON = aggregated_row_tAggregateRow_1.FGO_VLRCON;
            				    
            				    row21.TRA_CODTRA = aggregated_row_tAggregateRow_1.TRA_CODTRA;
            				    
            				    row21.TRA_NOMTRA = aggregated_row_tAggregateRow_1.TRA_NOMTRA;
            				    
            				    row21.DIA_PREVIS = aggregated_row_tAggregateRow_1.DIA_PREVIS;
            				    
            				    row21.FGO_SEQSEP = aggregated_row_tAggregateRow_1.FGO_SEQSEP;
            				    
            				    row21.STATUS = aggregated_row_tAggregateRow_1.STATUS;
            				    
            				    row21.DT_PEDIDO = aggregated_row_tAggregateRow_1.DT_PEDIDO;
            				    
            				    row21.GER_NUMROM = aggregated_row_tAggregateRow_1.GER_NUMROM;
            				    
            				    row21.DTAROM = aggregated_row_tAggregateRow_1.DTAROM;
            				    
                                row21.DTALAN = aggregated_row_tAggregateRow_1.DTALAN_max;
            				    row21.FGO_TOTRET = aggregated_row_tAggregateRow_1.FGO_TOTRET;
            				    
            				    row21.FGO_CODEMP = aggregated_row_tAggregateRow_1.FGO_CODEMP;
            				    
            				    row21.ICD_VALFCP = aggregated_row_tAggregateRow_1.ICD_VALFCP;
            				    
            				    row21.TOTLAN = aggregated_row_tAggregateRow_1.TOTLAN;
            				    
            				    row21.OPEEXP = aggregated_row_tAggregateRow_1.OPEEXP;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					



    
		row21Struct oneRow_tHashOutput_7 = new row21Struct();
				
					oneRow_tHashOutput_7.DATA = row21.DATA;
					oneRow_tHashOutput_7.FGO_NUMPOK = row21.FGO_NUMPOK;
					oneRow_tHashOutput_7.FGO_NUMDOC = row21.FGO_NUMDOC;
					oneRow_tHashOutput_7.FGO_NUMFAT = row21.FGO_NUMFAT;
					oneRow_tHashOutput_7.FGO_CODVEN = row21.FGO_CODVEN;
					oneRow_tHashOutput_7.CLI_NOMCLI = row21.CLI_NOMCLI;
					oneRow_tHashOutput_7.CLI_C_G_C_ = row21.CLI_C_G_C_;
					oneRow_tHashOutput_7.FGO_VLRCON = row21.FGO_VLRCON;
					oneRow_tHashOutput_7.TRA_CODTRA = row21.TRA_CODTRA;
					oneRow_tHashOutput_7.TRA_NOMTRA = row21.TRA_NOMTRA;
					oneRow_tHashOutput_7.DIA_PREVIS = row21.DIA_PREVIS;
					oneRow_tHashOutput_7.FGO_SEQSEP = row21.FGO_SEQSEP;
					oneRow_tHashOutput_7.STATUS = row21.STATUS;
					oneRow_tHashOutput_7.DT_PEDIDO = row21.DT_PEDIDO;
					oneRow_tHashOutput_7.GER_NUMROM = row21.GER_NUMROM;
					oneRow_tHashOutput_7.DTAROM = row21.DTAROM;
					oneRow_tHashOutput_7.DTALAN = row21.DTALAN;
					oneRow_tHashOutput_7.FGO_TOTRET = row21.FGO_TOTRET;
					oneRow_tHashOutput_7.FGO_CODEMP = row21.FGO_CODEMP;
					oneRow_tHashOutput_7.ICD_VALFCP = row21.ICD_VALFCP;
					oneRow_tHashOutput_7.TOTLAN = row21.TOTLAN;
					oneRow_tHashOutput_7.OPEEXP = row21.OPEEXP;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tConvertType_4 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
row28Struct row28 = new row28Struct();
copyOfcopyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfcopyOfout1 = new copyOfcopyOfcopyOfcopyOfcopyOfout1Struct();
row23Struct row23 = new row23Struct();






	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfout1");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String DATA;
    				String FGO_NUMPOK;
    				String FGO_NUMDOC;
    				String FGO_NUMFAT;
    				String FGO_CODVEN;
    				String CLI_NOMCLI;
    				String CLI_C_G_C_;
    				BigDecimal FGO_VLRCON;
    				String TRA_CODTRA;
    				String TRA_NOMTRA;
    				String DIA_PREVIS;
    				String FGO_SEQSEP;
    				String STATUS;
    				java.util.Date DT_PEDIDO;
    				String GER_NUMROM;
    				java.util.Date DTAROM;
    				BigDecimal FGO_TOTRET;
    				String FGO_CODEMP;
    				BigDecimal ICD_VALFCP;
    				BigDecimal TOTLAN;
    				String OPEEXP;
         			java.util.Date DTALAN_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATA == null) ? 0 : this.DATA.hashCode());
							
							result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
							
							result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
							
							result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
							
							result = prime * result + ((this.FGO_CODVEN == null) ? 0 : this.FGO_CODVEN.hashCode());
							
							result = prime * result + ((this.CLI_NOMCLI == null) ? 0 : this.CLI_NOMCLI.hashCode());
							
							result = prime * result + ((this.CLI_C_G_C_ == null) ? 0 : this.CLI_C_G_C_.hashCode());
							
							result = prime * result + ((this.FGO_VLRCON == null) ? 0 : this.FGO_VLRCON.hashCode());
							
							result = prime * result + ((this.TRA_CODTRA == null) ? 0 : this.TRA_CODTRA.hashCode());
							
							result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
							
							result = prime * result + ((this.DIA_PREVIS == null) ? 0 : this.DIA_PREVIS.hashCode());
							
							result = prime * result + ((this.FGO_SEQSEP == null) ? 0 : this.FGO_SEQSEP.hashCode());
							
							result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
							
							result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
							
							result = prime * result + ((this.GER_NUMROM == null) ? 0 : this.GER_NUMROM.hashCode());
							
							result = prime * result + ((this.DTAROM == null) ? 0 : this.DTAROM.hashCode());
							
							result = prime * result + ((this.FGO_TOTRET == null) ? 0 : this.FGO_TOTRET.hashCode());
							
							result = prime * result + ((this.FGO_CODEMP == null) ? 0 : this.FGO_CODEMP.hashCode());
							
							result = prime * result + ((this.ICD_VALFCP == null) ? 0 : this.ICD_VALFCP.hashCode());
							
							result = prime * result + ((this.TOTLAN == null) ? 0 : this.TOTLAN.hashCode());
							
							result = prime * result + ((this.OPEEXP == null) ? 0 : this.OPEEXP.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.DATA == null) {
								if (other.DATA != null) 
									return false;
							} else if (!this.DATA.equals(other.DATA)) 
								return false;
						
							if (this.FGO_NUMPOK == null) {
								if (other.FGO_NUMPOK != null) 
									return false;
							} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK)) 
								return false;
						
							if (this.FGO_NUMDOC == null) {
								if (other.FGO_NUMDOC != null) 
									return false;
							} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC)) 
								return false;
						
							if (this.FGO_NUMFAT == null) {
								if (other.FGO_NUMFAT != null) 
									return false;
							} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT)) 
								return false;
						
							if (this.FGO_CODVEN == null) {
								if (other.FGO_CODVEN != null) 
									return false;
							} else if (!this.FGO_CODVEN.equals(other.FGO_CODVEN)) 
								return false;
						
							if (this.CLI_NOMCLI == null) {
								if (other.CLI_NOMCLI != null) 
									return false;
							} else if (!this.CLI_NOMCLI.equals(other.CLI_NOMCLI)) 
								return false;
						
							if (this.CLI_C_G_C_ == null) {
								if (other.CLI_C_G_C_ != null) 
									return false;
							} else if (!this.CLI_C_G_C_.equals(other.CLI_C_G_C_)) 
								return false;
						
							if (this.FGO_VLRCON == null) {
								if (other.FGO_VLRCON != null) 
									return false;
							} else if (!this.FGO_VLRCON.equals(other.FGO_VLRCON)) 
								return false;
						
							if (this.TRA_CODTRA == null) {
								if (other.TRA_CODTRA != null) 
									return false;
							} else if (!this.TRA_CODTRA.equals(other.TRA_CODTRA)) 
								return false;
						
							if (this.TRA_NOMTRA == null) {
								if (other.TRA_NOMTRA != null) 
									return false;
							} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA)) 
								return false;
						
							if (this.DIA_PREVIS == null) {
								if (other.DIA_PREVIS != null) 
									return false;
							} else if (!this.DIA_PREVIS.equals(other.DIA_PREVIS)) 
								return false;
						
							if (this.FGO_SEQSEP == null) {
								if (other.FGO_SEQSEP != null) 
									return false;
							} else if (!this.FGO_SEQSEP.equals(other.FGO_SEQSEP)) 
								return false;
						
							if (this.STATUS == null) {
								if (other.STATUS != null) 
									return false;
							} else if (!this.STATUS.equals(other.STATUS)) 
								return false;
						
							if (this.DT_PEDIDO == null) {
								if (other.DT_PEDIDO != null) 
									return false;
							} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO)) 
								return false;
						
							if (this.GER_NUMROM == null) {
								if (other.GER_NUMROM != null) 
									return false;
							} else if (!this.GER_NUMROM.equals(other.GER_NUMROM)) 
								return false;
						
							if (this.DTAROM == null) {
								if (other.DTAROM != null) 
									return false;
							} else if (!this.DTAROM.equals(other.DTAROM)) 
								return false;
						
							if (this.FGO_TOTRET == null) {
								if (other.FGO_TOTRET != null) 
									return false;
							} else if (!this.FGO_TOTRET.equals(other.FGO_TOTRET)) 
								return false;
						
							if (this.FGO_CODEMP == null) {
								if (other.FGO_CODEMP != null) 
									return false;
							} else if (!this.FGO_CODEMP.equals(other.FGO_CODEMP)) 
								return false;
						
							if (this.ICD_VALFCP == null) {
								if (other.ICD_VALFCP != null) 
									return false;
							} else if (!this.ICD_VALFCP.equals(other.ICD_VALFCP)) 
								return false;
						
							if (this.TOTLAN == null) {
								if (other.TOTLAN != null) 
									return false;
							} else if (!this.TOTLAN.equals(other.TOTLAN)) 
								return false;
						
							if (this.OPEEXP == null) {
								if (other.OPEEXP != null) 
									return false;
							} else if (!this.OPEEXP.equals(other.OPEEXP)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tConvertType_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_3", false);
		start_Hash.put("tConvertType_3", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tConvertType_3 = 0;
		
	int nb_line_tConvertType_3 = 0;  
 



/**
 * [tConvertType_3 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";
	
	
		int tos_count_tDBInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
		    calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "-- EM SEPARACAO\nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, FGO_NUMDOC, FGO_NUMFAT,FGO_CODVEN "
+",C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA, T.TRA_NOMTRA,  \n		IF(FGO_PREVIS = CURDATE(),'HOJE',IF(FGO_PREVIS"
+"<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, E.FGO_SEQSEP,  'EM SEPARAÇÃO' as STATUS,\n		CONCAT(F.FGO_DTAENT,' ',F.FGO_H"
+"ORENT) DT_PEDIDO,\n		MG.GER_NUMROM, \n		CONCAT(MG.GER_DTAROM,' ',MG.GER_HORROM) as DTAROM,\n		DATE_FORMAT(A.ADT_DTALAN, "
+"'%d-%m-%Y') AS DTALAN,\n		F.FGO_TOTRET,\n		F.FGO_CODEMP,\n		R.ICD_VALFCP,\n		SUM(IF(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VAL"
+"LAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) TOTLAN\n		FROM FATGOR AS F\n		INNER JOIN CADCLI AS C ON F.FGO_CODCLI = C.CLI_C"
+"ODCLI\n		INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n		INNER JOIN EXTGOR AS E ON F.AUTOINCREM = E.FGO_SEQFGO"
+"\n		INNER JOIN CADOPE AS V ON F.FGO_CODVEN = V.OPE_CODOPE\n		INNER JOIN FATDOR D ON F.AUTOINCREM = D.FDO_SEQGER \n		LEFT "
+"JOIN DORICD AS R ON D.AUTOINCREM = R.ICD_SEQFDO\n		LEFT JOIN MOVGER MG ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT "
+"= MG.GER_ESPDOC AND F.FGO_EMPFAT = MG.GER_CODEMP AND F.FGO_CODCLI = MG.GER_CODCLI \n		LEFT JOIN MOVDET DV ON MG.GER_NUMD"
+"OC = DV.DET_DOCDEV AND DV.DET_ESPDEV = MG.GER_ESPDOC AND DV.DET_EMPDEV = MG.GER_CODEMP \n        LEFT JOIN ADTCLI A ON F"
+".FGO_NUMDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND F.FGO_CODEMP = A.ADT_CODEMP\n        WHERE F.FGO_DTAENT >"
+" DATE_SUB(CURDATE(), INTERVAL 60 DAY)\n        AND F.FGO_CODEMP IN ('001', '010', '201')\n        AND MG.GER_DTLBEX IS N"
+"ULL\n        AND MG.GER_DTAROM IS NULL\n        AND DV.AUTOINCREM IS NULL\n        AND F.FGO_ESPDOC = 'PD'\n        AND "
+"F.FGO_MOTBAI IS NULL\n        AND V.OPE_CODDEP IN ('014', '002')\n        AND IFNULL(F.FGO_OPELIB, F.FGO_DTALIB) IS NOT "
+"NULL\n        AND IFNULL(E.FGO_DTIMSE, E.FGO_ONDADT) IS NOT NULL\n        AND E.FGO_OPEEXP IS NULL\n        AND E.FGO_DT"
+"BXSE IS NULL \n        AND IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '804', 'C16', '880', '881') \n        AND IFNULL(E.FGO"
+"_OPEDES, 0) NOT IN ('599', '804', 'C16', '880', '881')\n        GROUP BY F.AUTOINCREM\n        HAVING TOTLAN >= F.FGO_VL"
+"RCON\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);

		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row18.DATA = null;
							} else {
	                         		
        	row18.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row18.FGO_NUMPOK = null;
							} else {
	                         		
        	row18.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row18.FGO_NUMDOC = null;
							} else {
	                         		
        	row18.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row18.FGO_NUMFAT = null;
							} else {
	                         		
        	row18.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row18.FGO_CODVEN = null;
							} else {
	                         		
        	row18.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row18.CLI_NOMCLI = null;
							} else {
	                         		
        	row18.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row18.CLI_C_G_C_ = null;
							} else {
	                         		
        	row18.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row18.FGO_VLRCON = null;
							} else {
		                          
            row18.FGO_VLRCON = rs_tDBInput_7.getBigDecimal(8);
            if(rs_tDBInput_7.wasNull()){
                    row18.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row18.TRA_CODTRA = null;
							} else {
	                         		
        	row18.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row18.TRA_NOMTRA = null;
							} else {
	                         		
        	row18.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row18.DIA_PREVIS = null;
							} else {
	                         		
        	row18.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_7, 11, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								row18.FGO_SEQSEP = null;
							} else {
	                         		
        	row18.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_7, 12, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								row18.STATUS = null;
							} else {
	                         		
        	row18.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_7, 13, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								row18.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_7.getString(14) != null) {
					String dateString_tDBInput_7 = rs_tDBInput_7.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_7) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_7)) {
						row18.DT_PEDIDO = rs_tDBInput_7.getTimestamp(14);
					} else {
						row18.DT_PEDIDO = (java.util.Date) year0_tDBInput_7.clone();
					}
				} else {
					row18.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								row18.GER_NUMROM = null;
							} else {
	                         		
        	row18.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_7, 15, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								row18.DTAROM = null;
							} else {
										
				if(rs_tDBInput_7.getString(16) != null) {
					String dateString_tDBInput_7 = rs_tDBInput_7.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_7) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_7)) {
						row18.DTAROM = rs_tDBInput_7.getTimestamp(16);
					} else {
						row18.DTAROM = (java.util.Date) year0_tDBInput_7.clone();
					}
				} else {
					row18.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_7 < 17) {
								row18.DTALAN = null;
							} else {
	                         		
        	row18.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_7, 17, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 18) {
								row18.FGO_TOTRET = null;
							} else {
		                          
            row18.FGO_TOTRET = rs_tDBInput_7.getBigDecimal(18);
            if(rs_tDBInput_7.wasNull()){
                    row18.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 19) {
								row18.FGO_CODEMP = null;
							} else {
	                         		
        	row18.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_7, 19, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 20) {
								row18.ICD_VALFCP = null;
							} else {
		                          
            row18.ICD_VALFCP = rs_tDBInput_7.getBigDecimal(20);
            if(rs_tDBInput_7.wasNull()){
                    row18.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 21) {
								row18.TOTLAN = null;
							} else {
		                          
            row18.TOTLAN = rs_tDBInput_7.getBigDecimal(21);
            if(rs_tDBInput_7.wasNull()){
                    row18.TOTLAN = null;
            }
		                    }
					

 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_3 main ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


  row28 = new row28Struct();
  boolean bHasError_tConvertType_3 = false;             
          try {
              row28.DATA=TypeConvert.String2String(row18.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_NUMPOK=TypeConvert.String2String(row18.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_NUMDOC=TypeConvert.String2String(row18.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_NUMFAT=TypeConvert.String2String(row18.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_CODVEN=TypeConvert.String2String(row18.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CLI_NOMCLI=TypeConvert.String2String(row18.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CLI_C_G_C_=TypeConvert.String2String(row18.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row18.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.TRA_CODTRA=TypeConvert.String2String(row18.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.TRA_NOMTRA=TypeConvert.String2String(row18.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DIA_PREVIS=TypeConvert.String2String(row18.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_SEQSEP=TypeConvert.String2String(row18.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.STATUS=TypeConvert.String2String(row18.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DT_PEDIDO=TypeConvert.Date2Date(row18.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.GER_NUMROM=TypeConvert.String2String(row18.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DTAROM=TypeConvert.Date2Date(row18.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DTALAN=TypeConvert.String2Date(row18.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row18.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.FGO_CODEMP=TypeConvert.String2String(row18.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row18.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row18.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_3) {row28 = null;}

  nb_line_tConvertType_3 ++ ;

 


	tos_count_tConvertType_3++;

/**
 * [tConvertType_3 main ] stop
 */
	
	/**
	 * [tConvertType_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfout1'
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.DATA = row28.DATA ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMPOK = row28.FGO_NUMPOK ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMDOC = row28.FGO_NUMDOC ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_NUMFAT = row28.FGO_NUMFAT ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_CODVEN = row28.FGO_CODVEN ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.CLI_NOMCLI = row28.CLI_NOMCLI ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.CLI_C_G_C_ = row28.CLI_C_G_C_ ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_VLRCON = row28.FGO_VLRCON ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.TRA_CODTRA = row28.TRA_CODTRA ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.TRA_NOMTRA = row28.TRA_NOMTRA ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.DIA_PREVIS = row28.DIA_PREVIS ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_SEQSEP = row28.FGO_SEQSEP ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.STATUS = row28.STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.DT_PEDIDO = row28.DT_PEDIDO ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.GER_NUMROM = row28.GER_NUMROM ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.DTAROM = row28.DTAROM ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.DTALAN = row28.DTALAN ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_TOTRET = row28.FGO_TOTRET ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.FGO_CODEMP = row28.FGO_CODEMP ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.ICD_VALFCP = row28.ICD_VALFCP ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.TOTLAN = row28.TOTLAN ;
copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp.OPEEXP = null;
copyOfcopyOfcopyOfcopyOfcopyOfout1 = copyOfcopyOfcopyOfcopyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfout1"
if(copyOfcopyOfcopyOfcopyOfcopyOfout1 != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOfcopyOfout1"
						
						);
					}
					
	
operation_finder_tAggregateRow_3.DATA = copyOfcopyOfcopyOfcopyOfcopyOfout1.DATA;
			operation_finder_tAggregateRow_3.FGO_NUMPOK = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_NUMPOK;
			operation_finder_tAggregateRow_3.FGO_NUMDOC = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_NUMDOC;
			operation_finder_tAggregateRow_3.FGO_NUMFAT = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_NUMFAT;
			operation_finder_tAggregateRow_3.FGO_CODVEN = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_CODVEN;
			operation_finder_tAggregateRow_3.CLI_NOMCLI = copyOfcopyOfcopyOfcopyOfcopyOfout1.CLI_NOMCLI;
			operation_finder_tAggregateRow_3.CLI_C_G_C_ = copyOfcopyOfcopyOfcopyOfcopyOfout1.CLI_C_G_C_;
			operation_finder_tAggregateRow_3.FGO_VLRCON = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_VLRCON;
			operation_finder_tAggregateRow_3.TRA_CODTRA = copyOfcopyOfcopyOfcopyOfcopyOfout1.TRA_CODTRA;
			operation_finder_tAggregateRow_3.TRA_NOMTRA = copyOfcopyOfcopyOfcopyOfcopyOfout1.TRA_NOMTRA;
			operation_finder_tAggregateRow_3.DIA_PREVIS = copyOfcopyOfcopyOfcopyOfcopyOfout1.DIA_PREVIS;
			operation_finder_tAggregateRow_3.FGO_SEQSEP = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_SEQSEP;
			operation_finder_tAggregateRow_3.STATUS = copyOfcopyOfcopyOfcopyOfcopyOfout1.STATUS;
			operation_finder_tAggregateRow_3.DT_PEDIDO = copyOfcopyOfcopyOfcopyOfcopyOfout1.DT_PEDIDO;
			operation_finder_tAggregateRow_3.GER_NUMROM = copyOfcopyOfcopyOfcopyOfcopyOfout1.GER_NUMROM;
			operation_finder_tAggregateRow_3.DTAROM = copyOfcopyOfcopyOfcopyOfcopyOfout1.DTAROM;
			operation_finder_tAggregateRow_3.FGO_TOTRET = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_TOTRET;
			operation_finder_tAggregateRow_3.FGO_CODEMP = copyOfcopyOfcopyOfcopyOfcopyOfout1.FGO_CODEMP;
			operation_finder_tAggregateRow_3.ICD_VALFCP = copyOfcopyOfcopyOfcopyOfcopyOfout1.ICD_VALFCP;
			operation_finder_tAggregateRow_3.TOTLAN = copyOfcopyOfcopyOfcopyOfcopyOfout1.TOTLAN;
			operation_finder_tAggregateRow_3.OPEEXP = copyOfcopyOfcopyOfcopyOfcopyOfout1.OPEEXP;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	
		boolean isFirstAdd_tAggregateRow_3 = false;
	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.DATA = operation_finder_tAggregateRow_3.DATA;
				operation_result_tAggregateRow_3.FGO_NUMPOK = operation_finder_tAggregateRow_3.FGO_NUMPOK;
				operation_result_tAggregateRow_3.FGO_NUMDOC = operation_finder_tAggregateRow_3.FGO_NUMDOC;
				operation_result_tAggregateRow_3.FGO_NUMFAT = operation_finder_tAggregateRow_3.FGO_NUMFAT;
				operation_result_tAggregateRow_3.FGO_CODVEN = operation_finder_tAggregateRow_3.FGO_CODVEN;
				operation_result_tAggregateRow_3.CLI_NOMCLI = operation_finder_tAggregateRow_3.CLI_NOMCLI;
				operation_result_tAggregateRow_3.CLI_C_G_C_ = operation_finder_tAggregateRow_3.CLI_C_G_C_;
				operation_result_tAggregateRow_3.FGO_VLRCON = operation_finder_tAggregateRow_3.FGO_VLRCON;
				operation_result_tAggregateRow_3.TRA_CODTRA = operation_finder_tAggregateRow_3.TRA_CODTRA;
				operation_result_tAggregateRow_3.TRA_NOMTRA = operation_finder_tAggregateRow_3.TRA_NOMTRA;
				operation_result_tAggregateRow_3.DIA_PREVIS = operation_finder_tAggregateRow_3.DIA_PREVIS;
				operation_result_tAggregateRow_3.FGO_SEQSEP = operation_finder_tAggregateRow_3.FGO_SEQSEP;
				operation_result_tAggregateRow_3.STATUS = operation_finder_tAggregateRow_3.STATUS;
				operation_result_tAggregateRow_3.DT_PEDIDO = operation_finder_tAggregateRow_3.DT_PEDIDO;
				operation_result_tAggregateRow_3.GER_NUMROM = operation_finder_tAggregateRow_3.GER_NUMROM;
				operation_result_tAggregateRow_3.DTAROM = operation_finder_tAggregateRow_3.DTAROM;
				operation_result_tAggregateRow_3.FGO_TOTRET = operation_finder_tAggregateRow_3.FGO_TOTRET;
				operation_result_tAggregateRow_3.FGO_CODEMP = operation_finder_tAggregateRow_3.FGO_CODEMP;
				operation_result_tAggregateRow_3.ICD_VALFCP = operation_finder_tAggregateRow_3.ICD_VALFCP;
				operation_result_tAggregateRow_3.TOTLAN = operation_finder_tAggregateRow_3.TOTLAN;
				operation_result_tAggregateRow_3.OPEEXP = operation_finder_tAggregateRow_3.OPEEXP;
				
		
		
			isFirstAdd_tAggregateRow_3 = true;
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
				if(copyOfcopyOfcopyOfcopyOfcopyOfout1.DTALAN != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_3.DTALAN_max == null || copyOfcopyOfcopyOfcopyOfcopyOfout1.DTALAN.compareTo(operation_result_tAggregateRow_3.DTALAN_max) > 0
						
					) {
						operation_result_tAggregateRow_3.DTALAN_max = copyOfcopyOfcopyOfcopyOfcopyOfout1.DTALAN;
					}
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfout1"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tConvertType_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tConvertType_3 end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
      globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tConvertType_3", true);
end_Hash.put("tConvertType_3", System.currentTimeMillis());




/**
 * [tConvertType_3 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row23Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row23Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

            				    row23.DATA = aggregated_row_tAggregateRow_3.DATA;
            				    
            				    row23.FGO_NUMPOK = aggregated_row_tAggregateRow_3.FGO_NUMPOK;
            				    
            				    row23.FGO_NUMDOC = aggregated_row_tAggregateRow_3.FGO_NUMDOC;
            				    
            				    row23.FGO_NUMFAT = aggregated_row_tAggregateRow_3.FGO_NUMFAT;
            				    
            				    row23.FGO_CODVEN = aggregated_row_tAggregateRow_3.FGO_CODVEN;
            				    
            				    row23.CLI_NOMCLI = aggregated_row_tAggregateRow_3.CLI_NOMCLI;
            				    
            				    row23.CLI_C_G_C_ = aggregated_row_tAggregateRow_3.CLI_C_G_C_;
            				    
            				    row23.FGO_VLRCON = aggregated_row_tAggregateRow_3.FGO_VLRCON;
            				    
            				    row23.TRA_CODTRA = aggregated_row_tAggregateRow_3.TRA_CODTRA;
            				    
            				    row23.TRA_NOMTRA = aggregated_row_tAggregateRow_3.TRA_NOMTRA;
            				    
            				    row23.DIA_PREVIS = aggregated_row_tAggregateRow_3.DIA_PREVIS;
            				    
            				    row23.FGO_SEQSEP = aggregated_row_tAggregateRow_3.FGO_SEQSEP;
            				    
            				    row23.STATUS = aggregated_row_tAggregateRow_3.STATUS;
            				    
            				    row23.DT_PEDIDO = aggregated_row_tAggregateRow_3.DT_PEDIDO;
            				    
            				    row23.GER_NUMROM = aggregated_row_tAggregateRow_3.GER_NUMROM;
            				    
            				    row23.DTAROM = aggregated_row_tAggregateRow_3.DTAROM;
            				    
                                row23.DTALAN = aggregated_row_tAggregateRow_3.DTALAN_max;
            				    row23.FGO_TOTRET = aggregated_row_tAggregateRow_3.FGO_TOTRET;
            				    
            				    row23.FGO_CODEMP = aggregated_row_tAggregateRow_3.FGO_CODEMP;
            				    
            				    row23.ICD_VALFCP = aggregated_row_tAggregateRow_3.ICD_VALFCP;
            				    
            				    row23.TOTLAN = aggregated_row_tAggregateRow_3.TOTLAN;
            				    
            				    row23.OPEEXP = aggregated_row_tAggregateRow_3.OPEEXP;
            				    

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					



    
		row23Struct oneRow_tHashOutput_8 = new row23Struct();
				
					oneRow_tHashOutput_8.DATA = row23.DATA;
					oneRow_tHashOutput_8.FGO_NUMPOK = row23.FGO_NUMPOK;
					oneRow_tHashOutput_8.FGO_NUMDOC = row23.FGO_NUMDOC;
					oneRow_tHashOutput_8.FGO_NUMFAT = row23.FGO_NUMFAT;
					oneRow_tHashOutput_8.FGO_CODVEN = row23.FGO_CODVEN;
					oneRow_tHashOutput_8.CLI_NOMCLI = row23.CLI_NOMCLI;
					oneRow_tHashOutput_8.CLI_C_G_C_ = row23.CLI_C_G_C_;
					oneRow_tHashOutput_8.FGO_VLRCON = row23.FGO_VLRCON;
					oneRow_tHashOutput_8.TRA_CODTRA = row23.TRA_CODTRA;
					oneRow_tHashOutput_8.TRA_NOMTRA = row23.TRA_NOMTRA;
					oneRow_tHashOutput_8.DIA_PREVIS = row23.DIA_PREVIS;
					oneRow_tHashOutput_8.FGO_SEQSEP = row23.FGO_SEQSEP;
					oneRow_tHashOutput_8.STATUS = row23.STATUS;
					oneRow_tHashOutput_8.DT_PEDIDO = row23.DT_PEDIDO;
					oneRow_tHashOutput_8.GER_NUMROM = row23.GER_NUMROM;
					oneRow_tHashOutput_8.DTAROM = row23.DTAROM;
					oneRow_tHashOutput_8.DTALAN = row23.DTALAN;
					oneRow_tHashOutput_8.FGO_TOTRET = row23.FGO_TOTRET;
					oneRow_tHashOutput_8.FGO_CODEMP = row23.FGO_CODEMP;
					oneRow_tHashOutput_8.ICD_VALFCP = row23.ICD_VALFCP;
					oneRow_tHashOutput_8.TOTLAN = row23.TOTLAN;
					oneRow_tHashOutput_8.OPEEXP = row23.OPEEXP;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tConvertType_3 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1_0Struct implements routines.system.IPersistableRow<copyOfout1_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 3;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return false;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 10;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 10;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 20;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				
			    public String OPEEXP;

				public String getOPEEXP () {
					return this.OPEEXP;
				}

				public Boolean OPEEXPIsNullable(){
				    return true;
				}
				public Boolean OPEEXPIsKey(){
				    return false;
				}
				public Integer OPEEXPLength(){
				    return 5;
				}
				public Integer OPEEXPPrecision(){
				    return null;
				}
				public String OPEEXPDefault(){
				
					return null;
				
				}
				public String OPEEXPComment(){
				
				    return "";
				
				}
				public String OPEEXPPattern(){
				
					return "";
				
				}
				public String OPEEXPOriginalDbColumnName(){
				
					return "OPEEXP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
					this.OPEEXP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
					// String
				
						writeString(this.OPEEXP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
		sb.append(",OPEEXP="+OPEEXP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];

	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public java.util.Date DTALAN;

				public java.util.Date getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readDate(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+String.valueOf(DTALAN));
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 30;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 50;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return true;
				}
				public Integer FGO_NUMDOCLength(){
				    return 15;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 15;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String CLI_NOMCLI;

				public String getCLI_NOMCLI () {
					return this.CLI_NOMCLI;
				}

				public Boolean CLI_NOMCLIIsNullable(){
				    return true;
				}
				public Boolean CLI_NOMCLIIsKey(){
				    return false;
				}
				public Integer CLI_NOMCLILength(){
				    return 100;
				}
				public Integer CLI_NOMCLIPrecision(){
				    return null;
				}
				public String CLI_NOMCLIDefault(){
				
					return null;
				
				}
				public String CLI_NOMCLIComment(){
				
				    return "";
				
				}
				public String CLI_NOMCLIPattern(){
				
					return "";
				
				}
				public String CLI_NOMCLIOriginalDbColumnName(){
				
					return "CLI_NOMCLI";
				
				}

				
			    public String CLI_C_G_C_;

				public String getCLI_C_G_C_ () {
					return this.CLI_C_G_C_;
				}

				public Boolean CLI_C_G_C_IsNullable(){
				    return true;
				}
				public Boolean CLI_C_G_C_IsKey(){
				    return false;
				}
				public Integer CLI_C_G_C_Length(){
				    return 18;
				}
				public Integer CLI_C_G_C_Precision(){
				    return null;
				}
				public String CLI_C_G_C_Default(){
				
					return null;
				
				}
				public String CLI_C_G_C_Comment(){
				
				    return "";
				
				}
				public String CLI_C_G_C_Pattern(){
				
					return "";
				
				}
				public String CLI_C_G_C_OriginalDbColumnName(){
				
					return "CLI_C_G_C_";
				
				}

				
			    public BigDecimal FGO_VLRCON;

				public BigDecimal getFGO_VLRCON () {
					return this.FGO_VLRCON;
				}

				public Boolean FGO_VLRCONIsNullable(){
				    return true;
				}
				public Boolean FGO_VLRCONIsKey(){
				    return false;
				}
				public Integer FGO_VLRCONLength(){
				    return 12;
				}
				public Integer FGO_VLRCONPrecision(){
				    return 2;
				}
				public String FGO_VLRCONDefault(){
				
					return null;
				
				}
				public String FGO_VLRCONComment(){
				
				    return "";
				
				}
				public String FGO_VLRCONPattern(){
				
					return "";
				
				}
				public String FGO_VLRCONOriginalDbColumnName(){
				
					return "FGO_VLRCON";
				
				}

				
			    public String TRA_CODTRA;

				public String getTRA_CODTRA () {
					return this.TRA_CODTRA;
				}

				public Boolean TRA_CODTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_CODTRAIsKey(){
				    return false;
				}
				public Integer TRA_CODTRALength(){
				    return 50;
				}
				public Integer TRA_CODTRAPrecision(){
				    return null;
				}
				public String TRA_CODTRADefault(){
				
					return null;
				
				}
				public String TRA_CODTRAComment(){
				
				    return "";
				
				}
				public String TRA_CODTRAPattern(){
				
					return "";
				
				}
				public String TRA_CODTRAOriginalDbColumnName(){
				
					return "TRA_CODTRA";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 50;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String DIA_PREVIS;

				public String getDIA_PREVIS () {
					return this.DIA_PREVIS;
				}

				public Boolean DIA_PREVISIsNullable(){
				    return true;
				}
				public Boolean DIA_PREVISIsKey(){
				    return false;
				}
				public Integer DIA_PREVISLength(){
				    return 50;
				}
				public Integer DIA_PREVISPrecision(){
				    return null;
				}
				public String DIA_PREVISDefault(){
				
					return null;
				
				}
				public String DIA_PREVISComment(){
				
				    return "";
				
				}
				public String DIA_PREVISPattern(){
				
					return "";
				
				}
				public String DIA_PREVISOriginalDbColumnName(){
				
					return "DIA_PREVIS";
				
				}

				
			    public String FGO_SEQSEP;

				public String getFGO_SEQSEP () {
					return this.FGO_SEQSEP;
				}

				public Boolean FGO_SEQSEPIsNullable(){
				    return true;
				}
				public Boolean FGO_SEQSEPIsKey(){
				    return false;
				}
				public Integer FGO_SEQSEPLength(){
				    return 15;
				}
				public Integer FGO_SEQSEPPrecision(){
				    return null;
				}
				public String FGO_SEQSEPDefault(){
				
					return null;
				
				}
				public String FGO_SEQSEPComment(){
				
				    return "";
				
				}
				public String FGO_SEQSEPPattern(){
				
					return "";
				
				}
				public String FGO_SEQSEPOriginalDbColumnName(){
				
					return "FGO_SEQSEP";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return true;
				}
				public Integer STATUSLength(){
				    return 50;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public String GER_NUMROM;

				public String getGER_NUMROM () {
					return this.GER_NUMROM;
				}

				public Boolean GER_NUMROMIsNullable(){
				    return true;
				}
				public Boolean GER_NUMROMIsKey(){
				    return false;
				}
				public Integer GER_NUMROMLength(){
				    return 15;
				}
				public Integer GER_NUMROMPrecision(){
				    return null;
				}
				public String GER_NUMROMDefault(){
				
					return null;
				
				}
				public String GER_NUMROMComment(){
				
				    return "";
				
				}
				public String GER_NUMROMPattern(){
				
					return "";
				
				}
				public String GER_NUMROMOriginalDbColumnName(){
				
					return "GER_NUMROM";
				
				}

				
			    public java.util.Date DTAROM;

				public java.util.Date getDTAROM () {
					return this.DTAROM;
				}

				public Boolean DTAROMIsNullable(){
				    return true;
				}
				public Boolean DTAROMIsKey(){
				    return false;
				}
				public Integer DTAROMLength(){
				    return null;
				}
				public Integer DTAROMPrecision(){
				    return null;
				}
				public String DTAROMDefault(){
				
					return null;
				
				}
				public String DTAROMComment(){
				
				    return "";
				
				}
				public String DTAROMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DTAROMOriginalDbColumnName(){
				
					return "DTAROM";
				
				}

				
			    public String DTALAN;

				public String getDTALAN () {
					return this.DTALAN;
				}

				public Boolean DTALANIsNullable(){
				    return true;
				}
				public Boolean DTALANIsKey(){
				    return false;
				}
				public Integer DTALANLength(){
				    return null;
				}
				public Integer DTALANPrecision(){
				    return null;
				}
				public String DTALANDefault(){
				
					return null;
				
				}
				public String DTALANComment(){
				
				    return "";
				
				}
				public String DTALANPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTALANOriginalDbColumnName(){
				
					return "DTALAN";
				
				}

				
			    public BigDecimal FGO_TOTRET;

				public BigDecimal getFGO_TOTRET () {
					return this.FGO_TOTRET;
				}

				public Boolean FGO_TOTRETIsNullable(){
				    return true;
				}
				public Boolean FGO_TOTRETIsKey(){
				    return false;
				}
				public Integer FGO_TOTRETLength(){
				    return 12;
				}
				public Integer FGO_TOTRETPrecision(){
				    return 2;
				}
				public String FGO_TOTRETDefault(){
				
					return null;
				
				}
				public String FGO_TOTRETComment(){
				
				    return "";
				
				}
				public String FGO_TOTRETPattern(){
				
					return "";
				
				}
				public String FGO_TOTRETOriginalDbColumnName(){
				
					return "FGO_TOTRET";
				
				}

				
			    public String FGO_CODEMP;

				public String getFGO_CODEMP () {
					return this.FGO_CODEMP;
				}

				public Boolean FGO_CODEMPIsNullable(){
				    return true;
				}
				public Boolean FGO_CODEMPIsKey(){
				    return false;
				}
				public Integer FGO_CODEMPLength(){
				    return 3;
				}
				public Integer FGO_CODEMPPrecision(){
				    return null;
				}
				public String FGO_CODEMPDefault(){
				
					return null;
				
				}
				public String FGO_CODEMPComment(){
				
				    return "";
				
				}
				public String FGO_CODEMPPattern(){
				
					return "";
				
				}
				public String FGO_CODEMPOriginalDbColumnName(){
				
					return "FGO_CODEMP";
				
				}

				
			    public BigDecimal ICD_VALFCP;

				public BigDecimal getICD_VALFCP () {
					return this.ICD_VALFCP;
				}

				public Boolean ICD_VALFCPIsNullable(){
				    return true;
				}
				public Boolean ICD_VALFCPIsKey(){
				    return false;
				}
				public Integer ICD_VALFCPLength(){
				    return 15;
				}
				public Integer ICD_VALFCPPrecision(){
				    return 2;
				}
				public String ICD_VALFCPDefault(){
				
					return null;
				
				}
				public String ICD_VALFCPComment(){
				
				    return "";
				
				}
				public String ICD_VALFCPPattern(){
				
					return "";
				
				}
				public String ICD_VALFCPOriginalDbColumnName(){
				
					return "ICD_VALFCP";
				
				}

				
			    public BigDecimal TOTLAN;

				public BigDecimal getTOTLAN () {
					return this.TOTLAN;
				}

				public Boolean TOTLANIsNullable(){
				    return true;
				}
				public Boolean TOTLANIsKey(){
				    return false;
				}
				public Integer TOTLANLength(){
				    return 12;
				}
				public Integer TOTLANPrecision(){
				    return 2;
				}
				public String TOTLANDefault(){
				
					return null;
				
				}
				public String TOTLANComment(){
				
				    return "";
				
				}
				public String TOTLANPattern(){
				
					return "";
				
				}
				public String TOTLANOriginalDbColumnName(){
				
					return "TOTLAN";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
						result = prime * result + ((this.FGO_NUMDOC == null) ? 0 : this.FGO_NUMDOC.hashCode());
					
						result = prime * result + ((this.STATUS == null) ? 0 : this.STATUS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					
						if (this.FGO_NUMDOC == null) {
							if (other.FGO_NUMDOC != null)
								return false;
						
						} else if (!this.FGO_NUMDOC.equals(other.FGO_NUMDOC))
						
							return false;
					
						if (this.STATUS == null) {
							if (other.STATUS != null)
								return false;
						
						} else if (!this.STATUS.equals(other.STATUS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.DATA = this.DATA;
	            other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.CLI_NOMCLI = this.CLI_NOMCLI;
	            other.CLI_C_G_C_ = this.CLI_C_G_C_;
	            other.FGO_VLRCON = this.FGO_VLRCON;
	            other.TRA_CODTRA = this.TRA_CODTRA;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.DIA_PREVIS = this.DIA_PREVIS;
	            other.FGO_SEQSEP = this.FGO_SEQSEP;
	            other.STATUS = this.STATUS;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.GER_NUMROM = this.GER_NUMROM;
	            other.DTAROM = this.DTAROM;
	            other.DTALAN = this.DTALAN;
	            other.FGO_TOTRET = this.FGO_TOTRET;
	            other.FGO_CODEMP = this.FGO_CODEMP;
	            other.ICD_VALFCP = this.ICD_VALFCP;
	            other.TOTLAN = this.TOTLAN;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	other.FGO_NUMDOC = this.FGO_NUMDOC;
	            	other.STATUS = this.STATUS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_status_painel_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_status_painel_pedido) {

        	try {

        		int length = 0;
		
					this.DATA = readString(dis);
					
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.CLI_NOMCLI = readString(dis);
					
					this.CLI_C_G_C_ = readString(dis);
					
						this.FGO_VLRCON = (BigDecimal) dis.readObject();
					
					this.TRA_CODTRA = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.DIA_PREVIS = readString(dis);
					
					this.FGO_SEQSEP = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.GER_NUMROM = readString(dis);
					
					this.DTAROM = readDate(dis);
					
					this.DTALAN = readString(dis);
					
						this.FGO_TOTRET = (BigDecimal) dis.readObject();
					
					this.FGO_CODEMP = readString(dis);
					
						this.ICD_VALFCP = (BigDecimal) dis.readObject();
					
						this.TOTLAN = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DATA,dos);
					
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.CLI_NOMCLI,dos);
					
					// String
				
						writeString(this.CLI_C_G_C_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_VLRCON);
					
					// String
				
						writeString(this.TRA_CODTRA,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.DIA_PREVIS,dos);
					
					// String
				
						writeString(this.FGO_SEQSEP,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// String
				
						writeString(this.GER_NUMROM,dos);
					
					// java.util.Date
				
						writeDate(this.DTAROM,dos);
					
					// String
				
						writeString(this.DTALAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FGO_TOTRET);
					
					// String
				
						writeString(this.FGO_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICD_VALFCP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTLAN);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA="+DATA);
		sb.append(",FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",CLI_NOMCLI="+CLI_NOMCLI);
		sb.append(",CLI_C_G_C_="+CLI_C_G_C_);
		sb.append(",FGO_VLRCON="+String.valueOf(FGO_VLRCON));
		sb.append(",TRA_CODTRA="+TRA_CODTRA);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",DIA_PREVIS="+DIA_PREVIS);
		sb.append(",FGO_SEQSEP="+FGO_SEQSEP);
		sb.append(",STATUS="+STATUS);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",GER_NUMROM="+GER_NUMROM);
		sb.append(",DTAROM="+String.valueOf(DTAROM));
		sb.append(",DTALAN="+DTALAN);
		sb.append(",FGO_TOTRET="+String.valueOf(FGO_TOTRET));
		sb.append(",FGO_CODEMP="+FGO_CODEMP);
		sb.append(",ICD_VALFCP="+String.valueOf(ICD_VALFCP));
		sb.append(",TOTLAN="+String.valueOf(TOTLAN));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_NUMDOC, other.FGO_NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.STATUS, other.STATUS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
row26Struct row26 = new row26Struct();
copyOfout1_0Struct copyOfout1_0 = new copyOfout1_0Struct();






	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_0");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1_0Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_gr_status_painel_pedido_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1_0Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_0Struct copyOfout1_0_tmp = new copyOfout1_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";
	
	
		int tos_count_tDBInput_8 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_8 = java.util.Calendar.getInstance();
		    calendar_tDBInput_8.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_8 = calendar_tDBInput_8.getTime();
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = 
"\n--  ADIANTAMENTO PARCIAL\nSELECT DATE_FORMAT(FGO_PREVIS, '%W, %d/%m/%Y') AS DATA, FGO_NUMPOK, FGO_NUMDOC, null AS FGO"
+"_NUMFAT, F.FGO_CODVEN, C.CLI_NOMCLI, C.CLI_C_G_C_, FGO_VLRCON, T.TRA_CODTRA, T.TRA_NOMTRA,\n		IF(FGO_PREVIS = CURDATE(),"
+"'HOJE', IF(FGO_PREVIS<CURDATE(),'ONTEM','AMANHA')) AS DIA_PREVIS, '' AS FGO_SEQSEP, 'ADIANTAMENTO PARCIAL' as STATUS,\n	"
+"	CONCAT(F.FGO_DTAENT,' ',F.FGO_HORENT) DT_PEDIDO,\n		MG.GER_NUMROM,\n		CONCAT(MG.GER_DTAROM,' ',MG.GER_HORROM) AS DTAROM"
+",\n		DATE_FORMAT(A.ADT_DTALAN, '%d-%m-%Y') AS DTALAN,\n		F.FGO_TOTRET,\n		F.FGO_CODEMP,\n        (SELECT sum(R.ICD_VALFC"
+"P)\n         FROM FATDOR D, DORICD R\n         WHERE F.AUTOINCREM = D.FDO_SEQGER\n         AND D.AUTOINCREM = R.ICD_SEQF"
+"DO) AS ICD_VALFCP,\n		SUM(IF(A.ADT_TIPLAN = 'D', IFNULL(A.ADT_VALLAN, 0) * (-1), IFNULL(A.ADT_VALLAN, 0))) TOTLAN\n		FRO"
+"M FATGOR AS F\n		INNER JOIN EXTGOR AS E ON F.AUTOINCREM = E.FGO_SEQFGO\n        INNER JOIN CADCLI AS C ON F.FGO_CODCLI ="
+" C.CLI_CODCLI\n 		INNER JOIN CADTRA AS T ON F.FGO_CODTRA = T.TRA_CODTRA\n		INNER JOIN CADOPE AS V ON F.FGO_CODVEN = V.OP"
+"E_CODOPE\n    	LEFT JOIN ADTCLI AS A ON F.FGO_NUMDOC = A.ADT_NUMDOC AND F.FGO_ESPDOC = A.ADT_ESPDOC AND F.FGO_CODEMP = A"
+".ADT_CODEMP\n		LEFT JOIN MOVGER AS MG ON F.FGO_NUMFAT = MG.GER_NUMDOC AND F.FGO_TIPFAT = MG.GER_ESPDOC AND F.FGO_EMPFAT "
+"= MG.GER_CODEMP AND F.FGO_CODCLI = MG.GER_CODCLI  \n		WHERE F.FGO_CODEMP in ('001','201','010')\n		AND F.FGO_JAFATU = '0"
+"'\n		AND F.FGO_ESPDOC = 'PD'\n    	AND F.FGO_DTAENT > DATE_SUB(CURDATE(), INTERVAL 60 DAY)\n		AND IFNULL(E.FGO_OPEDES, 0"
+") NOT IN ('599', '804', 'C16', '880', '881')\n        AND IFNULL(E.FGO_SEPEXP, 0) NOT IN ('599', '804', 'C16', '880', '8"
+"81')\n        AND V.OPE_CODDEP IN ('014', '002')\n        AND F.FGO_MOTBAI IS NULL\n        GROUP BY F.AUTOINCREM\n     "
+"   HAVING TOTLAN > 0 AND TOTLAN < FGO_VLRCON\n        ORDER BY FGO_PREVIS;\n";
		    

		    globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);

		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row24.DATA = null;
							} else {
	                         		
        	row24.DATA = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row24.FGO_NUMPOK = null;
							} else {
	                         		
        	row24.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row24.FGO_NUMDOC = null;
							} else {
	                         		
        	row24.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row24.FGO_NUMFAT = null;
							} else {
	                         		
        	row24.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row24.FGO_CODVEN = null;
							} else {
	                         		
        	row24.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_8, 5, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								row24.CLI_NOMCLI = null;
							} else {
	                         		
        	row24.CLI_NOMCLI = routines.system.JDBCUtil.getString(rs_tDBInput_8, 6, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								row24.CLI_C_G_C_ = null;
							} else {
	                         		
        	row24.CLI_C_G_C_ = routines.system.JDBCUtil.getString(rs_tDBInput_8, 7, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								row24.FGO_VLRCON = null;
							} else {
		                          
            row24.FGO_VLRCON = rs_tDBInput_8.getBigDecimal(8);
            if(rs_tDBInput_8.wasNull()){
                    row24.FGO_VLRCON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 9) {
								row24.TRA_CODTRA = null;
							} else {
	                         		
        	row24.TRA_CODTRA = routines.system.JDBCUtil.getString(rs_tDBInput_8, 9, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 10) {
								row24.TRA_NOMTRA = null;
							} else {
	                         		
        	row24.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_8, 10, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 11) {
								row24.DIA_PREVIS = null;
							} else {
	                         		
        	row24.DIA_PREVIS = routines.system.JDBCUtil.getString(rs_tDBInput_8, 11, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 12) {
								row24.FGO_SEQSEP = null;
							} else {
	                         		
        	row24.FGO_SEQSEP = routines.system.JDBCUtil.getString(rs_tDBInput_8, 12, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 13) {
								row24.STATUS = null;
							} else {
	                         		
        	row24.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_8, 13, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 14) {
								row24.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_8.getString(14) != null) {
					String dateString_tDBInput_8 = rs_tDBInput_8.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_8) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_8)) {
						row24.DT_PEDIDO = rs_tDBInput_8.getTimestamp(14);
					} else {
						row24.DT_PEDIDO = (java.util.Date) year0_tDBInput_8.clone();
					}
				} else {
					row24.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_8 < 15) {
								row24.GER_NUMROM = null;
							} else {
	                         		
        	row24.GER_NUMROM = routines.system.JDBCUtil.getString(rs_tDBInput_8, 15, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 16) {
								row24.DTAROM = null;
							} else {
										
				if(rs_tDBInput_8.getString(16) != null) {
					String dateString_tDBInput_8 = rs_tDBInput_8.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_8) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_8)) {
						row24.DTAROM = rs_tDBInput_8.getTimestamp(16);
					} else {
						row24.DTAROM = (java.util.Date) year0_tDBInput_8.clone();
					}
				} else {
					row24.DTAROM =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_8 < 17) {
								row24.DTALAN = null;
							} else {
	                         		
        	row24.DTALAN = routines.system.JDBCUtil.getString(rs_tDBInput_8, 17, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 18) {
								row24.FGO_TOTRET = null;
							} else {
		                          
            row24.FGO_TOTRET = rs_tDBInput_8.getBigDecimal(18);
            if(rs_tDBInput_8.wasNull()){
                    row24.FGO_TOTRET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 19) {
								row24.FGO_CODEMP = null;
							} else {
	                         		
        	row24.FGO_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_8, 19, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 20) {
								row24.ICD_VALFCP = null;
							} else {
		                          
            row24.ICD_VALFCP = rs_tDBInput_8.getBigDecimal(20);
            if(rs_tDBInput_8.wasNull()){
                    row24.ICD_VALFCP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 21) {
								row24.TOTLAN = null;
							} else {
		                          
            row24.TOTLAN = rs_tDBInput_8.getBigDecimal(21);
            if(rs_tDBInput_8.wasNull()){
                    row24.TOTLAN = null;
            }
		                    }
					

 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					


  row26 = new row26Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row26.DATA=TypeConvert.String2String(row24.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_NUMPOK=TypeConvert.String2String(row24.FGO_NUMPOK);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_NUMDOC=TypeConvert.String2String(row24.FGO_NUMDOC);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_NUMFAT=TypeConvert.String2String(row24.FGO_NUMFAT);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_CODVEN=TypeConvert.String2String(row24.FGO_CODVEN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.CLI_NOMCLI=TypeConvert.String2String(row24.CLI_NOMCLI);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.CLI_C_G_C_=TypeConvert.String2String(row24.CLI_C_G_C_);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_VLRCON=TypeConvert.BigDecimal2BigDecimal(row24.FGO_VLRCON);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.TRA_CODTRA=TypeConvert.String2String(row24.TRA_CODTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.TRA_NOMTRA=TypeConvert.String2String(row24.TRA_NOMTRA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.DIA_PREVIS=TypeConvert.String2String(row24.DIA_PREVIS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_SEQSEP=TypeConvert.String2String(row24.FGO_SEQSEP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.STATUS=TypeConvert.String2String(row24.STATUS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.DT_PEDIDO=TypeConvert.Date2Date(row24.DT_PEDIDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.GER_NUMROM=TypeConvert.String2String(row24.GER_NUMROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.DTAROM=TypeConvert.Date2Date(row24.DTAROM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.DTALAN=TypeConvert.String2Date(row24.DTALAN, "dd-MM-yyyy");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_TOTRET=TypeConvert.BigDecimal2BigDecimal(row24.FGO_TOTRET);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.FGO_CODEMP=TypeConvert.String2String(row24.FGO_CODEMP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.ICD_VALFCP=TypeConvert.BigDecimal2BigDecimal(row24.ICD_VALFCP);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row26.TOTLAN=TypeConvert.BigDecimal2BigDecimal(row24.TOTLAN);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row26 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfout1_0 = null;


// # Output table : 'copyOfout1_0'
copyOfout1_0_tmp.DATA = row26.DATA ;
copyOfout1_0_tmp.FGO_NUMPOK = row26.FGO_NUMPOK ;
copyOfout1_0_tmp.FGO_NUMDOC = row26.FGO_NUMDOC ;
copyOfout1_0_tmp.FGO_NUMFAT = row26.FGO_NUMFAT ;
copyOfout1_0_tmp.FGO_CODVEN = row26.FGO_CODVEN ;
copyOfout1_0_tmp.CLI_NOMCLI = row26.CLI_NOMCLI ;
copyOfout1_0_tmp.CLI_C_G_C_ = row26.CLI_C_G_C_ ;
copyOfout1_0_tmp.FGO_VLRCON = row26.FGO_VLRCON ;
copyOfout1_0_tmp.TRA_CODTRA = row26.TRA_CODTRA ;
copyOfout1_0_tmp.TRA_NOMTRA = row26.TRA_NOMTRA ;
copyOfout1_0_tmp.DIA_PREVIS = row26.DIA_PREVIS ;
copyOfout1_0_tmp.FGO_SEQSEP = row26.FGO_SEQSEP ;
copyOfout1_0_tmp.STATUS = row26.STATUS ;
copyOfout1_0_tmp.DT_PEDIDO = row26.DT_PEDIDO ;
copyOfout1_0_tmp.GER_NUMROM = row26.GER_NUMROM ;
copyOfout1_0_tmp.DTAROM = row26.DTAROM ;
copyOfout1_0_tmp.DTALAN = row26.DTALAN ;
copyOfout1_0_tmp.FGO_TOTRET = row26.FGO_TOTRET ;
copyOfout1_0_tmp.FGO_CODEMP = row26.FGO_CODEMP ;
copyOfout1_0_tmp.ICD_VALFCP = row26.ICD_VALFCP ;
copyOfout1_0_tmp.TOTLAN = row26.TOTLAN ;
copyOfout1_0_tmp.OPEEXP = null;
copyOfout1_0 = copyOfout1_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfout1_0"
if(copyOfout1_0 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1_0"
						
						);
					}
					



    
		copyOfout1_0Struct oneRow_tHashOutput_9 = new copyOfout1_0Struct();
				
					oneRow_tHashOutput_9.DATA = copyOfout1_0.DATA;
					oneRow_tHashOutput_9.FGO_NUMPOK = copyOfout1_0.FGO_NUMPOK;
					oneRow_tHashOutput_9.FGO_NUMDOC = copyOfout1_0.FGO_NUMDOC;
					oneRow_tHashOutput_9.FGO_NUMFAT = copyOfout1_0.FGO_NUMFAT;
					oneRow_tHashOutput_9.FGO_CODVEN = copyOfout1_0.FGO_CODVEN;
					oneRow_tHashOutput_9.CLI_NOMCLI = copyOfout1_0.CLI_NOMCLI;
					oneRow_tHashOutput_9.CLI_C_G_C_ = copyOfout1_0.CLI_C_G_C_;
					oneRow_tHashOutput_9.FGO_VLRCON = copyOfout1_0.FGO_VLRCON;
					oneRow_tHashOutput_9.TRA_CODTRA = copyOfout1_0.TRA_CODTRA;
					oneRow_tHashOutput_9.TRA_NOMTRA = copyOfout1_0.TRA_NOMTRA;
					oneRow_tHashOutput_9.DIA_PREVIS = copyOfout1_0.DIA_PREVIS;
					oneRow_tHashOutput_9.FGO_SEQSEP = copyOfout1_0.FGO_SEQSEP;
					oneRow_tHashOutput_9.STATUS = copyOfout1_0.STATUS;
					oneRow_tHashOutput_9.DT_PEDIDO = copyOfout1_0.DT_PEDIDO;
					oneRow_tHashOutput_9.GER_NUMROM = copyOfout1_0.GER_NUMROM;
					oneRow_tHashOutput_9.DTAROM = copyOfout1_0.DTAROM;
					oneRow_tHashOutput_9.DTALAN = copyOfout1_0.DTALAN;
					oneRow_tHashOutput_9.FGO_TOTRET = copyOfout1_0.FGO_TOTRET;
					oneRow_tHashOutput_9.FGO_CODEMP = copyOfout1_0.FGO_CODEMP;
					oneRow_tHashOutput_9.ICD_VALFCP = copyOfout1_0.ICD_VALFCP;
					oneRow_tHashOutput_9.TOTLAN = copyOfout1_0.TOTLAN;
					oneRow_tHashOutput_9.OPEEXP = copyOfout1_0.OPEEXP;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "copyOfout1_0"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_0");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final gr_status_painel_pedido gr_status_painel_pedidoClass = new gr_status_painel_pedido();

        int exitCode = gr_status_painel_pedidoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = gr_status_painel_pedido.class.getClassLoader().getResourceAsStream("palacio_ferramentas/gr_status_painel_pedido_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = gr_status_painel_pedido.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("dias", "id_Integer");
                        if(context.getStringValue("dias") == null) {
                            context.dias = null;
                        } else {
                            try{
                                context.dias=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dias"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dias", e.getMessage()));
                                context.dias=null;
                            }
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("dias")) {
                context.dias = (Integer) parentContextMap.get("dias");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}catch (java.lang.Error e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_5Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}catch (java.lang.Error e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_5;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_6Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

e_tDBInput_6.printStackTrace();

}catch (java.lang.Error e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_6;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_7Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

e_tDBInput_7.printStackTrace();

}catch (java.lang.Error e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_7;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_8Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}catch (java.lang.Error e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_8;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : gr_status_painel_pedido");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1842356 characters generated by Talend Open Studio for Big Data 
 *     on the 5 de fevereiro de 2025 16:48:42 BRT
 ************************************************************************************************/