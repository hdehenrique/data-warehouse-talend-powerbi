// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_cliente_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dw_t_cliente Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_cliente implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(agrupador != null){
				
					this.setProperty("agrupador", agrupador.toString());
				
			}
			
			if(linha != null){
				
					this.setProperty("linha", linha.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(parametro_qtde != null){
				
					this.setProperty("parametro_qtde", parametro_qtde.toString());
				
			}
			
			if(parametro_vlr != null){
				
					this.setProperty("parametro_vlr", parametro_vlr.toString());
				
			}
			
			if(Acumuladovlr != null){
				
					this.setProperty("Acumuladovlr", Acumuladovlr.toString());
				
			}
			
			if(Acumulado != null){
				
					this.setProperty("Acumulado", Acumulado.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public Integer agrupador;
public Integer getAgrupador(){
	return this.agrupador;
}
public Integer linha;
public Integer getLinha(){
	return this.linha;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public Integer parametro_qtde;
public Integer getParametro_qtde(){
	return this.parametro_qtde;
}
public Integer parametro_vlr;
public Integer getParametro_vlr(){
	return this.parametro_vlr;
}
public Double Acumuladovlr;
public Double getAcumuladovlr(){
	return this.Acumuladovlr;
}
public Double Acumulado;
public Double getAcumulado(){
	return this.Acumulado;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_cliente";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_cliente.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_cliente.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName=dw_t_cliente";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
insert_logStruct insert_log = new insert_logStruct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_dw_t_cliente_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row15.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row15.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row16 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row16 = new row16Struct();
                                row16.nm_programa = insert_log.nm_programa;
                                row16.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row16.data_termino_execucao = insert_log.data_termino_execucao;
                                row16.mensagem = insert_log.mensagem;
                                row16.uuid = insert_log.uuid;
                                row16.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_5 = new row16Struct();
				
					oneRow_tHashOutput_5.nm_programa = row16.nm_programa;
					oneRow_tHashOutput_5.data_inicio_execucao = row16.data_inicio_execucao;
					oneRow_tHashOutput_5.data_termino_execucao = row16.data_termino_execucao;
					oneRow_tHashOutput_5.mensagem = row16.mensagem;
					oneRow_tHashOutput_5.uuid = row16.uuid;
					oneRow_tHashOutput_5.versao = row16.versao;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_11Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out4Struct other = (out4Struct) obj;
		
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out4Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NOME_CLIENTE = this.NOME_CLIENTE;
	            other.DT_NASCIMENTO = this.DT_NASCIMENTO;
	            other.TIPO_PESSOA = this.TIPO_PESSOA;
	            other.NM_DOCUMENTO = this.NM_DOCUMENTO;
	            other.ENDERECO_RESIDENCIAL = this.ENDERECO_RESIDENCIAL;
	            other.BAIRRO_RESIDENCIAL = this.BAIRRO_RESIDENCIAL;
	            other.COMPLEMENTO = this.COMPLEMENTO;
	            other.CEP_RESIDENCIAL = this.CEP_RESIDENCIAL;
	            other.CIDADE = this.CIDADE;
	            other.UF = this.UF;
	            other.REGIAO = this.REGIAO;
	            other.ENDERECO_ENTREGA = this.ENDERECO_ENTREGA;
	            other.BAIRRO_ENTREGA = this.BAIRRO_ENTREGA;
	            other.CEP_ENTREGA = this.CEP_ENTREGA;
	            other.EMAIL_1 = this.EMAIL_1;
	            other.EMAIL_2 = this.EMAIL_2;
	            other.TELEFONE_1 = this.TELEFONE_1;
	            other.TELEFONE_2 = this.TELEFONE_2;
	            other.CELULAR = this.CELULAR;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_PRIMEIRA_COMPRA = this.DT_PRIMEIRA_COMPRA;
	            other.DT_ULTIMA_COMPRA = this.DT_ULTIMA_COMPRA;
	            other.VL_ULTIMA_COMPRA = this.VL_ULTIMA_COMPRA;
	            other.ATIVIDADE = this.ATIVIDADE;
	            
	}

	public void copyKeysDataTo(out4Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_11Struct implements routines.system.IPersistableRow<after_tHashInput_11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_11Struct other = (after_tHashInput_11Struct) obj;
		
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_11Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NOME_CLIENTE = this.NOME_CLIENTE;
	            other.DT_NASCIMENTO = this.DT_NASCIMENTO;
	            other.TIPO_PESSOA = this.TIPO_PESSOA;
	            other.NM_DOCUMENTO = this.NM_DOCUMENTO;
	            other.ENDERECO_RESIDENCIAL = this.ENDERECO_RESIDENCIAL;
	            other.BAIRRO_RESIDENCIAL = this.BAIRRO_RESIDENCIAL;
	            other.COMPLEMENTO = this.COMPLEMENTO;
	            other.CEP_RESIDENCIAL = this.CEP_RESIDENCIAL;
	            other.CIDADE = this.CIDADE;
	            other.UF = this.UF;
	            other.REGIAO = this.REGIAO;
	            other.ENDERECO_ENTREGA = this.ENDERECO_ENTREGA;
	            other.BAIRRO_ENTREGA = this.BAIRRO_ENTREGA;
	            other.CEP_ENTREGA = this.CEP_ENTREGA;
	            other.EMAIL_1 = this.EMAIL_1;
	            other.EMAIL_2 = this.EMAIL_2;
	            other.TELEFONE_1 = this.TELEFONE_1;
	            other.TELEFONE_2 = this.TELEFONE_2;
	            other.CELULAR = this.CELULAR;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_PRIMEIRA_COMPRA = this.DT_PRIMEIRA_COMPRA;
	            other.DT_ULTIMA_COMPRA = this.DT_ULTIMA_COMPRA;
	            other.VL_ULTIMA_COMPRA = this.VL_ULTIMA_COMPRA;
	            other.ATIVIDADE = this.ATIVIDADE;
	            
	}

	public void copyKeysDataTo(after_tHashInput_11Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_12Process(globalMap);

		row31Struct row31 = new row31Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_dw_t_cliente_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
					globalMap.get( "tHash_Lookup_row32" ))
					;					
					
	

row32Struct row32HashKey = new row32Struct();
row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row9Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row31.CD_CLIENTE = next_tHashInput_11.CD_CLIENTE;
	row31.NOME_CLIENTE = next_tHashInput_11.NOME_CLIENTE;
	row31.DT_NASCIMENTO = next_tHashInput_11.DT_NASCIMENTO;
	row31.TIPO_PESSOA = next_tHashInput_11.TIPO_PESSOA;
	row31.NM_DOCUMENTO = next_tHashInput_11.NM_DOCUMENTO;
	row31.ENDERECO_RESIDENCIAL = next_tHashInput_11.ENDERECO_RESIDENCIAL;
	row31.BAIRRO_RESIDENCIAL = next_tHashInput_11.BAIRRO_RESIDENCIAL;
	row31.COMPLEMENTO = next_tHashInput_11.COMPLEMENTO;
	row31.CEP_RESIDENCIAL = next_tHashInput_11.CEP_RESIDENCIAL;
	row31.CIDADE = next_tHashInput_11.CIDADE;
	row31.UF = next_tHashInput_11.UF;
	row31.REGIAO = next_tHashInput_11.REGIAO;
	row31.ENDERECO_ENTREGA = next_tHashInput_11.ENDERECO_ENTREGA;
	row31.BAIRRO_ENTREGA = next_tHashInput_11.BAIRRO_ENTREGA;
	row31.CEP_ENTREGA = next_tHashInput_11.CEP_ENTREGA;
	row31.EMAIL_1 = next_tHashInput_11.EMAIL_1;
	row31.EMAIL_2 = next_tHashInput_11.EMAIL_2;
	row31.TELEFONE_1 = next_tHashInput_11.TELEFONE_1;
	row31.TELEFONE_2 = next_tHashInput_11.TELEFONE_2;
	row31.CELULAR = next_tHashInput_11.CELULAR;
	row31.DT_CADASTRO = next_tHashInput_11.DT_CADASTRO;
	row31.DT_PRIMEIRA_COMPRA = next_tHashInput_11.DT_PRIMEIRA_COMPRA;
	row31.DT_ULTIMA_COMPRA = next_tHashInput_11.DT_ULTIMA_COMPRA;
	row31.VL_ULTIMA_COMPRA = next_tHashInput_11.VL_ULTIMA_COMPRA;
	row31.ATIVIDADE = next_tHashInput_11.ATIVIDADE;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row32Struct row32 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row32" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow32 = false;
       		  	    	
       		  	    	
 							row32Struct row32ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row32HashKey.cd_cliente = row31.CD_CLIENTE ;
                        		    		

								
		                        	row32HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row32.lookup( row32HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.cd_cliente = '" + row32HashKey.cd_cliente + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row32Struct fromLookup_row32 = null;
							row32 = row32Default;
										 
							
								 
							
							
								if (tHash_Lookup_row32 !=null && tHash_Lookup_row32.hasNext()) { // G 099
								
							
								
								fromLookup_row32 = tHash_Lookup_row32.next();

							
							
								} // G 099
							
							

							if(fromLookup_row32 != null) {
								row32 = fromLookup_row32;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

out4 = null;

if(!rejectedInnerJoin_tMap_11 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out4'
// # Filter conditions 
if( rejectedInnerJoin_tMap_11 ) {
out4_tmp.CD_CLIENTE = row31.CD_CLIENTE ;
out4_tmp.NOME_CLIENTE = row31.NOME_CLIENTE ;
out4_tmp.DT_NASCIMENTO = row31.DT_NASCIMENTO ;
out4_tmp.TIPO_PESSOA = row31.TIPO_PESSOA ;
out4_tmp.NM_DOCUMENTO = row31.NM_DOCUMENTO ;
out4_tmp.ENDERECO_RESIDENCIAL = row31.ENDERECO_RESIDENCIAL ;
out4_tmp.BAIRRO_RESIDENCIAL = row31.BAIRRO_RESIDENCIAL ;
out4_tmp.COMPLEMENTO = row31.COMPLEMENTO ;
out4_tmp.CEP_RESIDENCIAL = row31.CEP_RESIDENCIAL ;
out4_tmp.CIDADE = row31.CIDADE ;
out4_tmp.UF = row31.UF ;
out4_tmp.REGIAO = row31.REGIAO ;
out4_tmp.ENDERECO_ENTREGA = row31.ENDERECO_ENTREGA ;
out4_tmp.BAIRRO_ENTREGA = row31.BAIRRO_ENTREGA ;
out4_tmp.CEP_ENTREGA = row31.CEP_ENTREGA ;
out4_tmp.EMAIL_1 = row31.EMAIL_1 ;
out4_tmp.EMAIL_2 = row31.EMAIL_2 ;
out4_tmp.TELEFONE_1 = row31.TELEFONE_1 ;
out4_tmp.TELEFONE_2 = row31.TELEFONE_2 ;
out4_tmp.CELULAR = row31.CELULAR ;
out4_tmp.DT_CADASTRO = row31.DT_CADASTRO ;
out4_tmp.DT_PRIMEIRA_COMPRA = row31.DT_PRIMEIRA_COMPRA ;
out4_tmp.DT_ULTIMA_COMPRA = row31.DT_ULTIMA_COMPRA ;
out4_tmp.VL_ULTIMA_COMPRA = row31.VL_ULTIMA_COMPRA ;
out4_tmp.ATIVIDADE = row31.ATIVIDADE ;
out4 = out4_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					



    
		out4Struct oneRow_tHashOutput_11 = new out4Struct();
				
					oneRow_tHashOutput_11.CD_CLIENTE = out4.CD_CLIENTE;
					oneRow_tHashOutput_11.NOME_CLIENTE = out4.NOME_CLIENTE;
					oneRow_tHashOutput_11.DT_NASCIMENTO = out4.DT_NASCIMENTO;
					oneRow_tHashOutput_11.TIPO_PESSOA = out4.TIPO_PESSOA;
					oneRow_tHashOutput_11.NM_DOCUMENTO = out4.NM_DOCUMENTO;
					oneRow_tHashOutput_11.ENDERECO_RESIDENCIAL = out4.ENDERECO_RESIDENCIAL;
					oneRow_tHashOutput_11.BAIRRO_RESIDENCIAL = out4.BAIRRO_RESIDENCIAL;
					oneRow_tHashOutput_11.COMPLEMENTO = out4.COMPLEMENTO;
					oneRow_tHashOutput_11.CEP_RESIDENCIAL = out4.CEP_RESIDENCIAL;
					oneRow_tHashOutput_11.CIDADE = out4.CIDADE;
					oneRow_tHashOutput_11.UF = out4.UF;
					oneRow_tHashOutput_11.REGIAO = out4.REGIAO;
					oneRow_tHashOutput_11.ENDERECO_ENTREGA = out4.ENDERECO_ENTREGA;
					oneRow_tHashOutput_11.BAIRRO_ENTREGA = out4.BAIRRO_ENTREGA;
					oneRow_tHashOutput_11.CEP_ENTREGA = out4.CEP_ENTREGA;
					oneRow_tHashOutput_11.EMAIL_1 = out4.EMAIL_1;
					oneRow_tHashOutput_11.EMAIL_2 = out4.EMAIL_2;
					oneRow_tHashOutput_11.TELEFONE_1 = out4.TELEFONE_1;
					oneRow_tHashOutput_11.TELEFONE_2 = out4.TELEFONE_2;
					oneRow_tHashOutput_11.CELULAR = out4.CELULAR;
					oneRow_tHashOutput_11.DT_CADASTRO = out4.DT_CADASTRO;
					oneRow_tHashOutput_11.DT_PRIMEIRA_COMPRA = out4.DT_PRIMEIRA_COMPRA;
					oneRow_tHashOutput_11.DT_ULTIMA_COMPRA = out4.DT_ULTIMA_COMPRA;
					oneRow_tHashOutput_11.VL_ULTIMA_COMPRA = out4.VL_ULTIMA_COMPRA;
					oneRow_tHashOutput_11.ATIVIDADE = out4.ATIVIDADE;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row32 != null) {
						tHash_Lookup_row32.endGet();
					}
					globalMap.remove( "tHash_Lookup_row32" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row32"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_ATUALIZACAO;

				public java.util.Date getDT_ULTIMA_ATUALIZACAO () {
					return this.DT_ULTIMA_ATUALIZACAO;
				}

				public Boolean DT_ULTIMA_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTIMA_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTIMA_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTIMA_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTIMA_ATUALIZACAO";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				
			    public String Curva_qtde;

				public String getCurva_qtde () {
					return this.Curva_qtde;
				}

				public Boolean Curva_qtdeIsNullable(){
				    return true;
				}
				public Boolean Curva_qtdeIsKey(){
				    return false;
				}
				public Integer Curva_qtdeLength(){
				    return null;
				}
				public Integer Curva_qtdePrecision(){
				    return null;
				}
				public String Curva_qtdeDefault(){
				
					return null;
				
				}
				public String Curva_qtdeComment(){
				
				    return "";
				
				}
				public String Curva_qtdePattern(){
				
					return "";
				
				}
				public String Curva_qtdeOriginalDbColumnName(){
				
					return "Curva_qtde";
				
				}

				
			    public String Curva_vlr;

				public String getCurva_vlr () {
					return this.Curva_vlr;
				}

				public Boolean Curva_vlrIsNullable(){
				    return true;
				}
				public Boolean Curva_vlrIsKey(){
				    return false;
				}
				public Integer Curva_vlrLength(){
				    return null;
				}
				public Integer Curva_vlrPrecision(){
				    return null;
				}
				public String Curva_vlrDefault(){
				
					return null;
				
				}
				public String Curva_vlrComment(){
				
				    return "";
				
				}
				public String Curva_vlrPattern(){
				
					return "";
				
				}
				public String Curva_vlrOriginalDbColumnName(){
				
					return "Curva_vlr";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NOME_CLIENTE = this.NOME_CLIENTE;
	            other.DT_NASCIMENTO = this.DT_NASCIMENTO;
	            other.TIPO_PESSOA = this.TIPO_PESSOA;
	            other.NM_DOCUMENTO = this.NM_DOCUMENTO;
	            other.ENDERECO_RESIDENCIAL = this.ENDERECO_RESIDENCIAL;
	            other.BAIRRO_RESIDENCIAL = this.BAIRRO_RESIDENCIAL;
	            other.COMPLEMENTO = this.COMPLEMENTO;
	            other.CEP_RESIDENCIAL = this.CEP_RESIDENCIAL;
	            other.CIDADE = this.CIDADE;
	            other.UF = this.UF;
	            other.REGIAO = this.REGIAO;
	            other.ENDERECO_ENTREGA = this.ENDERECO_ENTREGA;
	            other.BAIRRO_ENTREGA = this.BAIRRO_ENTREGA;
	            other.CEP_ENTREGA = this.CEP_ENTREGA;
	            other.EMAIL_1 = this.EMAIL_1;
	            other.EMAIL_2 = this.EMAIL_2;
	            other.TELEFONE_1 = this.TELEFONE_1;
	            other.TELEFONE_2 = this.TELEFONE_2;
	            other.CELULAR = this.CELULAR;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_PRIMEIRA_COMPRA = this.DT_PRIMEIRA_COMPRA;
	            other.DT_ULTIMA_COMPRA = this.DT_ULTIMA_COMPRA;
	            other.VL_ULTIMA_COMPRA = this.VL_ULTIMA_COMPRA;
	            other.DT_ULTIMA_ATUALIZACAO = this.DT_ULTIMA_ATUALIZACAO;
	            other.ATIVIDADE = this.ATIVIDADE;
	            other.Curva_qtde = this.Curva_qtde;
	            other.Curva_vlr = this.Curva_vlr;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.DT_ULTIMA_ATUALIZACAO = readDate(dis);
					
					this.ATIVIDADE = readString(dis);
					
					this.Curva_qtde = readString(dis);
					
					this.Curva_vlr = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.DT_ULTIMA_ATUALIZACAO = readDate(dis);
					
					this.ATIVIDADE = readString(dis);
					
					this.Curva_qtde = readString(dis);
					
					this.Curva_vlr = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// String
				
						writeString(this.Curva_qtde,dos);
					
					// String
				
						writeString(this.Curva_vlr,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// String
				
						writeString(this.Curva_qtde,dos);
					
					// String
				
						writeString(this.Curva_vlr,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",DT_ULTIMA_ATUALIZACAO="+String.valueOf(DT_ULTIMA_ATUALIZACAO));
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",Curva_qtde="+Curva_qtde);
		sb.append(",Curva_vlr="+Curva_vlr);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NOME_CLIENTE = this.NOME_CLIENTE;
	            other.DT_NASCIMENTO = this.DT_NASCIMENTO;
	            other.TIPO_PESSOA = this.TIPO_PESSOA;
	            other.NM_DOCUMENTO = this.NM_DOCUMENTO;
	            other.ENDERECO_RESIDENCIAL = this.ENDERECO_RESIDENCIAL;
	            other.BAIRRO_RESIDENCIAL = this.BAIRRO_RESIDENCIAL;
	            other.COMPLEMENTO = this.COMPLEMENTO;
	            other.CEP_RESIDENCIAL = this.CEP_RESIDENCIAL;
	            other.CIDADE = this.CIDADE;
	            other.UF = this.UF;
	            other.REGIAO = this.REGIAO;
	            other.ENDERECO_ENTREGA = this.ENDERECO_ENTREGA;
	            other.BAIRRO_ENTREGA = this.BAIRRO_ENTREGA;
	            other.CEP_ENTREGA = this.CEP_ENTREGA;
	            other.EMAIL_1 = this.EMAIL_1;
	            other.EMAIL_2 = this.EMAIL_2;
	            other.TELEFONE_1 = this.TELEFONE_1;
	            other.TELEFONE_2 = this.TELEFONE_2;
	            other.CELULAR = this.CELULAR;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_PRIMEIRA_COMPRA = this.DT_PRIMEIRA_COMPRA;
	            other.DT_ULTIMA_COMPRA = this.DT_ULTIMA_COMPRA;
	            other.VL_ULTIMA_COMPRA = this.VL_ULTIMA_COMPRA;
	            other.ATIVIDADE = this.ATIVIDADE;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row12Struct row12 = new row12Struct();
out1Struct out1 = new out1Struct();






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dw_t_cliente").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dw_t_cliente").toLowerCase();
}


int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_4 = 1000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
        java.lang.StringBuilder sb_tDBOutput_4 = new java.lang.StringBuilder();
        sb_tDBOutput_4.append("INSERT INTO \"").append(tableName_tDBOutput_4).append("\" (\"cd_cliente\",\"nome_cliente\",\"dt_nascimento\",\"tipo_pessoa\",\"nm_documento\",\"endereco_residencial\",\"bairro_residencial\",\"complemento\",\"cep_residencial\",\"cidade\",\"uf\",\"regiao\",\"endereco_entrega\",\"bairro_entrega\",\"cep_entrega\",\"email_1\",\"email_2\",\"telefone_1\",\"telefone_2\",\"celular\",\"dt_cadastro\",\"dt_primeira_compra\",\"dt_ultima_compra\",\"vl_ultima_compra\",\"dt_ultima_atualizacao\",\"atividade\",\"curva_qtde\",\"curva_vlr\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_4 = sb_tDBOutput_4.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String CD_CLIENTE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.CD_CLIENTE == null) {
										if (other.CD_CLIENTE != null) 
											return false;
								
									} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out4Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    out4Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row1.CD_CLIENTE = next_tHashInput_4.CD_CLIENTE;
	row1.NOME_CLIENTE = next_tHashInput_4.NOME_CLIENTE;
	row1.DT_NASCIMENTO = next_tHashInput_4.DT_NASCIMENTO;
	row1.TIPO_PESSOA = next_tHashInput_4.TIPO_PESSOA;
	row1.NM_DOCUMENTO = next_tHashInput_4.NM_DOCUMENTO;
	row1.ENDERECO_RESIDENCIAL = next_tHashInput_4.ENDERECO_RESIDENCIAL;
	row1.BAIRRO_RESIDENCIAL = next_tHashInput_4.BAIRRO_RESIDENCIAL;
	row1.COMPLEMENTO = next_tHashInput_4.COMPLEMENTO;
	row1.CEP_RESIDENCIAL = next_tHashInput_4.CEP_RESIDENCIAL;
	row1.CIDADE = next_tHashInput_4.CIDADE;
	row1.UF = next_tHashInput_4.UF;
	row1.REGIAO = next_tHashInput_4.REGIAO;
	row1.ENDERECO_ENTREGA = next_tHashInput_4.ENDERECO_ENTREGA;
	row1.BAIRRO_ENTREGA = next_tHashInput_4.BAIRRO_ENTREGA;
	row1.CEP_ENTREGA = next_tHashInput_4.CEP_ENTREGA;
	row1.EMAIL_1 = next_tHashInput_4.EMAIL_1;
	row1.EMAIL_2 = next_tHashInput_4.EMAIL_2;
	row1.TELEFONE_1 = next_tHashInput_4.TELEFONE_1;
	row1.TELEFONE_2 = next_tHashInput_4.TELEFONE_2;
	row1.CELULAR = next_tHashInput_4.CELULAR;
	row1.DT_CADASTRO = next_tHashInput_4.DT_CADASTRO;
	row1.DT_PRIMEIRA_COMPRA = next_tHashInput_4.DT_PRIMEIRA_COMPRA;
	row1.DT_ULTIMA_COMPRA = next_tHashInput_4.DT_ULTIMA_COMPRA;
	row1.VL_ULTIMA_COMPRA = next_tHashInput_4.VL_ULTIMA_COMPRA;
	row1.ATIVIDADE = next_tHashInput_4.ATIVIDADE;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row12 = null;			
if(row1.CD_CLIENTE == null){
	finder_tUniqRow_4.CD_CLIENTE = null;
}else{
	finder_tUniqRow_4.CD_CLIENTE = row1.CD_CLIENTE.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(row1.CD_CLIENTE == null){
	new_tUniqRow_4.CD_CLIENTE = null;
}else{
	new_tUniqRow_4.CD_CLIENTE = row1.CD_CLIENTE.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row12 == null){ 
	
	row12 = new row12Struct();
}row12.CD_CLIENTE = row1.CD_CLIENTE;			row12.NOME_CLIENTE = row1.NOME_CLIENTE;			row12.DT_NASCIMENTO = row1.DT_NASCIMENTO;			row12.TIPO_PESSOA = row1.TIPO_PESSOA;			row12.NM_DOCUMENTO = row1.NM_DOCUMENTO;			row12.ENDERECO_RESIDENCIAL = row1.ENDERECO_RESIDENCIAL;			row12.BAIRRO_RESIDENCIAL = row1.BAIRRO_RESIDENCIAL;			row12.COMPLEMENTO = row1.COMPLEMENTO;			row12.CEP_RESIDENCIAL = row1.CEP_RESIDENCIAL;			row12.CIDADE = row1.CIDADE;			row12.UF = row1.UF;			row12.REGIAO = row1.REGIAO;			row12.ENDERECO_ENTREGA = row1.ENDERECO_ENTREGA;			row12.BAIRRO_ENTREGA = row1.BAIRRO_ENTREGA;			row12.CEP_ENTREGA = row1.CEP_ENTREGA;			row12.EMAIL_1 = row1.EMAIL_1;			row12.EMAIL_2 = row1.EMAIL_2;			row12.TELEFONE_1 = row1.TELEFONE_1;			row12.TELEFONE_2 = row1.TELEFONE_2;			row12.CELULAR = row1.CELULAR;			row12.DT_CADASTRO = row1.DT_CADASTRO;			row12.DT_PRIMEIRA_COMPRA = row1.DT_PRIMEIRA_COMPRA;			row12.DT_ULTIMA_COMPRA = row1.DT_ULTIMA_COMPRA;			row12.VL_ULTIMA_COMPRA = row1.VL_ULTIMA_COMPRA;			row12.ATIVIDADE = row1.ATIVIDADE;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";
	
	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.CD_CLIENTE = row12.CD_CLIENTE;
out1_tmp.NOME_CLIENTE = row12.NOME_CLIENTE;
out1_tmp.DT_NASCIMENTO = row12.DT_NASCIMENTO;
out1_tmp.TIPO_PESSOA = row12.TIPO_PESSOA;
out1_tmp.NM_DOCUMENTO = row12.NM_DOCUMENTO;
out1_tmp.ENDERECO_RESIDENCIAL = row12.ENDERECO_RESIDENCIAL;
out1_tmp.BAIRRO_RESIDENCIAL = row12.BAIRRO_RESIDENCIAL;
out1_tmp.COMPLEMENTO = row12.COMPLEMENTO;
out1_tmp.CEP_RESIDENCIAL = row12.CEP_RESIDENCIAL;
out1_tmp.CIDADE = row12.CIDADE;
out1_tmp.UF = row12.UF;
out1_tmp.REGIAO = row12.REGIAO;
out1_tmp.ENDERECO_ENTREGA = row12.ENDERECO_ENTREGA;
out1_tmp.BAIRRO_ENTREGA = row12.BAIRRO_ENTREGA;
out1_tmp.CEP_ENTREGA = row12.CEP_ENTREGA;
out1_tmp.EMAIL_1 = row12.EMAIL_1;
out1_tmp.EMAIL_2 = row12.EMAIL_2;
out1_tmp.TELEFONE_1 = row12.TELEFONE_1;
out1_tmp.TELEFONE_2 = row12.TELEFONE_2;
out1_tmp.CELULAR = row12.CELULAR;
out1_tmp.DT_CADASTRO = row12.DT_CADASTRO;
out1_tmp.DT_PRIMEIRA_COMPRA = row12.DT_PRIMEIRA_COMPRA;
out1_tmp.DT_ULTIMA_COMPRA = row12.DT_ULTIMA_COMPRA;
out1_tmp.VL_ULTIMA_COMPRA = row12.VL_ULTIMA_COMPRA;
out1_tmp.DT_ULTIMA_ATUALIZACAO = null;
out1_tmp.ATIVIDADE = row12.ATIVIDADE;
out1_tmp.Curva_qtde = null;
out1_tmp.Curva_vlr = null;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(out1.CD_CLIENTE == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, out1.CD_CLIENTE);
}

                    if(out1.NOME_CLIENTE == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, out1.NOME_CLIENTE);
}

                    if(out1.DT_NASCIMENTO != null) {
pstmt_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(out1.DT_NASCIMENTO.getTime()));
} else {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(out1.TIPO_PESSOA == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, out1.TIPO_PESSOA);
}

                    if(out1.NM_DOCUMENTO == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, out1.NM_DOCUMENTO);
}

                    if(out1.ENDERECO_RESIDENCIAL == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, out1.ENDERECO_RESIDENCIAL);
}

                    if(out1.BAIRRO_RESIDENCIAL == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, out1.BAIRRO_RESIDENCIAL);
}

                    if(out1.COMPLEMENTO == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, out1.COMPLEMENTO);
}

                    if(out1.CEP_RESIDENCIAL == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, out1.CEP_RESIDENCIAL);
}

                    if(out1.CIDADE == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, out1.CIDADE);
}

                    if(out1.UF == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, out1.UF);
}

                    if(out1.REGIAO == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, out1.REGIAO);
}

                    if(out1.ENDERECO_ENTREGA == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(13, out1.ENDERECO_ENTREGA);
}

                    if(out1.BAIRRO_ENTREGA == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(14, out1.BAIRRO_ENTREGA);
}

                    if(out1.CEP_ENTREGA == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, out1.CEP_ENTREGA);
}

                    if(out1.EMAIL_1 == null) {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(16, out1.EMAIL_1);
}

                    if(out1.EMAIL_2 == null) {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17, out1.EMAIL_2);
}

                    if(out1.TELEFONE_1 == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, out1.TELEFONE_1);
}

                    if(out1.TELEFONE_2 == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(19, out1.TELEFONE_2);
}

                    if(out1.CELULAR == null) {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(20, out1.CELULAR);
}

                    if(out1.DT_CADASTRO != null) {
pstmt_tDBOutput_4.setTimestamp(21, new java.sql.Timestamp(out1.DT_CADASTRO.getTime()));
} else {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(out1.DT_PRIMEIRA_COMPRA != null) {
pstmt_tDBOutput_4.setTimestamp(22, new java.sql.Timestamp(out1.DT_PRIMEIRA_COMPRA.getTime()));
} else {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(out1.DT_ULTIMA_COMPRA != null) {
pstmt_tDBOutput_4.setTimestamp(23, new java.sql.Timestamp(out1.DT_ULTIMA_COMPRA.getTime()));
} else {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(out1.VL_ULTIMA_COMPRA == null) {
pstmt_tDBOutput_4.setNull(24, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(24, out1.VL_ULTIMA_COMPRA);
}

                    if(out1.DT_ULTIMA_ATUALIZACAO != null) {
pstmt_tDBOutput_4.setTimestamp(25, new java.sql.Timestamp(out1.DT_ULTIMA_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_4.setNull(25, java.sql.Types.TIMESTAMP);
}

                    if(out1.ATIVIDADE == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(26, out1.ATIVIDADE);
}

                    if(out1.Curva_qtde == null) {
pstmt_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(27, out1.Curva_qtde);
}

                    if(out1.Curva_vlr == null) {
pstmt_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(28, out1.Curva_vlr);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";
	
	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";
	
	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";
	
	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
	int count_tDBRow_1 = 0;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

query_tDBRow_1 = "\nupdate dw_t_cliente set curva_qtde = 'C' where curva_qtde is null;\nupdate dw_t_cliente set curva_vlr = 'C' where cur"
+"va_vlr is null;\ncommit;\n\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
				stmt_tDBRow_1.execute(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

	globalMap.put("tDBRow_1_NB_LINE", count_tDBRow_1);
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row16Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row17.nm_programa = next_tHashInput_6.nm_programa;
	row17.data_inicio_execucao = next_tHashInput_6.data_inicio_execucao;
	row17.data_termino_execucao = next_tHashInput_6.data_termino_execucao;
	row17.mensagem = next_tHashInput_6.mensagem;
	row17.uuid = next_tHashInput_6.uuid;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row17.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row17.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String cd_cliente;

				public String getCd_cliente () {
					return this.cd_cliente;
				}

				public Boolean cd_clienteIsNullable(){
				    return true;
				}
				public Boolean cd_clienteIsKey(){
				    return false;
				}
				public Integer cd_clienteLength(){
				    return null;
				}
				public Integer cd_clientePrecision(){
				    return null;
				}
				public String cd_clienteDefault(){
				
					return null;
				
				}
				public String cd_clienteComment(){
				
				    return "";
				
				}
				public String cd_clientePattern(){
				
					return "";
				
				}
				public String cd_clienteOriginalDbColumnName(){
				
					return "cd_cliente";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cd_cliente == null) ? 0 : this.cd_cliente.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.cd_cliente == null) {
							if (other.cd_cliente != null)
								return false;
						
						} else if (!this.cd_cliente.equals(other.cd_cliente))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.cd_cliente = this.cd_cliente;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.cd_cliente = this.cd_cliente;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.cd_cliente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.cd_cliente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd_cliente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.cd_cliente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd_cliente="+cd_cliente);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cd_cliente, other.cd_cliente);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tAdvancedHash_row32 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row32", false);
		start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row32";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tAdvancedHash_row32 = 0;
		

			   		// connection name:row32
			   		// source node:tHashInput_12 - inputs:(after_tHashInput_11) outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
			   		// linked node: tMap_11 - inputs:(row31,row32) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row32Struct>getLookup(matchingModeEnum_row32);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row32 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row30Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row30Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row32.cd_cliente = next_tHashInput_12.cd_cliente;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					


			   
			   

					row32Struct row32_HashRow = new row32Struct();
		   	   	   
				
				row32_HashRow.cd_cliente = row32.cd_cliente;
				
			tHash_Lookup_row32.put(row32_HashRow);
			
            




 


	tos_count_tAdvancedHash_row32++;

/**
 * [tAdvancedHash_row32 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_cliente_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

tHash_Lookup_row32.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row32", true);
end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());




/**
 * [tAdvancedHash_row32 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];

	
			    public String cd_cliente;

				public String getCd_cliente () {
					return this.cd_cliente;
				}

				public Boolean cd_clienteIsNullable(){
				    return true;
				}
				public Boolean cd_clienteIsKey(){
				    return false;
				}
				public Integer cd_clienteLength(){
				    return null;
				}
				public Integer cd_clientePrecision(){
				    return null;
				}
				public String cd_clienteDefault(){
				
					return null;
				
				}
				public String cd_clienteComment(){
				
				    return "";
				
				}
				public String cd_clientePattern(){
				
					return "";
				
				}
				public String cd_clienteOriginalDbColumnName(){
				
					return "cd_cliente";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.cd_cliente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.cd_cliente = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd_cliente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.cd_cliente,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd_cliente="+cd_cliente);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_dw_t_cliente_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;

 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";
	
	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "select cd_cliente from dw_t_cliente";
		    

		    globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);

		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row30.cd_cliente = null;
							} else {
	                         		
        	row30.cd_cliente = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					



    
		row30Struct oneRow_tHashOutput_10 = new row30Struct();
				
					oneRow_tHashOutput_10.cd_cliente = row30.cd_cliente;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;

 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NOME_CLIENTE;

				public String getNOME_CLIENTE () {
					return this.NOME_CLIENTE;
				}

				public Boolean NOME_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NOME_CLIENTEIsKey(){
				    return false;
				}
				public Integer NOME_CLIENTELength(){
				    return 60;
				}
				public Integer NOME_CLIENTEPrecision(){
				    return null;
				}
				public String NOME_CLIENTEDefault(){
				
					return null;
				
				}
				public String NOME_CLIENTEComment(){
				
				    return "";
				
				}
				public String NOME_CLIENTEPattern(){
				
					return "";
				
				}
				public String NOME_CLIENTEOriginalDbColumnName(){
				
					return "NOME_CLIENTE";
				
				}

				
			    public java.util.Date DT_NASCIMENTO;

				public java.util.Date getDT_NASCIMENTO () {
					return this.DT_NASCIMENTO;
				}

				public Boolean DT_NASCIMENTOIsNullable(){
				    return true;
				}
				public Boolean DT_NASCIMENTOIsKey(){
				    return false;
				}
				public Integer DT_NASCIMENTOLength(){
				    return 3;
				}
				public Integer DT_NASCIMENTOPrecision(){
				    return null;
				}
				public String DT_NASCIMENTODefault(){
				
					return null;
				
				}
				public String DT_NASCIMENTOComment(){
				
				    return "";
				
				}
				public String DT_NASCIMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_NASCIMENTOOriginalDbColumnName(){
				
					return "DT_NASCIMENTO";
				
				}

				
			    public String TIPO_PESSOA;

				public String getTIPO_PESSOA () {
					return this.TIPO_PESSOA;
				}

				public Boolean TIPO_PESSOAIsNullable(){
				    return true;
				}
				public Boolean TIPO_PESSOAIsKey(){
				    return false;
				}
				public Integer TIPO_PESSOALength(){
				    return 8;
				}
				public Integer TIPO_PESSOAPrecision(){
				    return null;
				}
				public String TIPO_PESSOADefault(){
				
					return null;
				
				}
				public String TIPO_PESSOAComment(){
				
				    return "";
				
				}
				public String TIPO_PESSOAPattern(){
				
					return "";
				
				}
				public String TIPO_PESSOAOriginalDbColumnName(){
				
					return "TIPO_PESSOA";
				
				}

				
			    public String NM_DOCUMENTO;

				public String getNM_DOCUMENTO () {
					return this.NM_DOCUMENTO;
				}

				public Boolean NM_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean NM_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer NM_DOCUMENTOLength(){
				    return 14;
				}
				public Integer NM_DOCUMENTOPrecision(){
				    return null;
				}
				public String NM_DOCUMENTODefault(){
				
					return null;
				
				}
				public String NM_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String NM_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String NM_DOCUMENTOOriginalDbColumnName(){
				
					return "NM_DOCUMENTO";
				
				}

				
			    public String ENDERECO_RESIDENCIAL;

				public String getENDERECO_RESIDENCIAL () {
					return this.ENDERECO_RESIDENCIAL;
				}

				public Boolean ENDERECO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer ENDERECO_RESIDENCIALLength(){
				    return 100;
				}
				public Integer ENDERECO_RESIDENCIALPrecision(){
				    return null;
				}
				public String ENDERECO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String ENDERECO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String ENDERECO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String ENDERECO_RESIDENCIALOriginalDbColumnName(){
				
					return "ENDERECO_RESIDENCIAL";
				
				}

				
			    public String BAIRRO_RESIDENCIAL;

				public String getBAIRRO_RESIDENCIAL () {
					return this.BAIRRO_RESIDENCIAL;
				}

				public Boolean BAIRRO_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer BAIRRO_RESIDENCIALLength(){
				    return 60;
				}
				public Integer BAIRRO_RESIDENCIALPrecision(){
				    return null;
				}
				public String BAIRRO_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String BAIRRO_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String BAIRRO_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String BAIRRO_RESIDENCIALOriginalDbColumnName(){
				
					return "BAIRRO_RESIDENCIAL";
				
				}

				
			    public String COMPLEMENTO;

				public String getCOMPLEMENTO () {
					return this.COMPLEMENTO;
				}

				public Boolean COMPLEMENTOIsNullable(){
				    return true;
				}
				public Boolean COMPLEMENTOIsKey(){
				    return false;
				}
				public Integer COMPLEMENTOLength(){
				    return 60;
				}
				public Integer COMPLEMENTOPrecision(){
				    return null;
				}
				public String COMPLEMENTODefault(){
				
					return null;
				
				}
				public String COMPLEMENTOComment(){
				
				    return "";
				
				}
				public String COMPLEMENTOPattern(){
				
					return "";
				
				}
				public String COMPLEMENTOOriginalDbColumnName(){
				
					return "COMPLEMENTO";
				
				}

				
			    public String CEP_RESIDENCIAL;

				public String getCEP_RESIDENCIAL () {
					return this.CEP_RESIDENCIAL;
				}

				public Boolean CEP_RESIDENCIALIsNullable(){
				    return true;
				}
				public Boolean CEP_RESIDENCIALIsKey(){
				    return false;
				}
				public Integer CEP_RESIDENCIALLength(){
				    return 9;
				}
				public Integer CEP_RESIDENCIALPrecision(){
				    return null;
				}
				public String CEP_RESIDENCIALDefault(){
				
					return null;
				
				}
				public String CEP_RESIDENCIALComment(){
				
				    return "";
				
				}
				public String CEP_RESIDENCIALPattern(){
				
					return "";
				
				}
				public String CEP_RESIDENCIALOriginalDbColumnName(){
				
					return "CEP_RESIDENCIAL";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String REGIAO;

				public String getREGIAO () {
					return this.REGIAO;
				}

				public Boolean REGIAOIsNullable(){
				    return true;
				}
				public Boolean REGIAOIsKey(){
				    return false;
				}
				public Integer REGIAOLength(){
				    return 12;
				}
				public Integer REGIAOPrecision(){
				    return null;
				}
				public String REGIAODefault(){
				
					return null;
				
				}
				public String REGIAOComment(){
				
				    return "";
				
				}
				public String REGIAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String REGIAOOriginalDbColumnName(){
				
					return "REGIAO";
				
				}

				
			    public String ENDERECO_ENTREGA;

				public String getENDERECO_ENTREGA () {
					return this.ENDERECO_ENTREGA;
				}

				public Boolean ENDERECO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean ENDERECO_ENTREGAIsKey(){
				    return false;
				}
				public Integer ENDERECO_ENTREGALength(){
				    return 60;
				}
				public Integer ENDERECO_ENTREGAPrecision(){
				    return null;
				}
				public String ENDERECO_ENTREGADefault(){
				
					return null;
				
				}
				public String ENDERECO_ENTREGAComment(){
				
				    return "";
				
				}
				public String ENDERECO_ENTREGAPattern(){
				
					return "";
				
				}
				public String ENDERECO_ENTREGAOriginalDbColumnName(){
				
					return "ENDERECO_ENTREGA";
				
				}

				
			    public String BAIRRO_ENTREGA;

				public String getBAIRRO_ENTREGA () {
					return this.BAIRRO_ENTREGA;
				}

				public Boolean BAIRRO_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean BAIRRO_ENTREGAIsKey(){
				    return false;
				}
				public Integer BAIRRO_ENTREGALength(){
				    return 60;
				}
				public Integer BAIRRO_ENTREGAPrecision(){
				    return null;
				}
				public String BAIRRO_ENTREGADefault(){
				
					return null;
				
				}
				public String BAIRRO_ENTREGAComment(){
				
				    return "";
				
				}
				public String BAIRRO_ENTREGAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String BAIRRO_ENTREGAOriginalDbColumnName(){
				
					return "BAIRRO_ENTREGA";
				
				}

				
			    public String CEP_ENTREGA;

				public String getCEP_ENTREGA () {
					return this.CEP_ENTREGA;
				}

				public Boolean CEP_ENTREGAIsNullable(){
				    return true;
				}
				public Boolean CEP_ENTREGAIsKey(){
				    return false;
				}
				public Integer CEP_ENTREGALength(){
				    return 9;
				}
				public Integer CEP_ENTREGAPrecision(){
				    return null;
				}
				public String CEP_ENTREGADefault(){
				
					return null;
				
				}
				public String CEP_ENTREGAComment(){
				
				    return "";
				
				}
				public String CEP_ENTREGAPattern(){
				
					return "";
				
				}
				public String CEP_ENTREGAOriginalDbColumnName(){
				
					return "CEP_ENTREGA";
				
				}

				
			    public String EMAIL_1;

				public String getEMAIL_1 () {
					return this.EMAIL_1;
				}

				public Boolean EMAIL_1IsNullable(){
				    return true;
				}
				public Boolean EMAIL_1IsKey(){
				    return false;
				}
				public Integer EMAIL_1Length(){
				    return 255;
				}
				public Integer EMAIL_1Precision(){
				    return null;
				}
				public String EMAIL_1Default(){
				
					return null;
				
				}
				public String EMAIL_1Comment(){
				
				    return "";
				
				}
				public String EMAIL_1Pattern(){
				
					return "";
				
				}
				public String EMAIL_1OriginalDbColumnName(){
				
					return "EMAIL_1";
				
				}

				
			    public String EMAIL_2;

				public String getEMAIL_2 () {
					return this.EMAIL_2;
				}

				public Boolean EMAIL_2IsNullable(){
				    return true;
				}
				public Boolean EMAIL_2IsKey(){
				    return false;
				}
				public Integer EMAIL_2Length(){
				    return 255;
				}
				public Integer EMAIL_2Precision(){
				    return null;
				}
				public String EMAIL_2Default(){
				
					return null;
				
				}
				public String EMAIL_2Comment(){
				
				    return "";
				
				}
				public String EMAIL_2Pattern(){
				
					return "";
				
				}
				public String EMAIL_2OriginalDbColumnName(){
				
					return "EMAIL_2";
				
				}

				
			    public String TELEFONE_1;

				public String getTELEFONE_1 () {
					return this.TELEFONE_1;
				}

				public Boolean TELEFONE_1IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_1IsKey(){
				    return false;
				}
				public Integer TELEFONE_1Length(){
				    return 15;
				}
				public Integer TELEFONE_1Precision(){
				    return null;
				}
				public String TELEFONE_1Default(){
				
					return null;
				
				}
				public String TELEFONE_1Comment(){
				
				    return "";
				
				}
				public String TELEFONE_1Pattern(){
				
					return "";
				
				}
				public String TELEFONE_1OriginalDbColumnName(){
				
					return "TELEFONE_1";
				
				}

				
			    public String TELEFONE_2;

				public String getTELEFONE_2 () {
					return this.TELEFONE_2;
				}

				public Boolean TELEFONE_2IsNullable(){
				    return true;
				}
				public Boolean TELEFONE_2IsKey(){
				    return false;
				}
				public Integer TELEFONE_2Length(){
				    return 15;
				}
				public Integer TELEFONE_2Precision(){
				    return null;
				}
				public String TELEFONE_2Default(){
				
					return null;
				
				}
				public String TELEFONE_2Comment(){
				
				    return "";
				
				}
				public String TELEFONE_2Pattern(){
				
					return "";
				
				}
				public String TELEFONE_2OriginalDbColumnName(){
				
					return "TELEFONE_2";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 15;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_PRIMEIRA_COMPRA;

				public java.util.Date getDT_PRIMEIRA_COMPRA () {
					return this.DT_PRIMEIRA_COMPRA;
				}

				public Boolean DT_PRIMEIRA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_PRIMEIRA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_PRIMEIRA_COMPRALength(){
				    return null;
				}
				public Integer DT_PRIMEIRA_COMPRAPrecision(){
				    return null;
				}
				public String DT_PRIMEIRA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_PRIMEIRA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_PRIMEIRA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_PRIMEIRA_COMPRAOriginalDbColumnName(){
				
					return "DT_PRIMEIRA_COMPRA";
				
				}

				
			    public java.util.Date DT_ULTIMA_COMPRA;

				public java.util.Date getDT_ULTIMA_COMPRA () {
					return this.DT_ULTIMA_COMPRA;
				}

				public Boolean DT_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer DT_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "DT_ULTIMA_COMPRA";
				
				}

				
			    public Double VL_ULTIMA_COMPRA;

				public Double getVL_ULTIMA_COMPRA () {
					return this.VL_ULTIMA_COMPRA;
				}

				public Boolean VL_ULTIMA_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULTIMA_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULTIMA_COMPRALength(){
				    return null;
				}
				public Integer VL_ULTIMA_COMPRAPrecision(){
				    return null;
				}
				public String VL_ULTIMA_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULTIMA_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULTIMA_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULTIMA_COMPRAOriginalDbColumnName(){
				
					return "VL_ULTIMA_COMPRA";
				
				}

				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}

				public Boolean ATIVIDADEIsNullable(){
				    return true;
				}
				public Boolean ATIVIDADEIsKey(){
				    return false;
				}
				public Integer ATIVIDADELength(){
				    return 80;
				}
				public Integer ATIVIDADEPrecision(){
				    return null;
				}
				public String ATIVIDADEDefault(){
				
					return null;
				
				}
				public String ATIVIDADEComment(){
				
				    return "";
				
				}
				public String ATIVIDADEPattern(){
				
					return "";
				
				}
				public String ATIVIDADEOriginalDbColumnName(){
				
					return "ATIVIDADE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NOME_CLIENTE = this.NOME_CLIENTE;
	            other.DT_NASCIMENTO = this.DT_NASCIMENTO;
	            other.TIPO_PESSOA = this.TIPO_PESSOA;
	            other.NM_DOCUMENTO = this.NM_DOCUMENTO;
	            other.ENDERECO_RESIDENCIAL = this.ENDERECO_RESIDENCIAL;
	            other.BAIRRO_RESIDENCIAL = this.BAIRRO_RESIDENCIAL;
	            other.COMPLEMENTO = this.COMPLEMENTO;
	            other.CEP_RESIDENCIAL = this.CEP_RESIDENCIAL;
	            other.CIDADE = this.CIDADE;
	            other.UF = this.UF;
	            other.REGIAO = this.REGIAO;
	            other.ENDERECO_ENTREGA = this.ENDERECO_ENTREGA;
	            other.BAIRRO_ENTREGA = this.BAIRRO_ENTREGA;
	            other.CEP_ENTREGA = this.CEP_ENTREGA;
	            other.EMAIL_1 = this.EMAIL_1;
	            other.EMAIL_2 = this.EMAIL_2;
	            other.TELEFONE_1 = this.TELEFONE_1;
	            other.TELEFONE_2 = this.TELEFONE_2;
	            other.CELULAR = this.CELULAR;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_PRIMEIRA_COMPRA = this.DT_PRIMEIRA_COMPRA;
	            other.DT_ULTIMA_COMPRA = this.DT_ULTIMA_COMPRA;
	            other.VL_ULTIMA_COMPRA = this.VL_ULTIMA_COMPRA;
	            other.ATIVIDADE = this.ATIVIDADE;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.CD_CLIENTE = this.CD_CLIENTE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_cliente, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_cliente) {

        	try {

        		int length = 0;
		
					this.CD_CLIENTE = readString(dis);
					
					this.NOME_CLIENTE = readString(dis);
					
					this.DT_NASCIMENTO = readDate(dis);
					
					this.TIPO_PESSOA = readString(dis);
					
					this.NM_DOCUMENTO = readString(dis);
					
					this.ENDERECO_RESIDENCIAL = readString(dis);
					
					this.BAIRRO_RESIDENCIAL = readString(dis);
					
					this.COMPLEMENTO = readString(dis);
					
					this.CEP_RESIDENCIAL = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.REGIAO = readString(dis);
					
					this.ENDERECO_ENTREGA = readString(dis);
					
					this.BAIRRO_ENTREGA = readString(dis);
					
					this.CEP_ENTREGA = readString(dis);
					
					this.EMAIL_1 = readString(dis);
					
					this.EMAIL_2 = readString(dis);
					
					this.TELEFONE_1 = readString(dis);
					
					this.TELEFONE_2 = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_PRIMEIRA_COMPRA = readDate(dis);
					
					this.DT_ULTIMA_COMPRA = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VL_ULTIMA_COMPRA = null;
           				} else {
           			    	this.VL_ULTIMA_COMPRA = dis.readDouble();
           				}
					
					this.ATIVIDADE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NOME_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NASCIMENTO,dos);
					
					// String
				
						writeString(this.TIPO_PESSOA,dos);
					
					// String
				
						writeString(this.NM_DOCUMENTO,dos);
					
					// String
				
						writeString(this.ENDERECO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.BAIRRO_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.COMPLEMENTO,dos);
					
					// String
				
						writeString(this.CEP_RESIDENCIAL,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.REGIAO,dos);
					
					// String
				
						writeString(this.ENDERECO_ENTREGA,dos);
					
					// String
				
						writeString(this.BAIRRO_ENTREGA,dos);
					
					// String
				
						writeString(this.CEP_ENTREGA,dos);
					
					// String
				
						writeString(this.EMAIL_1,dos);
					
					// String
				
						writeString(this.EMAIL_2,dos);
					
					// String
				
						writeString(this.TELEFONE_1,dos);
					
					// String
				
						writeString(this.TELEFONE_2,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PRIMEIRA_COMPRA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_COMPRA,dos);
					
					// Double
				
						if(this.VL_ULTIMA_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VL_ULTIMA_COMPRA);
		            	}
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NOME_CLIENTE="+NOME_CLIENTE);
		sb.append(",DT_NASCIMENTO="+String.valueOf(DT_NASCIMENTO));
		sb.append(",TIPO_PESSOA="+TIPO_PESSOA);
		sb.append(",NM_DOCUMENTO="+NM_DOCUMENTO);
		sb.append(",ENDERECO_RESIDENCIAL="+ENDERECO_RESIDENCIAL);
		sb.append(",BAIRRO_RESIDENCIAL="+BAIRRO_RESIDENCIAL);
		sb.append(",COMPLEMENTO="+COMPLEMENTO);
		sb.append(",CEP_RESIDENCIAL="+CEP_RESIDENCIAL);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",REGIAO="+REGIAO);
		sb.append(",ENDERECO_ENTREGA="+ENDERECO_ENTREGA);
		sb.append(",BAIRRO_ENTREGA="+BAIRRO_ENTREGA);
		sb.append(",CEP_ENTREGA="+CEP_ENTREGA);
		sb.append(",EMAIL_1="+EMAIL_1);
		sb.append(",EMAIL_2="+EMAIL_2);
		sb.append(",TELEFONE_1="+TELEFONE_1);
		sb.append(",TELEFONE_2="+TELEFONE_2);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_PRIMEIRA_COMPRA="+String.valueOf(DT_PRIMEIRA_COMPRA));
		sb.append(",DT_ULTIMA_COMPRA="+String.valueOf(DT_ULTIMA_COMPRA));
		sb.append(",VL_ULTIMA_COMPRA="+String.valueOf(VL_ULTIMA_COMPRA));
		sb.append(",ATIVIDADE="+ATIVIDADE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_dw_t_cliente_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\n SELECT CLI.CLI_CODCLI CD_CLIENTE,\n		CLI.CLI_NOMCLI NOME_CLIENTE,\n		CLI.CLI_NASCIM DT_NASCIMENTO,\n		CASE CLI.CLI_C"
+"GCCPF \n		 WHEN 1 THEN 'JURIDICA'\n		 WHEN 2 THEN  'FISICA'\n		END AS TIPO_PESSOA, \n        CLI.CLI_C_G_C_ NM_DOCUMENTO"
+",\n		CONCAT(CLI.CLI_ENDERE,', ',CLI.CLI_ENDNUM) ENDERECO_RESIDENCIAL,\n		CLI.CLI_BAIRRO BAIRRO_RESIDENCIAL,\n		CLI.CLI_E"
+"NDCOM COMPLEMENTO,\n		CLI.CLI_C_E_P_ CEP_RESIDENCIAL,\n		CID.CID_NOMCID CIDADE,\n		CID.CID_ESTADO UF,\n		CASE \n		 WHEN "
+"CID.CID_ESTADO IN ('PR', 'RS', 'SC') THEN 'SUL'\n		 WHEN CID.CID_ESTADO IN ('SP', 'RJ', 'ES', 'MG') THEN 'SUDESTE'\n		 W"
+"HEN CID.CID_ESTADO IN ('MT', 'MS', 'GO') THEN 'CENTRO-OESTE'\n		 WHEN CID.CID_ESTADO IN ('BA', 'AL', 'SE', 'PB', 'PE', '"
+"RN', 'CE', 'PI', 'MA') THEN 'NORDESTE'\n		 WHEN CID.CID_ESTADO IN ('AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC') THEN 'NORTE"
+"'\n        ELSE '' END AS REGIAO,\n		CLI.CLI_ENDENT ENDERECO_ENTREGA,\n		CLI.CLI_BAIENT BAIRRO_ENTREGA,\n		CLI.CLI_CEPEN"
+"T CEP_ENTREGA,\n		CLI.CLI_EMAIL_ EMAIL_1,\n		CLI.CLI_EMAIL2 EMAIL_2,\n		CLI.CLI_FONE01 TELEFONE_1,\n		CLI.CLI_FONE02 TEL"
+"EFONE_2,\n		CLI.CLI_CELULA CELULAR,\n		CLI.CLI_DTACAD DT_CADASTRO,\n		CLI.CLI_PRICOM DT_PRIMEIRA_COMPRA,\n		CLI.CLI_ULTC"
+"OM DT_ULTIMA_COMPRA,\n		CLI.CLI_VRUCOM VL_ULTIMA_COMPRA,\n        (select ATI_DESATI from CADATI where ATI_CODATI = CLI."
+"CLI_CODATI) ATIVIDADE\n   FROM CADCLI CLI, CADCID CID\n  WHERE CLI.CLI_CODCID  = CID.CID_CODCID\n          AND CLI.CLI_D"
+"TACAD >= SUBDATE(CURDATE(), 15)\n\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row9.CD_CLIENTE = null;
							} else {
	                         		
        	row9.CD_CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row9.NOME_CLIENTE = null;
							} else {
	                         		
        	row9.NOME_CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row9.DT_NASCIMENTO = null;
							} else {
										
				if(rs_tDBInput_3.getString(3) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row9.DT_NASCIMENTO = rs_tDBInput_3.getTimestamp(3);
					} else {
						row9.DT_NASCIMENTO = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row9.DT_NASCIMENTO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row9.TIPO_PESSOA = null;
							} else {
	                         		
        	row9.TIPO_PESSOA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row9.NM_DOCUMENTO = null;
							} else {
	                         		
        	row9.NM_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row9.ENDERECO_RESIDENCIAL = null;
							} else {
	                         		
        	row9.ENDERECO_RESIDENCIAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row9.BAIRRO_RESIDENCIAL = null;
							} else {
	                         		
        	row9.BAIRRO_RESIDENCIAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row9.COMPLEMENTO = null;
							} else {
	                         		
        	row9.COMPLEMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row9.CEP_RESIDENCIAL = null;
							} else {
	                         		
        	row9.CEP_RESIDENCIAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row9.CIDADE = null;
							} else {
	                         		
        	row9.CIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row9.UF = null;
							} else {
	                         		
        	row9.UF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row9.REGIAO = null;
							} else {
	                         		
        	row9.REGIAO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row9.ENDERECO_ENTREGA = null;
							} else {
	                         		
        	row9.ENDERECO_ENTREGA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row9.BAIRRO_ENTREGA = null;
							} else {
	                         		
        	row9.BAIRRO_ENTREGA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row9.CEP_ENTREGA = null;
							} else {
	                         		
        	row9.CEP_ENTREGA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row9.EMAIL_1 = null;
							} else {
	                         		
        	row9.EMAIL_1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row9.EMAIL_2 = null;
							} else {
	                         		
        	row9.EMAIL_2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row9.TELEFONE_1 = null;
							} else {
	                         		
        	row9.TELEFONE_1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row9.TELEFONE_2 = null;
							} else {
	                         		
        	row9.TELEFONE_2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row9.CELULAR = null;
							} else {
	                         		
        	row9.CELULAR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row9.DT_CADASTRO = null;
							} else {
										
				if(rs_tDBInput_3.getString(21) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(21);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row9.DT_CADASTRO = rs_tDBInput_3.getTimestamp(21);
					} else {
						row9.DT_CADASTRO = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row9.DT_CADASTRO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row9.DT_PRIMEIRA_COMPRA = null;
							} else {
										
				if(rs_tDBInput_3.getString(22) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(22);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row9.DT_PRIMEIRA_COMPRA = rs_tDBInput_3.getTimestamp(22);
					} else {
						row9.DT_PRIMEIRA_COMPRA = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row9.DT_PRIMEIRA_COMPRA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row9.DT_ULTIMA_COMPRA = null;
							} else {
										
				if(rs_tDBInput_3.getString(23) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(23);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row9.DT_ULTIMA_COMPRA = rs_tDBInput_3.getTimestamp(23);
					} else {
						row9.DT_ULTIMA_COMPRA = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row9.DT_ULTIMA_COMPRA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row9.VL_ULTIMA_COMPRA = null;
							} else {
	                         		
            row9.VL_ULTIMA_COMPRA = rs_tDBInput_3.getDouble(24);
            if(rs_tDBInput_3.wasNull()){
                    row9.VL_ULTIMA_COMPRA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row9.ATIVIDADE = null;
							} else {
	                         		
        	row9.ATIVIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					



    
		row9Struct oneRow_tHashOutput_4 = new row9Struct();
				
					oneRow_tHashOutput_4.CD_CLIENTE = row9.CD_CLIENTE;
					oneRow_tHashOutput_4.NOME_CLIENTE = row9.NOME_CLIENTE;
					oneRow_tHashOutput_4.DT_NASCIMENTO = row9.DT_NASCIMENTO;
					oneRow_tHashOutput_4.TIPO_PESSOA = row9.TIPO_PESSOA;
					oneRow_tHashOutput_4.NM_DOCUMENTO = row9.NM_DOCUMENTO;
					oneRow_tHashOutput_4.ENDERECO_RESIDENCIAL = row9.ENDERECO_RESIDENCIAL;
					oneRow_tHashOutput_4.BAIRRO_RESIDENCIAL = row9.BAIRRO_RESIDENCIAL;
					oneRow_tHashOutput_4.COMPLEMENTO = row9.COMPLEMENTO;
					oneRow_tHashOutput_4.CEP_RESIDENCIAL = row9.CEP_RESIDENCIAL;
					oneRow_tHashOutput_4.CIDADE = row9.CIDADE;
					oneRow_tHashOutput_4.UF = row9.UF;
					oneRow_tHashOutput_4.REGIAO = row9.REGIAO;
					oneRow_tHashOutput_4.ENDERECO_ENTREGA = row9.ENDERECO_ENTREGA;
					oneRow_tHashOutput_4.BAIRRO_ENTREGA = row9.BAIRRO_ENTREGA;
					oneRow_tHashOutput_4.CEP_ENTREGA = row9.CEP_ENTREGA;
					oneRow_tHashOutput_4.EMAIL_1 = row9.EMAIL_1;
					oneRow_tHashOutput_4.EMAIL_2 = row9.EMAIL_2;
					oneRow_tHashOutput_4.TELEFONE_1 = row9.TELEFONE_1;
					oneRow_tHashOutput_4.TELEFONE_2 = row9.TELEFONE_2;
					oneRow_tHashOutput_4.CELULAR = row9.CELULAR;
					oneRow_tHashOutput_4.DT_CADASTRO = row9.DT_CADASTRO;
					oneRow_tHashOutput_4.DT_PRIMEIRA_COMPRA = row9.DT_PRIMEIRA_COMPRA;
					oneRow_tHashOutput_4.DT_ULTIMA_COMPRA = row9.DT_ULTIMA_COMPRA;
					oneRow_tHashOutput_4.VL_ULTIMA_COMPRA = row9.VL_ULTIMA_COMPRA;
					oneRow_tHashOutput_4.ATIVIDADE = row9.ATIVIDADE;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_cliente dw_t_clienteClass = new dw_t_cliente();

        int exitCode = dw_t_clienteClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_cliente.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_cliente_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_cliente.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("agrupador", "id_Integer");
                        if(context.getStringValue("agrupador") == null) {
                            context.agrupador = null;
                        } else {
                            try{
                                context.agrupador=routines.system.ParserUtils.parseTo_Integer (context.getProperty("agrupador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "agrupador", e.getMessage()));
                                context.agrupador=null;
                            }
                        }
                        context.setContextType("linha", "id_Integer");
                        if(context.getStringValue("linha") == null) {
                            context.linha = null;
                        } else {
                            try{
                                context.linha=routines.system.ParserUtils.parseTo_Integer (context.getProperty("linha"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "linha", e.getMessage()));
                                context.linha=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("parametro_qtde", "id_Integer");
                        if(context.getStringValue("parametro_qtde") == null) {
                            context.parametro_qtde = null;
                        } else {
                            try{
                                context.parametro_qtde=routines.system.ParserUtils.parseTo_Integer (context.getProperty("parametro_qtde"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "parametro_qtde", e.getMessage()));
                                context.parametro_qtde=null;
                            }
                        }
                        context.setContextType("parametro_vlr", "id_Integer");
                        if(context.getStringValue("parametro_vlr") == null) {
                            context.parametro_vlr = null;
                        } else {
                            try{
                                context.parametro_vlr=routines.system.ParserUtils.parseTo_Integer (context.getProperty("parametro_vlr"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "parametro_vlr", e.getMessage()));
                                context.parametro_vlr=null;
                            }
                        }
                        context.setContextType("Acumuladovlr", "id_Double");
                        if(context.getStringValue("Acumuladovlr") == null) {
                            context.Acumuladovlr = null;
                        } else {
                            try{
                                context.Acumuladovlr=routines.system.ParserUtils.parseTo_Double (context.getProperty("Acumuladovlr"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Acumuladovlr", e.getMessage()));
                                context.Acumuladovlr=null;
                            }
                        }
                        context.setContextType("Acumulado", "id_Double");
                        if(context.getStringValue("Acumulado") == null) {
                            context.Acumulado = null;
                        } else {
                            try{
                                context.Acumulado=routines.system.ParserUtils.parseTo_Double (context.getProperty("Acumulado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Acumulado", e.getMessage()));
                                context.Acumulado=null;
                            }
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("agrupador")) {
                context.agrupador = (Integer) parentContextMap.get("agrupador");
            }if (parentContextMap.containsKey("linha")) {
                context.linha = (Integer) parentContextMap.get("linha");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("parametro_qtde")) {
                context.parametro_qtde = (Integer) parentContextMap.get("parametro_qtde");
            }if (parentContextMap.containsKey("parametro_vlr")) {
                context.parametro_vlr = (Integer) parentContextMap.get("parametro_vlr");
            }if (parentContextMap.containsKey("Acumuladovlr")) {
                context.Acumuladovlr = (Double) parentContextMap.get("Acumuladovlr");
            }if (parentContextMap.containsKey("Acumulado")) {
                context.Acumulado = (Double) parentContextMap.get("Acumulado");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_8Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}catch (java.lang.Error e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_8;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_cliente");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     509678 characters generated by Talend Open Studio for Big Data 
 *     on the 20 de maio de 2024 15:26:07 BRT
 ************************************************************************************************/