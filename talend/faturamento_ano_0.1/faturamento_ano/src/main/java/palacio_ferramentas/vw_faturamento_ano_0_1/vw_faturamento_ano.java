// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.vw_faturamento_ano_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: vw_faturamento_ano Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class vw_faturamento_ano implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(DW_DB != null){
				
					this.setProperty("DW_DB", DW_DB.toString());
				
			}
			
			if(DW_HOST != null){
				
					this.setProperty("DW_HOST", DW_HOST.toString());
				
			}
			
			if(DW_PASSWORD != null){
				
					this.setProperty("DW_PASSWORD", DW_PASSWORD.toString());
				
			}
			
			if(DW_PORT != null){
				
					this.setProperty("DW_PORT", DW_PORT.toString());
				
			}
			
			if(DW_USER != null){
				
					this.setProperty("DW_USER", DW_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(dias != null){
				
					this.setProperty("dias", dias.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String DW_DB;
public String getDW_DB(){
	return this.DW_DB;
}
public String DW_HOST;
public String getDW_HOST(){
	return this.DW_HOST;
}
public String DW_PASSWORD;
public String getDW_PASSWORD(){
	return this.DW_PASSWORD;
}
public String DW_PORT;
public String getDW_PORT(){
	return this.DW_PORT;
}
public String DW_USER;
public String getDW_USER(){
	return this.DW_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public Integer dias;
public Integer getDias(){
	return this.dias;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "vw_faturamento_ano";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				vw_faturamento_ano.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(vw_faturamento_ano.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row8Struct row11 = row8;





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[2];

        public void addRow(String[] row) {

            for (int i = 0; i < 2; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 1 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                
                    //last column
                    for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("get_date");
        util_tLogRow_2.addRow(new String[]{"ANO","MES",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_vw_faturamento_ano_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nSELECT YEAR(CURRENT_DATE()) ANO, (MONTH(CURRENT_DATE())-1 ) MES\n\n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row8.ANO = null;
							} else {
		                          
            row8.ANO = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    row8.ANO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row8.MES = null;
							} else {
		                          
            row8.MES = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    row8.MES = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_2 = new row8Struct();
				
					oneRow_tHashOutput_2.ANO = row8.ANO;
					oneRow_tHashOutput_2.MES = row8.MES;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 
     row11 = row8;


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[2];
   				
	    		if(row11.ANO != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(row11.ANO)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.MES != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(row11.MES)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
insert_logStruct insert_log = new insert_logStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_vw_faturamento_ano_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row3.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row3.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row4 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row4 = new row4Struct();
                                row4.nm_programa = insert_log.nm_programa;
                                row4.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row4.data_termino_execucao = insert_log.data_termino_execucao;
                                row4.mensagem = insert_log.mensagem;
                                row4.uuid = insert_log.uuid;
                                row4.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.nm_programa = row4.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row4.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row4.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row4.mensagem;
					oneRow_tHashOutput_1.uuid = row4.uuid;
					oneRow_tHashOutput_1.versao = row4.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


System.out.println("*************************************************");
System.out.println("Iniciando select MOVDET e FATGOR");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class map1Struct implements routines.system.IPersistableRow<map1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String empresa;

				public String getEmpresa () {
					return this.empresa;
				}

				public Boolean empresaIsNullable(){
				    return false;
				}
				public Boolean empresaIsKey(){
				    return true;
				}
				public Integer empresaLength(){
				    return 3;
				}
				public Integer empresaPrecision(){
				    return 0;
				}
				public String empresaDefault(){
				
					return null;
				
				}
				public String empresaComment(){
				
				    return "";
				
				}
				public String empresaPattern(){
				
					return "";
				
				}
				public String empresaOriginalDbColumnName(){
				
					return "empresa";
				
				}

				
			    public String numero_nota_fiscal;

				public String getNumero_nota_fiscal () {
					return this.numero_nota_fiscal;
				}

				public Boolean numero_nota_fiscalIsNullable(){
				    return false;
				}
				public Boolean numero_nota_fiscalIsKey(){
				    return true;
				}
				public Integer numero_nota_fiscalLength(){
				    return 12;
				}
				public Integer numero_nota_fiscalPrecision(){
				    return 0;
				}
				public String numero_nota_fiscalDefault(){
				
					return null;
				
				}
				public String numero_nota_fiscalComment(){
				
				    return "";
				
				}
				public String numero_nota_fiscalPattern(){
				
					return "";
				
				}
				public String numero_nota_fiscalOriginalDbColumnName(){
				
					return "numero_nota_fiscal";
				
				}

				
			    public String serie;

				public String getSerie () {
					return this.serie;
				}

				public Boolean serieIsNullable(){
				    return true;
				}
				public Boolean serieIsKey(){
				    return true;
				}
				public Integer serieLength(){
				    return 3;
				}
				public Integer seriePrecision(){
				    return 0;
				}
				public String serieDefault(){
				
					return null;
				
				}
				public String serieComment(){
				
				    return "";
				
				}
				public String seriePattern(){
				
					return "";
				
				}
				public String serieOriginalDbColumnName(){
				
					return "serie";
				
				}

				
			    public String cod_vendedor;

				public String getCod_vendedor () {
					return this.cod_vendedor;
				}

				public Boolean cod_vendedorIsNullable(){
				    return true;
				}
				public Boolean cod_vendedorIsKey(){
				    return false;
				}
				public Integer cod_vendedorLength(){
				    return 3;
				}
				public Integer cod_vendedorPrecision(){
				    return 0;
				}
				public String cod_vendedorDefault(){
				
					return null;
				
				}
				public String cod_vendedorComment(){
				
				    return "";
				
				}
				public String cod_vendedorPattern(){
				
					return "";
				
				}
				public String cod_vendedorOriginalDbColumnName(){
				
					return "cod_vendedor";
				
				}

				
			    public String cond_pagto;

				public String getCond_pagto () {
					return this.cond_pagto;
				}

				public Boolean cond_pagtoIsNullable(){
				    return true;
				}
				public Boolean cond_pagtoIsKey(){
				    return false;
				}
				public Integer cond_pagtoLength(){
				    return 75;
				}
				public Integer cond_pagtoPrecision(){
				    return 0;
				}
				public String cond_pagtoDefault(){
				
					return null;
				
				}
				public String cond_pagtoComment(){
				
				    return "";
				
				}
				public String cond_pagtoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String cond_pagtoOriginalDbColumnName(){
				
					return "cond_pagto";
				
				}

				
			    public String codcnd;

				public String getCodcnd () {
					return this.codcnd;
				}

				public Boolean codcndIsNullable(){
				    return true;
				}
				public Boolean codcndIsKey(){
				    return false;
				}
				public Integer codcndLength(){
				    return 3;
				}
				public Integer codcndPrecision(){
				    return null;
				}
				public String codcndDefault(){
				
					return null;
				
				}
				public String codcndComment(){
				
				    return "";
				
				}
				public String codcndPattern(){
				
					return "";
				
				}
				public String codcndOriginalDbColumnName(){
				
					return "codcnd";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.empresa == null) ? 0 : this.empresa.hashCode());
					
						result = prime * result + ((this.numero_nota_fiscal == null) ? 0 : this.numero_nota_fiscal.hashCode());
					
						result = prime * result + ((this.serie == null) ? 0 : this.serie.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final map1Struct other = (map1Struct) obj;
		
						if (this.empresa == null) {
							if (other.empresa != null)
								return false;
						
						} else if (!this.empresa.equals(other.empresa))
						
							return false;
					
						if (this.numero_nota_fiscal == null) {
							if (other.numero_nota_fiscal != null)
								return false;
						
						} else if (!this.numero_nota_fiscal.equals(other.numero_nota_fiscal))
						
							return false;
					
						if (this.serie == null) {
							if (other.serie != null)
								return false;
						
						} else if (!this.serie.equals(other.serie))
						
							return false;
					

		return true;
    }

	public void copyDataTo(map1Struct other) {

		other.empresa = this.empresa;
	            other.numero_nota_fiscal = this.numero_nota_fiscal;
	            other.serie = this.serie;
	            other.cod_vendedor = this.cod_vendedor;
	            other.cond_pagto = this.cond_pagto;
	            other.codcnd = this.codcnd;
	            
	}

	public void copyKeysDataTo(map1Struct other) {

		other.empresa = this.empresa;
	            	other.numero_nota_fiscal = this.numero_nota_fiscal;
	            	other.serie = this.serie;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.empresa = readString(dis);
					
					this.numero_nota_fiscal = readString(dis);
					
					this.serie = readString(dis);
					
					this.cod_vendedor = readString(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.empresa = readString(dis);
					
					this.numero_nota_fiscal = readString(dis);
					
					this.serie = readString(dis);
					
					this.cod_vendedor = readString(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.empresa,dos);
					
					// String
				
						writeString(this.numero_nota_fiscal,dos);
					
					// String
				
						writeString(this.serie,dos);
					
					// String
				
						writeString(this.cod_vendedor,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.empresa,dos);
					
					// String
				
						writeString(this.numero_nota_fiscal,dos);
					
					// String
				
						writeString(this.serie,dos);
					
					// String
				
						writeString(this.cod_vendedor,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("empresa="+empresa);
		sb.append(",numero_nota_fiscal="+numero_nota_fiscal);
		sb.append(",serie="+serie);
		sb.append(",cod_vendedor="+cod_vendedor);
		sb.append(",cond_pagto="+cond_pagto);
		sb.append(",codcnd="+codcnd);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.empresa, other.empresa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numero_nota_fiscal, other.numero_nota_fiscal);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.serie, other.serie);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String DET_CODEMP;

				public String getDET_CODEMP () {
					return this.DET_CODEMP;
				}

				public Boolean DET_CODEMPIsNullable(){
				    return false;
				}
				public Boolean DET_CODEMPIsKey(){
				    return false;
				}
				public Integer DET_CODEMPLength(){
				    return 3;
				}
				public Integer DET_CODEMPPrecision(){
				    return 0;
				}
				public String DET_CODEMPDefault(){
				
					return null;
				
				}
				public String DET_CODEMPComment(){
				
				    return "";
				
				}
				public String DET_CODEMPPattern(){
				
					return "";
				
				}
				public String DET_CODEMPOriginalDbColumnName(){
				
					return "DET_CODEMP";
				
				}

				
			    public String DET_CODVEN;

				public String getDET_CODVEN () {
					return this.DET_CODVEN;
				}

				public Boolean DET_CODVENIsNullable(){
				    return true;
				}
				public Boolean DET_CODVENIsKey(){
				    return false;
				}
				public Integer DET_CODVENLength(){
				    return 3;
				}
				public Integer DET_CODVENPrecision(){
				    return 0;
				}
				public String DET_CODVENDefault(){
				
					return null;
				
				}
				public String DET_CODVENComment(){
				
				    return "";
				
				}
				public String DET_CODVENPattern(){
				
					return "";
				
				}
				public String DET_CODVENOriginalDbColumnName(){
				
					return "DET_CODVEN";
				
				}

				
			    public String DET_NUMDOC;

				public String getDET_NUMDOC () {
					return this.DET_NUMDOC;
				}

				public Boolean DET_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean DET_NUMDOCIsKey(){
				    return false;
				}
				public Integer DET_NUMDOCLength(){
				    return 12;
				}
				public Integer DET_NUMDOCPrecision(){
				    return 0;
				}
				public String DET_NUMDOCDefault(){
				
					return null;
				
				}
				public String DET_NUMDOCComment(){
				
				    return "";
				
				}
				public String DET_NUMDOCPattern(){
				
					return "";
				
				}
				public String DET_NUMDOCOriginalDbColumnName(){
				
					return "DET_NUMDOC";
				
				}

				
			    public String DET_SERIE_;

				public String getDET_SERIE_ () {
					return this.DET_SERIE_;
				}

				public Boolean DET_SERIE_IsNullable(){
				    return true;
				}
				public Boolean DET_SERIE_IsKey(){
				    return false;
				}
				public Integer DET_SERIE_Length(){
				    return 3;
				}
				public Integer DET_SERIE_Precision(){
				    return 0;
				}
				public String DET_SERIE_Default(){
				
					return null;
				
				}
				public String DET_SERIE_Comment(){
				
				    return "";
				
				}
				public String DET_SERIE_Pattern(){
				
					return "";
				
				}
				public String DET_SERIE_OriginalDbColumnName(){
				
					return "DET_SERIE_";
				
				}

				
			    public java.util.Date DET_DTAENT;

				public java.util.Date getDET_DTAENT () {
					return this.DET_DTAENT;
				}

				public Boolean DET_DTAENTIsNullable(){
				    return false;
				}
				public Boolean DET_DTAENTIsKey(){
				    return false;
				}
				public Integer DET_DTAENTLength(){
				    return 5;
				}
				public Integer DET_DTAENTPrecision(){
				    return 0;
				}
				public String DET_DTAENTDefault(){
				
					return null;
				
				}
				public String DET_DTAENTComment(){
				
				    return "";
				
				}
				public String DET_DTAENTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTAENTOriginalDbColumnName(){
				
					return "DET_DTAENT";
				
				}

				
			    public String DET_CONPAG;

				public String getDET_CONPAG () {
					return this.DET_CONPAG;
				}

				public Boolean DET_CONPAGIsNullable(){
				    return true;
				}
				public Boolean DET_CONPAGIsKey(){
				    return false;
				}
				public Integer DET_CONPAGLength(){
				    return 75;
				}
				public Integer DET_CONPAGPrecision(){
				    return null;
				}
				public String DET_CONPAGDefault(){
				
					return null;
				
				}
				public String DET_CONPAGComment(){
				
				    return "";
				
				}
				public String DET_CONPAGPattern(){
				
					return "";
				
				}
				public String DET_CONPAGOriginalDbColumnName(){
				
					return "DET_CONPAG";
				
				}

				
			    public String DET_CODCND;

				public String getDET_CODCND () {
					return this.DET_CODCND;
				}

				public Boolean DET_CODCNDIsNullable(){
				    return true;
				}
				public Boolean DET_CODCNDIsKey(){
				    return false;
				}
				public Integer DET_CODCNDLength(){
				    return 3;
				}
				public Integer DET_CODCNDPrecision(){
				    return null;
				}
				public String DET_CODCNDDefault(){
				
					return null;
				
				}
				public String DET_CODCNDComment(){
				
				    return "";
				
				}
				public String DET_CODCNDPattern(){
				
					return "";
				
				}
				public String DET_CODCNDOriginalDbColumnName(){
				
					return "DET_CODCND";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.DET_CODEMP = readString(dis);
					
					this.DET_CODVEN = readString(dis);
					
					this.DET_NUMDOC = readString(dis);
					
					this.DET_SERIE_ = readString(dis);
					
					this.DET_DTAENT = readDate(dis);
					
					this.DET_CONPAG = readString(dis);
					
					this.DET_CODCND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.DET_CODEMP = readString(dis);
					
					this.DET_CODVEN = readString(dis);
					
					this.DET_NUMDOC = readString(dis);
					
					this.DET_SERIE_ = readString(dis);
					
					this.DET_DTAENT = readDate(dis);
					
					this.DET_CONPAG = readString(dis);
					
					this.DET_CODCND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DET_CODEMP,dos);
					
					// String
				
						writeString(this.DET_CODVEN,dos);
					
					// String
				
						writeString(this.DET_NUMDOC,dos);
					
					// String
				
						writeString(this.DET_SERIE_,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTAENT,dos);
					
					// String
				
						writeString(this.DET_CONPAG,dos);
					
					// String
				
						writeString(this.DET_CODCND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DET_CODEMP,dos);
					
					// String
				
						writeString(this.DET_CODVEN,dos);
					
					// String
				
						writeString(this.DET_NUMDOC,dos);
					
					// String
				
						writeString(this.DET_SERIE_,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTAENT,dos);
					
					// String
				
						writeString(this.DET_CONPAG,dos);
					
					// String
				
						writeString(this.DET_CODCND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DET_CODEMP="+DET_CODEMP);
		sb.append(",DET_CODVEN="+DET_CODVEN);
		sb.append(",DET_NUMDOC="+DET_NUMDOC);
		sb.append(",DET_SERIE_="+DET_SERIE_);
		sb.append(",DET_DTAENT="+String.valueOf(DET_DTAENT));
		sb.append(",DET_CONPAG="+DET_CONPAG);
		sb.append(",DET_CODCND="+DET_CODCND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
map1Struct map1 = new map1Struct();





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map1");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<map1Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_vw_faturamento_ano_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<map1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
map1Struct map1_tmp = new map1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nSELECT DET_CODEMP , DET_CODVEN , DET_NUMDOC ,DET_SERIE_, DET_DTAENT,DET_CONPAG, DET_CODCND\n  FROM MOVDET \n WHERE DE"
+"T_DTAENT >= '2025-01-01'\n      AND DET_SERIE_ <> ''\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row6.DET_CODEMP = null;
							} else {
	                         		
        	row6.DET_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row6.DET_CODVEN = null;
							} else {
	                         		
        	row6.DET_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row6.DET_NUMDOC = null;
							} else {
	                         		
        	row6.DET_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row6.DET_SERIE_ = null;
							} else {
	                         		
        	row6.DET_SERIE_ = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row6.DET_DTAENT = null;
							} else {
										
				if(rs_tDBInput_3.getString(5) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row6.DET_DTAENT = rs_tDBInput_3.getTimestamp(5);
					} else {
						row6.DET_DTAENT = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row6.DET_DTAENT =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row6.DET_CONPAG = null;
							} else {
	                         		
        	row6.DET_CONPAG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row6.DET_CODCND = null;
							} else {
	                         		
        	row6.DET_CODCND = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

map1 = null;


// # Output table : 'map1'
map1_tmp.empresa = row6.DET_CODEMP ;
map1_tmp.numero_nota_fiscal = row6.DET_NUMDOC ;
map1_tmp.serie = row6.DET_SERIE_ ;
map1_tmp.cod_vendedor = row6.DET_CODVEN ;
map1_tmp.cond_pagto = row6.DET_CONPAG ;
map1_tmp.codcnd = row6.DET_CODCND ;
map1 = map1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "map1"
if(map1 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"map1"
						
						);
					}
					



    
		map1Struct oneRow_tHashOutput_4 = new map1Struct();
				
					oneRow_tHashOutput_4.empresa = map1.empresa;
					oneRow_tHashOutput_4.numero_nota_fiscal = map1.numero_nota_fiscal;
					oneRow_tHashOutput_4.serie = map1.serie;
					oneRow_tHashOutput_4.cod_vendedor = map1.cod_vendedor;
					oneRow_tHashOutput_4.cond_pagto = map1.cond_pagto;
					oneRow_tHashOutput_4.codcnd = map1.codcnd;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "map1"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfmap1Struct implements routines.system.IPersistableRow<copyOfmap1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return false;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return null;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_EMPFAT;

				public String getFGO_EMPFAT () {
					return this.FGO_EMPFAT;
				}

				public Boolean FGO_EMPFATIsNullable(){
				    return true;
				}
				public Boolean FGO_EMPFATIsKey(){
				    return false;
				}
				public Integer FGO_EMPFATLength(){
				    return null;
				}
				public Integer FGO_EMPFATPrecision(){
				    return null;
				}
				public String FGO_EMPFATDefault(){
				
					return null;
				
				}
				public String FGO_EMPFATComment(){
				
				    return "";
				
				}
				public String FGO_EMPFATPattern(){
				
					return "";
				
				}
				public String FGO_EMPFATOriginalDbColumnName(){
				
					return "FGO_EMPFAT";
				
				}

				
			    public String FGO_CODCLI;

				public String getFGO_CODCLI () {
					return this.FGO_CODCLI;
				}

				public Boolean FGO_CODCLIIsNullable(){
				    return true;
				}
				public Boolean FGO_CODCLIIsKey(){
				    return false;
				}
				public Integer FGO_CODCLILength(){
				    return null;
				}
				public Integer FGO_CODCLIPrecision(){
				    return null;
				}
				public String FGO_CODCLIDefault(){
				
					return null;
				
				}
				public String FGO_CODCLIComment(){
				
				    return "";
				
				}
				public String FGO_CODCLIPattern(){
				
					return "";
				
				}
				public String FGO_CODCLIOriginalDbColumnName(){
				
					return "FGO_CODCLI";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return 3;
				}
				public Integer DT_PEDIDOPrecision(){
				    return 0;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_EMPFAT="+FGO_EMPFAT);
		sb.append(",FGO_CODCLI="+FGO_CODCLI);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfmap1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return false;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return null;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_EMPFAT;

				public String getFGO_EMPFAT () {
					return this.FGO_EMPFAT;
				}

				public Boolean FGO_EMPFATIsNullable(){
				    return true;
				}
				public Boolean FGO_EMPFATIsKey(){
				    return false;
				}
				public Integer FGO_EMPFATLength(){
				    return null;
				}
				public Integer FGO_EMPFATPrecision(){
				    return null;
				}
				public String FGO_EMPFATDefault(){
				
					return null;
				
				}
				public String FGO_EMPFATComment(){
				
				    return "";
				
				}
				public String FGO_EMPFATPattern(){
				
					return "";
				
				}
				public String FGO_EMPFATOriginalDbColumnName(){
				
					return "FGO_EMPFAT";
				
				}

				
			    public String FGO_CODCLI;

				public String getFGO_CODCLI () {
					return this.FGO_CODCLI;
				}

				public Boolean FGO_CODCLIIsNullable(){
				    return true;
				}
				public Boolean FGO_CODCLIIsKey(){
				    return false;
				}
				public Integer FGO_CODCLILength(){
				    return null;
				}
				public Integer FGO_CODCLIPrecision(){
				    return null;
				}
				public String FGO_CODCLIDefault(){
				
					return null;
				
				}
				public String FGO_CODCLIComment(){
				
				    return "";
				
				}
				public String FGO_CODCLIPattern(){
				
					return "";
				
				}
				public String FGO_CODCLIOriginalDbColumnName(){
				
					return "FGO_CODCLI";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return 3;
				}
				public Integer DT_PEDIDOPrecision(){
				    return 0;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_EMPFAT="+FGO_EMPFAT);
		sb.append(",FGO_CODCLI="+FGO_CODCLI);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
copyOfmap1Struct copyOfmap1 = new copyOfmap1Struct();





	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfmap1");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfmap1Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_vw_faturamento_ano_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfmap1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfmap1Struct copyOfmap1_tmp = new copyOfmap1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nSELECT FGO_NUMFAT, FGO_EMPFAT, FGO_CODCLI , CONCAT(FGO_DTAENT,' ',FGO_HORENT) DT_PEDIDO  \n  FROM FATGOR \n  where FG"
+"O_DTAENT >= '2025-01-01'\n";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row13.FGO_NUMFAT = null;
							} else {
	                         		
        	row13.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row13.FGO_EMPFAT = null;
							} else {
	                         		
        	row13.FGO_EMPFAT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row13.FGO_CODCLI = null;
							} else {
	                         		
        	row13.FGO_CODCLI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row13.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_4.getString(4) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row13.DT_PEDIDO = rs_tDBInput_4.getTimestamp(4);
					} else {
						row13.DT_PEDIDO = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row13.DT_PEDIDO =  null;
				}
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfmap1 = null;


// # Output table : 'copyOfmap1'
copyOfmap1_tmp.FGO_NUMFAT = row13.FGO_NUMFAT ;
copyOfmap1_tmp.FGO_EMPFAT = row13.FGO_EMPFAT ;
copyOfmap1_tmp.FGO_CODCLI = row13.FGO_CODCLI ;
copyOfmap1_tmp.DT_PEDIDO = row13.DT_PEDIDO ;
copyOfmap1 = copyOfmap1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfmap1"
if(copyOfmap1 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfmap1"
						
						);
					}
					



    
		copyOfmap1Struct oneRow_tHashOutput_5 = new copyOfmap1Struct();
				
					oneRow_tHashOutput_5.FGO_NUMFAT = copyOfmap1.FGO_NUMFAT;
					oneRow_tHashOutput_5.FGO_EMPFAT = copyOfmap1.FGO_EMPFAT;
					oneRow_tHashOutput_5.FGO_CODCLI = copyOfmap1.FGO_CODCLI;
					oneRow_tHashOutput_5.DT_PEDIDO = copyOfmap1.DT_PEDIDO;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "copyOfmap1"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfmap1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


System.out.println("*************************************************");
System.out.println("Iniciando select na vw_faturamento");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public java.util.Date DATA_E_HORA;

				public java.util.Date getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",DATA_E_HORA="+String.valueOf(DATA_E_HORA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public String DATA_E_HORA;

				public String getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",DATA_E_HORA="+DATA_E_HORA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String COMBO_ORIGEM;

				public String getCOMBO_ORIGEM () {
					return this.COMBO_ORIGEM;
				}

				public Boolean COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer COMBO_ORIGEMPrecision(){
				    return 0;
				}
				public String COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String COMBO_ORIGEMOriginalDbColumnName(){
				
					return "COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String DATA_E_HORA;

				public String getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				
			    public BigDecimal UNITARIO_COMBO;

				public BigDecimal getUNITARIO_COMBO () {
					return this.UNITARIO_COMBO;
				}

				public Boolean UNITARIO_COMBOIsNullable(){
				    return true;
				}
				public Boolean UNITARIO_COMBOIsKey(){
				    return false;
				}
				public Integer UNITARIO_COMBOLength(){
				    return 12;
				}
				public Integer UNITARIO_COMBOPrecision(){
				    return 2;
				}
				public String UNITARIO_COMBODefault(){
				
					return null;
				
				}
				public String UNITARIO_COMBOComment(){
				
				    return "";
				
				}
				public String UNITARIO_COMBOPattern(){
				
					return "";
				
				}
				public String UNITARIO_COMBOOriginalDbColumnName(){
				
					return "UNITARIO_COMBO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.COMBO_ORIGEM = readString(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.DATA_E_HORA = readString(dis);
					
						this.UNITARIO_COMBO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.COMBO_ORIGEM = readString(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.DATA_E_HORA = readString(dis);
					
						this.UNITARIO_COMBO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.COMBO_ORIGEM,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.DATA_E_HORA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNITARIO_COMBO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.COMBO_ORIGEM,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.DATA_E_HORA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNITARIO_COMBO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",COMBO_ORIGEM="+COMBO_ORIGEM);
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",DATA_E_HORA="+DATA_E_HORA);
		sb.append(",UNITARIO_COMBO="+String.valueOf(UNITARIO_COMBO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row1Struct row1 = new row1Struct();
insertStruct insert = new insertStruct();
row2Struct row2 = new row2Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tDBInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row8Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row9.ANO = next_tHashInput_1.ANO;
	row9.MES = next_tHashInput_1.MES;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


    	            
            globalMap.put("row9.ANO", row9.ANO);
    	            
            globalMap.put("row9.MES", row9.MES);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tDBInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("insert", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tDBInput_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_vw_faturamento_ano_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = " SELECT \nEMPRESA,\nCOD_VENDEDOR,\nNOME_VENDEDOR,\nCOMBO_ORIGEM,\nCOD_ITEM,\nITEM,\nDATA,\nDATA_ANO,\nDATA_MES,\nQTD_IT"
+"EM,\nVALOR_UNITARIO,\nTOTAL_CUSTO,\nTOTAL_CUSTO_MEDIO,\nTOTAL_LITROS,\nTOTAL_VENDA,\nTOTAL_IMPOSTOS_SAIDA,\nCIDADE,\nEST"
+"ADO,\nCOD_CLIENTE,\nCLIENTE,\nCOD_FORNECEDOR,\nFORNECEDOR,\nNUMERO_NOTA_FISCAL,\nSERIE,\nDATA_E_HORA,\nUNITARIO_COMBO\n "
+"FROM AUTCOM.VW_FATURAMENTO\nWHERE  DATA_ANO = YEAR(CURRENT_DATE())\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.EMPRESA = null;
							} else {
	                         		
        	row1.EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.COD_VENDEDOR = null;
							} else {
	                         		
        	row1.COD_VENDEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.NOME_VENDEDOR = null;
							} else {
	                         		
        	row1.NOME_VENDEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.COMBO_ORIGEM = null;
							} else {
	                         		
        	row1.COMBO_ORIGEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.COD_ITEM = null;
							} else {
	                         		
        	row1.COD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.ITEM = null;
							} else {
	                         		
        	row1.ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.DATA = null;
							} else {
										
				if(rs_tDBInput_1.getString(7) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DATA = rs_tDBInput_1.getTimestamp(7);
					} else {
						row1.DATA = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DATA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.DATA_ANO = null;
							} else {
		                          
            row1.DATA_ANO = rs_tDBInput_1.getInt(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.DATA_ANO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.DATA_MES = null;
							} else {
		                          
            row1.DATA_MES = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    row1.DATA_MES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.QTD_ITEM = null;
							} else {
		                          
            row1.QTD_ITEM = rs_tDBInput_1.getBigDecimal(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.QTD_ITEM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.VALOR_UNITARIO = null;
							} else {
		                          
            row1.VALOR_UNITARIO = rs_tDBInput_1.getBigDecimal(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.VALOR_UNITARIO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.TOTAL_CUSTO = null;
							} else {
		                          
            row1.TOTAL_CUSTO = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOTAL_CUSTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.TOTAL_CUSTO_MEDIO = null;
							} else {
		                          
            row1.TOTAL_CUSTO_MEDIO = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOTAL_CUSTO_MEDIO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.TOTAL_LITROS = null;
							} else {
		                          
            row1.TOTAL_LITROS = rs_tDBInput_1.getBigDecimal(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOTAL_LITROS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.TOTAL_VENDA = null;
							} else {
		                          
            row1.TOTAL_VENDA = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOTAL_VENDA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.TOTAL_IMPOSTOS_SAIDA = null;
							} else {
		                          
            row1.TOTAL_IMPOSTOS_SAIDA = rs_tDBInput_1.getBigDecimal(16);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.CIDADE = null;
							} else {
	                         		
        	row1.CIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.ESTADO = null;
							} else {
	                         		
        	row1.ESTADO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.COD_CLIENTE = null;
							} else {
	                         		
        	row1.COD_CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.CLIENTE = null;
							} else {
	                         		
        	row1.CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.COD_FORNECEDOR = null;
							} else {
	                         		
        	row1.COD_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.FORNECEDOR = null;
							} else {
	                         		
        	row1.FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.NUMERO_NOTA_FISCAL = null;
							} else {
	                         		
        	row1.NUMERO_NOTA_FISCAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.SERIE = null;
							} else {
	                         		
        	row1.SERIE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.DATA_E_HORA = null;
							} else {
	                         		
        	row1.DATA_E_HORA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.UNITARIO_COMBO = null;
							} else {
		                          
            row1.UNITARIO_COMBO = rs_tDBInput_1.getBigDecimal(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.UNITARIO_COMBO = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.EMPRESA = row1.EMPRESA;
insert_tmp.NUMERO_NOTA_FISCAL = row1.NUMERO_NOTA_FISCAL;
insert_tmp.SERIE = row1.SERIE;
insert_tmp.COD_VENDEDOR = row1.COD_VENDEDOR;
insert_tmp.NOME_VENDEDOR = row1.NOME_VENDEDOR;
insert_tmp.CD_COMBO_ORIGEM = row1.COMBO_ORIGEM ;
insert_tmp.VL_COMBO_ORIGEM = row1.UNITARIO_COMBO ;
insert_tmp.COD_ITEM = row1.COD_ITEM;
insert_tmp.ITEM = row1.ITEM;
insert_tmp.DATA = row1.DATA;
insert_tmp.DATA_ANO = row1.DATA_ANO;
insert_tmp.DATA_MES = row1.DATA_MES;
insert_tmp.QTD_ITEM = row1.QTD_ITEM;
insert_tmp.VALOR_UNITARIO = row1.VALOR_UNITARIO;
insert_tmp.TOTAL_CUSTO = row1.TOTAL_CUSTO;
insert_tmp.TOTAL_CUSTO_MEDIO = row1.TOTAL_CUSTO_MEDIO;
insert_tmp.TOTAL_LITROS = row1.TOTAL_LITROS;
insert_tmp.TOTAL_VENDA = row1.TOTAL_VENDA;
insert_tmp.TOTAL_IMPOSTOS_SAIDA = row1.TOTAL_IMPOSTOS_SAIDA;
insert_tmp.CIDADE = row1.CIDADE;
insert_tmp.ESTADO = row1.ESTADO;
insert_tmp.COD_CLIENTE = row1.COD_CLIENTE;
insert_tmp.CLIENTE = row1.CLIENTE;
insert_tmp.COD_FORNECEDOR = row1.COD_FORNECEDOR;
insert_tmp.FORNECEDOR = row1.FORNECEDOR;
insert_tmp.DATA_E_HORA = row1.DATA_E_HORA;
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					


  row2 = new row2Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row2.EMPRESA=TypeConvert.String2String(insert.EMPRESA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NUMERO_NOTA_FISCAL=TypeConvert.String2String(insert.NUMERO_NOTA_FISCAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.SERIE=TypeConvert.String2String(insert.SERIE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.COD_VENDEDOR=TypeConvert.String2String(insert.COD_VENDEDOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.NOME_VENDEDOR=TypeConvert.String2String(insert.NOME_VENDEDOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CD_COMBO_ORIGEM=TypeConvert.String2String(insert.CD_COMBO_ORIGEM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VL_COMBO_ORIGEM=TypeConvert.BigDecimal2BigDecimal(insert.VL_COMBO_ORIGEM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.COD_ITEM=TypeConvert.String2String(insert.COD_ITEM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ITEM=TypeConvert.String2String(insert.ITEM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.DATA=TypeConvert.Date2Date(insert.DATA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.DATA_ANO=TypeConvert.Integer2Integer(insert.DATA_ANO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.DATA_MES=TypeConvert.Integer2Integer(insert.DATA_MES);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.QTD_ITEM=TypeConvert.BigDecimal2BigDecimal(insert.QTD_ITEM);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VALOR_UNITARIO=TypeConvert.BigDecimal2BigDecimal(insert.VALOR_UNITARIO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.TOTAL_CUSTO=TypeConvert.BigDecimal2BigDecimal(insert.TOTAL_CUSTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.TOTAL_CUSTO_MEDIO=TypeConvert.BigDecimal2BigDecimal(insert.TOTAL_CUSTO_MEDIO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.TOTAL_LITROS=TypeConvert.BigDecimal2BigDecimal(insert.TOTAL_LITROS);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.TOTAL_VENDA=TypeConvert.BigDecimal2BigDecimal(insert.TOTAL_VENDA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.TOTAL_IMPOSTOS_SAIDA=TypeConvert.BigDecimal2BigDecimal(insert.TOTAL_IMPOSTOS_SAIDA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CIDADE=TypeConvert.String2String(insert.CIDADE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.ESTADO=TypeConvert.String2String(insert.ESTADO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.COD_CLIENTE=TypeConvert.String2String(insert.COD_CLIENTE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.CLIENTE=TypeConvert.String2String(insert.CLIENTE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.COD_FORNECEDOR=TypeConvert.String2String(insert.COD_FORNECEDOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.FORNECEDOR=TypeConvert.String2String(insert.FORNECEDOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.DATA_E_HORA=TypeConvert.String2Date(insert.DATA_E_HORA, "yyyy-MM-dd HH:mm:ss");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row2 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_3 = new row2Struct();
				
					oneRow_tHashOutput_3.EMPRESA = row2.EMPRESA;
					oneRow_tHashOutput_3.NUMERO_NOTA_FISCAL = row2.NUMERO_NOTA_FISCAL;
					oneRow_tHashOutput_3.SERIE = row2.SERIE;
					oneRow_tHashOutput_3.COD_VENDEDOR = row2.COD_VENDEDOR;
					oneRow_tHashOutput_3.NOME_VENDEDOR = row2.NOME_VENDEDOR;
					oneRow_tHashOutput_3.CD_COMBO_ORIGEM = row2.CD_COMBO_ORIGEM;
					oneRow_tHashOutput_3.VL_COMBO_ORIGEM = row2.VL_COMBO_ORIGEM;
					oneRow_tHashOutput_3.COD_ITEM = row2.COD_ITEM;
					oneRow_tHashOutput_3.ITEM = row2.ITEM;
					oneRow_tHashOutput_3.DATA = row2.DATA;
					oneRow_tHashOutput_3.DATA_ANO = row2.DATA_ANO;
					oneRow_tHashOutput_3.DATA_MES = row2.DATA_MES;
					oneRow_tHashOutput_3.QTD_ITEM = row2.QTD_ITEM;
					oneRow_tHashOutput_3.VALOR_UNITARIO = row2.VALOR_UNITARIO;
					oneRow_tHashOutput_3.TOTAL_CUSTO = row2.TOTAL_CUSTO;
					oneRow_tHashOutput_3.TOTAL_CUSTO_MEDIO = row2.TOTAL_CUSTO_MEDIO;
					oneRow_tHashOutput_3.TOTAL_LITROS = row2.TOTAL_LITROS;
					oneRow_tHashOutput_3.TOTAL_VENDA = row2.TOTAL_VENDA;
					oneRow_tHashOutput_3.TOTAL_IMPOSTOS_SAIDA = row2.TOTAL_IMPOSTOS_SAIDA;
					oneRow_tHashOutput_3.CIDADE = row2.CIDADE;
					oneRow_tHashOutput_3.ESTADO = row2.ESTADO;
					oneRow_tHashOutput_3.COD_CLIENTE = row2.COD_CLIENTE;
					oneRow_tHashOutput_3.CLIENTE = row2.CLIENTE;
					oneRow_tHashOutput_3.COD_FORNECEDOR = row2.COD_FORNECEDOR;
					oneRow_tHashOutput_3.FORNECEDOR = row2.FORNECEDOR;
					oneRow_tHashOutput_3.DATA_E_HORA = row2.DATA_E_HORA;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tDBInput_1);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


System.out.println("*************************************************");
System.out.println("Iniciando DELETE na vw_faturamento");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tDBRow_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row8Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row10.ANO = next_tHashInput_2.ANO;
	row10.MES = next_tHashInput_2.MES;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


    	            
            globalMap.put("row10.ANO", row10.ANO);
    	            
            globalMap.put("row10.MES", row10.MES);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tDBRow_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tDBRow_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
	int count_tDBRow_1 = 0;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

query_tDBRow_1 = "\nDELETE FROM vw_faturamento\n   WHERE  DATA_ANO = EXTRACT(YEAR FROM CURRENT_DATE);\nCOMMIT;\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
				stmt_tDBRow_1.execute(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
			throw(e);
			
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

	globalMap.put("tDBRow_1_NB_LINE", count_tDBRow_1);
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tDBRow_1);
						}				
					




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


System.out.println("*************************************************");
System.out.println("Iniciando INSERT na vw_faturamento");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());

 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class insert1Struct implements routines.system.IPersistableRow<insert1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 100;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public java.util.Date DATA_E_HORA;

				public java.util.Date getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public String cond_pagto;

				public String getCond_pagto () {
					return this.cond_pagto;
				}

				public Boolean cond_pagtoIsNullable(){
				    return true;
				}
				public Boolean cond_pagtoIsKey(){
				    return false;
				}
				public Integer cond_pagtoLength(){
				    return null;
				}
				public Integer cond_pagtoPrecision(){
				    return null;
				}
				public String cond_pagtoDefault(){
				
					return null;
				
				}
				public String cond_pagtoComment(){
				
				    return "";
				
				}
				public String cond_pagtoPattern(){
				
					return "";
				
				}
				public String cond_pagtoOriginalDbColumnName(){
				
					return "cond_pagto";
				
				}

				
			    public String codcnd;

				public String getCodcnd () {
					return this.codcnd;
				}

				public Boolean codcndIsNullable(){
				    return true;
				}
				public Boolean codcndIsKey(){
				    return false;
				}
				public Integer codcndLength(){
				    return 3;
				}
				public Integer codcndPrecision(){
				    return null;
				}
				public String codcndDefault(){
				
					return null;
				
				}
				public String codcndComment(){
				
				    return "";
				
				}
				public String codcndPattern(){
				
					return "";
				
				}
				public String codcndOriginalDbColumnName(){
				
					return "codcnd";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return 3;
				}
				public Integer DT_PEDIDOPrecision(){
				    return 0;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_E_HORA="+String.valueOf(DATA_E_HORA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",cond_pagto="+cond_pagto);
		sb.append(",codcnd="+codcnd);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class map2Struct implements routines.system.IPersistableRow<map2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public java.util.Date DATA_E_HORA;

				public java.util.Date getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				
			    public String cond_pagto;

				public String getCond_pagto () {
					return this.cond_pagto;
				}

				public Boolean cond_pagtoIsNullable(){
				    return true;
				}
				public Boolean cond_pagtoIsKey(){
				    return false;
				}
				public Integer cond_pagtoLength(){
				    return null;
				}
				public Integer cond_pagtoPrecision(){
				    return null;
				}
				public String cond_pagtoDefault(){
				
					return null;
				
				}
				public String cond_pagtoComment(){
				
				    return "";
				
				}
				public String cond_pagtoPattern(){
				
					return "";
				
				}
				public String cond_pagtoOriginalDbColumnName(){
				
					return "cond_pagto";
				
				}

				
			    public String codcnd;

				public String getCodcnd () {
					return this.codcnd;
				}

				public Boolean codcndIsNullable(){
				    return true;
				}
				public Boolean codcndIsKey(){
				    return false;
				}
				public Integer codcndLength(){
				    return 3;
				}
				public Integer codcndPrecision(){
				    return null;
				}
				public String codcndDefault(){
				
					return null;
				
				}
				public String codcndComment(){
				
				    return "";
				
				}
				public String codcndPattern(){
				
					return "";
				
				}
				public String codcndOriginalDbColumnName(){
				
					return "codcnd";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
					this.cond_pagto = readString(dis);
					
					this.codcnd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
					// String
				
						writeString(this.cond_pagto,dos);
					
					// String
				
						writeString(this.codcnd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",DATA_E_HORA="+String.valueOf(DATA_E_HORA));
		sb.append(",cond_pagto="+cond_pagto);
		sb.append(",codcnd="+codcnd);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public java.util.Date DATA_E_HORA;

				public java.util.Date getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",DATA_E_HORA="+String.valueOf(DATA_E_HORA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return false;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return 3;
				}
				public Integer EMPRESAPrecision(){
				    return 0;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String NUMERO_NOTA_FISCAL;

				public String getNUMERO_NOTA_FISCAL () {
					return this.NUMERO_NOTA_FISCAL;
				}

				public Boolean NUMERO_NOTA_FISCALIsNullable(){
				    return false;
				}
				public Boolean NUMERO_NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NUMERO_NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NUMERO_NOTA_FISCALPrecision(){
				    return 0;
				}
				public String NUMERO_NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NUMERO_NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NUMERO_NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NUMERO_NOTA_FISCALOriginalDbColumnName(){
				
					return "NUMERO_NOTA_FISCAL";
				
				}

				
			    public String SERIE;

				public String getSERIE () {
					return this.SERIE;
				}

				public Boolean SERIEIsNullable(){
				    return true;
				}
				public Boolean SERIEIsKey(){
				    return false;
				}
				public Integer SERIELength(){
				    return 3;
				}
				public Integer SERIEPrecision(){
				    return 0;
				}
				public String SERIEDefault(){
				
					return null;
				
				}
				public String SERIEComment(){
				
				    return "";
				
				}
				public String SERIEPattern(){
				
					return "";
				
				}
				public String SERIEOriginalDbColumnName(){
				
					return "SERIE";
				
				}

				
			    public String COD_VENDEDOR;

				public String getCOD_VENDEDOR () {
					return this.COD_VENDEDOR;
				}

				public Boolean COD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean COD_VENDEDORIsKey(){
				    return false;
				}
				public Integer COD_VENDEDORLength(){
				    return 3;
				}
				public Integer COD_VENDEDORPrecision(){
				    return 0;
				}
				public String COD_VENDEDORDefault(){
				
					return null;
				
				}
				public String COD_VENDEDORComment(){
				
				    return "";
				
				}
				public String COD_VENDEDORPattern(){
				
					return "";
				
				}
				public String COD_VENDEDOROriginalDbColumnName(){
				
					return "COD_VENDEDOR";
				
				}

				
			    public String NOME_VENDEDOR;

				public String getNOME_VENDEDOR () {
					return this.NOME_VENDEDOR;
				}

				public Boolean NOME_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean NOME_VENDEDORIsKey(){
				    return false;
				}
				public Integer NOME_VENDEDORLength(){
				    return 30;
				}
				public Integer NOME_VENDEDORPrecision(){
				    return 0;
				}
				public String NOME_VENDEDORDefault(){
				
					return null;
				
				}
				public String NOME_VENDEDORComment(){
				
				    return "";
				
				}
				public String NOME_VENDEDORPattern(){
				
					return "";
				
				}
				public String NOME_VENDEDOROriginalDbColumnName(){
				
					return "NOME_VENDEDOR";
				
				}

				
			    public String CD_COMBO_ORIGEM;

				public String getCD_COMBO_ORIGEM () {
					return this.CD_COMBO_ORIGEM;
				}

				public Boolean CD_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_COMBO_ORIGEMLength(){
				    return 5;
				}
				public Integer CD_COMBO_ORIGEMPrecision(){
				    return null;
				}
				public String CD_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "CD_COMBO_ORIGEM";
				
				}

				
			    public BigDecimal VL_COMBO_ORIGEM;

				public BigDecimal getVL_COMBO_ORIGEM () {
					return this.VL_COMBO_ORIGEM;
				}

				public Boolean VL_COMBO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean VL_COMBO_ORIGEMIsKey(){
				    return false;
				}
				public Integer VL_COMBO_ORIGEMLength(){
				    return 12;
				}
				public Integer VL_COMBO_ORIGEMPrecision(){
				    return 2;
				}
				public String VL_COMBO_ORIGEMDefault(){
				
					return null;
				
				}
				public String VL_COMBO_ORIGEMComment(){
				
				    return "";
				
				}
				public String VL_COMBO_ORIGEMPattern(){
				
					return "";
				
				}
				public String VL_COMBO_ORIGEMOriginalDbColumnName(){
				
					return "VL_COMBO_ORIGEM";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return false;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return 0;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return 70;
				}
				public Integer ITEMPrecision(){
				    return 0;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public java.util.Date DATA;

				public java.util.Date getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return true;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return 10;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public Integer DATA_ANO;

				public Integer getDATA_ANO () {
					return this.DATA_ANO;
				}

				public Boolean DATA_ANOIsNullable(){
				    return true;
				}
				public Boolean DATA_ANOIsKey(){
				    return false;
				}
				public Integer DATA_ANOLength(){
				    return 10;
				}
				public Integer DATA_ANOPrecision(){
				    return 0;
				}
				public String DATA_ANODefault(){
				
					return null;
				
				}
				public String DATA_ANOComment(){
				
				    return "";
				
				}
				public String DATA_ANOPattern(){
				
					return "";
				
				}
				public String DATA_ANOOriginalDbColumnName(){
				
					return "DATA_ANO";
				
				}

				
			    public Integer DATA_MES;

				public Integer getDATA_MES () {
					return this.DATA_MES;
				}

				public Boolean DATA_MESIsNullable(){
				    return true;
				}
				public Boolean DATA_MESIsKey(){
				    return false;
				}
				public Integer DATA_MESLength(){
				    return 10;
				}
				public Integer DATA_MESPrecision(){
				    return 0;
				}
				public String DATA_MESDefault(){
				
					return null;
				
				}
				public String DATA_MESComment(){
				
				    return "";
				
				}
				public String DATA_MESPattern(){
				
					return "";
				
				}
				public String DATA_MESOriginalDbColumnName(){
				
					return "DATA_MES";
				
				}

				
			    public BigDecimal QTD_ITEM;

				public BigDecimal getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return 13;
				}
				public Integer QTD_ITEMPrecision(){
				    return 4;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 13;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO_MEDIO;

				public BigDecimal getTOTAL_CUSTO_MEDIO () {
					return this.TOTAL_CUSTO_MEDIO;
				}

				public Boolean TOTAL_CUSTO_MEDIOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTO_MEDIOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTO_MEDIOLength(){
				    return 13;
				}
				public Integer TOTAL_CUSTO_MEDIOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTO_MEDIODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTO_MEDIOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTO_MEDIOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTO_MEDIOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO_MEDIO";
				
				}

				
			    public BigDecimal TOTAL_LITROS;

				public BigDecimal getTOTAL_LITROS () {
					return this.TOTAL_LITROS;
				}

				public Boolean TOTAL_LITROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_LITROSIsKey(){
				    return false;
				}
				public Integer TOTAL_LITROSLength(){
				    return 28;
				}
				public Integer TOTAL_LITROSPrecision(){
				    return 11;
				}
				public String TOTAL_LITROSDefault(){
				
					return null;
				
				}
				public String TOTAL_LITROSComment(){
				
				    return "";
				
				}
				public String TOTAL_LITROSPattern(){
				
					return "";
				
				}
				public String TOTAL_LITROSOriginalDbColumnName(){
				
					return "TOTAL_LITROS";
				
				}

				
			    public BigDecimal TOTAL_VENDA;

				public BigDecimal getTOTAL_VENDA () {
					return this.TOTAL_VENDA;
				}

				public Boolean TOTAL_VENDAIsNullable(){
				    return true;
				}
				public Boolean TOTAL_VENDAIsKey(){
				    return false;
				}
				public Integer TOTAL_VENDALength(){
				    return 14;
				}
				public Integer TOTAL_VENDAPrecision(){
				    return 2;
				}
				public String TOTAL_VENDADefault(){
				
					return null;
				
				}
				public String TOTAL_VENDAComment(){
				
				    return "";
				
				}
				public String TOTAL_VENDAPattern(){
				
					return "";
				
				}
				public String TOTAL_VENDAOriginalDbColumnName(){
				
					return "TOTAL_VENDA";
				
				}

				
			    public BigDecimal TOTAL_IMPOSTOS_SAIDA;

				public BigDecimal getTOTAL_IMPOSTOS_SAIDA () {
					return this.TOTAL_IMPOSTOS_SAIDA;
				}

				public Boolean TOTAL_IMPOSTOS_SAIDAIsNullable(){
				    return false;
				}
				public Boolean TOTAL_IMPOSTOS_SAIDAIsKey(){
				    return false;
				}
				public Integer TOTAL_IMPOSTOS_SAIDALength(){
				    return 13;
				}
				public Integer TOTAL_IMPOSTOS_SAIDAPrecision(){
				    return 2;
				}
				public String TOTAL_IMPOSTOS_SAIDADefault(){
				
					return "0.00";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAComment(){
				
				    return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAPattern(){
				
					return "";
				
				}
				public String TOTAL_IMPOSTOS_SAIDAOriginalDbColumnName(){
				
					return "TOTAL_IMPOSTOS_SAIDA";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return 0;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String COD_CLIENTE;

				public String getCOD_CLIENTE () {
					return this.COD_CLIENTE;
				}

				public Boolean COD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean COD_CLIENTEIsKey(){
				    return false;
				}
				public Integer COD_CLIENTELength(){
				    return 8;
				}
				public Integer COD_CLIENTEPrecision(){
				    return 0;
				}
				public String COD_CLIENTEDefault(){
				
					return null;
				
				}
				public String COD_CLIENTEComment(){
				
				    return "";
				
				}
				public String COD_CLIENTEPattern(){
				
					return "";
				
				}
				public String COD_CLIENTEOriginalDbColumnName(){
				
					return "COD_CLIENTE";
				
				}

				
			    public String CLIENTE;

				public String getCLIENTE () {
					return this.CLIENTE;
				}

				public Boolean CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CLIENTEIsKey(){
				    return false;
				}
				public Integer CLIENTELength(){
				    return 60;
				}
				public Integer CLIENTEPrecision(){
				    return 0;
				}
				public String CLIENTEDefault(){
				
					return null;
				
				}
				public String CLIENTEComment(){
				
				    return "";
				
				}
				public String CLIENTEPattern(){
				
					return "";
				
				}
				public String CLIENTEOriginalDbColumnName(){
				
					return "CLIENTE";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return 8;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return 0;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String FORNECEDOR;

				public String getFORNECEDOR () {
					return this.FORNECEDOR;
				}

				public Boolean FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean FORNECEDORIsKey(){
				    return false;
				}
				public Integer FORNECEDORLength(){
				    return 60;
				}
				public Integer FORNECEDORPrecision(){
				    return 0;
				}
				public String FORNECEDORDefault(){
				
					return null;
				
				}
				public String FORNECEDORComment(){
				
				    return "";
				
				}
				public String FORNECEDORPattern(){
				
					return "";
				
				}
				public String FORNECEDOROriginalDbColumnName(){
				
					return "FORNECEDOR";
				
				}

				
			    public java.util.Date DATA_E_HORA;

				public java.util.Date getDATA_E_HORA () {
					return this.DATA_E_HORA;
				}

				public Boolean DATA_E_HORAIsNullable(){
				    return true;
				}
				public Boolean DATA_E_HORAIsKey(){
				    return false;
				}
				public Integer DATA_E_HORALength(){
				    return 21;
				}
				public Integer DATA_E_HORAPrecision(){
				    return 0;
				}
				public String DATA_E_HORADefault(){
				
					return null;
				
				}
				public String DATA_E_HORAComment(){
				
				    return "";
				
				}
				public String DATA_E_HORAPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_E_HORAOriginalDbColumnName(){
				
					return "DATA_E_HORA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.EMPRESA = readString(dis);
					
					this.NUMERO_NOTA_FISCAL = readString(dis);
					
					this.SERIE = readString(dis);
					
					this.COD_VENDEDOR = readString(dis);
					
					this.NOME_VENDEDOR = readString(dis);
					
					this.CD_COMBO_ORIGEM = readString(dis);
					
						this.VL_COMBO_ORIGEM = (BigDecimal) dis.readObject();
					
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
					this.DATA = readDate(dis);
					
						this.DATA_ANO = readInteger(dis);
					
						this.DATA_MES = readInteger(dis);
					
						this.QTD_ITEM = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO_MEDIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_LITROS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDA = (BigDecimal) dis.readObject();
					
						this.TOTAL_IMPOSTOS_SAIDA = (BigDecimal) dis.readObject();
					
					this.CIDADE = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.COD_CLIENTE = readString(dis);
					
					this.CLIENTE = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.FORNECEDOR = readString(dis);
					
					this.DATA_E_HORA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.NUMERO_NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.SERIE,dos);
					
					// String
				
						writeString(this.COD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NOME_VENDEDOR,dos);
					
					// String
				
						writeString(this.CD_COMBO_ORIGEM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_COMBO_ORIGEM);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA,dos);
					
					// Integer
				
						writeInteger(this.DATA_ANO,dos);
					
					// Integer
				
						writeInteger(this.DATA_MES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ITEM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO_MEDIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_LITROS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_VENDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_IMPOSTOS_SAIDA);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.COD_CLIENTE,dos);
					
					// String
				
						writeString(this.CLIENTE,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FORNECEDOR,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_E_HORA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPRESA="+EMPRESA);
		sb.append(",NUMERO_NOTA_FISCAL="+NUMERO_NOTA_FISCAL);
		sb.append(",SERIE="+SERIE);
		sb.append(",COD_VENDEDOR="+COD_VENDEDOR);
		sb.append(",NOME_VENDEDOR="+NOME_VENDEDOR);
		sb.append(",CD_COMBO_ORIGEM="+CD_COMBO_ORIGEM);
		sb.append(",VL_COMBO_ORIGEM="+String.valueOf(VL_COMBO_ORIGEM));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",DATA="+String.valueOf(DATA));
		sb.append(",DATA_ANO="+String.valueOf(DATA_ANO));
		sb.append(",DATA_MES="+String.valueOf(DATA_MES));
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",TOTAL_CUSTO_MEDIO="+String.valueOf(TOTAL_CUSTO_MEDIO));
		sb.append(",TOTAL_LITROS="+String.valueOf(TOTAL_LITROS));
		sb.append(",TOTAL_VENDA="+String.valueOf(TOTAL_VENDA));
		sb.append(",TOTAL_IMPOSTOS_SAIDA="+String.valueOf(TOTAL_IMPOSTOS_SAIDA));
		sb.append(",CIDADE="+CIDADE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",COD_CLIENTE="+COD_CLIENTE);
		sb.append(",CLIENTE="+CLIENTE);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",FORNECEDOR="+FORNECEDOR);
		sb.append(",DATA_E_HORA="+String.valueOf(DATA_E_HORA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);
		tHashInput_6Process(globalMap);

		row7Struct row7 = new row7Struct();
map2Struct map2 = new map2Struct();
insert1Struct insert1 = new insert1Struct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert1");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("vw_faturamento").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("vw_faturamento").toLowerCase();
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_3 = 1000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
        java.lang.StringBuilder sb_tDBOutput_3 = new java.lang.StringBuilder();
        sb_tDBOutput_3.append("INSERT INTO \"").append(tableName_tDBOutput_3).append("\" (\"empresa\",\"numero_nota_fiscal\",\"serie\",\"cod_vendedor\",\"nome_vendedor\",\"cd_combo_origem\",\"vl_combo_origem\",\"cod_item\",\"item\",\"data\",\"data_e_hora\",\"data_ano\",\"data_mes\",\"qtd_item\",\"valor_unitario\",\"total_custo\",\"total_custo_medio\",\"total_litros\",\"total_venda\",\"total_impostos_saida\",\"cidade\",\"estado\",\"cod_cliente\",\"cliente\",\"cod_fornecedor\",\"fornecedor\",\"cond_pagto\",\"codcnd\",\"dt_pedido\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_3 = sb_tDBOutput_3.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map2");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert1Struct insert1_tmp = new insert1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
map2Struct map2_tmp = new map2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row2Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row7.EMPRESA = next_tHashInput_4.EMPRESA;
	row7.NUMERO_NOTA_FISCAL = next_tHashInput_4.NUMERO_NOTA_FISCAL;
	row7.SERIE = next_tHashInput_4.SERIE;
	row7.COD_VENDEDOR = next_tHashInput_4.COD_VENDEDOR;
	row7.NOME_VENDEDOR = next_tHashInput_4.NOME_VENDEDOR;
	row7.CD_COMBO_ORIGEM = next_tHashInput_4.CD_COMBO_ORIGEM;
	row7.VL_COMBO_ORIGEM = next_tHashInput_4.VL_COMBO_ORIGEM;
	row7.COD_ITEM = next_tHashInput_4.COD_ITEM;
	row7.ITEM = next_tHashInput_4.ITEM;
	row7.DATA = next_tHashInput_4.DATA;
	row7.DATA_ANO = next_tHashInput_4.DATA_ANO;
	row7.DATA_MES = next_tHashInput_4.DATA_MES;
	row7.QTD_ITEM = next_tHashInput_4.QTD_ITEM;
	row7.VALOR_UNITARIO = next_tHashInput_4.VALOR_UNITARIO;
	row7.TOTAL_CUSTO = next_tHashInput_4.TOTAL_CUSTO;
	row7.TOTAL_CUSTO_MEDIO = next_tHashInput_4.TOTAL_CUSTO_MEDIO;
	row7.TOTAL_LITROS = next_tHashInput_4.TOTAL_LITROS;
	row7.TOTAL_VENDA = next_tHashInput_4.TOTAL_VENDA;
	row7.TOTAL_IMPOSTOS_SAIDA = next_tHashInput_4.TOTAL_IMPOSTOS_SAIDA;
	row7.CIDADE = next_tHashInput_4.CIDADE;
	row7.ESTADO = next_tHashInput_4.ESTADO;
	row7.COD_CLIENTE = next_tHashInput_4.COD_CLIENTE;
	row7.CLIENTE = next_tHashInput_4.CLIENTE;
	row7.COD_FORNECEDOR = next_tHashInput_4.COD_FORNECEDOR;
	row7.FORNECEDOR = next_tHashInput_4.FORNECEDOR;
	row7.DATA_E_HORA = next_tHashInput_4.DATA_E_HORA;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row12HashKey.empresa = row7.EMPRESA ;
                        		    		
                        		    		    row12HashKey.numero_nota_fiscal = row7.NUMERO_NOTA_FISCAL ;
                        		    		
                        		    		    row12HashKey.serie = row7.SERIE ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.empresa = '" + row12HashKey.empresa + "', row12.numero_nota_fiscal = '" + row12HashKey.numero_nota_fiscal + "', row12.serie = '" + row12HashKey.serie + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

map2 = null;


// # Output table : 'map2'
map2_tmp.EMPRESA = row7.EMPRESA;
map2_tmp.NUMERO_NOTA_FISCAL = row7.NUMERO_NOTA_FISCAL;
map2_tmp.SERIE = row7.SERIE;
map2_tmp.COD_VENDEDOR = row7.COD_VENDEDOR;
map2_tmp.NOME_VENDEDOR = row7.NOME_VENDEDOR;
map2_tmp.CD_COMBO_ORIGEM = row7.CD_COMBO_ORIGEM;
map2_tmp.VL_COMBO_ORIGEM = row7.VL_COMBO_ORIGEM;
map2_tmp.COD_ITEM = row7.COD_ITEM;
map2_tmp.ITEM = row7.ITEM;
map2_tmp.DATA = row7.DATA;
map2_tmp.DATA_ANO = row7.DATA_ANO;
map2_tmp.DATA_MES = row7.DATA_MES;
map2_tmp.QTD_ITEM = row7.QTD_ITEM;
map2_tmp.VALOR_UNITARIO = row7.VALOR_UNITARIO;
map2_tmp.TOTAL_CUSTO = row7.TOTAL_CUSTO;
map2_tmp.TOTAL_CUSTO_MEDIO = row7.TOTAL_CUSTO_MEDIO;
map2_tmp.TOTAL_LITROS = row7.TOTAL_LITROS;
map2_tmp.TOTAL_VENDA = row7.TOTAL_VENDA;
map2_tmp.TOTAL_IMPOSTOS_SAIDA = row7.TOTAL_IMPOSTOS_SAIDA;
map2_tmp.CIDADE = row7.CIDADE;
map2_tmp.ESTADO = row7.ESTADO;
map2_tmp.COD_CLIENTE = row7.COD_CLIENTE;
map2_tmp.CLIENTE = row7.CLIENTE;
map2_tmp.COD_FORNECEDOR = row7.COD_FORNECEDOR;
map2_tmp.FORNECEDOR = row7.FORNECEDOR;
map2_tmp.DATA_E_HORA = row7.DATA_E_HORA;
map2_tmp.cond_pagto = row12.cond_pagto ;
map2_tmp.codcnd = row12.codcnd ;
map2 = map2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "map2"
if(map2 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"map2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row14Struct row14 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row14HashKey.FGO_NUMFAT = map2.NUMERO_NOTA_FISCAL ;
                        		    		
                        		    		    row14HashKey.FGO_EMPFAT = map2.EMPRESA ;
                        		    		
                        		    		    row14HashKey.FGO_CODCLI = map2.COD_CLIENTE ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.FGO_NUMFAT = '" + row14HashKey.FGO_NUMFAT + "', row14.FGO_EMPFAT = '" + row14HashKey.FGO_EMPFAT + "', row14.FGO_CODCLI = '" + row14HashKey.FGO_CODCLI + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

insert1 = null;


// # Output table : 'insert1'
insert1_tmp.EMPRESA = map2.EMPRESA;
insert1_tmp.NUMERO_NOTA_FISCAL = map2.NUMERO_NOTA_FISCAL;
insert1_tmp.SERIE = map2.SERIE;
insert1_tmp.COD_VENDEDOR = map2.COD_VENDEDOR;
insert1_tmp.NOME_VENDEDOR = map2.NOME_VENDEDOR;
insert1_tmp.CD_COMBO_ORIGEM = map2.CD_COMBO_ORIGEM;
insert1_tmp.VL_COMBO_ORIGEM = map2.VL_COMBO_ORIGEM;
insert1_tmp.COD_ITEM = map2.COD_ITEM;
insert1_tmp.ITEM = map2.ITEM;
insert1_tmp.DATA = map2.DATA;
insert1_tmp.DATA_E_HORA = map2.DATA_E_HORA;
insert1_tmp.DATA_ANO = map2.DATA_ANO;
insert1_tmp.DATA_MES = map2.DATA_MES;
insert1_tmp.QTD_ITEM = map2.QTD_ITEM;
insert1_tmp.VALOR_UNITARIO = map2.VALOR_UNITARIO;
insert1_tmp.TOTAL_CUSTO = map2.TOTAL_CUSTO;
insert1_tmp.TOTAL_CUSTO_MEDIO = map2.TOTAL_CUSTO_MEDIO;
insert1_tmp.TOTAL_LITROS = map2.TOTAL_LITROS;
insert1_tmp.TOTAL_VENDA = map2.TOTAL_VENDA;
insert1_tmp.TOTAL_IMPOSTOS_SAIDA = map2.TOTAL_IMPOSTOS_SAIDA;
insert1_tmp.CIDADE = map2.CIDADE;
insert1_tmp.ESTADO = map2.ESTADO;
insert1_tmp.COD_CLIENTE = map2.COD_CLIENTE;
insert1_tmp.CLIENTE = map2.CLIENTE;
insert1_tmp.COD_FORNECEDOR = map2.COD_FORNECEDOR;
insert1_tmp.FORNECEDOR = map2.FORNECEDOR;
insert1_tmp.cond_pagto = map2.cond_pagto;
insert1_tmp.codcnd = map2.codcnd;
insert1_tmp.DT_PEDIDO = row14.DT_PEDIDO ;
insert1 = insert1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "insert1"
if(insert1 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert1"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(insert1.EMPRESA == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert1.EMPRESA);
}

                    if(insert1.NUMERO_NOTA_FISCAL == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, insert1.NUMERO_NOTA_FISCAL);
}

                    if(insert1.SERIE == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, insert1.SERIE);
}

                    if(insert1.COD_VENDEDOR == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert1.COD_VENDEDOR);
}

                    if(insert1.NOME_VENDEDOR == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert1.NOME_VENDEDOR);
}

                    if(insert1.CD_COMBO_ORIGEM == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, insert1.CD_COMBO_ORIGEM);
}

                    pstmt_tDBOutput_3.setBigDecimal(7, insert1.VL_COMBO_ORIGEM);

                    if(insert1.COD_ITEM == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, insert1.COD_ITEM);
}

                    if(insert1.ITEM == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, insert1.ITEM);
}

                    if(insert1.DATA != null) {
pstmt_tDBOutput_3.setTimestamp(10, new java.sql.Timestamp(insert1.DATA.getTime()));
} else {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(insert1.DATA_E_HORA != null) {
pstmt_tDBOutput_3.setTimestamp(11, new java.sql.Timestamp(insert1.DATA_E_HORA.getTime()));
} else {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(insert1.DATA_ANO == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(12, insert1.DATA_ANO);
}

                    if(insert1.DATA_MES == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(13, insert1.DATA_MES);
}

                    pstmt_tDBOutput_3.setBigDecimal(14, insert1.QTD_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(15, insert1.VALOR_UNITARIO);

                    pstmt_tDBOutput_3.setBigDecimal(16, insert1.TOTAL_CUSTO);

                    pstmt_tDBOutput_3.setBigDecimal(17, insert1.TOTAL_CUSTO_MEDIO);

                    pstmt_tDBOutput_3.setBigDecimal(18, insert1.TOTAL_LITROS);

                    pstmt_tDBOutput_3.setBigDecimal(19, insert1.TOTAL_VENDA);

                    pstmt_tDBOutput_3.setBigDecimal(20, insert1.TOTAL_IMPOSTOS_SAIDA);

                    if(insert1.CIDADE == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(21, insert1.CIDADE);
}

                    if(insert1.ESTADO == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, insert1.ESTADO);
}

                    if(insert1.COD_CLIENTE == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, insert1.COD_CLIENTE);
}

                    if(insert1.CLIENTE == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, insert1.CLIENTE);
}

                    if(insert1.COD_FORNECEDOR == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(25, insert1.COD_FORNECEDOR);
}

                    if(insert1.FORNECEDOR == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(26, insert1.FORNECEDOR);
}

                    if(insert1.cond_pagto == null) {
pstmt_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(27, insert1.cond_pagto);
}

                    if(insert1.codcnd == null) {
pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(28, insert1.codcnd);
}

                    if(insert1.DT_PEDIDO != null) {
pstmt_tDBOutput_3.setTimestamp(29, new java.sql.Timestamp(insert1.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(29, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert1"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "map2"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map2");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row4Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row5.nm_programa = next_tHashInput_3.nm_programa;
	row5.data_inicio_execucao = next_tHashInput_3.data_inicio_execucao;
	row5.data_termino_execucao = next_tHashInput_3.data_termino_execucao;
	row5.mensagem = next_tHashInput_3.mensagem;
	row5.uuid = next_tHashInput_3.uuid;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row5.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row5.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String empresa;

				public String getEmpresa () {
					return this.empresa;
				}

				public Boolean empresaIsNullable(){
				    return false;
				}
				public Boolean empresaIsKey(){
				    return true;
				}
				public Integer empresaLength(){
				    return 3;
				}
				public Integer empresaPrecision(){
				    return 0;
				}
				public String empresaDefault(){
				
					return null;
				
				}
				public String empresaComment(){
				
				    return "";
				
				}
				public String empresaPattern(){
				
					return "";
				
				}
				public String empresaOriginalDbColumnName(){
				
					return "empresa";
				
				}

				
			    public String numero_nota_fiscal;

				public String getNumero_nota_fiscal () {
					return this.numero_nota_fiscal;
				}

				public Boolean numero_nota_fiscalIsNullable(){
				    return false;
				}
				public Boolean numero_nota_fiscalIsKey(){
				    return true;
				}
				public Integer numero_nota_fiscalLength(){
				    return 12;
				}
				public Integer numero_nota_fiscalPrecision(){
				    return 0;
				}
				public String numero_nota_fiscalDefault(){
				
					return null;
				
				}
				public String numero_nota_fiscalComment(){
				
				    return "";
				
				}
				public String numero_nota_fiscalPattern(){
				
					return "";
				
				}
				public String numero_nota_fiscalOriginalDbColumnName(){
				
					return "numero_nota_fiscal";
				
				}

				
			    public String serie;

				public String getSerie () {
					return this.serie;
				}

				public Boolean serieIsNullable(){
				    return true;
				}
				public Boolean serieIsKey(){
				    return true;
				}
				public Integer serieLength(){
				    return 3;
				}
				public Integer seriePrecision(){
				    return 0;
				}
				public String serieDefault(){
				
					return null;
				
				}
				public String serieComment(){
				
				    return "";
				
				}
				public String seriePattern(){
				
					return "";
				
				}
				public String serieOriginalDbColumnName(){
				
					return "serie";
				
				}

				
			    public String cod_vendedor;

				public String getCod_vendedor () {
					return this.cod_vendedor;
				}

				public Boolean cod_vendedorIsNullable(){
				    return true;
				}
				public Boolean cod_vendedorIsKey(){
				    return false;
				}
				public Integer cod_vendedorLength(){
				    return 3;
				}
				public Integer cod_vendedorPrecision(){
				    return 0;
				}
				public String cod_vendedorDefault(){
				
					return null;
				
				}
				public String cod_vendedorComment(){
				
				    return "";
				
				}
				public String cod_vendedorPattern(){
				
					return "";
				
				}
				public String cod_vendedorOriginalDbColumnName(){
				
					return "cod_vendedor";
				
				}

				
			    public String cond_pagto;

				public String getCond_pagto () {
					return this.cond_pagto;
				}

				public Boolean cond_pagtoIsNullable(){
				    return true;
				}
				public Boolean cond_pagtoIsKey(){
				    return false;
				}
				public Integer cond_pagtoLength(){
				    return 75;
				}
				public Integer cond_pagtoPrecision(){
				    return 0;
				}
				public String cond_pagtoDefault(){
				
					return null;
				
				}
				public String cond_pagtoComment(){
				
				    return "";
				
				}
				public String cond_pagtoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String cond_pagtoOriginalDbColumnName(){
				
					return "cond_pagto";
				
				}

				
			    public String codcnd;

				public String getCodcnd () {
					return this.codcnd;
				}

				public Boolean codcndIsNullable(){
				    return true;
				}
				public Boolean codcndIsKey(){
				    return false;
				}
				public Integer codcndLength(){
				    return 3;
				}
				public Integer codcndPrecision(){
				    return null;
				}
				public String codcndDefault(){
				
					return null;
				
				}
				public String codcndComment(){
				
				    return "";
				
				}
				public String codcndPattern(){
				
					return "";
				
				}
				public String codcndOriginalDbColumnName(){
				
					return "codcnd";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.empresa == null) ? 0 : this.empresa.hashCode());
					
						result = prime * result + ((this.numero_nota_fiscal == null) ? 0 : this.numero_nota_fiscal.hashCode());
					
						result = prime * result + ((this.serie == null) ? 0 : this.serie.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.empresa == null) {
							if (other.empresa != null)
								return false;
						
						} else if (!this.empresa.equals(other.empresa))
						
							return false;
					
						if (this.numero_nota_fiscal == null) {
							if (other.numero_nota_fiscal != null)
								return false;
						
						} else if (!this.numero_nota_fiscal.equals(other.numero_nota_fiscal))
						
							return false;
					
						if (this.serie == null) {
							if (other.serie != null)
								return false;
						
						} else if (!this.serie.equals(other.serie))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.empresa = this.empresa;
	            other.numero_nota_fiscal = this.numero_nota_fiscal;
	            other.serie = this.serie;
	            other.cod_vendedor = this.cod_vendedor;
	            other.cond_pagto = this.cond_pagto;
	            other.codcnd = this.codcnd;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.empresa = this.empresa;
	            	other.numero_nota_fiscal = this.numero_nota_fiscal;
	            	other.serie = this.serie;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.empresa = readString(dis);
					
					this.numero_nota_fiscal = readString(dis);
					
					this.serie = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.empresa = readString(dis);
					
					this.numero_nota_fiscal = readString(dis);
					
					this.serie = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.empresa,dos);
					
					// String
				
						writeString(this.numero_nota_fiscal,dos);
					
					// String
				
						writeString(this.serie,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.empresa,dos);
					
					// String
				
						writeString(this.numero_nota_fiscal,dos);
					
					// String
				
						writeString(this.serie,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.cod_vendedor = readString(dis,ois);
					
						this.cond_pagto = readString(dis,ois);
					
						this.codcnd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.cod_vendedor = readString(dis,objectIn);
					
						this.cond_pagto = readString(dis,objectIn);
					
						this.codcnd = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.cod_vendedor, dos, oos);
					
						writeString(this.cond_pagto, dos, oos);
					
						writeString(this.codcnd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.cod_vendedor, dos, objectOut);
					
						writeString(this.cond_pagto, dos, objectOut);
					
						writeString(this.codcnd, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("empresa="+empresa);
		sb.append(",numero_nota_fiscal="+numero_nota_fiscal);
		sb.append(",serie="+serie);
		sb.append(",cod_vendedor="+cod_vendedor);
		sb.append(",cond_pagto="+cond_pagto);
		sb.append(",codcnd="+codcnd);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.empresa, other.empresa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numero_nota_fiscal, other.numero_nota_fiscal);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.serie, other.serie);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_4) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_5 - inputs:(row7,row12) outputs:(map2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<map1Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<map1Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    map1Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row12.empresa = next_tHashInput_5.empresa;
	row12.numero_nota_fiscal = next_tHashInput_5.numero_nota_fiscal;
	row12.serie = next_tHashInput_5.serie;
	row12.cod_vendedor = next_tHashInput_5.cod_vendedor;
	row12.cond_pagto = next_tHashInput_5.cond_pagto;
	row12.codcnd = next_tHashInput_5.codcnd;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.empresa = row12.empresa;
				
				row12_HashRow.numero_nota_fiscal = row12.numero_nota_fiscal;
				
				row12_HashRow.serie = row12.serie;
				
				row12_HashRow.cod_vendedor = row12.cod_vendedor;
				
				row12_HashRow.cond_pagto = row12.cond_pagto;
				
				row12_HashRow.codcnd = row12.codcnd;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return false;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return null;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_EMPFAT;

				public String getFGO_EMPFAT () {
					return this.FGO_EMPFAT;
				}

				public Boolean FGO_EMPFATIsNullable(){
				    return true;
				}
				public Boolean FGO_EMPFATIsKey(){
				    return false;
				}
				public Integer FGO_EMPFATLength(){
				    return null;
				}
				public Integer FGO_EMPFATPrecision(){
				    return null;
				}
				public String FGO_EMPFATDefault(){
				
					return null;
				
				}
				public String FGO_EMPFATComment(){
				
				    return "";
				
				}
				public String FGO_EMPFATPattern(){
				
					return "";
				
				}
				public String FGO_EMPFATOriginalDbColumnName(){
				
					return "FGO_EMPFAT";
				
				}

				
			    public String FGO_CODCLI;

				public String getFGO_CODCLI () {
					return this.FGO_CODCLI;
				}

				public Boolean FGO_CODCLIIsNullable(){
				    return true;
				}
				public Boolean FGO_CODCLIIsKey(){
				    return false;
				}
				public Integer FGO_CODCLILength(){
				    return null;
				}
				public Integer FGO_CODCLIPrecision(){
				    return null;
				}
				public String FGO_CODCLIDefault(){
				
					return null;
				
				}
				public String FGO_CODCLIComment(){
				
				    return "";
				
				}
				public String FGO_CODCLIPattern(){
				
					return "";
				
				}
				public String FGO_CODCLIOriginalDbColumnName(){
				
					return "FGO_CODCLI";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return 3;
				}
				public Integer DT_PEDIDOPrecision(){
				    return 0;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMFAT == null) ? 0 : this.FGO_NUMFAT.hashCode());
					
						result = prime * result + ((this.FGO_EMPFAT == null) ? 0 : this.FGO_EMPFAT.hashCode());
					
						result = prime * result + ((this.FGO_CODCLI == null) ? 0 : this.FGO_CODCLI.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.FGO_NUMFAT == null) {
							if (other.FGO_NUMFAT != null)
								return false;
						
						} else if (!this.FGO_NUMFAT.equals(other.FGO_NUMFAT))
						
							return false;
					
						if (this.FGO_EMPFAT == null) {
							if (other.FGO_EMPFAT != null)
								return false;
						
						} else if (!this.FGO_EMPFAT.equals(other.FGO_EMPFAT))
						
							return false;
					
						if (this.FGO_CODCLI == null) {
							if (other.FGO_CODCLI != null)
								return false;
						
						} else if (!this.FGO_CODCLI.equals(other.FGO_CODCLI))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_EMPFAT = this.FGO_EMPFAT;
	            other.FGO_CODCLI = this.FGO_CODCLI;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.FGO_NUMFAT = this.FGO_NUMFAT;
	            	other.FGO_EMPFAT = this.FGO_EMPFAT;
	            	other.FGO_CODCLI = this.FGO_CODCLI;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_faturamento_ano, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_faturamento_ano) {

        	try {

        		int length = 0;
		
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_EMPFAT = readString(dis);
					
					this.FGO_CODCLI = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_EMPFAT,dos);
					
					// String
				
						writeString(this.FGO_CODCLI,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DT_PEDIDO = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DT_PEDIDO = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.DT_PEDIDO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.DT_PEDIDO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_EMPFAT="+FGO_EMPFAT);
		sb.append(",FGO_CODCLI="+FGO_CODCLI);
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMFAT, other.FGO_NUMFAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_EMPFAT, other.FGO_EMPFAT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FGO_CODCLI, other.FGO_CODCLI);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tHashInput_6 - inputs:(after_tHashInput_4) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_7 - inputs:(map2,row14) outputs:(insert1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfmap1Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfmap1Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    copyOfmap1Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row14.FGO_NUMFAT = next_tHashInput_6.FGO_NUMFAT;
	row14.FGO_EMPFAT = next_tHashInput_6.FGO_EMPFAT;
	row14.FGO_CODCLI = next_tHashInput_6.FGO_CODCLI;
	row14.DT_PEDIDO = next_tHashInput_6.DT_PEDIDO;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.FGO_NUMFAT = row14.FGO_NUMFAT;
				
				row14_HashRow.FGO_EMPFAT = row14.FGO_EMPFAT;
				
				row14_HashRow.FGO_CODCLI = row14.FGO_CODCLI;
				
				row14_HashRow.DT_PEDIDO = row14.DT_PEDIDO;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_faturamento_ano_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final vw_faturamento_ano vw_faturamento_anoClass = new vw_faturamento_ano();

        int exitCode = vw_faturamento_anoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = vw_faturamento_ano.class.getClassLoader().getResourceAsStream("palacio_ferramentas/vw_faturamento_ano_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = vw_faturamento_ano.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("DW_DB", "id_String");
                        if(context.getStringValue("DW_DB") == null) {
                            context.DW_DB = null;
                        } else {
                            context.DW_DB=(String) context.getProperty("DW_DB");
                        }
                        context.setContextType("DW_HOST", "id_String");
                        if(context.getStringValue("DW_HOST") == null) {
                            context.DW_HOST = null;
                        } else {
                            context.DW_HOST=(String) context.getProperty("DW_HOST");
                        }
                        context.setContextType("DW_PASSWORD", "id_String");
                        if(context.getStringValue("DW_PASSWORD") == null) {
                            context.DW_PASSWORD = null;
                        } else {
                            context.DW_PASSWORD=(String) context.getProperty("DW_PASSWORD");
                        }
                        context.setContextType("DW_PORT", "id_String");
                        if(context.getStringValue("DW_PORT") == null) {
                            context.DW_PORT = null;
                        } else {
                            context.DW_PORT=(String) context.getProperty("DW_PORT");
                        }
                        context.setContextType("DW_USER", "id_String");
                        if(context.getStringValue("DW_USER") == null) {
                            context.DW_USER = null;
                        } else {
                            context.DW_USER=(String) context.getProperty("DW_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("dias", "id_Integer");
                        if(context.getStringValue("dias") == null) {
                            context.dias = null;
                        } else {
                            try{
                                context.dias=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dias"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dias", e.getMessage()));
                                context.dias=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("DW_DB")) {
                context.DW_DB = (String) parentContextMap.get("DW_DB");
            }if (parentContextMap.containsKey("DW_HOST")) {
                context.DW_HOST = (String) parentContextMap.get("DW_HOST");
            }if (parentContextMap.containsKey("DW_PASSWORD")) {
                context.DW_PASSWORD = (String) parentContextMap.get("DW_PASSWORD");
            }if (parentContextMap.containsKey("DW_PORT")) {
                context.DW_PORT = (String) parentContextMap.get("DW_PORT");
            }if (parentContextMap.containsKey("DW_USER")) {
                context.DW_USER = (String) parentContextMap.get("DW_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("dias")) {
                context.dias = (Integer) parentContextMap.get("dias");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : vw_faturamento_ano");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     660105 characters generated by Talend Open Studio for Big Data 
 *     on the 16 de abril de 2025 16:28:00 BRT
 ************************************************************************************************/