// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.bi_assistencia_tecnica_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: bi_assistencia_tecnica Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class bi_assistencia_tecnica implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "bi_assistencia_tecnica";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				bi_assistencia_tecnica.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(bi_assistencia_tecnica.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = context.JDBC_PARAMETERS;
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
insert_logStruct insert_log = new insert_logStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_bi_assistencia_tecnica_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row2.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row2.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row4 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row4 = new row4Struct();
                                row4.nm_programa = insert_log.nm_programa;
                                row4.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row4.data_termino_execucao = insert_log.data_termino_execucao;
                                row4.mensagem = insert_log.mensagem;
                                row4.uuid = insert_log.uuid;
                                row4.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.nm_programa = row4.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row4.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row4.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row4.mensagem;
					oneRow_tHashOutput_1.uuid = row4.uuid;
					oneRow_tHashOutput_1.versao = row4.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class InsertStruct implements routines.system.IPersistableRow<InsertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public java.util.Date DT_ENTRADA;

				public java.util.Date getDT_ENTRADA () {
					return this.DT_ENTRADA;
				}

				public Boolean DT_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean DT_ENTRADAIsKey(){
				    return false;
				}
				public Integer DT_ENTRADALength(){
				    return null;
				}
				public Integer DT_ENTRADAPrecision(){
				    return null;
				}
				public String DT_ENTRADADefault(){
				
					return null;
				
				}
				public String DT_ENTRADAComment(){
				
				    return "";
				
				}
				public String DT_ENTRADAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_ENTRADAOriginalDbColumnName(){
				
					return "DT_ENTRADA";
				
				}

				
			    public java.util.Date DT_PREVISAO;

				public java.util.Date getDT_PREVISAO () {
					return this.DT_PREVISAO;
				}

				public Boolean DT_PREVISAOIsNullable(){
				    return true;
				}
				public Boolean DT_PREVISAOIsKey(){
				    return false;
				}
				public Integer DT_PREVISAOLength(){
				    return null;
				}
				public Integer DT_PREVISAOPrecision(){
				    return null;
				}
				public String DT_PREVISAODefault(){
				
					return null;
				
				}
				public String DT_PREVISAOComment(){
				
				    return "";
				
				}
				public String DT_PREVISAOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PREVISAOOriginalDbColumnName(){
				
					return "DT_PREVISAO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DT_NOTA;

				public java.util.Date getDT_NOTA () {
					return this.DT_NOTA;
				}

				public Boolean DT_NOTAIsNullable(){
				    return true;
				}
				public Boolean DT_NOTAIsKey(){
				    return false;
				}
				public Integer DT_NOTALength(){
				    return null;
				}
				public Integer DT_NOTAPrecision(){
				    return null;
				}
				public String DT_NOTADefault(){
				
					return null;
				
				}
				public String DT_NOTAComment(){
				
				    return "";
				
				}
				public String DT_NOTAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_NOTAOriginalDbColumnName(){
				
					return "DT_NOTA";
				
				}

				
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NM_CLIENTE;

				public String getNM_CLIENTE () {
					return this.NM_CLIENTE;
				}

				public Boolean NM_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NM_CLIENTEIsKey(){
				    return false;
				}
				public Integer NM_CLIENTELength(){
				    return 60;
				}
				public Integer NM_CLIENTEPrecision(){
				    return null;
				}
				public String NM_CLIENTEDefault(){
				
					return null;
				
				}
				public String NM_CLIENTEComment(){
				
				    return "";
				
				}
				public String NM_CLIENTEPattern(){
				
					return "";
				
				}
				public String NM_CLIENTEOriginalDbColumnName(){
				
					return "NM_CLIENTE";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 3;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				
			    public String NUM_OS;

				public String getNUM_OS () {
					return this.NUM_OS;
				}

				public Boolean NUM_OSIsNullable(){
				    return true;
				}
				public Boolean NUM_OSIsKey(){
				    return true;
				}
				public Integer NUM_OSLength(){
				    return 6;
				}
				public Integer NUM_OSPrecision(){
				    return null;
				}
				public String NUM_OSDefault(){
				
					return null;
				
				}
				public String NUM_OSComment(){
				
				    return "";
				
				}
				public String NUM_OSPattern(){
				
					return "";
				
				}
				public String NUM_OSOriginalDbColumnName(){
				
					return "NUM_OS";
				
				}

				
			    public String NUM_FATURA;

				public String getNUM_FATURA () {
					return this.NUM_FATURA;
				}

				public Boolean NUM_FATURAIsNullable(){
				    return true;
				}
				public Boolean NUM_FATURAIsKey(){
				    return false;
				}
				public Integer NUM_FATURALength(){
				    return 12;
				}
				public Integer NUM_FATURAPrecision(){
				    return null;
				}
				public String NUM_FATURADefault(){
				
					return null;
				
				}
				public String NUM_FATURAComment(){
				
				    return "";
				
				}
				public String NUM_FATURAPattern(){
				
					return "";
				
				}
				public String NUM_FATURAOriginalDbColumnName(){
				
					return "NUM_FATURA";
				
				}

				
			    public String TELEFONE;

				public String getTELEFONE () {
					return this.TELEFONE;
				}

				public Boolean TELEFONEIsNullable(){
				    return true;
				}
				public Boolean TELEFONEIsKey(){
				    return false;
				}
				public Integer TELEFONELength(){
				    return 20;
				}
				public Integer TELEFONEPrecision(){
				    return null;
				}
				public String TELEFONEDefault(){
				
					return null;
				
				}
				public String TELEFONEComment(){
				
				    return "";
				
				}
				public String TELEFONEPattern(){
				
					return "";
				
				}
				public String TELEFONEOriginalDbColumnName(){
				
					return "TELEFONE";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CD_EQUIPAMENTO;

				public String getCD_EQUIPAMENTO () {
					return this.CD_EQUIPAMENTO;
				}

				public Boolean CD_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean CD_EQUIPAMENTOIsKey(){
				    return true;
				}
				public Integer CD_EQUIPAMENTOLength(){
				    return 5;
				}
				public Integer CD_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String CD_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String CD_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String CD_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String CD_EQUIPAMENTOOriginalDbColumnName(){
				
					return "CD_EQUIPAMENTO";
				
				}

				
			    public String DESC_EQUIPAMENTO;

				public String getDESC_EQUIPAMENTO () {
					return this.DESC_EQUIPAMENTO;
				}

				public Boolean DESC_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean DESC_EQUIPAMENTOIsKey(){
				    return false;
				}
				public Integer DESC_EQUIPAMENTOLength(){
				    return 40;
				}
				public Integer DESC_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String DESC_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String DESC_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String DESC_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String DESC_EQUIPAMENTOOriginalDbColumnName(){
				
					return "DESC_EQUIPAMENTO";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DESC_MARCA;

				public String getDESC_MARCA () {
					return this.DESC_MARCA;
				}

				public Boolean DESC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DESC_MARCAIsKey(){
				    return false;
				}
				public Integer DESC_MARCALength(){
				    return 40;
				}
				public Integer DESC_MARCAPrecision(){
				    return null;
				}
				public String DESC_MARCADefault(){
				
					return null;
				
				}
				public String DESC_MARCAComment(){
				
				    return "";
				
				}
				public String DESC_MARCAPattern(){
				
					return "";
				
				}
				public String DESC_MARCAOriginalDbColumnName(){
				
					return "DESC_MARCA";
				
				}

				
			    public String VOLTAGEM;

				public String getVOLTAGEM () {
					return this.VOLTAGEM;
				}

				public Boolean VOLTAGEMIsNullable(){
				    return true;
				}
				public Boolean VOLTAGEMIsKey(){
				    return false;
				}
				public Integer VOLTAGEMLength(){
				    return 10;
				}
				public Integer VOLTAGEMPrecision(){
				    return null;
				}
				public String VOLTAGEMDefault(){
				
					return null;
				
				}
				public String VOLTAGEMComment(){
				
				    return "";
				
				}
				public String VOLTAGEMPattern(){
				
					return "";
				
				}
				public String VOLTAGEMOriginalDbColumnName(){
				
					return "VOLTAGEM";
				
				}

				
			    public String OBSERVACOES;

				public String getOBSERVACOES () {
					return this.OBSERVACOES;
				}

				public Boolean OBSERVACOESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACOESIsKey(){
				    return false;
				}
				public Integer OBSERVACOESLength(){
				    return null;
				}
				public Integer OBSERVACOESPrecision(){
				    return null;
				}
				public String OBSERVACOESDefault(){
				
					return null;
				
				}
				public String OBSERVACOESComment(){
				
				    return "";
				
				}
				public String OBSERVACOESPattern(){
				
					return "";
				
				}
				public String OBSERVACOESOriginalDbColumnName(){
				
					return "OBSERVACOES";
				
				}

				
			    public String SERVICO;

				public String getSERVICO () {
					return this.SERVICO;
				}

				public Boolean SERVICOIsNullable(){
				    return true;
				}
				public Boolean SERVICOIsKey(){
				    return false;
				}
				public Integer SERVICOLength(){
				    return 80;
				}
				public Integer SERVICOPrecision(){
				    return null;
				}
				public String SERVICODefault(){
				
					return null;
				
				}
				public String SERVICOComment(){
				
				    return "";
				
				}
				public String SERVICOPattern(){
				
					return "";
				
				}
				public String SERVICOOriginalDbColumnName(){
				
					return "SERVICO";
				
				}

				
			    public String RETPOR;

				public String getRETPOR () {
					return this.RETPOR;
				}

				public Boolean RETPORIsNullable(){
				    return true;
				}
				public Boolean RETPORIsKey(){
				    return false;
				}
				public Integer RETPORLength(){
				    return 80;
				}
				public Integer RETPORPrecision(){
				    return null;
				}
				public String RETPORDefault(){
				
					return null;
				
				}
				public String RETPORComment(){
				
				    return "";
				
				}
				public String RETPORPattern(){
				
					return "";
				
				}
				public String RETPOROriginalDbColumnName(){
				
					return "RETPOR";
				
				}

				
			    public Double VALOR_PRODUTO;

				public Double getVALOR_PRODUTO () {
					return this.VALOR_PRODUTO;
				}

				public Boolean VALOR_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean VALOR_PRODUTOIsKey(){
				    return false;
				}
				public Integer VALOR_PRODUTOLength(){
				    return null;
				}
				public Integer VALOR_PRODUTOPrecision(){
				    return null;
				}
				public String VALOR_PRODUTODefault(){
				
					return null;
				
				}
				public String VALOR_PRODUTOComment(){
				
				    return "";
				
				}
				public String VALOR_PRODUTOPattern(){
				
					return "";
				
				}
				public String VALOR_PRODUTOOriginalDbColumnName(){
				
					return "VALOR_PRODUTO";
				
				}

				
			    public Double VALOR_SERVICO;

				public Double getVALOR_SERVICO () {
					return this.VALOR_SERVICO;
				}

				public Boolean VALOR_SERVICOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICOLength(){
				    return null;
				}
				public Integer VALOR_SERVICOPrecision(){
				    return null;
				}
				public String VALOR_SERVICODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICOOriginalDbColumnName(){
				
					return "VALOR_SERVICO";
				
				}

				
			    public Double VALOR_COMPRA;

				public Double getVALOR_COMPRA () {
					return this.VALOR_COMPRA;
				}

				public Boolean VALOR_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VALOR_COMPRAIsKey(){
				    return false;
				}
				public Integer VALOR_COMPRALength(){
				    return null;
				}
				public Integer VALOR_COMPRAPrecision(){
				    return null;
				}
				public String VALOR_COMPRADefault(){
				
					return null;
				
				}
				public String VALOR_COMPRAComment(){
				
				    return "";
				
				}
				public String VALOR_COMPRAPattern(){
				
					return "";
				
				}
				public String VALOR_COMPRAOriginalDbColumnName(){
				
					return "VALOR_COMPRA";
				
				}

				
			    public String CODIGO_TECNICO;

				public String getCODIGO_TECNICO () {
					return this.CODIGO_TECNICO;
				}

				public Boolean CODIGO_TECNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_TECNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_TECNICOLength(){
				    return 3;
				}
				public Integer CODIGO_TECNICOPrecision(){
				    return null;
				}
				public String CODIGO_TECNICODefault(){
				
					return null;
				
				}
				public String CODIGO_TECNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_TECNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_TECNICOOriginalDbColumnName(){
				
					return "CODIGO_TECNICO";
				
				}

				
			    public String NM_TECNICO;

				public String getNM_TECNICO () {
					return this.NM_TECNICO;
				}

				public Boolean NM_TECNICOIsNullable(){
				    return true;
				}
				public Boolean NM_TECNICOIsKey(){
				    return false;
				}
				public Integer NM_TECNICOLength(){
				    return 50;
				}
				public Integer NM_TECNICOPrecision(){
				    return null;
				}
				public String NM_TECNICODefault(){
				
					return null;
				
				}
				public String NM_TECNICOComment(){
				
				    return "";
				
				}
				public String NM_TECNICOPattern(){
				
					return "";
				
				}
				public String NM_TECNICOOriginalDbColumnName(){
				
					return "NM_TECNICO";
				
				}

				
			    public String GARANTIA;

				public String getGARANTIA () {
					return this.GARANTIA;
				}

				public Boolean GARANTIAIsNullable(){
				    return true;
				}
				public Boolean GARANTIAIsKey(){
				    return false;
				}
				public Integer GARANTIALength(){
				    return 3;
				}
				public Integer GARANTIAPrecision(){
				    return null;
				}
				public String GARANTIADefault(){
				
					return null;
				
				}
				public String GARANTIAComment(){
				
				    return "";
				
				}
				public String GARANTIAPattern(){
				
					return "";
				
				}
				public String GARANTIAOriginalDbColumnName(){
				
					return "GARANTIA";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 40;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public String AG_PEC;

				public String getAG_PEC () {
					return this.AG_PEC;
				}

				public Boolean AG_PECIsNullable(){
				    return true;
				}
				public Boolean AG_PECIsKey(){
				    return false;
				}
				public Integer AG_PECLength(){
				    return 1;
				}
				public Integer AG_PECPrecision(){
				    return null;
				}
				public String AG_PECDefault(){
				
					return null;
				
				}
				public String AG_PECComment(){
				
				    return "";
				
				}
				public String AG_PECPattern(){
				
					return "";
				
				}
				public String AG_PECOriginalDbColumnName(){
				
					return "AG_PEC";
				
				}

				
			    public java.util.Date DATA_ATUALIZACAO_JOB;

				public java.util.Date getDATA_ATUALIZACAO_JOB () {
					return this.DATA_ATUALIZACAO_JOB;
				}

				public Boolean DATA_ATUALIZACAO_JOBIsNullable(){
				    return true;
				}
				public Boolean DATA_ATUALIZACAO_JOBIsKey(){
				    return false;
				}
				public Integer DATA_ATUALIZACAO_JOBLength(){
				    return null;
				}
				public Integer DATA_ATUALIZACAO_JOBPrecision(){
				    return null;
				}
				public String DATA_ATUALIZACAO_JOBDefault(){
				
					return null;
				
				}
				public String DATA_ATUALIZACAO_JOBComment(){
				
				    return "";
				
				}
				public String DATA_ATUALIZACAO_JOBPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ATUALIZACAO_JOBOriginalDbColumnName(){
				
					return "DATA_ATUALIZACAO_JOB";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
						result = prime * result + ((this.NUM_OS == null) ? 0 : this.NUM_OS.hashCode());
					
						result = prime * result + ((this.CD_EQUIPAMENTO == null) ? 0 : this.CD_EQUIPAMENTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsertStruct other = (InsertStruct) obj;
		
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					
						if (this.NUM_OS == null) {
							if (other.NUM_OS != null)
								return false;
						
						} else if (!this.NUM_OS.equals(other.NUM_OS))
						
							return false;
					
						if (this.CD_EQUIPAMENTO == null) {
							if (other.CD_EQUIPAMENTO != null)
								return false;
						
						} else if (!this.CD_EQUIPAMENTO.equals(other.CD_EQUIPAMENTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsertStruct other) {

		other.CD_EMPRESA = this.CD_EMPRESA;
	            other.DT_ENTRADA = this.DT_ENTRADA;
	            other.DT_PREVISAO = this.DT_PREVISAO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DT_NOTA = this.DT_NOTA;
	            other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NM_CLIENTE = this.NM_CLIENTE;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            other.NUM_OS = this.NUM_OS;
	            other.NUM_FATURA = this.NUM_FATURA;
	            other.TELEFONE = this.TELEFONE;
	            other.CELULAR = this.CELULAR;
	            other.CD_EQUIPAMENTO = this.CD_EQUIPAMENTO;
	            other.DESC_EQUIPAMENTO = this.DESC_EQUIPAMENTO;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DESC_MARCA = this.DESC_MARCA;
	            other.VOLTAGEM = this.VOLTAGEM;
	            other.OBSERVACOES = this.OBSERVACOES;
	            other.SERVICO = this.SERVICO;
	            other.RETPOR = this.RETPOR;
	            other.VALOR_PRODUTO = this.VALOR_PRODUTO;
	            other.VALOR_SERVICO = this.VALOR_SERVICO;
	            other.VALOR_COMPRA = this.VALOR_COMPRA;
	            other.CODIGO_TECNICO = this.CODIGO_TECNICO;
	            other.NM_TECNICO = this.NM_TECNICO;
	            other.GARANTIA = this.GARANTIA;
	            other.STATUS = this.STATUS;
	            other.AG_PEC = this.AG_PEC;
	            other.DATA_ATUALIZACAO_JOB = this.DATA_ATUALIZACAO_JOB;
	            
	}

	public void copyKeysDataTo(InsertStruct other) {

		other.CD_EMPRESA = this.CD_EMPRESA;
	            	other.CD_CLIENTE = this.CD_CLIENTE;
	            	other.NUM_OS = this.NUM_OS;
	            	other.CD_EQUIPAMENTO = this.CD_EQUIPAMENTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DT_ENTRADA="+String.valueOf(DT_ENTRADA));
		sb.append(",DT_PREVISAO="+String.valueOf(DT_PREVISAO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DT_NOTA="+String.valueOf(DT_NOTA));
		sb.append(",CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NM_CLIENTE="+NM_CLIENTE);
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
		sb.append(",NUM_OS="+NUM_OS);
		sb.append(",NUM_FATURA="+NUM_FATURA);
		sb.append(",TELEFONE="+TELEFONE);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CD_EQUIPAMENTO="+CD_EQUIPAMENTO);
		sb.append(",DESC_EQUIPAMENTO="+DESC_EQUIPAMENTO);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DESC_MARCA="+DESC_MARCA);
		sb.append(",VOLTAGEM="+VOLTAGEM);
		sb.append(",OBSERVACOES="+OBSERVACOES);
		sb.append(",SERVICO="+SERVICO);
		sb.append(",RETPOR="+RETPOR);
		sb.append(",VALOR_PRODUTO="+String.valueOf(VALOR_PRODUTO));
		sb.append(",VALOR_SERVICO="+String.valueOf(VALOR_SERVICO));
		sb.append(",VALOR_COMPRA="+String.valueOf(VALOR_COMPRA));
		sb.append(",CODIGO_TECNICO="+CODIGO_TECNICO);
		sb.append(",NM_TECNICO="+NM_TECNICO);
		sb.append(",GARANTIA="+GARANTIA);
		sb.append(",STATUS="+STATUS);
		sb.append(",AG_PEC="+AG_PEC);
		sb.append(",DATA_ATUALIZACAO_JOB="+String.valueOf(DATA_ATUALIZACAO_JOB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_OS, other.NUM_OS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EQUIPAMENTO, other.CD_EQUIPAMENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return false;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public java.util.Date DT_ENTRADA;

				public java.util.Date getDT_ENTRADA () {
					return this.DT_ENTRADA;
				}

				public Boolean DT_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean DT_ENTRADAIsKey(){
				    return false;
				}
				public Integer DT_ENTRADALength(){
				    return null;
				}
				public Integer DT_ENTRADAPrecision(){
				    return null;
				}
				public String DT_ENTRADADefault(){
				
					return null;
				
				}
				public String DT_ENTRADAComment(){
				
				    return "";
				
				}
				public String DT_ENTRADAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_ENTRADAOriginalDbColumnName(){
				
					return "DT_ENTRADA";
				
				}

				
			    public java.util.Date DT_PREVISAO;

				public java.util.Date getDT_PREVISAO () {
					return this.DT_PREVISAO;
				}

				public Boolean DT_PREVISAOIsNullable(){
				    return true;
				}
				public Boolean DT_PREVISAOIsKey(){
				    return false;
				}
				public Integer DT_PREVISAOLength(){
				    return null;
				}
				public Integer DT_PREVISAOPrecision(){
				    return null;
				}
				public String DT_PREVISAODefault(){
				
					return null;
				
				}
				public String DT_PREVISAOComment(){
				
				    return "";
				
				}
				public String DT_PREVISAOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PREVISAOOriginalDbColumnName(){
				
					return "DT_PREVISAO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DT_NOTA;

				public java.util.Date getDT_NOTA () {
					return this.DT_NOTA;
				}

				public Boolean DT_NOTAIsNullable(){
				    return true;
				}
				public Boolean DT_NOTAIsKey(){
				    return false;
				}
				public Integer DT_NOTALength(){
				    return null;
				}
				public Integer DT_NOTAPrecision(){
				    return null;
				}
				public String DT_NOTADefault(){
				
					return null;
				
				}
				public String DT_NOTAComment(){
				
				    return "";
				
				}
				public String DT_NOTAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_NOTAOriginalDbColumnName(){
				
					return "DT_NOTA";
				
				}

				
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return false;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NM_CLIENTE;

				public String getNM_CLIENTE () {
					return this.NM_CLIENTE;
				}

				public Boolean NM_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NM_CLIENTEIsKey(){
				    return false;
				}
				public Integer NM_CLIENTELength(){
				    return 60;
				}
				public Integer NM_CLIENTEPrecision(){
				    return null;
				}
				public String NM_CLIENTEDefault(){
				
					return null;
				
				}
				public String NM_CLIENTEComment(){
				
				    return "";
				
				}
				public String NM_CLIENTEPattern(){
				
					return "";
				
				}
				public String NM_CLIENTEOriginalDbColumnName(){
				
					return "NM_CLIENTE";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 3;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				
			    public String NUM_OS;

				public String getNUM_OS () {
					return this.NUM_OS;
				}

				public Boolean NUM_OSIsNullable(){
				    return true;
				}
				public Boolean NUM_OSIsKey(){
				    return false;
				}
				public Integer NUM_OSLength(){
				    return 6;
				}
				public Integer NUM_OSPrecision(){
				    return null;
				}
				public String NUM_OSDefault(){
				
					return null;
				
				}
				public String NUM_OSComment(){
				
				    return "";
				
				}
				public String NUM_OSPattern(){
				
					return "";
				
				}
				public String NUM_OSOriginalDbColumnName(){
				
					return "NUM_OS";
				
				}

				
			    public String NUM_FATURA;

				public String getNUM_FATURA () {
					return this.NUM_FATURA;
				}

				public Boolean NUM_FATURAIsNullable(){
				    return true;
				}
				public Boolean NUM_FATURAIsKey(){
				    return false;
				}
				public Integer NUM_FATURALength(){
				    return 12;
				}
				public Integer NUM_FATURAPrecision(){
				    return null;
				}
				public String NUM_FATURADefault(){
				
					return null;
				
				}
				public String NUM_FATURAComment(){
				
				    return "";
				
				}
				public String NUM_FATURAPattern(){
				
					return "";
				
				}
				public String NUM_FATURAOriginalDbColumnName(){
				
					return "NUM_FATURA";
				
				}

				
			    public String TELEFONE;

				public String getTELEFONE () {
					return this.TELEFONE;
				}

				public Boolean TELEFONEIsNullable(){
				    return true;
				}
				public Boolean TELEFONEIsKey(){
				    return false;
				}
				public Integer TELEFONELength(){
				    return 20;
				}
				public Integer TELEFONEPrecision(){
				    return null;
				}
				public String TELEFONEDefault(){
				
					return null;
				
				}
				public String TELEFONEComment(){
				
				    return "";
				
				}
				public String TELEFONEPattern(){
				
					return "";
				
				}
				public String TELEFONEOriginalDbColumnName(){
				
					return "TELEFONE";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CD_EQUIPAMENTO;

				public String getCD_EQUIPAMENTO () {
					return this.CD_EQUIPAMENTO;
				}

				public Boolean CD_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean CD_EQUIPAMENTOIsKey(){
				    return false;
				}
				public Integer CD_EQUIPAMENTOLength(){
				    return 5;
				}
				public Integer CD_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String CD_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String CD_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String CD_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String CD_EQUIPAMENTOOriginalDbColumnName(){
				
					return "CD_EQUIPAMENTO";
				
				}

				
			    public String DESC_EQUIPAMENTO;

				public String getDESC_EQUIPAMENTO () {
					return this.DESC_EQUIPAMENTO;
				}

				public Boolean DESC_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean DESC_EQUIPAMENTOIsKey(){
				    return false;
				}
				public Integer DESC_EQUIPAMENTOLength(){
				    return 40;
				}
				public Integer DESC_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String DESC_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String DESC_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String DESC_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String DESC_EQUIPAMENTOOriginalDbColumnName(){
				
					return "DESC_EQUIPAMENTO";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DESC_MARCA;

				public String getDESC_MARCA () {
					return this.DESC_MARCA;
				}

				public Boolean DESC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DESC_MARCAIsKey(){
				    return false;
				}
				public Integer DESC_MARCALength(){
				    return 40;
				}
				public Integer DESC_MARCAPrecision(){
				    return null;
				}
				public String DESC_MARCADefault(){
				
					return null;
				
				}
				public String DESC_MARCAComment(){
				
				    return "";
				
				}
				public String DESC_MARCAPattern(){
				
					return "";
				
				}
				public String DESC_MARCAOriginalDbColumnName(){
				
					return "DESC_MARCA";
				
				}

				
			    public String VOLTAGEM;

				public String getVOLTAGEM () {
					return this.VOLTAGEM;
				}

				public Boolean VOLTAGEMIsNullable(){
				    return true;
				}
				public Boolean VOLTAGEMIsKey(){
				    return false;
				}
				public Integer VOLTAGEMLength(){
				    return 10;
				}
				public Integer VOLTAGEMPrecision(){
				    return null;
				}
				public String VOLTAGEMDefault(){
				
					return null;
				
				}
				public String VOLTAGEMComment(){
				
				    return "";
				
				}
				public String VOLTAGEMPattern(){
				
					return "";
				
				}
				public String VOLTAGEMOriginalDbColumnName(){
				
					return "VOLTAGEM";
				
				}

				
			    public String OBSERVACOES;

				public String getOBSERVACOES () {
					return this.OBSERVACOES;
				}

				public Boolean OBSERVACOESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACOESIsKey(){
				    return false;
				}
				public Integer OBSERVACOESLength(){
				    return null;
				}
				public Integer OBSERVACOESPrecision(){
				    return null;
				}
				public String OBSERVACOESDefault(){
				
					return null;
				
				}
				public String OBSERVACOESComment(){
				
				    return "";
				
				}
				public String OBSERVACOESPattern(){
				
					return "";
				
				}
				public String OBSERVACOESOriginalDbColumnName(){
				
					return "OBSERVACOES";
				
				}

				
			    public String SERVICO;

				public String getSERVICO () {
					return this.SERVICO;
				}

				public Boolean SERVICOIsNullable(){
				    return true;
				}
				public Boolean SERVICOIsKey(){
				    return false;
				}
				public Integer SERVICOLength(){
				    return 80;
				}
				public Integer SERVICOPrecision(){
				    return null;
				}
				public String SERVICODefault(){
				
					return null;
				
				}
				public String SERVICOComment(){
				
				    return "";
				
				}
				public String SERVICOPattern(){
				
					return "";
				
				}
				public String SERVICOOriginalDbColumnName(){
				
					return "SERVICO";
				
				}

				
			    public String RETPOR;

				public String getRETPOR () {
					return this.RETPOR;
				}

				public Boolean RETPORIsNullable(){
				    return true;
				}
				public Boolean RETPORIsKey(){
				    return false;
				}
				public Integer RETPORLength(){
				    return 80;
				}
				public Integer RETPORPrecision(){
				    return null;
				}
				public String RETPORDefault(){
				
					return null;
				
				}
				public String RETPORComment(){
				
				    return "";
				
				}
				public String RETPORPattern(){
				
					return "";
				
				}
				public String RETPOROriginalDbColumnName(){
				
					return "RETPOR";
				
				}

				
			    public Double VALOR_PRODUTO;

				public Double getVALOR_PRODUTO () {
					return this.VALOR_PRODUTO;
				}

				public Boolean VALOR_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean VALOR_PRODUTOIsKey(){
				    return false;
				}
				public Integer VALOR_PRODUTOLength(){
				    return null;
				}
				public Integer VALOR_PRODUTOPrecision(){
				    return null;
				}
				public String VALOR_PRODUTODefault(){
				
					return null;
				
				}
				public String VALOR_PRODUTOComment(){
				
				    return "";
				
				}
				public String VALOR_PRODUTOPattern(){
				
					return "";
				
				}
				public String VALOR_PRODUTOOriginalDbColumnName(){
				
					return "VALOR_PRODUTO";
				
				}

				
			    public Double VALOR_SERVICO;

				public Double getVALOR_SERVICO () {
					return this.VALOR_SERVICO;
				}

				public Boolean VALOR_SERVICOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICOLength(){
				    return null;
				}
				public Integer VALOR_SERVICOPrecision(){
				    return null;
				}
				public String VALOR_SERVICODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICOOriginalDbColumnName(){
				
					return "VALOR_SERVICO";
				
				}

				
			    public Double VALOR_COMPRA;

				public Double getVALOR_COMPRA () {
					return this.VALOR_COMPRA;
				}

				public Boolean VALOR_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VALOR_COMPRAIsKey(){
				    return false;
				}
				public Integer VALOR_COMPRALength(){
				    return null;
				}
				public Integer VALOR_COMPRAPrecision(){
				    return null;
				}
				public String VALOR_COMPRADefault(){
				
					return null;
				
				}
				public String VALOR_COMPRAComment(){
				
				    return "";
				
				}
				public String VALOR_COMPRAPattern(){
				
					return "";
				
				}
				public String VALOR_COMPRAOriginalDbColumnName(){
				
					return "VALOR_COMPRA";
				
				}

				
			    public String CODIGO_TECNICO;

				public String getCODIGO_TECNICO () {
					return this.CODIGO_TECNICO;
				}

				public Boolean CODIGO_TECNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_TECNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_TECNICOLength(){
				    return 3;
				}
				public Integer CODIGO_TECNICOPrecision(){
				    return null;
				}
				public String CODIGO_TECNICODefault(){
				
					return null;
				
				}
				public String CODIGO_TECNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_TECNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_TECNICOOriginalDbColumnName(){
				
					return "CODIGO_TECNICO";
				
				}

				
			    public String NM_TECNICO;

				public String getNM_TECNICO () {
					return this.NM_TECNICO;
				}

				public Boolean NM_TECNICOIsNullable(){
				    return true;
				}
				public Boolean NM_TECNICOIsKey(){
				    return false;
				}
				public Integer NM_TECNICOLength(){
				    return 50;
				}
				public Integer NM_TECNICOPrecision(){
				    return null;
				}
				public String NM_TECNICODefault(){
				
					return null;
				
				}
				public String NM_TECNICOComment(){
				
				    return "";
				
				}
				public String NM_TECNICOPattern(){
				
					return "";
				
				}
				public String NM_TECNICOOriginalDbColumnName(){
				
					return "NM_TECNICO";
				
				}

				
			    public String GARANTIA;

				public String getGARANTIA () {
					return this.GARANTIA;
				}

				public Boolean GARANTIAIsNullable(){
				    return true;
				}
				public Boolean GARANTIAIsKey(){
				    return false;
				}
				public Integer GARANTIALength(){
				    return 3;
				}
				public Integer GARANTIAPrecision(){
				    return null;
				}
				public String GARANTIADefault(){
				
					return null;
				
				}
				public String GARANTIAComment(){
				
				    return "";
				
				}
				public String GARANTIAPattern(){
				
					return "";
				
				}
				public String GARANTIAOriginalDbColumnName(){
				
					return "GARANTIA";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 40;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public String AG_PEC;

				public String getAG_PEC () {
					return this.AG_PEC;
				}

				public Boolean AG_PECIsNullable(){
				    return true;
				}
				public Boolean AG_PECIsKey(){
				    return false;
				}
				public Integer AG_PECLength(){
				    return 1;
				}
				public Integer AG_PECPrecision(){
				    return null;
				}
				public String AG_PECDefault(){
				
					return null;
				
				}
				public String AG_PECComment(){
				
				    return "";
				
				}
				public String AG_PECPattern(){
				
					return "";
				
				}
				public String AG_PECOriginalDbColumnName(){
				
					return "AG_PEC";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DT_ENTRADA="+String.valueOf(DT_ENTRADA));
		sb.append(",DT_PREVISAO="+String.valueOf(DT_PREVISAO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DT_NOTA="+String.valueOf(DT_NOTA));
		sb.append(",CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NM_CLIENTE="+NM_CLIENTE);
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
		sb.append(",NUM_OS="+NUM_OS);
		sb.append(",NUM_FATURA="+NUM_FATURA);
		sb.append(",TELEFONE="+TELEFONE);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CD_EQUIPAMENTO="+CD_EQUIPAMENTO);
		sb.append(",DESC_EQUIPAMENTO="+DESC_EQUIPAMENTO);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DESC_MARCA="+DESC_MARCA);
		sb.append(",VOLTAGEM="+VOLTAGEM);
		sb.append(",OBSERVACOES="+OBSERVACOES);
		sb.append(",SERVICO="+SERVICO);
		sb.append(",RETPOR="+RETPOR);
		sb.append(",VALOR_PRODUTO="+String.valueOf(VALOR_PRODUTO));
		sb.append(",VALOR_SERVICO="+String.valueOf(VALOR_SERVICO));
		sb.append(",VALOR_COMPRA="+String.valueOf(VALOR_COMPRA));
		sb.append(",CODIGO_TECNICO="+CODIGO_TECNICO);
		sb.append(",NM_TECNICO="+NM_TECNICO);
		sb.append(",GARANTIA="+GARANTIA);
		sb.append(",STATUS="+STATUS);
		sb.append(",AG_PEC="+AG_PEC);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
InsertStruct Insert = new InsertStruct();





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<InsertStruct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_bi_assistencia_tecnica_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<InsertStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertStruct Insert_tmp = new InsertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT EQUGER.EQU_CODEMP AS CD_EMPRESA,\n        EQU_DTAENT AS DT_ENTRADA,\n        EQU_PREVIS AS DT_PREVISAO,\n       "
+" EQUGER.EQU_DTAPED as DT_PEDIDO,\n        F.FGO_DTAENT AS DT_NOTA,\n   	    EQUGER.EQU_CODCLI CD_CLIENTE,\n        IF(LO"
+"CATE('CONSUMIDOR',CLI_NOMCLI),EQUGER.EQU_NOMCON,CLI_NOMCLI) AS NM_CLIENTE,\n        F.FGO_CODVEN CD_VENDEDOR,\n        E"
+"QUGER.EQU_NUMOSE AS NUM_OS,\n        F.FGO_NUMFAT AS NUM_FATURA,\n        IF(LOCATE('CONSUMIDOR',CLI_NOMCLI), fFORMATAMA"
+"SCARATELEFONE(EQU_TELCON),fFORMATAMASCARATELEFONE(CLI_FONE01)) AS TELEFONE,\n        IF(LOCATE('CONSUMIDOR',CLI_NOMCLI),"
+"'', fFORMATAMASCARATELEFONE(CLI_CELULA)) AS CELULAR,\n        C.EQU_CODIGO AS CD_EQUIPAMENTO,\n        C.EQU_DESCRI AS D"
+"ESC_EQUIPAMENTO,\n        MAR_CODMAR CD_MARCA,\n        MAR_DESMAR DESC_MARCA,\n        C.EQU_VOLTAG AS VOLTAGEM,\n     "
+"   EQUGER.EQU_DESCRI AS OBSERVACOES,\n        CONCAT('SERVIÇO: ',GROUP_CONCAT(DISTINCT IFNULL(S.EQU_DESSER,'') SEPARATOR"
+" ' / ')) AS SERVICO,\n        IF(EQU_STATUS = 'R',EQU_REAPOR,EQU_RETPOR) AS RETPOR,\n        EQU_VLRPRO AS VALOR_PRODUTO"
+",\n        EQU_VLRSER AS VALOR_SERVICO,\n        EQU_VLRCON AS VALOR_COMPRA,\n        S.EQU_TECSER CODIGO_TECNICO,\n    "
+"    (SELECT OP.OPE_NOMOPE  FROM CADOPE OP WHERE OP.OPE_CODOPE = S.EQU_TECSER) NM_TECNICO,\n        (case\n            wh"
+"en EQUGER.EQU_GARANT = 'F' then 'Sim'\n        else 'Não'\n         end) GARANTIA,\n       -- EQUGER.EQU_STATUS STATUS,"
+"\n       -- TP_MOTIVO_REPROVACAO AS MOTIVO,\n        (case when EQUGER.EQU_STATUS = 'A' then 'Aprovado'\n              wh"
+"en EQUGER.EQU_STATUS = 'E' then 'Em Aberto'\n              when EQUGER.EQU_STATUS = 'F' then 'Orçamento Realizado'\n    "
+"          when EQUGER.EQU_STATUS = 'M' and EQUGER.EQU_SUBSTA = 'C' then 'Em Manutenção'\n              when EQUGER.EQU_S"
+"TATUS = 'M' and EQUGER.EQU_SUBSTA = 'A' then 'Em Manutenção (Aguardando Peça)'\n              when EQUGER.EQU_STATUS = '"
+"N' then 'Reprovado'\n              when EQUGER.EQU_STATUS = 'P' then 'Teste'\n              when EQUGER.EQU_STATUS = 'R'"
+" AND EQU_REAPOR IS NULL then 'Realizado'\n              when EQUGER.EQU_STATUS = 'R' AND EQU_REAPOR IS not NULL and F.FG"
+"O_JAFATU = '1' then 'Realizado (Devolvido ao cliente)'\n        else 'Em Analise'\n         end) STATUS, \n       --  EQ"
+"UGER.EQU_SUBSTA,\n       --  F.FGO_JAFATU,\n       --  EQUGER.EQU_AG_MON,\n        GROUP_CONCAT(DISTINCT I.EQU_AGUARD SE"
+"PARATOR '') AS AG_PEC \n   FROM EQUGER \n  INNER JOIN CADCLI ON (EQU_CODCLI=CLI_CODCLI) \n   LEFT JOIN EQUSER S ON (S.EQ"
+"U_SEQGER = EQUGER.AUTOINCREM)\n   LEFT JOIN EQUDET I ON (I.EQU_SEQGER = EQUGER.AUTOINCREM)\n   LEFT JOIN CADMRE   ON (EQ"
+"U_CODMRE = MRE_CODIGO) \n   LEFT JOIN EQUDFE D ON (EQUGER.AUTOINCREM = D.EQU_SEQGER)\n   LEFT JOIN CADEQU C ON (C.EQU_CO"
+"DIGO = EQUGER.EQU_CODEQU) \n   LEFT JOIN CADMAR M ON (MAR_CODMAR = C.EQU_CODMAR)\n   LEFT JOIN FATGOR F ON (F.FGO_NUMDOC"
+" = EQUGER.EQU_NUMPED) \n                     AND (F.FGO_ESPDOC = EQUGER.EQU_TIPPED) \n                     AND (F.FGO_CO"
+"DEMP = EQUGER.EQU_CODEMP)\n--  where EQUGER.EQU_CODCLI in ( '11210222',' 10025544')\nWHERE EQU_DTAENT >= DATE_SUB(CURDAT"
+"E() , INTERVAL 12 MONTH)\n  GROUP BY  DT_ENTRADA, CD_EMPRESA, NM_CLIENTE, NUM_OS\n  ORDER BY DT_ENTRADA, CD_EMPRESA, NM_"
+"CLIENTE, NUM_OS";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row3.CD_EMPRESA = null;
							} else {
	                         		
        	row3.CD_EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row3.DT_ENTRADA = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row3.DT_ENTRADA = rs_tDBInput_1.getTimestamp(2);
					} else {
						row3.DT_ENTRADA = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row3.DT_ENTRADA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row3.DT_PREVISAO = null;
							} else {
										
				if(rs_tDBInput_1.getString(3) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row3.DT_PREVISAO = rs_tDBInput_1.getTimestamp(3);
					} else {
						row3.DT_PREVISAO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row3.DT_PREVISAO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row3.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_1.getString(4) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row3.DT_PEDIDO = rs_tDBInput_1.getTimestamp(4);
					} else {
						row3.DT_PEDIDO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row3.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row3.DT_NOTA = null;
							} else {
										
				if(rs_tDBInput_1.getString(5) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row3.DT_NOTA = rs_tDBInput_1.getTimestamp(5);
					} else {
						row3.DT_NOTA = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row3.DT_NOTA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row3.CD_CLIENTE = null;
							} else {
	                         		
        	row3.CD_CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row3.NM_CLIENTE = null;
							} else {
	                         		
        	row3.NM_CLIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row3.CD_VENDEDOR = null;
							} else {
	                         		
        	row3.CD_VENDEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row3.NUM_OS = null;
							} else {
	                         		
        	row3.NUM_OS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row3.NUM_FATURA = null;
							} else {
	                         		
        	row3.NUM_FATURA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row3.TELEFONE = null;
							} else {
	                         		
        	row3.TELEFONE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row3.CELULAR = null;
							} else {
	                         		
        	row3.CELULAR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row3.CD_EQUIPAMENTO = null;
							} else {
	                         		
        	row3.CD_EQUIPAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row3.DESC_EQUIPAMENTO = null;
							} else {
	                         		
        	row3.DESC_EQUIPAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row3.CD_MARCA = null;
							} else {
	                         		
        	row3.CD_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row3.DESC_MARCA = null;
							} else {
	                         		
        	row3.DESC_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row3.VOLTAGEM = null;
							} else {
	                         		
        	row3.VOLTAGEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row3.OBSERVACOES = null;
							} else {
	                         		
        	row3.OBSERVACOES = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row3.SERVICO = null;
							} else {
	                         		
        	row3.SERVICO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row3.RETPOR = null;
							} else {
	                         		
        	row3.RETPOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row3.VALOR_PRODUTO = null;
							} else {
	                         		
            row3.VALOR_PRODUTO = rs_tDBInput_1.getDouble(21);
            if(rs_tDBInput_1.wasNull()){
                    row3.VALOR_PRODUTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row3.VALOR_SERVICO = null;
							} else {
	                         		
            row3.VALOR_SERVICO = rs_tDBInput_1.getDouble(22);
            if(rs_tDBInput_1.wasNull()){
                    row3.VALOR_SERVICO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row3.VALOR_COMPRA = null;
							} else {
	                         		
            row3.VALOR_COMPRA = rs_tDBInput_1.getDouble(23);
            if(rs_tDBInput_1.wasNull()){
                    row3.VALOR_COMPRA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row3.CODIGO_TECNICO = null;
							} else {
	                         		
        	row3.CODIGO_TECNICO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row3.NM_TECNICO = null;
							} else {
	                         		
        	row3.NM_TECNICO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row3.GARANTIA = null;
							} else {
	                         		
        	row3.GARANTIA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row3.STATUS = null;
							} else {
	                         		
        	row3.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row3.AG_PEC = null;
							} else {
	                         		
        	row3.AG_PEC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Insert = null;


// # Output table : 'Insert'
Insert_tmp.CD_EMPRESA = row3.CD_EMPRESA ;
Insert_tmp.DT_ENTRADA = row3.DT_ENTRADA ;
Insert_tmp.DT_PREVISAO = row3.DT_PREVISAO ;
Insert_tmp.DT_PEDIDO = row3.DT_PEDIDO ;
Insert_tmp.DT_NOTA = row3.DT_NOTA ;
Insert_tmp.CD_CLIENTE = row3.CD_CLIENTE ;
Insert_tmp.NM_CLIENTE = row3.NM_CLIENTE ;
Insert_tmp.CD_VENDEDOR = row3.CD_VENDEDOR ;
Insert_tmp.NUM_OS = row3.NUM_OS ;
Insert_tmp.NUM_FATURA = row3.NUM_FATURA ;
Insert_tmp.TELEFONE = row3.TELEFONE ;
Insert_tmp.CELULAR = row3.CELULAR ;
Insert_tmp.CD_EQUIPAMENTO = row3.CD_EQUIPAMENTO ;
Insert_tmp.DESC_EQUIPAMENTO = row3.DESC_EQUIPAMENTO ;
Insert_tmp.CD_MARCA = row3.CD_MARCA ;
Insert_tmp.DESC_MARCA = row3.DESC_MARCA ;
Insert_tmp.VOLTAGEM = row3.VOLTAGEM ;
Insert_tmp.OBSERVACOES = row3.OBSERVACOES ;
Insert_tmp.SERVICO = row3.SERVICO ;
Insert_tmp.RETPOR = row3.RETPOR ;
Insert_tmp.VALOR_PRODUTO = row3.VALOR_PRODUTO ;
Insert_tmp.VALOR_SERVICO = row3.VALOR_SERVICO ;
Insert_tmp.VALOR_COMPRA = row3.VALOR_COMPRA ;
Insert_tmp.CODIGO_TECNICO = row3.CODIGO_TECNICO ;
Insert_tmp.NM_TECNICO = row3.NM_TECNICO ;
Insert_tmp.GARANTIA = row3.GARANTIA ;
Insert_tmp.STATUS = row3.STATUS ;
Insert_tmp.AG_PEC = row3.AG_PEC ;
Insert_tmp.DATA_ATUALIZACAO_JOB = TalendDate.getCurrentDate();
Insert = Insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Insert"
if(Insert != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert"
						
						);
					}
					



    
		InsertStruct oneRow_tHashOutput_2 = new InsertStruct();
				
					oneRow_tHashOutput_2.CD_EMPRESA = Insert.CD_EMPRESA;
					oneRow_tHashOutput_2.DT_ENTRADA = Insert.DT_ENTRADA;
					oneRow_tHashOutput_2.DT_PREVISAO = Insert.DT_PREVISAO;
					oneRow_tHashOutput_2.DT_PEDIDO = Insert.DT_PEDIDO;
					oneRow_tHashOutput_2.DT_NOTA = Insert.DT_NOTA;
					oneRow_tHashOutput_2.CD_CLIENTE = Insert.CD_CLIENTE;
					oneRow_tHashOutput_2.NM_CLIENTE = Insert.NM_CLIENTE;
					oneRow_tHashOutput_2.CD_VENDEDOR = Insert.CD_VENDEDOR;
					oneRow_tHashOutput_2.NUM_OS = Insert.NUM_OS;
					oneRow_tHashOutput_2.NUM_FATURA = Insert.NUM_FATURA;
					oneRow_tHashOutput_2.TELEFONE = Insert.TELEFONE;
					oneRow_tHashOutput_2.CELULAR = Insert.CELULAR;
					oneRow_tHashOutput_2.CD_EQUIPAMENTO = Insert.CD_EQUIPAMENTO;
					oneRow_tHashOutput_2.DESC_EQUIPAMENTO = Insert.DESC_EQUIPAMENTO;
					oneRow_tHashOutput_2.CD_MARCA = Insert.CD_MARCA;
					oneRow_tHashOutput_2.DESC_MARCA = Insert.DESC_MARCA;
					oneRow_tHashOutput_2.VOLTAGEM = Insert.VOLTAGEM;
					oneRow_tHashOutput_2.OBSERVACOES = Insert.OBSERVACOES;
					oneRow_tHashOutput_2.SERVICO = Insert.SERVICO;
					oneRow_tHashOutput_2.RETPOR = Insert.RETPOR;
					oneRow_tHashOutput_2.VALOR_PRODUTO = Insert.VALOR_PRODUTO;
					oneRow_tHashOutput_2.VALOR_SERVICO = Insert.VALOR_SERVICO;
					oneRow_tHashOutput_2.VALOR_COMPRA = Insert.VALOR_COMPRA;
					oneRow_tHashOutput_2.CODIGO_TECNICO = Insert.CODIGO_TECNICO;
					oneRow_tHashOutput_2.NM_TECNICO = Insert.NM_TECNICO;
					oneRow_tHashOutput_2.GARANTIA = Insert.GARANTIA;
					oneRow_tHashOutput_2.STATUS = Insert.STATUS;
					oneRow_tHashOutput_2.AG_PEC = Insert.AG_PEC;
					oneRow_tHashOutput_2.DATA_ATUALIZACAO_JOB = Insert.DATA_ATUALIZACAO_JOB;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "Insert"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class insert_tableStruct implements routines.system.IPersistableRow<insert_tableStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public java.util.Date DT_ENTRADA;

				public java.util.Date getDT_ENTRADA () {
					return this.DT_ENTRADA;
				}

				public Boolean DT_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean DT_ENTRADAIsKey(){
				    return false;
				}
				public Integer DT_ENTRADALength(){
				    return null;
				}
				public Integer DT_ENTRADAPrecision(){
				    return null;
				}
				public String DT_ENTRADADefault(){
				
					return null;
				
				}
				public String DT_ENTRADAComment(){
				
				    return "";
				
				}
				public String DT_ENTRADAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_ENTRADAOriginalDbColumnName(){
				
					return "DT_ENTRADA";
				
				}

				
			    public java.util.Date DT_PREVISAO;

				public java.util.Date getDT_PREVISAO () {
					return this.DT_PREVISAO;
				}

				public Boolean DT_PREVISAOIsNullable(){
				    return true;
				}
				public Boolean DT_PREVISAOIsKey(){
				    return false;
				}
				public Integer DT_PREVISAOLength(){
				    return null;
				}
				public Integer DT_PREVISAOPrecision(){
				    return null;
				}
				public String DT_PREVISAODefault(){
				
					return null;
				
				}
				public String DT_PREVISAOComment(){
				
				    return "";
				
				}
				public String DT_PREVISAOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PREVISAOOriginalDbColumnName(){
				
					return "DT_PREVISAO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DT_NOTA;

				public java.util.Date getDT_NOTA () {
					return this.DT_NOTA;
				}

				public Boolean DT_NOTAIsNullable(){
				    return true;
				}
				public Boolean DT_NOTAIsKey(){
				    return false;
				}
				public Integer DT_NOTALength(){
				    return null;
				}
				public Integer DT_NOTAPrecision(){
				    return null;
				}
				public String DT_NOTADefault(){
				
					return null;
				
				}
				public String DT_NOTAComment(){
				
				    return "";
				
				}
				public String DT_NOTAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_NOTAOriginalDbColumnName(){
				
					return "DT_NOTA";
				
				}

				
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NM_CLIENTE;

				public String getNM_CLIENTE () {
					return this.NM_CLIENTE;
				}

				public Boolean NM_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NM_CLIENTEIsKey(){
				    return false;
				}
				public Integer NM_CLIENTELength(){
				    return 60;
				}
				public Integer NM_CLIENTEPrecision(){
				    return null;
				}
				public String NM_CLIENTEDefault(){
				
					return null;
				
				}
				public String NM_CLIENTEComment(){
				
				    return "";
				
				}
				public String NM_CLIENTEPattern(){
				
					return "";
				
				}
				public String NM_CLIENTEOriginalDbColumnName(){
				
					return "NM_CLIENTE";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 3;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				
			    public String NUM_OS;

				public String getNUM_OS () {
					return this.NUM_OS;
				}

				public Boolean NUM_OSIsNullable(){
				    return true;
				}
				public Boolean NUM_OSIsKey(){
				    return true;
				}
				public Integer NUM_OSLength(){
				    return 6;
				}
				public Integer NUM_OSPrecision(){
				    return null;
				}
				public String NUM_OSDefault(){
				
					return null;
				
				}
				public String NUM_OSComment(){
				
				    return "";
				
				}
				public String NUM_OSPattern(){
				
					return "";
				
				}
				public String NUM_OSOriginalDbColumnName(){
				
					return "NUM_OS";
				
				}

				
			    public String NUM_FATURA;

				public String getNUM_FATURA () {
					return this.NUM_FATURA;
				}

				public Boolean NUM_FATURAIsNullable(){
				    return true;
				}
				public Boolean NUM_FATURAIsKey(){
				    return false;
				}
				public Integer NUM_FATURALength(){
				    return 12;
				}
				public Integer NUM_FATURAPrecision(){
				    return null;
				}
				public String NUM_FATURADefault(){
				
					return null;
				
				}
				public String NUM_FATURAComment(){
				
				    return "";
				
				}
				public String NUM_FATURAPattern(){
				
					return "";
				
				}
				public String NUM_FATURAOriginalDbColumnName(){
				
					return "NUM_FATURA";
				
				}

				
			    public String TELEFONE;

				public String getTELEFONE () {
					return this.TELEFONE;
				}

				public Boolean TELEFONEIsNullable(){
				    return true;
				}
				public Boolean TELEFONEIsKey(){
				    return false;
				}
				public Integer TELEFONELength(){
				    return 20;
				}
				public Integer TELEFONEPrecision(){
				    return null;
				}
				public String TELEFONEDefault(){
				
					return null;
				
				}
				public String TELEFONEComment(){
				
				    return "";
				
				}
				public String TELEFONEPattern(){
				
					return "";
				
				}
				public String TELEFONEOriginalDbColumnName(){
				
					return "TELEFONE";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CD_EQUIPAMENTO;

				public String getCD_EQUIPAMENTO () {
					return this.CD_EQUIPAMENTO;
				}

				public Boolean CD_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean CD_EQUIPAMENTOIsKey(){
				    return true;
				}
				public Integer CD_EQUIPAMENTOLength(){
				    return 5;
				}
				public Integer CD_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String CD_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String CD_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String CD_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String CD_EQUIPAMENTOOriginalDbColumnName(){
				
					return "CD_EQUIPAMENTO";
				
				}

				
			    public String DESC_EQUIPAMENTO;

				public String getDESC_EQUIPAMENTO () {
					return this.DESC_EQUIPAMENTO;
				}

				public Boolean DESC_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean DESC_EQUIPAMENTOIsKey(){
				    return false;
				}
				public Integer DESC_EQUIPAMENTOLength(){
				    return 40;
				}
				public Integer DESC_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String DESC_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String DESC_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String DESC_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String DESC_EQUIPAMENTOOriginalDbColumnName(){
				
					return "DESC_EQUIPAMENTO";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DESC_MARCA;

				public String getDESC_MARCA () {
					return this.DESC_MARCA;
				}

				public Boolean DESC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DESC_MARCAIsKey(){
				    return false;
				}
				public Integer DESC_MARCALength(){
				    return 40;
				}
				public Integer DESC_MARCAPrecision(){
				    return null;
				}
				public String DESC_MARCADefault(){
				
					return null;
				
				}
				public String DESC_MARCAComment(){
				
				    return "";
				
				}
				public String DESC_MARCAPattern(){
				
					return "";
				
				}
				public String DESC_MARCAOriginalDbColumnName(){
				
					return "DESC_MARCA";
				
				}

				
			    public String VOLTAGEM;

				public String getVOLTAGEM () {
					return this.VOLTAGEM;
				}

				public Boolean VOLTAGEMIsNullable(){
				    return true;
				}
				public Boolean VOLTAGEMIsKey(){
				    return false;
				}
				public Integer VOLTAGEMLength(){
				    return 10;
				}
				public Integer VOLTAGEMPrecision(){
				    return null;
				}
				public String VOLTAGEMDefault(){
				
					return null;
				
				}
				public String VOLTAGEMComment(){
				
				    return "";
				
				}
				public String VOLTAGEMPattern(){
				
					return "";
				
				}
				public String VOLTAGEMOriginalDbColumnName(){
				
					return "VOLTAGEM";
				
				}

				
			    public String OBSERVACOES;

				public String getOBSERVACOES () {
					return this.OBSERVACOES;
				}

				public Boolean OBSERVACOESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACOESIsKey(){
				    return false;
				}
				public Integer OBSERVACOESLength(){
				    return null;
				}
				public Integer OBSERVACOESPrecision(){
				    return null;
				}
				public String OBSERVACOESDefault(){
				
					return null;
				
				}
				public String OBSERVACOESComment(){
				
				    return "";
				
				}
				public String OBSERVACOESPattern(){
				
					return "";
				
				}
				public String OBSERVACOESOriginalDbColumnName(){
				
					return "OBSERVACOES";
				
				}

				
			    public String SERVICO;

				public String getSERVICO () {
					return this.SERVICO;
				}

				public Boolean SERVICOIsNullable(){
				    return true;
				}
				public Boolean SERVICOIsKey(){
				    return false;
				}
				public Integer SERVICOLength(){
				    return null;
				}
				public Integer SERVICOPrecision(){
				    return null;
				}
				public String SERVICODefault(){
				
					return null;
				
				}
				public String SERVICOComment(){
				
				    return "";
				
				}
				public String SERVICOPattern(){
				
					return "";
				
				}
				public String SERVICOOriginalDbColumnName(){
				
					return "SERVICO";
				
				}

				
			    public String RETPOR;

				public String getRETPOR () {
					return this.RETPOR;
				}

				public Boolean RETPORIsNullable(){
				    return true;
				}
				public Boolean RETPORIsKey(){
				    return false;
				}
				public Integer RETPORLength(){
				    return 80;
				}
				public Integer RETPORPrecision(){
				    return null;
				}
				public String RETPORDefault(){
				
					return null;
				
				}
				public String RETPORComment(){
				
				    return "";
				
				}
				public String RETPORPattern(){
				
					return "";
				
				}
				public String RETPOROriginalDbColumnName(){
				
					return "RETPOR";
				
				}

				
			    public Double VALOR_PRODUTO;

				public Double getVALOR_PRODUTO () {
					return this.VALOR_PRODUTO;
				}

				public Boolean VALOR_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean VALOR_PRODUTOIsKey(){
				    return false;
				}
				public Integer VALOR_PRODUTOLength(){
				    return null;
				}
				public Integer VALOR_PRODUTOPrecision(){
				    return null;
				}
				public String VALOR_PRODUTODefault(){
				
					return null;
				
				}
				public String VALOR_PRODUTOComment(){
				
				    return "";
				
				}
				public String VALOR_PRODUTOPattern(){
				
					return "";
				
				}
				public String VALOR_PRODUTOOriginalDbColumnName(){
				
					return "VALOR_PRODUTO";
				
				}

				
			    public Double VALOR_SERVICO;

				public Double getVALOR_SERVICO () {
					return this.VALOR_SERVICO;
				}

				public Boolean VALOR_SERVICOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICOLength(){
				    return null;
				}
				public Integer VALOR_SERVICOPrecision(){
				    return null;
				}
				public String VALOR_SERVICODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICOOriginalDbColumnName(){
				
					return "VALOR_SERVICO";
				
				}

				
			    public Double VALOR_COMPRA;

				public Double getVALOR_COMPRA () {
					return this.VALOR_COMPRA;
				}

				public Boolean VALOR_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VALOR_COMPRAIsKey(){
				    return false;
				}
				public Integer VALOR_COMPRALength(){
				    return null;
				}
				public Integer VALOR_COMPRAPrecision(){
				    return null;
				}
				public String VALOR_COMPRADefault(){
				
					return null;
				
				}
				public String VALOR_COMPRAComment(){
				
				    return "";
				
				}
				public String VALOR_COMPRAPattern(){
				
					return "";
				
				}
				public String VALOR_COMPRAOriginalDbColumnName(){
				
					return "VALOR_COMPRA";
				
				}

				
			    public String CODIGO_TECNICO;

				public String getCODIGO_TECNICO () {
					return this.CODIGO_TECNICO;
				}

				public Boolean CODIGO_TECNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_TECNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_TECNICOLength(){
				    return 3;
				}
				public Integer CODIGO_TECNICOPrecision(){
				    return null;
				}
				public String CODIGO_TECNICODefault(){
				
					return null;
				
				}
				public String CODIGO_TECNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_TECNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_TECNICOOriginalDbColumnName(){
				
					return "CODIGO_TECNICO";
				
				}

				
			    public String NM_TECNICO;

				public String getNM_TECNICO () {
					return this.NM_TECNICO;
				}

				public Boolean NM_TECNICOIsNullable(){
				    return true;
				}
				public Boolean NM_TECNICOIsKey(){
				    return false;
				}
				public Integer NM_TECNICOLength(){
				    return 50;
				}
				public Integer NM_TECNICOPrecision(){
				    return null;
				}
				public String NM_TECNICODefault(){
				
					return null;
				
				}
				public String NM_TECNICOComment(){
				
				    return "";
				
				}
				public String NM_TECNICOPattern(){
				
					return "";
				
				}
				public String NM_TECNICOOriginalDbColumnName(){
				
					return "NM_TECNICO";
				
				}

				
			    public String GARANTIA;

				public String getGARANTIA () {
					return this.GARANTIA;
				}

				public Boolean GARANTIAIsNullable(){
				    return true;
				}
				public Boolean GARANTIAIsKey(){
				    return false;
				}
				public Integer GARANTIALength(){
				    return 3;
				}
				public Integer GARANTIAPrecision(){
				    return null;
				}
				public String GARANTIADefault(){
				
					return null;
				
				}
				public String GARANTIAComment(){
				
				    return "";
				
				}
				public String GARANTIAPattern(){
				
					return "";
				
				}
				public String GARANTIAOriginalDbColumnName(){
				
					return "GARANTIA";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 40;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public String AG_PEC;

				public String getAG_PEC () {
					return this.AG_PEC;
				}

				public Boolean AG_PECIsNullable(){
				    return true;
				}
				public Boolean AG_PECIsKey(){
				    return false;
				}
				public Integer AG_PECLength(){
				    return 1;
				}
				public Integer AG_PECPrecision(){
				    return null;
				}
				public String AG_PECDefault(){
				
					return null;
				
				}
				public String AG_PECComment(){
				
				    return "";
				
				}
				public String AG_PECPattern(){
				
					return "";
				
				}
				public String AG_PECOriginalDbColumnName(){
				
					return "AG_PEC";
				
				}

				
			    public java.util.Date DATA_ATUALIZACAO_JOB;

				public java.util.Date getDATA_ATUALIZACAO_JOB () {
					return this.DATA_ATUALIZACAO_JOB;
				}

				public Boolean DATA_ATUALIZACAO_JOBIsNullable(){
				    return true;
				}
				public Boolean DATA_ATUALIZACAO_JOBIsKey(){
				    return false;
				}
				public Integer DATA_ATUALIZACAO_JOBLength(){
				    return null;
				}
				public Integer DATA_ATUALIZACAO_JOBPrecision(){
				    return null;
				}
				public String DATA_ATUALIZACAO_JOBDefault(){
				
					return null;
				
				}
				public String DATA_ATUALIZACAO_JOBComment(){
				
				    return "";
				
				}
				public String DATA_ATUALIZACAO_JOBPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ATUALIZACAO_JOBOriginalDbColumnName(){
				
					return "DATA_ATUALIZACAO_JOB";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
						result = prime * result + ((this.CD_CLIENTE == null) ? 0 : this.CD_CLIENTE.hashCode());
					
						result = prime * result + ((this.NUM_OS == null) ? 0 : this.NUM_OS.hashCode());
					
						result = prime * result + ((this.CD_EQUIPAMENTO == null) ? 0 : this.CD_EQUIPAMENTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insert_tableStruct other = (insert_tableStruct) obj;
		
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					
						if (this.CD_CLIENTE == null) {
							if (other.CD_CLIENTE != null)
								return false;
						
						} else if (!this.CD_CLIENTE.equals(other.CD_CLIENTE))
						
							return false;
					
						if (this.NUM_OS == null) {
							if (other.NUM_OS != null)
								return false;
						
						} else if (!this.NUM_OS.equals(other.NUM_OS))
						
							return false;
					
						if (this.CD_EQUIPAMENTO == null) {
							if (other.CD_EQUIPAMENTO != null)
								return false;
						
						} else if (!this.CD_EQUIPAMENTO.equals(other.CD_EQUIPAMENTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insert_tableStruct other) {

		other.CD_EMPRESA = this.CD_EMPRESA;
	            other.DT_ENTRADA = this.DT_ENTRADA;
	            other.DT_PREVISAO = this.DT_PREVISAO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DT_NOTA = this.DT_NOTA;
	            other.CD_CLIENTE = this.CD_CLIENTE;
	            other.NM_CLIENTE = this.NM_CLIENTE;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            other.NUM_OS = this.NUM_OS;
	            other.NUM_FATURA = this.NUM_FATURA;
	            other.TELEFONE = this.TELEFONE;
	            other.CELULAR = this.CELULAR;
	            other.CD_EQUIPAMENTO = this.CD_EQUIPAMENTO;
	            other.DESC_EQUIPAMENTO = this.DESC_EQUIPAMENTO;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DESC_MARCA = this.DESC_MARCA;
	            other.VOLTAGEM = this.VOLTAGEM;
	            other.OBSERVACOES = this.OBSERVACOES;
	            other.SERVICO = this.SERVICO;
	            other.RETPOR = this.RETPOR;
	            other.VALOR_PRODUTO = this.VALOR_PRODUTO;
	            other.VALOR_SERVICO = this.VALOR_SERVICO;
	            other.VALOR_COMPRA = this.VALOR_COMPRA;
	            other.CODIGO_TECNICO = this.CODIGO_TECNICO;
	            other.NM_TECNICO = this.NM_TECNICO;
	            other.GARANTIA = this.GARANTIA;
	            other.STATUS = this.STATUS;
	            other.AG_PEC = this.AG_PEC;
	            other.DATA_ATUALIZACAO_JOB = this.DATA_ATUALIZACAO_JOB;
	            
	}

	public void copyKeysDataTo(insert_tableStruct other) {

		other.CD_EMPRESA = this.CD_EMPRESA;
	            	other.CD_CLIENTE = this.CD_CLIENTE;
	            	other.NUM_OS = this.NUM_OS;
	            	other.CD_EQUIPAMENTO = this.CD_EQUIPAMENTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DT_ENTRADA="+String.valueOf(DT_ENTRADA));
		sb.append(",DT_PREVISAO="+String.valueOf(DT_PREVISAO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DT_NOTA="+String.valueOf(DT_NOTA));
		sb.append(",CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NM_CLIENTE="+NM_CLIENTE);
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
		sb.append(",NUM_OS="+NUM_OS);
		sb.append(",NUM_FATURA="+NUM_FATURA);
		sb.append(",TELEFONE="+TELEFONE);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CD_EQUIPAMENTO="+CD_EQUIPAMENTO);
		sb.append(",DESC_EQUIPAMENTO="+DESC_EQUIPAMENTO);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DESC_MARCA="+DESC_MARCA);
		sb.append(",VOLTAGEM="+VOLTAGEM);
		sb.append(",OBSERVACOES="+OBSERVACOES);
		sb.append(",SERVICO="+SERVICO);
		sb.append(",RETPOR="+RETPOR);
		sb.append(",VALOR_PRODUTO="+String.valueOf(VALOR_PRODUTO));
		sb.append(",VALOR_SERVICO="+String.valueOf(VALOR_SERVICO));
		sb.append(",VALOR_COMPRA="+String.valueOf(VALOR_COMPRA));
		sb.append(",CODIGO_TECNICO="+CODIGO_TECNICO);
		sb.append(",NM_TECNICO="+NM_TECNICO);
		sb.append(",GARANTIA="+GARANTIA);
		sb.append(",STATUS="+STATUS);
		sb.append(",AG_PEC="+AG_PEC);
		sb.append(",DATA_ATUALIZACAO_JOB="+String.valueOf(DATA_ATUALIZACAO_JOB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_tableStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_CLIENTE, other.CD_CLIENTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUM_OS, other.NUM_OS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EQUIPAMENTO, other.CD_EQUIPAMENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public java.util.Date DT_ENTRADA;

				public java.util.Date getDT_ENTRADA () {
					return this.DT_ENTRADA;
				}

				public Boolean DT_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean DT_ENTRADAIsKey(){
				    return false;
				}
				public Integer DT_ENTRADALength(){
				    return null;
				}
				public Integer DT_ENTRADAPrecision(){
				    return null;
				}
				public String DT_ENTRADADefault(){
				
					return null;
				
				}
				public String DT_ENTRADAComment(){
				
				    return "";
				
				}
				public String DT_ENTRADAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_ENTRADAOriginalDbColumnName(){
				
					return "DT_ENTRADA";
				
				}

				
			    public java.util.Date DT_PREVISAO;

				public java.util.Date getDT_PREVISAO () {
					return this.DT_PREVISAO;
				}

				public Boolean DT_PREVISAOIsNullable(){
				    return true;
				}
				public Boolean DT_PREVISAOIsKey(){
				    return false;
				}
				public Integer DT_PREVISAOLength(){
				    return null;
				}
				public Integer DT_PREVISAOPrecision(){
				    return null;
				}
				public String DT_PREVISAODefault(){
				
					return null;
				
				}
				public String DT_PREVISAOComment(){
				
				    return "";
				
				}
				public String DT_PREVISAOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PREVISAOOriginalDbColumnName(){
				
					return "DT_PREVISAO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DT_NOTA;

				public java.util.Date getDT_NOTA () {
					return this.DT_NOTA;
				}

				public Boolean DT_NOTAIsNullable(){
				    return true;
				}
				public Boolean DT_NOTAIsKey(){
				    return false;
				}
				public Integer DT_NOTALength(){
				    return null;
				}
				public Integer DT_NOTAPrecision(){
				    return null;
				}
				public String DT_NOTADefault(){
				
					return null;
				
				}
				public String DT_NOTAComment(){
				
				    return "";
				
				}
				public String DT_NOTAPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String DT_NOTAOriginalDbColumnName(){
				
					return "DT_NOTA";
				
				}

				
			    public String CD_CLIENTE;

				public String getCD_CLIENTE () {
					return this.CD_CLIENTE;
				}

				public Boolean CD_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean CD_CLIENTEIsKey(){
				    return true;
				}
				public Integer CD_CLIENTELength(){
				    return 8;
				}
				public Integer CD_CLIENTEPrecision(){
				    return null;
				}
				public String CD_CLIENTEDefault(){
				
					return null;
				
				}
				public String CD_CLIENTEComment(){
				
				    return "";
				
				}
				public String CD_CLIENTEPattern(){
				
					return "";
				
				}
				public String CD_CLIENTEOriginalDbColumnName(){
				
					return "CD_CLIENTE";
				
				}

				
			    public String NM_CLIENTE;

				public String getNM_CLIENTE () {
					return this.NM_CLIENTE;
				}

				public Boolean NM_CLIENTEIsNullable(){
				    return true;
				}
				public Boolean NM_CLIENTEIsKey(){
				    return false;
				}
				public Integer NM_CLIENTELength(){
				    return 60;
				}
				public Integer NM_CLIENTEPrecision(){
				    return null;
				}
				public String NM_CLIENTEDefault(){
				
					return null;
				
				}
				public String NM_CLIENTEComment(){
				
				    return "";
				
				}
				public String NM_CLIENTEPattern(){
				
					return "";
				
				}
				public String NM_CLIENTEOriginalDbColumnName(){
				
					return "NM_CLIENTE";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 3;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				
			    public String NUM_OS;

				public String getNUM_OS () {
					return this.NUM_OS;
				}

				public Boolean NUM_OSIsNullable(){
				    return true;
				}
				public Boolean NUM_OSIsKey(){
				    return true;
				}
				public Integer NUM_OSLength(){
				    return 6;
				}
				public Integer NUM_OSPrecision(){
				    return null;
				}
				public String NUM_OSDefault(){
				
					return null;
				
				}
				public String NUM_OSComment(){
				
				    return "";
				
				}
				public String NUM_OSPattern(){
				
					return "";
				
				}
				public String NUM_OSOriginalDbColumnName(){
				
					return "NUM_OS";
				
				}

				
			    public String NUM_FATURA;

				public String getNUM_FATURA () {
					return this.NUM_FATURA;
				}

				public Boolean NUM_FATURAIsNullable(){
				    return true;
				}
				public Boolean NUM_FATURAIsKey(){
				    return false;
				}
				public Integer NUM_FATURALength(){
				    return 12;
				}
				public Integer NUM_FATURAPrecision(){
				    return null;
				}
				public String NUM_FATURADefault(){
				
					return null;
				
				}
				public String NUM_FATURAComment(){
				
				    return "";
				
				}
				public String NUM_FATURAPattern(){
				
					return "";
				
				}
				public String NUM_FATURAOriginalDbColumnName(){
				
					return "NUM_FATURA";
				
				}

				
			    public String TELEFONE;

				public String getTELEFONE () {
					return this.TELEFONE;
				}

				public Boolean TELEFONEIsNullable(){
				    return true;
				}
				public Boolean TELEFONEIsKey(){
				    return false;
				}
				public Integer TELEFONELength(){
				    return 20;
				}
				public Integer TELEFONEPrecision(){
				    return null;
				}
				public String TELEFONEDefault(){
				
					return null;
				
				}
				public String TELEFONEComment(){
				
				    return "";
				
				}
				public String TELEFONEPattern(){
				
					return "";
				
				}
				public String TELEFONEOriginalDbColumnName(){
				
					return "TELEFONE";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CD_EQUIPAMENTO;

				public String getCD_EQUIPAMENTO () {
					return this.CD_EQUIPAMENTO;
				}

				public Boolean CD_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean CD_EQUIPAMENTOIsKey(){
				    return true;
				}
				public Integer CD_EQUIPAMENTOLength(){
				    return 5;
				}
				public Integer CD_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String CD_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String CD_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String CD_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String CD_EQUIPAMENTOOriginalDbColumnName(){
				
					return "CD_EQUIPAMENTO";
				
				}

				
			    public String DESC_EQUIPAMENTO;

				public String getDESC_EQUIPAMENTO () {
					return this.DESC_EQUIPAMENTO;
				}

				public Boolean DESC_EQUIPAMENTOIsNullable(){
				    return true;
				}
				public Boolean DESC_EQUIPAMENTOIsKey(){
				    return false;
				}
				public Integer DESC_EQUIPAMENTOLength(){
				    return 40;
				}
				public Integer DESC_EQUIPAMENTOPrecision(){
				    return null;
				}
				public String DESC_EQUIPAMENTODefault(){
				
					return null;
				
				}
				public String DESC_EQUIPAMENTOComment(){
				
				    return "";
				
				}
				public String DESC_EQUIPAMENTOPattern(){
				
					return "";
				
				}
				public String DESC_EQUIPAMENTOOriginalDbColumnName(){
				
					return "DESC_EQUIPAMENTO";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DESC_MARCA;

				public String getDESC_MARCA () {
					return this.DESC_MARCA;
				}

				public Boolean DESC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DESC_MARCAIsKey(){
				    return false;
				}
				public Integer DESC_MARCALength(){
				    return 40;
				}
				public Integer DESC_MARCAPrecision(){
				    return null;
				}
				public String DESC_MARCADefault(){
				
					return null;
				
				}
				public String DESC_MARCAComment(){
				
				    return "";
				
				}
				public String DESC_MARCAPattern(){
				
					return "";
				
				}
				public String DESC_MARCAOriginalDbColumnName(){
				
					return "DESC_MARCA";
				
				}

				
			    public String VOLTAGEM;

				public String getVOLTAGEM () {
					return this.VOLTAGEM;
				}

				public Boolean VOLTAGEMIsNullable(){
				    return true;
				}
				public Boolean VOLTAGEMIsKey(){
				    return false;
				}
				public Integer VOLTAGEMLength(){
				    return 10;
				}
				public Integer VOLTAGEMPrecision(){
				    return null;
				}
				public String VOLTAGEMDefault(){
				
					return null;
				
				}
				public String VOLTAGEMComment(){
				
				    return "";
				
				}
				public String VOLTAGEMPattern(){
				
					return "";
				
				}
				public String VOLTAGEMOriginalDbColumnName(){
				
					return "VOLTAGEM";
				
				}

				
			    public String OBSERVACOES;

				public String getOBSERVACOES () {
					return this.OBSERVACOES;
				}

				public Boolean OBSERVACOESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACOESIsKey(){
				    return false;
				}
				public Integer OBSERVACOESLength(){
				    return null;
				}
				public Integer OBSERVACOESPrecision(){
				    return null;
				}
				public String OBSERVACOESDefault(){
				
					return null;
				
				}
				public String OBSERVACOESComment(){
				
				    return "";
				
				}
				public String OBSERVACOESPattern(){
				
					return "";
				
				}
				public String OBSERVACOESOriginalDbColumnName(){
				
					return "OBSERVACOES";
				
				}

				
			    public String SERVICO;

				public String getSERVICO () {
					return this.SERVICO;
				}

				public Boolean SERVICOIsNullable(){
				    return true;
				}
				public Boolean SERVICOIsKey(){
				    return false;
				}
				public Integer SERVICOLength(){
				    return 80;
				}
				public Integer SERVICOPrecision(){
				    return null;
				}
				public String SERVICODefault(){
				
					return null;
				
				}
				public String SERVICOComment(){
				
				    return "";
				
				}
				public String SERVICOPattern(){
				
					return "";
				
				}
				public String SERVICOOriginalDbColumnName(){
				
					return "SERVICO";
				
				}

				
			    public String RETPOR;

				public String getRETPOR () {
					return this.RETPOR;
				}

				public Boolean RETPORIsNullable(){
				    return true;
				}
				public Boolean RETPORIsKey(){
				    return false;
				}
				public Integer RETPORLength(){
				    return 80;
				}
				public Integer RETPORPrecision(){
				    return null;
				}
				public String RETPORDefault(){
				
					return null;
				
				}
				public String RETPORComment(){
				
				    return "";
				
				}
				public String RETPORPattern(){
				
					return "";
				
				}
				public String RETPOROriginalDbColumnName(){
				
					return "RETPOR";
				
				}

				
			    public Double VALOR_PRODUTO;

				public Double getVALOR_PRODUTO () {
					return this.VALOR_PRODUTO;
				}

				public Boolean VALOR_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean VALOR_PRODUTOIsKey(){
				    return false;
				}
				public Integer VALOR_PRODUTOLength(){
				    return null;
				}
				public Integer VALOR_PRODUTOPrecision(){
				    return null;
				}
				public String VALOR_PRODUTODefault(){
				
					return null;
				
				}
				public String VALOR_PRODUTOComment(){
				
				    return "";
				
				}
				public String VALOR_PRODUTOPattern(){
				
					return "";
				
				}
				public String VALOR_PRODUTOOriginalDbColumnName(){
				
					return "VALOR_PRODUTO";
				
				}

				
			    public Double VALOR_SERVICO;

				public Double getVALOR_SERVICO () {
					return this.VALOR_SERVICO;
				}

				public Boolean VALOR_SERVICOIsNullable(){
				    return true;
				}
				public Boolean VALOR_SERVICOIsKey(){
				    return false;
				}
				public Integer VALOR_SERVICOLength(){
				    return null;
				}
				public Integer VALOR_SERVICOPrecision(){
				    return null;
				}
				public String VALOR_SERVICODefault(){
				
					return null;
				
				}
				public String VALOR_SERVICOComment(){
				
				    return "";
				
				}
				public String VALOR_SERVICOPattern(){
				
					return "";
				
				}
				public String VALOR_SERVICOOriginalDbColumnName(){
				
					return "VALOR_SERVICO";
				
				}

				
			    public Double VALOR_COMPRA;

				public Double getVALOR_COMPRA () {
					return this.VALOR_COMPRA;
				}

				public Boolean VALOR_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VALOR_COMPRAIsKey(){
				    return false;
				}
				public Integer VALOR_COMPRALength(){
				    return null;
				}
				public Integer VALOR_COMPRAPrecision(){
				    return null;
				}
				public String VALOR_COMPRADefault(){
				
					return null;
				
				}
				public String VALOR_COMPRAComment(){
				
				    return "";
				
				}
				public String VALOR_COMPRAPattern(){
				
					return "";
				
				}
				public String VALOR_COMPRAOriginalDbColumnName(){
				
					return "VALOR_COMPRA";
				
				}

				
			    public String CODIGO_TECNICO;

				public String getCODIGO_TECNICO () {
					return this.CODIGO_TECNICO;
				}

				public Boolean CODIGO_TECNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_TECNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_TECNICOLength(){
				    return 3;
				}
				public Integer CODIGO_TECNICOPrecision(){
				    return null;
				}
				public String CODIGO_TECNICODefault(){
				
					return null;
				
				}
				public String CODIGO_TECNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_TECNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_TECNICOOriginalDbColumnName(){
				
					return "CODIGO_TECNICO";
				
				}

				
			    public String NM_TECNICO;

				public String getNM_TECNICO () {
					return this.NM_TECNICO;
				}

				public Boolean NM_TECNICOIsNullable(){
				    return true;
				}
				public Boolean NM_TECNICOIsKey(){
				    return false;
				}
				public Integer NM_TECNICOLength(){
				    return 50;
				}
				public Integer NM_TECNICOPrecision(){
				    return null;
				}
				public String NM_TECNICODefault(){
				
					return null;
				
				}
				public String NM_TECNICOComment(){
				
				    return "";
				
				}
				public String NM_TECNICOPattern(){
				
					return "";
				
				}
				public String NM_TECNICOOriginalDbColumnName(){
				
					return "NM_TECNICO";
				
				}

				
			    public String GARANTIA;

				public String getGARANTIA () {
					return this.GARANTIA;
				}

				public Boolean GARANTIAIsNullable(){
				    return true;
				}
				public Boolean GARANTIAIsKey(){
				    return false;
				}
				public Integer GARANTIALength(){
				    return 3;
				}
				public Integer GARANTIAPrecision(){
				    return null;
				}
				public String GARANTIADefault(){
				
					return null;
				
				}
				public String GARANTIAComment(){
				
				    return "";
				
				}
				public String GARANTIAPattern(){
				
					return "";
				
				}
				public String GARANTIAOriginalDbColumnName(){
				
					return "GARANTIA";
				
				}

				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}

				public Boolean STATUSIsNullable(){
				    return true;
				}
				public Boolean STATUSIsKey(){
				    return false;
				}
				public Integer STATUSLength(){
				    return 40;
				}
				public Integer STATUSPrecision(){
				    return null;
				}
				public String STATUSDefault(){
				
					return null;
				
				}
				public String STATUSComment(){
				
				    return "";
				
				}
				public String STATUSPattern(){
				
					return "";
				
				}
				public String STATUSOriginalDbColumnName(){
				
					return "STATUS";
				
				}

				
			    public String AG_PEC;

				public String getAG_PEC () {
					return this.AG_PEC;
				}

				public Boolean AG_PECIsNullable(){
				    return true;
				}
				public Boolean AG_PECIsKey(){
				    return false;
				}
				public Integer AG_PECLength(){
				    return 1;
				}
				public Integer AG_PECPrecision(){
				    return null;
				}
				public String AG_PECDefault(){
				
					return null;
				
				}
				public String AG_PECComment(){
				
				    return "";
				
				}
				public String AG_PECPattern(){
				
					return "";
				
				}
				public String AG_PECOriginalDbColumnName(){
				
					return "AG_PEC";
				
				}

				
			    public java.util.Date DATA_ATUALIZACAO_JOB;

				public java.util.Date getDATA_ATUALIZACAO_JOB () {
					return this.DATA_ATUALIZACAO_JOB;
				}

				public Boolean DATA_ATUALIZACAO_JOBIsNullable(){
				    return true;
				}
				public Boolean DATA_ATUALIZACAO_JOBIsKey(){
				    return false;
				}
				public Integer DATA_ATUALIZACAO_JOBLength(){
				    return null;
				}
				public Integer DATA_ATUALIZACAO_JOBPrecision(){
				    return null;
				}
				public String DATA_ATUALIZACAO_JOBDefault(){
				
					return null;
				
				}
				public String DATA_ATUALIZACAO_JOBComment(){
				
				    return "";
				
				}
				public String DATA_ATUALIZACAO_JOBPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ATUALIZACAO_JOBOriginalDbColumnName(){
				
					return "DATA_ATUALIZACAO_JOB";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.CD_EMPRESA = readString(dis);
					
					this.DT_ENTRADA = readDate(dis);
					
					this.DT_PREVISAO = readDate(dis);
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DT_NOTA = readDate(dis);
					
					this.CD_CLIENTE = readString(dis);
					
					this.NM_CLIENTE = readString(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
					this.NUM_OS = readString(dis);
					
					this.NUM_FATURA = readString(dis);
					
					this.TELEFONE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CD_EQUIPAMENTO = readString(dis);
					
					this.DESC_EQUIPAMENTO = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DESC_MARCA = readString(dis);
					
					this.VOLTAGEM = readString(dis);
					
					this.OBSERVACOES = readString(dis);
					
					this.SERVICO = readString(dis);
					
					this.RETPOR = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_PRODUTO = null;
           				} else {
           			    	this.VALOR_PRODUTO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_SERVICO = null;
           				} else {
           			    	this.VALOR_SERVICO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VALOR_COMPRA = null;
           				} else {
           			    	this.VALOR_COMPRA = dis.readDouble();
           				}
					
					this.CODIGO_TECNICO = readString(dis);
					
					this.NM_TECNICO = readString(dis);
					
					this.GARANTIA = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.AG_PEC = readString(dis);
					
					this.DATA_ATUALIZACAO_JOB = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ENTRADA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PREVISAO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_NOTA,dos);
					
					// String
				
						writeString(this.CD_CLIENTE,dos);
					
					// String
				
						writeString(this.NM_CLIENTE,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
					// String
				
						writeString(this.NUM_OS,dos);
					
					// String
				
						writeString(this.NUM_FATURA,dos);
					
					// String
				
						writeString(this.TELEFONE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CD_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.DESC_EQUIPAMENTO,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DESC_MARCA,dos);
					
					// String
				
						writeString(this.VOLTAGEM,dos);
					
					// String
				
						writeString(this.OBSERVACOES,dos);
					
					// String
				
						writeString(this.SERVICO,dos);
					
					// String
				
						writeString(this.RETPOR,dos);
					
					// Double
				
						if(this.VALOR_PRODUTO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_PRODUTO);
		            	}
					
					// Double
				
						if(this.VALOR_SERVICO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_SERVICO);
		            	}
					
					// Double
				
						if(this.VALOR_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VALOR_COMPRA);
		            	}
					
					// String
				
						writeString(this.CODIGO_TECNICO,dos);
					
					// String
				
						writeString(this.NM_TECNICO,dos);
					
					// String
				
						writeString(this.GARANTIA,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.AG_PEC,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ATUALIZACAO_JOB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DT_ENTRADA="+String.valueOf(DT_ENTRADA));
		sb.append(",DT_PREVISAO="+String.valueOf(DT_PREVISAO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DT_NOTA="+String.valueOf(DT_NOTA));
		sb.append(",CD_CLIENTE="+CD_CLIENTE);
		sb.append(",NM_CLIENTE="+NM_CLIENTE);
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
		sb.append(",NUM_OS="+NUM_OS);
		sb.append(",NUM_FATURA="+NUM_FATURA);
		sb.append(",TELEFONE="+TELEFONE);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CD_EQUIPAMENTO="+CD_EQUIPAMENTO);
		sb.append(",DESC_EQUIPAMENTO="+DESC_EQUIPAMENTO);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DESC_MARCA="+DESC_MARCA);
		sb.append(",VOLTAGEM="+VOLTAGEM);
		sb.append(",OBSERVACOES="+OBSERVACOES);
		sb.append(",SERVICO="+SERVICO);
		sb.append(",RETPOR="+RETPOR);
		sb.append(",VALOR_PRODUTO="+String.valueOf(VALOR_PRODUTO));
		sb.append(",VALOR_SERVICO="+String.valueOf(VALOR_SERVICO));
		sb.append(",VALOR_COMPRA="+String.valueOf(VALOR_COMPRA));
		sb.append(",CODIGO_TECNICO="+CODIGO_TECNICO);
		sb.append(",NM_TECNICO="+NM_TECNICO);
		sb.append(",GARANTIA="+GARANTIA);
		sb.append(",STATUS="+STATUS);
		sb.append(",AG_PEC="+AG_PEC);
		sb.append(",DATA_ATUALIZACAO_JOB="+String.valueOf(DATA_ATUALIZACAO_JOB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
insert_tableStruct insert_table = new insert_tableStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_table");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("bi_assistencia_tecnica").toLowerCase();
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("bi_assistencia_tecnica").toLowerCase();
}


int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_6 = 1000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
            try (java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                stmtClear_tDBOutput_6.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_6 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_6 = new java.lang.StringBuilder();
        sb_tDBOutput_6.append("INSERT INTO \"").append(tableName_tDBOutput_6).append("\" (\"cd_empresa\",\"dt_entrada\",\"dt_previsao\",\"dt_pedido\",\"dt_nota\",\"cd_cliente\",\"nm_cliente\",\"cd_vendedor\",\"num_os\",\"num_fatura\",\"telefone\",\"celular\",\"cd_equipamento\",\"desc_equipamento\",\"cd_marca\",\"desc_marca\",\"voltagem\",\"observacoes\",\"servico\",\"retpor\",\"valor_produto\",\"valor_servico\",\"valor_compra\",\"codigo_tecnico\",\"nm_tecnico\",\"garantia\",\"status\",\"ag_pec\",\"data_atualizacao_job\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_6 = sb_tDBOutput_6.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_tableStruct insert_table_tmp = new insert_tableStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<InsertStruct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_bi_assistencia_tecnica_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<InsertStruct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    InsertStruct next_tHashInput_3 = iterator_tHashInput_3.next();

	row9.CD_EMPRESA = next_tHashInput_3.CD_EMPRESA;
	row9.DT_ENTRADA = next_tHashInput_3.DT_ENTRADA;
	row9.DT_PREVISAO = next_tHashInput_3.DT_PREVISAO;
	row9.DT_PEDIDO = next_tHashInput_3.DT_PEDIDO;
	row9.DT_NOTA = next_tHashInput_3.DT_NOTA;
	row9.CD_CLIENTE = next_tHashInput_3.CD_CLIENTE;
	row9.NM_CLIENTE = next_tHashInput_3.NM_CLIENTE;
	row9.CD_VENDEDOR = next_tHashInput_3.CD_VENDEDOR;
	row9.NUM_OS = next_tHashInput_3.NUM_OS;
	row9.NUM_FATURA = next_tHashInput_3.NUM_FATURA;
	row9.TELEFONE = next_tHashInput_3.TELEFONE;
	row9.CELULAR = next_tHashInput_3.CELULAR;
	row9.CD_EQUIPAMENTO = next_tHashInput_3.CD_EQUIPAMENTO;
	row9.DESC_EQUIPAMENTO = next_tHashInput_3.DESC_EQUIPAMENTO;
	row9.CD_MARCA = next_tHashInput_3.CD_MARCA;
	row9.DESC_MARCA = next_tHashInput_3.DESC_MARCA;
	row9.VOLTAGEM = next_tHashInput_3.VOLTAGEM;
	row9.OBSERVACOES = next_tHashInput_3.OBSERVACOES;
	row9.SERVICO = next_tHashInput_3.SERVICO;
	row9.RETPOR = next_tHashInput_3.RETPOR;
	row9.VALOR_PRODUTO = next_tHashInput_3.VALOR_PRODUTO;
	row9.VALOR_SERVICO = next_tHashInput_3.VALOR_SERVICO;
	row9.VALOR_COMPRA = next_tHashInput_3.VALOR_COMPRA;
	row9.CODIGO_TECNICO = next_tHashInput_3.CODIGO_TECNICO;
	row9.NM_TECNICO = next_tHashInput_3.NM_TECNICO;
	row9.GARANTIA = next_tHashInput_3.GARANTIA;
	row9.STATUS = next_tHashInput_3.STATUS;
	row9.AG_PEC = next_tHashInput_3.AG_PEC;
	row9.DATA_ATUALIZACAO_JOB = next_tHashInput_3.DATA_ATUALIZACAO_JOB;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

insert_table = null;


// # Output table : 'insert_table'
insert_table_tmp.CD_EMPRESA = row9.CD_EMPRESA;
insert_table_tmp.DT_ENTRADA = row9.DT_ENTRADA;
insert_table_tmp.DT_PREVISAO = row9.DT_PREVISAO;
insert_table_tmp.DT_PEDIDO = row9.DT_PEDIDO;
insert_table_tmp.DT_NOTA = row9.DT_NOTA;
insert_table_tmp.CD_CLIENTE = row9.CD_CLIENTE;
insert_table_tmp.NM_CLIENTE = row9.NM_CLIENTE;
insert_table_tmp.CD_VENDEDOR = row9.CD_VENDEDOR;
insert_table_tmp.NUM_OS = row9.NUM_OS;
insert_table_tmp.NUM_FATURA = row9.NUM_FATURA;
insert_table_tmp.TELEFONE = row9.TELEFONE;
insert_table_tmp.CELULAR = row9.CELULAR;
insert_table_tmp.CD_EQUIPAMENTO = row9.CD_EQUIPAMENTO;
insert_table_tmp.DESC_EQUIPAMENTO = row9.DESC_EQUIPAMENTO;
insert_table_tmp.CD_MARCA = row9.CD_MARCA;
insert_table_tmp.DESC_MARCA = row9.DESC_MARCA;
insert_table_tmp.VOLTAGEM = row9.VOLTAGEM;
insert_table_tmp.OBSERVACOES = row9.OBSERVACOES;
insert_table_tmp.SERVICO = row9.SERVICO;
insert_table_tmp.RETPOR = row9.RETPOR;
insert_table_tmp.VALOR_PRODUTO = row9.VALOR_PRODUTO;
insert_table_tmp.VALOR_SERVICO = row9.VALOR_SERVICO;
insert_table_tmp.VALOR_COMPRA = row9.VALOR_COMPRA;
insert_table_tmp.CODIGO_TECNICO = row9.CODIGO_TECNICO;
insert_table_tmp.NM_TECNICO = row9.NM_TECNICO;
insert_table_tmp.GARANTIA = row9.GARANTIA;
insert_table_tmp.STATUS = row9.STATUS;
insert_table_tmp.AG_PEC = row9.AG_PEC;
insert_table_tmp.DATA_ATUALIZACAO_JOB = TalendDate.getCurrentDate();
insert_table = insert_table_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "insert_table"
if(insert_table != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_table"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(insert_table.CD_EMPRESA == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, insert_table.CD_EMPRESA);
}

                    if(insert_table.DT_ENTRADA != null) {
pstmt_tDBOutput_6.setTimestamp(2, new java.sql.Timestamp(insert_table.DT_ENTRADA.getTime()));
} else {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_table.DT_PREVISAO != null) {
pstmt_tDBOutput_6.setTimestamp(3, new java.sql.Timestamp(insert_table.DT_PREVISAO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_table.DT_PEDIDO != null) {
pstmt_tDBOutput_6.setTimestamp(4, new java.sql.Timestamp(insert_table.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(insert_table.DT_NOTA != null) {
pstmt_tDBOutput_6.setTimestamp(5, new java.sql.Timestamp(insert_table.DT_NOTA.getTime()));
} else {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(insert_table.CD_CLIENTE == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(6, insert_table.CD_CLIENTE);
}

                    if(insert_table.NM_CLIENTE == null) {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(7, insert_table.NM_CLIENTE);
}

                    if(insert_table.CD_VENDEDOR == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(8, insert_table.CD_VENDEDOR);
}

                    if(insert_table.NUM_OS == null) {
pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(9, insert_table.NUM_OS);
}

                    if(insert_table.NUM_FATURA == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(10, insert_table.NUM_FATURA);
}

                    if(insert_table.TELEFONE == null) {
pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(11, insert_table.TELEFONE);
}

                    if(insert_table.CELULAR == null) {
pstmt_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(12, insert_table.CELULAR);
}

                    if(insert_table.CD_EQUIPAMENTO == null) {
pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(13, insert_table.CD_EQUIPAMENTO);
}

                    if(insert_table.DESC_EQUIPAMENTO == null) {
pstmt_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(14, insert_table.DESC_EQUIPAMENTO);
}

                    if(insert_table.CD_MARCA == null) {
pstmt_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(15, insert_table.CD_MARCA);
}

                    if(insert_table.DESC_MARCA == null) {
pstmt_tDBOutput_6.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(16, insert_table.DESC_MARCA);
}

                    if(insert_table.VOLTAGEM == null) {
pstmt_tDBOutput_6.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(17, insert_table.VOLTAGEM);
}

                    if(insert_table.OBSERVACOES == null) {
pstmt_tDBOutput_6.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(18, insert_table.OBSERVACOES);
}

                    if(insert_table.SERVICO == null) {
pstmt_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(19, insert_table.SERVICO);
}

                    if(insert_table.RETPOR == null) {
pstmt_tDBOutput_6.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(20, insert_table.RETPOR);
}

                    if(insert_table.VALOR_PRODUTO == null) {
pstmt_tDBOutput_6.setNull(21, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_6.setDouble(21, insert_table.VALOR_PRODUTO);
}

                    if(insert_table.VALOR_SERVICO == null) {
pstmt_tDBOutput_6.setNull(22, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_6.setDouble(22, insert_table.VALOR_SERVICO);
}

                    if(insert_table.VALOR_COMPRA == null) {
pstmt_tDBOutput_6.setNull(23, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_6.setDouble(23, insert_table.VALOR_COMPRA);
}

                    if(insert_table.CODIGO_TECNICO == null) {
pstmt_tDBOutput_6.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(24, insert_table.CODIGO_TECNICO);
}

                    if(insert_table.NM_TECNICO == null) {
pstmt_tDBOutput_6.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(25, insert_table.NM_TECNICO);
}

                    if(insert_table.GARANTIA == null) {
pstmt_tDBOutput_6.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(26, insert_table.GARANTIA);
}

                    if(insert_table.STATUS == null) {
pstmt_tDBOutput_6.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(27, insert_table.STATUS);
}

                    if(insert_table.AG_PEC == null) {
pstmt_tDBOutput_6.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(28, insert_table.AG_PEC);
}

                    if(insert_table.DATA_ATUALIZACAO_JOB != null) {
pstmt_tDBOutput_6.setTimestamp(29, new java.sql.Timestamp(insert_table.DATA_ATUALIZACAO_JOB.getTime()));
} else {
pstmt_tDBOutput_6.setNull(29, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "insert_table"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_bi_assistencia_tecnica_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_table");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_assistencia_tecnica, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_assistencia_tecnica) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_bi_assistencia_tecnica_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row4Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5.nm_programa = next_tHashInput_1.nm_programa;
	row5.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row5.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row5.mensagem = next_tHashInput_1.mensagem;
	row5.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row5.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row5.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_bi_assistencia_tecnica_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final bi_assistencia_tecnica bi_assistencia_tecnicaClass = new bi_assistencia_tecnica();

        int exitCode = bi_assistencia_tecnicaClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = bi_assistencia_tecnica.class.getClassLoader().getResourceAsStream("palacio_ferramentas/bi_assistencia_tecnica_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = bi_assistencia_tecnica.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : bi_assistencia_tecnica");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     363754 characters generated by Talend Open Studio for Big Data 
 *     on the 20 de maio de 2024 15:25:02 BRT
 ************************************************************************************************/