// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.stg_cadcnd_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: stg_cadcnd Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class stg_cadcnd implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "stg_cadcnd";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				stg_cadcnd.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(stg_cadcnd.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";
	
	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "ApplicationName=stg_t_produto_empresa";
            String url_tDBConnection_3 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_3 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3","");

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row1Struct row1 = new row1Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_stg_cadcnd_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row1 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row1 = new row1Struct();
                                row1.nm_programa = insert_log.nm_programa;
                                row1.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row1.data_termino_execucao = insert_log.data_termino_execucao;
                                row1.mensagem = insert_log.mensagem;
                                row1.uuid = insert_log.uuid;
                                row1.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_1 = new row1Struct();
				
					oneRow_tHashOutput_1.nm_programa = row1.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row1.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row1.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row1.mensagem;
					oneRow_tHashOutput_1.uuid = row1.uuid;
					oneRow_tHashOutput_1.versao = row1.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class TABLEStruct implements routines.system.IPersistableRow<TABLEStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CND_CODIGO;

				public String getCND_CODIGO () {
					return this.CND_CODIGO;
				}

				public Boolean CND_CODIGOIsNullable(){
				    return false;
				}
				public Boolean CND_CODIGOIsKey(){
				    return false;
				}
				public Integer CND_CODIGOLength(){
				    return 3;
				}
				public Integer CND_CODIGOPrecision(){
				    return 0;
				}
				public String CND_CODIGODefault(){
				
					return null;
				
				}
				public String CND_CODIGOComment(){
				
				    return "";
				
				}
				public String CND_CODIGOPattern(){
				
					return "";
				
				}
				public String CND_CODIGOOriginalDbColumnName(){
				
					return "CND_CODIGO";
				
				}

				
			    public String CND_DESCRI;

				public String getCND_DESCRI () {
					return this.CND_DESCRI;
				}

				public Boolean CND_DESCRIIsNullable(){
				    return true;
				}
				public Boolean CND_DESCRIIsKey(){
				    return false;
				}
				public Integer CND_DESCRILength(){
				    return 70;
				}
				public Integer CND_DESCRIPrecision(){
				    return 0;
				}
				public String CND_DESCRIDefault(){
				
					return null;
				
				}
				public String CND_DESCRIComment(){
				
				    return "";
				
				}
				public String CND_DESCRIPattern(){
				
					return "";
				
				}
				public String CND_DESCRIOriginalDbColumnName(){
				
					return "CND_DESCRI";
				
				}

				
			    public String CND_CNDPAG;

				public String getCND_CNDPAG () {
					return this.CND_CNDPAG;
				}

				public Boolean CND_CNDPAGIsNullable(){
				    return true;
				}
				public Boolean CND_CNDPAGIsKey(){
				    return false;
				}
				public Integer CND_CNDPAGLength(){
				    return 74;
				}
				public Integer CND_CNDPAGPrecision(){
				    return 0;
				}
				public String CND_CNDPAGDefault(){
				
					return null;
				
				}
				public String CND_CNDPAGComment(){
				
				    return "";
				
				}
				public String CND_CNDPAGPattern(){
				
					return "";
				
				}
				public String CND_CNDPAGOriginalDbColumnName(){
				
					return "CND_CNDPAG";
				
				}

				
			    public String CND_TIPFOR;

				public String getCND_TIPFOR () {
					return this.CND_TIPFOR;
				}

				public Boolean CND_TIPFORIsNullable(){
				    return false;
				}
				public Boolean CND_TIPFORIsKey(){
				    return false;
				}
				public Integer CND_TIPFORLength(){
				    return 10;
				}
				public Integer CND_TIPFORPrecision(){
				    return 0;
				}
				public String CND_TIPFORDefault(){
				
					return null;
				
				}
				public String CND_TIPFORComment(){
				
				    return "";
				
				}
				public String CND_TIPFORPattern(){
				
					return "";
				
				}
				public String CND_TIPFOROriginalDbColumnName(){
				
					return "CND_TIPFOR";
				
				}

				
			    public String CND_CODPOR;

				public String getCND_CODPOR () {
					return this.CND_CODPOR;
				}

				public Boolean CND_CODPORIsNullable(){
				    return true;
				}
				public Boolean CND_CODPORIsKey(){
				    return false;
				}
				public Integer CND_CODPORLength(){
				    return 5;
				}
				public Integer CND_CODPORPrecision(){
				    return 0;
				}
				public String CND_CODPORDefault(){
				
					return null;
				
				}
				public String CND_CODPORComment(){
				
				    return "";
				
				}
				public String CND_CODPORPattern(){
				
					return "";
				
				}
				public String CND_CODPOROriginalDbColumnName(){
				
					return "CND_CODPOR";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return false;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return 0;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public String CND_CODEMP;

				public String getCND_CODEMP () {
					return this.CND_CODEMP;
				}

				public Boolean CND_CODEMPIsNullable(){
				    return true;
				}
				public Boolean CND_CODEMPIsKey(){
				    return false;
				}
				public Integer CND_CODEMPLength(){
				    return 3;
				}
				public Integer CND_CODEMPPrecision(){
				    return 0;
				}
				public String CND_CODEMPDefault(){
				
					return null;
				
				}
				public String CND_CODEMPComment(){
				
				    return "";
				
				}
				public String CND_CODEMPPattern(){
				
					return "";
				
				}
				public String CND_CODEMPOriginalDbColumnName(){
				
					return "CND_CODEMP";
				
				}

				
			    public BigDecimal CND_DESMAX;

				public BigDecimal getCND_DESMAX () {
					return this.CND_DESMAX;
				}

				public Boolean CND_DESMAXIsNullable(){
				    return true;
				}
				public Boolean CND_DESMAXIsKey(){
				    return false;
				}
				public Integer CND_DESMAXLength(){
				    return 12;
				}
				public Integer CND_DESMAXPrecision(){
				    return 2;
				}
				public String CND_DESMAXDefault(){
				
					return null;
				
				}
				public String CND_DESMAXComment(){
				
				    return "";
				
				}
				public String CND_DESMAXPattern(){
				
					return "";
				
				}
				public String CND_DESMAXOriginalDbColumnName(){
				
					return "CND_DESMAX";
				
				}

				
			    public String CND_ABADES;

				public String getCND_ABADES () {
					return this.CND_ABADES;
				}

				public Boolean CND_ABADESIsNullable(){
				    return true;
				}
				public Boolean CND_ABADESIsKey(){
				    return false;
				}
				public Integer CND_ABADESLength(){
				    return 1;
				}
				public Integer CND_ABADESPrecision(){
				    return 0;
				}
				public String CND_ABADESDefault(){
				
					return null;
				
				}
				public String CND_ABADESComment(){
				
				    return "";
				
				}
				public String CND_ABADESPattern(){
				
					return "";
				
				}
				public String CND_ABADESOriginalDbColumnName(){
				
					return "CND_ABADES";
				
				}

				
			    public String CND_ABDECC;

				public String getCND_ABDECC () {
					return this.CND_ABDECC;
				}

				public Boolean CND_ABDECCIsNullable(){
				    return true;
				}
				public Boolean CND_ABDECCIsKey(){
				    return false;
				}
				public Integer CND_ABDECCLength(){
				    return 1;
				}
				public Integer CND_ABDECCPrecision(){
				    return 0;
				}
				public String CND_ABDECCDefault(){
				
					return null;
				
				}
				public String CND_ABDECCComment(){
				
				    return "";
				
				}
				public String CND_ABDECCPattern(){
				
					return "";
				
				}
				public String CND_ABDECCOriginalDbColumnName(){
				
					return "CND_ABDECC";
				
				}

				
			    public BigDecimal CND_TXJURO;

				public BigDecimal getCND_TXJURO () {
					return this.CND_TXJURO;
				}

				public Boolean CND_TXJUROIsNullable(){
				    return true;
				}
				public Boolean CND_TXJUROIsKey(){
				    return false;
				}
				public Integer CND_TXJUROLength(){
				    return 12;
				}
				public Integer CND_TXJUROPrecision(){
				    return 4;
				}
				public String CND_TXJURODefault(){
				
					return null;
				
				}
				public String CND_TXJUROComment(){
				
				    return "";
				
				}
				public String CND_TXJUROPattern(){
				
					return "";
				
				}
				public String CND_TXJUROOriginalDbColumnName(){
				
					return "CND_TXJURO";
				
				}

				
			    public String CND_CODFPG;

				public String getCND_CODFPG () {
					return this.CND_CODFPG;
				}

				public Boolean CND_CODFPGIsNullable(){
				    return true;
				}
				public Boolean CND_CODFPGIsKey(){
				    return false;
				}
				public Integer CND_CODFPGLength(){
				    return 3;
				}
				public Integer CND_CODFPGPrecision(){
				    return 0;
				}
				public String CND_CODFPGDefault(){
				
					return null;
				
				}
				public String CND_CODFPGComment(){
				
				    return "";
				
				}
				public String CND_CODFPGPattern(){
				
					return "";
				
				}
				public String CND_CODFPGOriginalDbColumnName(){
				
					return "CND_CODFPG";
				
				}

				
			    public BigDecimal CND_PRZMED;

				public BigDecimal getCND_PRZMED () {
					return this.CND_PRZMED;
				}

				public Boolean CND_PRZMEDIsNullable(){
				    return true;
				}
				public Boolean CND_PRZMEDIsKey(){
				    return false;
				}
				public Integer CND_PRZMEDLength(){
				    return 12;
				}
				public Integer CND_PRZMEDPrecision(){
				    return 2;
				}
				public String CND_PRZMEDDefault(){
				
					return null;
				
				}
				public String CND_PRZMEDComment(){
				
				    return "";
				
				}
				public String CND_PRZMEDPattern(){
				
					return "";
				
				}
				public String CND_PRZMEDOriginalDbColumnName(){
				
					return "CND_PRZMED";
				
				}

				
			    public BigDecimal CND_FATACA;

				public BigDecimal getCND_FATACA () {
					return this.CND_FATACA;
				}

				public Boolean CND_FATACAIsNullable(){
				    return true;
				}
				public Boolean CND_FATACAIsKey(){
				    return false;
				}
				public Integer CND_FATACALength(){
				    return 5;
				}
				public Integer CND_FATACAPrecision(){
				    return 4;
				}
				public String CND_FATACADefault(){
				
					return null;
				
				}
				public String CND_FATACAComment(){
				
				    return "";
				
				}
				public String CND_FATACAPattern(){
				
					return "";
				
				}
				public String CND_FATACAOriginalDbColumnName(){
				
					return "CND_FATACA";
				
				}

				
			    public String CND_INFANA;

				public String getCND_INFANA () {
					return this.CND_INFANA;
				}

				public Boolean CND_INFANAIsNullable(){
				    return true;
				}
				public Boolean CND_INFANAIsKey(){
				    return false;
				}
				public Integer CND_INFANALength(){
				    return 1;
				}
				public Integer CND_INFANAPrecision(){
				    return 0;
				}
				public String CND_INFANADefault(){
				
					return "'S'";
				
				}
				public String CND_INFANAComment(){
				
				    return "";
				
				}
				public String CND_INFANAPattern(){
				
					return "";
				
				}
				public String CND_INFANAOriginalDbColumnName(){
				
					return "CND_INFANA";
				
				}

				
			    public String CND_STATUS;

				public String getCND_STATUS () {
					return this.CND_STATUS;
				}

				public Boolean CND_STATUSIsNullable(){
				    return true;
				}
				public Boolean CND_STATUSIsKey(){
				    return false;
				}
				public Integer CND_STATUSLength(){
				    return 1;
				}
				public Integer CND_STATUSPrecision(){
				    return 0;
				}
				public String CND_STATUSDefault(){
				
					return "'A'";
				
				}
				public String CND_STATUSComment(){
				
				    return "";
				
				}
				public String CND_STATUSPattern(){
				
					return "";
				
				}
				public String CND_STATUSOriginalDbColumnName(){
				
					return "CND_STATUS";
				
				}

				
			    public BigDecimal CND_DESMGE;

				public BigDecimal getCND_DESMGE () {
					return this.CND_DESMGE;
				}

				public Boolean CND_DESMGEIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGEIsKey(){
				    return false;
				}
				public Integer CND_DESMGELength(){
				    return 12;
				}
				public Integer CND_DESMGEPrecision(){
				    return 2;
				}
				public String CND_DESMGEDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGEComment(){
				
				    return "";
				
				}
				public String CND_DESMGEPattern(){
				
					return "";
				
				}
				public String CND_DESMGEOriginalDbColumnName(){
				
					return "CND_DESMGE";
				
				}

				
			    public String CND_ALTPRE;

				public String getCND_ALTPRE () {
					return this.CND_ALTPRE;
				}

				public Boolean CND_ALTPREIsNullable(){
				    return true;
				}
				public Boolean CND_ALTPREIsKey(){
				    return false;
				}
				public Integer CND_ALTPRELength(){
				    return 1;
				}
				public Integer CND_ALTPREPrecision(){
				    return 0;
				}
				public String CND_ALTPREDefault(){
				
					return "'S'";
				
				}
				public String CND_ALTPREComment(){
				
				    return "";
				
				}
				public String CND_ALTPREPattern(){
				
					return "";
				
				}
				public String CND_ALTPREOriginalDbColumnName(){
				
					return "CND_ALTPRE";
				
				}

				
			    public String CND_CODVEL;

				public String getCND_CODVEL () {
					return this.CND_CODVEL;
				}

				public Boolean CND_CODVELIsNullable(){
				    return true;
				}
				public Boolean CND_CODVELIsKey(){
				    return false;
				}
				public Integer CND_CODVELLength(){
				    return 20;
				}
				public Integer CND_CODVELPrecision(){
				    return 0;
				}
				public String CND_CODVELDefault(){
				
					return null;
				
				}
				public String CND_CODVELComment(){
				
				    return "";
				
				}
				public String CND_CODVELPattern(){
				
					return "";
				
				}
				public String CND_CODVELOriginalDbColumnName(){
				
					return "CND_CODVEL";
				
				}

				
			    public String CND_DESPFL;

				public String getCND_DESPFL () {
					return this.CND_DESPFL;
				}

				public Boolean CND_DESPFLIsNullable(){
				    return true;
				}
				public Boolean CND_DESPFLIsKey(){
				    return false;
				}
				public Integer CND_DESPFLLength(){
				    return 255;
				}
				public Integer CND_DESPFLPrecision(){
				    return 0;
				}
				public String CND_DESPFLDefault(){
				
					return null;
				
				}
				public String CND_DESPFLComment(){
				
				    return "";
				
				}
				public String CND_DESPFLPattern(){
				
					return "";
				
				}
				public String CND_DESPFLOriginalDbColumnName(){
				
					return "CND_DESPFL";
				
				}

				
			    public Integer CND_DIAFIX;

				public Integer getCND_DIAFIX () {
					return this.CND_DIAFIX;
				}

				public Boolean CND_DIAFIXIsNullable(){
				    return true;
				}
				public Boolean CND_DIAFIXIsKey(){
				    return false;
				}
				public Integer CND_DIAFIXLength(){
				    return 10;
				}
				public Integer CND_DIAFIXPrecision(){
				    return 0;
				}
				public String CND_DIAFIXDefault(){
				
					return null;
				
				}
				public String CND_DIAFIXComment(){
				
				    return "";
				
				}
				public String CND_DIAFIXPattern(){
				
					return "";
				
				}
				public String CND_DIAFIXOriginalDbColumnName(){
				
					return "CND_DIAFIX";
				
				}

				
			    public String CND_IMPBOL;

				public String getCND_IMPBOL () {
					return this.CND_IMPBOL;
				}

				public Boolean CND_IMPBOLIsNullable(){
				    return true;
				}
				public Boolean CND_IMPBOLIsKey(){
				    return false;
				}
				public Integer CND_IMPBOLLength(){
				    return 1;
				}
				public Integer CND_IMPBOLPrecision(){
				    return 0;
				}
				public String CND_IMPBOLDefault(){
				
					return "'S'";
				
				}
				public String CND_IMPBOLComment(){
				
				    return "";
				
				}
				public String CND_IMPBOLPattern(){
				
					return "";
				
				}
				public String CND_IMPBOLOriginalDbColumnName(){
				
					return "CND_IMPBOL";
				
				}

				
			    public String CND_LIMCRE;

				public String getCND_LIMCRE () {
					return this.CND_LIMCRE;
				}

				public Boolean CND_LIMCREIsNullable(){
				    return true;
				}
				public Boolean CND_LIMCREIsKey(){
				    return false;
				}
				public Integer CND_LIMCRELength(){
				    return 1;
				}
				public Integer CND_LIMCREPrecision(){
				    return 0;
				}
				public String CND_LIMCREDefault(){
				
					return "'S'";
				
				}
				public String CND_LIMCREComment(){
				
				    return "";
				
				}
				public String CND_LIMCREPattern(){
				
					return "";
				
				}
				public String CND_LIMCREOriginalDbColumnName(){
				
					return "CND_LIMCRE";
				
				}

				
			    public BigDecimal CND_PERCOM;

				public BigDecimal getCND_PERCOM () {
					return this.CND_PERCOM;
				}

				public Boolean CND_PERCOMIsNullable(){
				    return true;
				}
				public Boolean CND_PERCOMIsKey(){
				    return false;
				}
				public Integer CND_PERCOMLength(){
				    return 12;
				}
				public Integer CND_PERCOMPrecision(){
				    return 2;
				}
				public String CND_PERCOMDefault(){
				
					return null;
				
				}
				public String CND_PERCOMComment(){
				
				    return "";
				
				}
				public String CND_PERCOMPattern(){
				
					return "";
				
				}
				public String CND_PERCOMOriginalDbColumnName(){
				
					return "CND_PERCOM";
				
				}

				
			    public BigDecimal CND_PERDPO;

				public BigDecimal getCND_PERDPO () {
					return this.CND_PERDPO;
				}

				public Boolean CND_PERDPOIsNullable(){
				    return true;
				}
				public Boolean CND_PERDPOIsKey(){
				    return false;
				}
				public Integer CND_PERDPOLength(){
				    return 12;
				}
				public Integer CND_PERDPOPrecision(){
				    return 2;
				}
				public String CND_PERDPODefault(){
				
					return "0.00";
				
				}
				public String CND_PERDPOComment(){
				
				    return "";
				
				}
				public String CND_PERDPOPattern(){
				
					return "";
				
				}
				public String CND_PERDPOOriginalDbColumnName(){
				
					return "CND_PERDPO";
				
				}

				
			    public Integer CND_QTDDAV;

				public Integer getCND_QTDDAV () {
					return this.CND_QTDDAV;
				}

				public Boolean CND_QTDDAVIsNullable(){
				    return true;
				}
				public Boolean CND_QTDDAVIsKey(){
				    return false;
				}
				public Integer CND_QTDDAVLength(){
				    return 10;
				}
				public Integer CND_QTDDAVPrecision(){
				    return 0;
				}
				public String CND_QTDDAVDefault(){
				
					return "0";
				
				}
				public String CND_QTDDAVComment(){
				
				    return "";
				
				}
				public String CND_QTDDAVPattern(){
				
					return "";
				
				}
				public String CND_QTDDAVOriginalDbColumnName(){
				
					return "CND_QTDDAV";
				
				}

				
			    public Integer CND_QTDPAR;

				public Integer getCND_QTDPAR () {
					return this.CND_QTDPAR;
				}

				public Boolean CND_QTDPARIsNullable(){
				    return true;
				}
				public Boolean CND_QTDPARIsKey(){
				    return false;
				}
				public Integer CND_QTDPARLength(){
				    return 10;
				}
				public Integer CND_QTDPARPrecision(){
				    return 0;
				}
				public String CND_QTDPARDefault(){
				
					return null;
				
				}
				public String CND_QTDPARComment(){
				
				    return "";
				
				}
				public String CND_QTDPARPattern(){
				
					return "";
				
				}
				public String CND_QTDPAROriginalDbColumnName(){
				
					return "CND_QTDPAR";
				
				}

				
			    public String CND_SEMENT;

				public String getCND_SEMENT () {
					return this.CND_SEMENT;
				}

				public Boolean CND_SEMENTIsNullable(){
				    return true;
				}
				public Boolean CND_SEMENTIsKey(){
				    return false;
				}
				public Integer CND_SEMENTLength(){
				    return 1;
				}
				public Integer CND_SEMENTPrecision(){
				    return 0;
				}
				public String CND_SEMENTDefault(){
				
					return "'N'";
				
				}
				public String CND_SEMENTComment(){
				
				    return "";
				
				}
				public String CND_SEMENTPattern(){
				
					return "";
				
				}
				public String CND_SEMENTOriginalDbColumnName(){
				
					return "CND_SEMENT";
				
				}

				
			    public String CND_SENCND;

				public String getCND_SENCND () {
					return this.CND_SENCND;
				}

				public Boolean CND_SENCNDIsNullable(){
				    return true;
				}
				public Boolean CND_SENCNDIsKey(){
				    return false;
				}
				public Integer CND_SENCNDLength(){
				    return 1;
				}
				public Integer CND_SENCNDPrecision(){
				    return 0;
				}
				public String CND_SENCNDDefault(){
				
					return "'S'";
				
				}
				public String CND_SENCNDComment(){
				
				    return "";
				
				}
				public String CND_SENCNDPattern(){
				
					return "";
				
				}
				public String CND_SENCNDOriginalDbColumnName(){
				
					return "CND_SENCND";
				
				}

				
			    public BigDecimal CND_VALMIN;

				public BigDecimal getCND_VALMIN () {
					return this.CND_VALMIN;
				}

				public Boolean CND_VALMINIsNullable(){
				    return true;
				}
				public Boolean CND_VALMINIsKey(){
				    return false;
				}
				public Integer CND_VALMINLength(){
				    return 12;
				}
				public Integer CND_VALMINPrecision(){
				    return 2;
				}
				public String CND_VALMINDefault(){
				
					return null;
				
				}
				public String CND_VALMINComment(){
				
				    return "";
				
				}
				public String CND_VALMINPattern(){
				
					return "";
				
				}
				public String CND_VALMINOriginalDbColumnName(){
				
					return "CND_VALMIN";
				
				}

				
			    public BigDecimal CND_FATMAX;

				public BigDecimal getCND_FATMAX () {
					return this.CND_FATMAX;
				}

				public Boolean CND_FATMAXIsNullable(){
				    return true;
				}
				public Boolean CND_FATMAXIsKey(){
				    return false;
				}
				public Integer CND_FATMAXLength(){
				    return 12;
				}
				public Integer CND_FATMAXPrecision(){
				    return 2;
				}
				public String CND_FATMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_FATMAXComment(){
				
				    return "";
				
				}
				public String CND_FATMAXPattern(){
				
					return "";
				
				}
				public String CND_FATMAXOriginalDbColumnName(){
				
					return "CND_FATMAX";
				
				}

				
			    public BigDecimal CND_FATMIN;

				public BigDecimal getCND_FATMIN () {
					return this.CND_FATMIN;
				}

				public Boolean CND_FATMINIsNullable(){
				    return true;
				}
				public Boolean CND_FATMINIsKey(){
				    return false;
				}
				public Integer CND_FATMINLength(){
				    return 12;
				}
				public Integer CND_FATMINPrecision(){
				    return 2;
				}
				public String CND_FATMINDefault(){
				
					return "0.00";
				
				}
				public String CND_FATMINComment(){
				
				    return "";
				
				}
				public String CND_FATMINPattern(){
				
					return "";
				
				}
				public String CND_FATMINOriginalDbColumnName(){
				
					return "CND_FATMIN";
				
				}

				
			    public String CND_IMPFAT;

				public String getCND_IMPFAT () {
					return this.CND_IMPFAT;
				}

				public Boolean CND_IMPFATIsNullable(){
				    return true;
				}
				public Boolean CND_IMPFATIsKey(){
				    return false;
				}
				public Integer CND_IMPFATLength(){
				    return 1;
				}
				public Integer CND_IMPFATPrecision(){
				    return 0;
				}
				public String CND_IMPFATDefault(){
				
					return "'N'";
				
				}
				public String CND_IMPFATComment(){
				
				    return "";
				
				}
				public String CND_IMPFATPattern(){
				
					return "";
				
				}
				public String CND_IMPFATOriginalDbColumnName(){
				
					return "CND_IMPFAT";
				
				}

				
			    public BigDecimal CND_MARMAX;

				public BigDecimal getCND_MARMAX () {
					return this.CND_MARMAX;
				}

				public Boolean CND_MARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_MARMAXIsKey(){
				    return false;
				}
				public Integer CND_MARMAXLength(){
				    return 12;
				}
				public Integer CND_MARMAXPrecision(){
				    return 2;
				}
				public String CND_MARMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_MARMAXComment(){
				
				    return "";
				
				}
				public String CND_MARMAXPattern(){
				
					return "";
				
				}
				public String CND_MARMAXOriginalDbColumnName(){
				
					return "CND_MARMAX";
				
				}

				
			    public BigDecimal CND_MARMIN;

				public BigDecimal getCND_MARMIN () {
					return this.CND_MARMIN;
				}

				public Boolean CND_MARMINIsNullable(){
				    return true;
				}
				public Boolean CND_MARMINIsKey(){
				    return false;
				}
				public Integer CND_MARMINLength(){
				    return 12;
				}
				public Integer CND_MARMINPrecision(){
				    return 2;
				}
				public String CND_MARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_MARMINComment(){
				
				    return "";
				
				}
				public String CND_MARMINPattern(){
				
					return "";
				
				}
				public String CND_MARMINOriginalDbColumnName(){
				
					return "CND_MARMIN";
				
				}

				
			    public BigDecimal CND_PEDEAC;

				public BigDecimal getCND_PEDEAC () {
					return this.CND_PEDEAC;
				}

				public Boolean CND_PEDEACIsNullable(){
				    return true;
				}
				public Boolean CND_PEDEACIsKey(){
				    return false;
				}
				public Integer CND_PEDEACLength(){
				    return 5;
				}
				public Integer CND_PEDEACPrecision(){
				    return 2;
				}
				public String CND_PEDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_PEDEACComment(){
				
				    return "";
				
				}
				public String CND_PEDEACPattern(){
				
					return "";
				
				}
				public String CND_PEDEACOriginalDbColumnName(){
				
					return "CND_PEDEAC";
				
				}

				
			    public String CND_TABPRE;

				public String getCND_TABPRE () {
					return this.CND_TABPRE;
				}

				public Boolean CND_TABPREIsNullable(){
				    return true;
				}
				public Boolean CND_TABPREIsKey(){
				    return false;
				}
				public Integer CND_TABPRELength(){
				    return 1;
				}
				public Integer CND_TABPREPrecision(){
				    return 0;
				}
				public String CND_TABPREDefault(){
				
					return null;
				
				}
				public String CND_TABPREComment(){
				
				    return "";
				
				}
				public String CND_TABPREPattern(){
				
					return "";
				
				}
				public String CND_TABPREOriginalDbColumnName(){
				
					return "CND_TABPRE";
				
				}

				
			    public String CND_TIPFAT;

				public String getCND_TIPFAT () {
					return this.CND_TIPFAT;
				}

				public Boolean CND_TIPFATIsNullable(){
				    return true;
				}
				public Boolean CND_TIPFATIsKey(){
				    return false;
				}
				public Integer CND_TIPFATLength(){
				    return 4;
				}
				public Integer CND_TIPFATPrecision(){
				    return 0;
				}
				public String CND_TIPFATDefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TIPFATComment(){
				
				    return "";
				
				}
				public String CND_TIPFATPattern(){
				
					return "";
				
				}
				public String CND_TIPFATOriginalDbColumnName(){
				
					return "CND_TIPFAT";
				
				}

				
			    public String CND_JURPRO;

				public String getCND_JURPRO () {
					return this.CND_JURPRO;
				}

				public Boolean CND_JURPROIsNullable(){
				    return true;
				}
				public Boolean CND_JURPROIsKey(){
				    return false;
				}
				public Integer CND_JURPROLength(){
				    return 1;
				}
				public Integer CND_JURPROPrecision(){
				    return 0;
				}
				public String CND_JURPRODefault(){
				
					return "'S'";
				
				}
				public String CND_JURPROComment(){
				
				    return "";
				
				}
				public String CND_JURPROPattern(){
				
					return "";
				
				}
				public String CND_JURPROOriginalDbColumnName(){
				
					return "CND_JURPRO";
				
				}

				
			    public String CND_TIPCND;

				public String getCND_TIPCND () {
					return this.CND_TIPCND;
				}

				public Boolean CND_TIPCNDIsNullable(){
				    return true;
				}
				public Boolean CND_TIPCNDIsKey(){
				    return false;
				}
				public Integer CND_TIPCNDLength(){
				    return 1;
				}
				public Integer CND_TIPCNDPrecision(){
				    return 0;
				}
				public String CND_TIPCNDDefault(){
				
					return "'V'";
				
				}
				public String CND_TIPCNDComment(){
				
				    return "";
				
				}
				public String CND_TIPCNDPattern(){
				
					return "";
				
				}
				public String CND_TIPCNDOriginalDbColumnName(){
				
					return "CND_TIPCND";
				
				}

				
			    public java.util.Date CND_ULTALT;

				public java.util.Date getCND_ULTALT () {
					return this.CND_ULTALT;
				}

				public Boolean CND_ULTALTIsNullable(){
				    return true;
				}
				public Boolean CND_ULTALTIsKey(){
				    return false;
				}
				public Integer CND_ULTALTLength(){
				    return 10;
				}
				public Integer CND_ULTALTPrecision(){
				    return 0;
				}
				public String CND_ULTALTDefault(){
				
					return null;
				
				}
				public String CND_ULTALTComment(){
				
				    return "";
				
				}
				public String CND_ULTALTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CND_ULTALTOriginalDbColumnName(){
				
					return "CND_ULTALT";
				
				}

				
			    public String CND_PRAMIN;

				public String getCND_PRAMIN () {
					return this.CND_PRAMIN;
				}

				public Boolean CND_PRAMINIsNullable(){
				    return true;
				}
				public Boolean CND_PRAMINIsKey(){
				    return false;
				}
				public Integer CND_PRAMINLength(){
				    return 1;
				}
				public Integer CND_PRAMINPrecision(){
				    return 0;
				}
				public String CND_PRAMINDefault(){
				
					return "'S'";
				
				}
				public String CND_PRAMINComment(){
				
				    return "";
				
				}
				public String CND_PRAMINPattern(){
				
					return "";
				
				}
				public String CND_PRAMINOriginalDbColumnName(){
				
					return "CND_PRAMIN";
				
				}

				
			    public BigDecimal CND_DESMSU;

				public BigDecimal getCND_DESMSU () {
					return this.CND_DESMSU;
				}

				public Boolean CND_DESMSUIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSUIsKey(){
				    return false;
				}
				public Integer CND_DESMSULength(){
				    return 12;
				}
				public Integer CND_DESMSUPrecision(){
				    return 2;
				}
				public String CND_DESMSUDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSUComment(){
				
				    return "";
				
				}
				public String CND_DESMSUPattern(){
				
					return "";
				
				}
				public String CND_DESMSUOriginalDbColumnName(){
				
					return "CND_DESMSU";
				
				}

				
			    public String CND_EMPACE;

				public String getCND_EMPACE () {
					return this.CND_EMPACE;
				}

				public Boolean CND_EMPACEIsNullable(){
				    return true;
				}
				public Boolean CND_EMPACEIsKey(){
				    return false;
				}
				public Integer CND_EMPACELength(){
				    return 65535;
				}
				public Integer CND_EMPACEPrecision(){
				    return 0;
				}
				public String CND_EMPACEDefault(){
				
					return null;
				
				}
				public String CND_EMPACEComment(){
				
				    return "";
				
				}
				public String CND_EMPACEPattern(){
				
					return "";
				
				}
				public String CND_EMPACEOriginalDbColumnName(){
				
					return "CND_EMPACE";
				
				}

				
			    public String CND_EXPFSO;

				public String getCND_EXPFSO () {
					return this.CND_EXPFSO;
				}

				public Boolean CND_EXPFSOIsNullable(){
				    return true;
				}
				public Boolean CND_EXPFSOIsKey(){
				    return false;
				}
				public Integer CND_EXPFSOLength(){
				    return 1;
				}
				public Integer CND_EXPFSOPrecision(){
				    return 0;
				}
				public String CND_EXPFSODefault(){
				
					return "'S'";
				
				}
				public String CND_EXPFSOComment(){
				
				    return "";
				
				}
				public String CND_EXPFSOPattern(){
				
					return "";
				
				}
				public String CND_EXPFSOOriginalDbColumnName(){
				
					return "CND_EXPFSO";
				
				}

				
			    public String CND_FPGNVL;

				public String getCND_FPGNVL () {
					return this.CND_FPGNVL;
				}

				public Boolean CND_FPGNVLIsNullable(){
				    return true;
				}
				public Boolean CND_FPGNVLIsKey(){
				    return false;
				}
				public Integer CND_FPGNVLLength(){
				    return 16;
				}
				public Integer CND_FPGNVLPrecision(){
				    return 0;
				}
				public String CND_FPGNVLDefault(){
				
					return null;
				
				}
				public String CND_FPGNVLComment(){
				
				    return "";
				
				}
				public String CND_FPGNVLPattern(){
				
					return "";
				
				}
				public String CND_FPGNVLOriginalDbColumnName(){
				
					return "CND_FPGNVL";
				
				}

				
			    public String CND_LBPDOB;

				public String getCND_LBPDOB () {
					return this.CND_LBPDOB;
				}

				public Boolean CND_LBPDOBIsNullable(){
				    return true;
				}
				public Boolean CND_LBPDOBIsKey(){
				    return false;
				}
				public Integer CND_LBPDOBLength(){
				    return 1;
				}
				public Integer CND_LBPDOBPrecision(){
				    return 0;
				}
				public String CND_LBPDOBDefault(){
				
					return "'N'";
				
				}
				public String CND_LBPDOBComment(){
				
				    return "";
				
				}
				public String CND_LBPDOBPattern(){
				
					return "";
				
				}
				public String CND_LBPDOBOriginalDbColumnName(){
				
					return "CND_LBPDOB";
				
				}

				
			    public Integer CND_MAXCAR;

				public Integer getCND_MAXCAR () {
					return this.CND_MAXCAR;
				}

				public Boolean CND_MAXCARIsNullable(){
				    return true;
				}
				public Boolean CND_MAXCARIsKey(){
				    return false;
				}
				public Integer CND_MAXCARLength(){
				    return 10;
				}
				public Integer CND_MAXCARPrecision(){
				    return 0;
				}
				public String CND_MAXCARDefault(){
				
					return null;
				
				}
				public String CND_MAXCARComment(){
				
				    return "";
				
				}
				public String CND_MAXCARPattern(){
				
					return "";
				
				}
				public String CND_MAXCAROriginalDbColumnName(){
				
					return "CND_MAXCAR";
				
				}

				
			    public String CND_MCOBDA;

				public String getCND_MCOBDA () {
					return this.CND_MCOBDA;
				}

				public Boolean CND_MCOBDAIsNullable(){
				    return true;
				}
				public Boolean CND_MCOBDAIsKey(){
				    return false;
				}
				public Integer CND_MCOBDALength(){
				    return 1;
				}
				public Integer CND_MCOBDAPrecision(){
				    return 0;
				}
				public String CND_MCOBDADefault(){
				
					return "'1'";
				
				}
				public String CND_MCOBDAComment(){
				
				    return "";
				
				}
				public String CND_MCOBDAPattern(){
				
					return "";
				
				}
				public String CND_MCOBDAOriginalDbColumnName(){
				
					return "CND_MCOBDA";
				
				}

				
			    public String CND_SENTRA;

				public String getCND_SENTRA () {
					return this.CND_SENTRA;
				}

				public Boolean CND_SENTRAIsNullable(){
				    return true;
				}
				public Boolean CND_SENTRAIsKey(){
				    return false;
				}
				public Integer CND_SENTRALength(){
				    return 1;
				}
				public Integer CND_SENTRAPrecision(){
				    return 0;
				}
				public String CND_SENTRADefault(){
				
					return "'N'";
				
				}
				public String CND_SENTRAComment(){
				
				    return "";
				
				}
				public String CND_SENTRAPattern(){
				
					return "";
				
				}
				public String CND_SENTRAOriginalDbColumnName(){
				
					return "CND_SENTRA";
				
				}

				
			    public String CND_TPFTDA;

				public String getCND_TPFTDA () {
					return this.CND_TPFTDA;
				}

				public Boolean CND_TPFTDAIsNullable(){
				    return true;
				}
				public Boolean CND_TPFTDAIsKey(){
				    return false;
				}
				public Integer CND_TPFTDALength(){
				    return 4;
				}
				public Integer CND_TPFTDAPrecision(){
				    return 0;
				}
				public String CND_TPFTDADefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TPFTDAComment(){
				
				    return "";
				
				}
				public String CND_TPFTDAPattern(){
				
					return "";
				
				}
				public String CND_TPFTDAOriginalDbColumnName(){
				
					return "CND_TPFTDA";
				
				}

				
			    public String CND_TRCLCR;

				public String getCND_TRCLCR () {
					return this.CND_TRCLCR;
				}

				public Boolean CND_TRCLCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCRIsKey(){
				    return false;
				}
				public Integer CND_TRCLCRLength(){
				    return 1;
				}
				public Integer CND_TRCLCRPrecision(){
				    return 0;
				}
				public String CND_TRCLCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCRComment(){
				
				    return "";
				
				}
				public String CND_TRCLCRPattern(){
				
					return "";
				
				}
				public String CND_TRCLCROriginalDbColumnName(){
				
					return "CND_TRCLCR";
				
				}

				
			    public String CND_TRTTVE;

				public String getCND_TRTTVE () {
					return this.CND_TRTTVE;
				}

				public Boolean CND_TRTTVEIsNullable(){
				    return true;
				}
				public Boolean CND_TRTTVEIsKey(){
				    return false;
				}
				public Integer CND_TRTTVELength(){
				    return 1;
				}
				public Integer CND_TRTTVEPrecision(){
				    return 0;
				}
				public String CND_TRTTVEDefault(){
				
					return "'S'";
				
				}
				public String CND_TRTTVEComment(){
				
				    return "";
				
				}
				public String CND_TRTTVEPattern(){
				
					return "";
				
				}
				public String CND_TRTTVEOriginalDbColumnName(){
				
					return "CND_TRTTVE";
				
				}

				
			    public BigDecimal CND_VRDAUV;

				public BigDecimal getCND_VRDAUV () {
					return this.CND_VRDAUV;
				}

				public Boolean CND_VRDAUVIsNullable(){
				    return true;
				}
				public Boolean CND_VRDAUVIsKey(){
				    return false;
				}
				public Integer CND_VRDAUVLength(){
				    return 12;
				}
				public Integer CND_VRDAUVPrecision(){
				    return 2;
				}
				public String CND_VRDAUVDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDAUVComment(){
				
				    return "";
				
				}
				public String CND_VRDAUVPattern(){
				
					return "";
				
				}
				public String CND_VRDAUVOriginalDbColumnName(){
				
					return "CND_VRDAUV";
				
				}

				
			    public BigDecimal CND_VRDEAC;

				public BigDecimal getCND_VRDEAC () {
					return this.CND_VRDEAC;
				}

				public Boolean CND_VRDEACIsNullable(){
				    return true;
				}
				public Boolean CND_VRDEACIsKey(){
				    return false;
				}
				public Integer CND_VRDEACLength(){
				    return 12;
				}
				public Integer CND_VRDEACPrecision(){
				    return 2;
				}
				public String CND_VRDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDEACComment(){
				
				    return "";
				
				}
				public String CND_VRDEACPattern(){
				
					return "";
				
				}
				public String CND_VRDEACOriginalDbColumnName(){
				
					return "CND_VRDEAC";
				
				}

				
			    public BigDecimal CND_PARMAX;

				public BigDecimal getCND_PARMAX () {
					return this.CND_PARMAX;
				}

				public Boolean CND_PARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_PARMAXIsKey(){
				    return false;
				}
				public Integer CND_PARMAXLength(){
				    return 12;
				}
				public Integer CND_PARMAXPrecision(){
				    return 2;
				}
				public String CND_PARMAXDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMAXComment(){
				
				    return "";
				
				}
				public String CND_PARMAXPattern(){
				
					return "";
				
				}
				public String CND_PARMAXOriginalDbColumnName(){
				
					return "CND_PARMAX";
				
				}

				
			    public BigDecimal CND_PARMIN;

				public BigDecimal getCND_PARMIN () {
					return this.CND_PARMIN;
				}

				public Boolean CND_PARMINIsNullable(){
				    return true;
				}
				public Boolean CND_PARMINIsKey(){
				    return false;
				}
				public Integer CND_PARMINLength(){
				    return 12;
				}
				public Integer CND_PARMINPrecision(){
				    return 2;
				}
				public String CND_PARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMINComment(){
				
				    return "";
				
				}
				public String CND_PARMINPattern(){
				
					return "";
				
				}
				public String CND_PARMINOriginalDbColumnName(){
				
					return "CND_PARMIN";
				
				}

				
			    public String CND_RETIRA;

				public String getCND_RETIRA () {
					return this.CND_RETIRA;
				}

				public Boolean CND_RETIRAIsNullable(){
				    return true;
				}
				public Boolean CND_RETIRAIsKey(){
				    return false;
				}
				public Integer CND_RETIRALength(){
				    return 1;
				}
				public Integer CND_RETIRAPrecision(){
				    return 0;
				}
				public String CND_RETIRADefault(){
				
					return "'S'";
				
				}
				public String CND_RETIRAComment(){
				
				    return "";
				
				}
				public String CND_RETIRAPattern(){
				
					return "";
				
				}
				public String CND_RETIRAOriginalDbColumnName(){
				
					return "CND_RETIRA";
				
				}

				
			    public String CND_ENTIME;

				public String getCND_ENTIME () {
					return this.CND_ENTIME;
				}

				public Boolean CND_ENTIMEIsNullable(){
				    return true;
				}
				public Boolean CND_ENTIMEIsKey(){
				    return false;
				}
				public Integer CND_ENTIMELength(){
				    return 1;
				}
				public Integer CND_ENTIMEPrecision(){
				    return 0;
				}
				public String CND_ENTIMEDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTIMEComment(){
				
				    return "";
				
				}
				public String CND_ENTIMEPattern(){
				
					return "";
				
				}
				public String CND_ENTIMEOriginalDbColumnName(){
				
					return "CND_ENTIME";
				
				}

				
			    public String CND_ENTFUT;

				public String getCND_ENTFUT () {
					return this.CND_ENTFUT;
				}

				public Boolean CND_ENTFUTIsNullable(){
				    return true;
				}
				public Boolean CND_ENTFUTIsKey(){
				    return false;
				}
				public Integer CND_ENTFUTLength(){
				    return 1;
				}
				public Integer CND_ENTFUTPrecision(){
				    return 0;
				}
				public String CND_ENTFUTDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTFUTComment(){
				
				    return "";
				
				}
				public String CND_ENTFUTPattern(){
				
					return "";
				
				}
				public String CND_ENTFUTOriginalDbColumnName(){
				
					return "CND_ENTFUT";
				
				}

				
			    public Integer CND_QTDMAX;

				public Integer getCND_QTDMAX () {
					return this.CND_QTDMAX;
				}

				public Boolean CND_QTDMAXIsNullable(){
				    return true;
				}
				public Boolean CND_QTDMAXIsKey(){
				    return false;
				}
				public Integer CND_QTDMAXLength(){
				    return 10;
				}
				public Integer CND_QTDMAXPrecision(){
				    return 0;
				}
				public String CND_QTDMAXDefault(){
				
					return "0";
				
				}
				public String CND_QTDMAXComment(){
				
				    return "";
				
				}
				public String CND_QTDMAXPattern(){
				
					return "";
				
				}
				public String CND_QTDMAXOriginalDbColumnName(){
				
					return "CND_QTDMAX";
				
				}

				
			    public String CND_TRCLCB;

				public String getCND_TRCLCB () {
					return this.CND_TRCLCB;
				}

				public Boolean CND_TRCLCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCBIsKey(){
				    return false;
				}
				public Integer CND_TRCLCBLength(){
				    return 1;
				}
				public Integer CND_TRCLCBPrecision(){
				    return 0;
				}
				public String CND_TRCLCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCBComment(){
				
				    return "";
				
				}
				public String CND_TRCLCBPattern(){
				
					return "";
				
				}
				public String CND_TRCLCBOriginalDbColumnName(){
				
					return "CND_TRCLCB";
				
				}

				
			    public String CND_EXPB2B;

				public String getCND_EXPB2B () {
					return this.CND_EXPB2B;
				}

				public Boolean CND_EXPB2BIsNullable(){
				    return true;
				}
				public Boolean CND_EXPB2BIsKey(){
				    return false;
				}
				public Integer CND_EXPB2BLength(){
				    return 1;
				}
				public Integer CND_EXPB2BPrecision(){
				    return 0;
				}
				public String CND_EXPB2BDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPB2BComment(){
				
				    return "";
				
				}
				public String CND_EXPB2BPattern(){
				
					return "";
				
				}
				public String CND_EXPB2BOriginalDbColumnName(){
				
					return "CND_EXPB2B";
				
				}

				
			    public String CND_PRETAB;

				public String getCND_PRETAB () {
					return this.CND_PRETAB;
				}

				public Boolean CND_PRETABIsNullable(){
				    return true;
				}
				public Boolean CND_PRETABIsKey(){
				    return false;
				}
				public Integer CND_PRETABLength(){
				    return 7;
				}
				public Integer CND_PRETABPrecision(){
				    return 0;
				}
				public String CND_PRETABDefault(){
				
					return "'NNNNNNN'";
				
				}
				public String CND_PRETABComment(){
				
				    return "";
				
				}
				public String CND_PRETABPattern(){
				
					return "";
				
				}
				public String CND_PRETABOriginalDbColumnName(){
				
					return "CND_PRETAB";
				
				}

				
			    public Integer CND_LIMITE;

				public Integer getCND_LIMITE () {
					return this.CND_LIMITE;
				}

				public Boolean CND_LIMITEIsNullable(){
				    return true;
				}
				public Boolean CND_LIMITEIsKey(){
				    return false;
				}
				public Integer CND_LIMITELength(){
				    return 10;
				}
				public Integer CND_LIMITEPrecision(){
				    return 0;
				}
				public String CND_LIMITEDefault(){
				
					return "0";
				
				}
				public String CND_LIMITEComment(){
				
				    return "";
				
				}
				public String CND_LIMITEPattern(){
				
					return "";
				
				}
				public String CND_LIMITEOriginalDbColumnName(){
				
					return "CND_LIMITE";
				
				}

				
			    public String CND_USADEP;

				public String getCND_USADEP () {
					return this.CND_USADEP;
				}

				public Boolean CND_USADEPIsNullable(){
				    return true;
				}
				public Boolean CND_USADEPIsKey(){
				    return false;
				}
				public Integer CND_USADEPLength(){
				    return 1;
				}
				public Integer CND_USADEPPrecision(){
				    return 0;
				}
				public String CND_USADEPDefault(){
				
					return "'N'";
				
				}
				public String CND_USADEPComment(){
				
				    return "";
				
				}
				public String CND_USADEPPattern(){
				
					return "";
				
				}
				public String CND_USADEPOriginalDbColumnName(){
				
					return "CND_USADEP";
				
				}

				
			    public String CND_RCX_F3;

				public String getCND_RCX_F3 () {
					return this.CND_RCX_F3;
				}

				public Boolean CND_RCX_F3IsNullable(){
				    return true;
				}
				public Boolean CND_RCX_F3IsKey(){
				    return false;
				}
				public Integer CND_RCX_F3Length(){
				    return 1;
				}
				public Integer CND_RCX_F3Precision(){
				    return 0;
				}
				public String CND_RCX_F3Default(){
				
					return "'S'";
				
				}
				public String CND_RCX_F3Comment(){
				
				    return "";
				
				}
				public String CND_RCX_F3Pattern(){
				
					return "";
				
				}
				public String CND_RCX_F3OriginalDbColumnName(){
				
					return "CND_RCX_F3";
				
				}

				
			    public String CND_COBYAP;

				public String getCND_COBYAP () {
					return this.CND_COBYAP;
				}

				public Boolean CND_COBYAPIsNullable(){
				    return true;
				}
				public Boolean CND_COBYAPIsKey(){
				    return false;
				}
				public Integer CND_COBYAPLength(){
				    return 1;
				}
				public Integer CND_COBYAPPrecision(){
				    return 0;
				}
				public String CND_COBYAPDefault(){
				
					return "'N'";
				
				}
				public String CND_COBYAPComment(){
				
				    return "";
				
				}
				public String CND_COBYAPPattern(){
				
					return "";
				
				}
				public String CND_COBYAPOriginalDbColumnName(){
				
					return "CND_COBYAP";
				
				}

				
			    public String CND_TRORCR;

				public String getCND_TRORCR () {
					return this.CND_TRORCR;
				}

				public Boolean CND_TRORCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCRIsKey(){
				    return false;
				}
				public Integer CND_TRORCRLength(){
				    return 1;
				}
				public Integer CND_TRORCRPrecision(){
				    return 0;
				}
				public String CND_TRORCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCRComment(){
				
				    return "";
				
				}
				public String CND_TRORCRPattern(){
				
					return "";
				
				}
				public String CND_TRORCROriginalDbColumnName(){
				
					return "CND_TRORCR";
				
				}

				
			    public String CND_TRORCB;

				public String getCND_TRORCB () {
					return this.CND_TRORCB;
				}

				public Boolean CND_TRORCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCBIsKey(){
				    return false;
				}
				public Integer CND_TRORCBLength(){
				    return 1;
				}
				public Integer CND_TRORCBPrecision(){
				    return 0;
				}
				public String CND_TRORCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCBComment(){
				
				    return "";
				
				}
				public String CND_TRORCBPattern(){
				
					return "";
				
				}
				public String CND_TRORCBOriginalDbColumnName(){
				
					return "CND_TRORCB";
				
				}

				
			    public String CND_YAPTRA;

				public String getCND_YAPTRA () {
					return this.CND_YAPTRA;
				}

				public Boolean CND_YAPTRAIsNullable(){
				    return true;
				}
				public Boolean CND_YAPTRAIsKey(){
				    return false;
				}
				public Integer CND_YAPTRALength(){
				    return 1;
				}
				public Integer CND_YAPTRAPrecision(){
				    return 0;
				}
				public String CND_YAPTRADefault(){
				
					return "'S'";
				
				}
				public String CND_YAPTRAComment(){
				
				    return "";
				
				}
				public String CND_YAPTRAPattern(){
				
					return "";
				
				}
				public String CND_YAPTRAOriginalDbColumnName(){
				
					return "CND_YAPTRA";
				
				}

				
			    public String CND_YAPDIS;

				public String getCND_YAPDIS () {
					return this.CND_YAPDIS;
				}

				public Boolean CND_YAPDISIsNullable(){
				    return true;
				}
				public Boolean CND_YAPDISIsKey(){
				    return false;
				}
				public Integer CND_YAPDISLength(){
				    return 255;
				}
				public Integer CND_YAPDISPrecision(){
				    return 0;
				}
				public String CND_YAPDISDefault(){
				
					return null;
				
				}
				public String CND_YAPDISComment(){
				
				    return "";
				
				}
				public String CND_YAPDISPattern(){
				
					return "";
				
				}
				public String CND_YAPDISOriginalDbColumnName(){
				
					return "CND_YAPDIS";
				
				}

				
			    public Integer CND_YAPPAR;

				public Integer getCND_YAPPAR () {
					return this.CND_YAPPAR;
				}

				public Boolean CND_YAPPARIsNullable(){
				    return true;
				}
				public Boolean CND_YAPPARIsKey(){
				    return false;
				}
				public Integer CND_YAPPARLength(){
				    return 10;
				}
				public Integer CND_YAPPARPrecision(){
				    return 0;
				}
				public String CND_YAPPARDefault(){
				
					return null;
				
				}
				public String CND_YAPPARComment(){
				
				    return "";
				
				}
				public String CND_YAPPARPattern(){
				
					return "";
				
				}
				public String CND_YAPPAROriginalDbColumnName(){
				
					return "CND_YAPPAR";
				
				}

				
			    public String CND_TRAFAT;

				public String getCND_TRAFAT () {
					return this.CND_TRAFAT;
				}

				public Boolean CND_TRAFATIsNullable(){
				    return false;
				}
				public Boolean CND_TRAFATIsKey(){
				    return false;
				}
				public Integer CND_TRAFATLength(){
				    return 1;
				}
				public Integer CND_TRAFATPrecision(){
				    return 0;
				}
				public String CND_TRAFATDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAFATComment(){
				
				    return "";
				
				}
				public String CND_TRAFATPattern(){
				
					return "";
				
				}
				public String CND_TRAFATOriginalDbColumnName(){
				
					return "CND_TRAFAT";
				
				}

				
			    public String CND_TRAMAR;

				public String getCND_TRAMAR () {
					return this.CND_TRAMAR;
				}

				public Boolean CND_TRAMARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAMARIsKey(){
				    return false;
				}
				public Integer CND_TRAMARLength(){
				    return 1;
				}
				public Integer CND_TRAMARPrecision(){
				    return 0;
				}
				public String CND_TRAMARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAMARComment(){
				
				    return "";
				
				}
				public String CND_TRAMARPattern(){
				
					return "";
				
				}
				public String CND_TRAMAROriginalDbColumnName(){
				
					return "CND_TRAMAR";
				
				}

				
			    public String CND_TRAPAR;

				public String getCND_TRAPAR () {
					return this.CND_TRAPAR;
				}

				public Boolean CND_TRAPARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAPARIsKey(){
				    return false;
				}
				public Integer CND_TRAPARLength(){
				    return 1;
				}
				public Integer CND_TRAPARPrecision(){
				    return 0;
				}
				public String CND_TRAPARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAPARComment(){
				
				    return "";
				
				}
				public String CND_TRAPARPattern(){
				
					return "";
				
				}
				public String CND_TRAPAROriginalDbColumnName(){
				
					return "CND_TRAPAR";
				
				}

				
			    public String CND_CNDESP;

				public String getCND_CNDESP () {
					return this.CND_CNDESP;
				}

				public Boolean CND_CNDESPIsNullable(){
				    return true;
				}
				public Boolean CND_CNDESPIsKey(){
				    return false;
				}
				public Integer CND_CNDESPLength(){
				    return 1;
				}
				public Integer CND_CNDESPPrecision(){
				    return 0;
				}
				public String CND_CNDESPDefault(){
				
					return "'N'";
				
				}
				public String CND_CNDESPComment(){
				
				    return "";
				
				}
				public String CND_CNDESPPattern(){
				
					return "";
				
				}
				public String CND_CNDESPOriginalDbColumnName(){
				
					return "CND_CNDESP";
				
				}

				
			    public BigDecimal CND_DESMVM;

				public BigDecimal getCND_DESMVM () {
					return this.CND_DESMVM;
				}

				public Boolean CND_DESMVMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMVMIsKey(){
				    return false;
				}
				public Integer CND_DESMVMLength(){
				    return 12;
				}
				public Integer CND_DESMVMPrecision(){
				    return 2;
				}
				public String CND_DESMVMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMVMComment(){
				
				    return "";
				
				}
				public String CND_DESMVMPattern(){
				
					return "";
				
				}
				public String CND_DESMVMOriginalDbColumnName(){
				
					return "CND_DESMVM";
				
				}

				
			    public BigDecimal CND_DESMSM;

				public BigDecimal getCND_DESMSM () {
					return this.CND_DESMSM;
				}

				public Boolean CND_DESMSMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSMIsKey(){
				    return false;
				}
				public Integer CND_DESMSMLength(){
				    return 12;
				}
				public Integer CND_DESMSMPrecision(){
				    return 2;
				}
				public String CND_DESMSMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSMComment(){
				
				    return "";
				
				}
				public String CND_DESMSMPattern(){
				
					return "";
				
				}
				public String CND_DESMSMOriginalDbColumnName(){
				
					return "CND_DESMSM";
				
				}

				
			    public BigDecimal CND_DESMGM;

				public BigDecimal getCND_DESMGM () {
					return this.CND_DESMGM;
				}

				public Boolean CND_DESMGMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGMIsKey(){
				    return false;
				}
				public Integer CND_DESMGMLength(){
				    return 12;
				}
				public Integer CND_DESMGMPrecision(){
				    return 2;
				}
				public String CND_DESMGMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGMComment(){
				
				    return "";
				
				}
				public String CND_DESMGMPattern(){
				
					return "";
				
				}
				public String CND_DESMGMOriginalDbColumnName(){
				
					return "CND_DESMGM";
				
				}

				
			    public String CND_RECPIX;

				public String getCND_RECPIX () {
					return this.CND_RECPIX;
				}

				public Boolean CND_RECPIXIsNullable(){
				    return true;
				}
				public Boolean CND_RECPIXIsKey(){
				    return false;
				}
				public Integer CND_RECPIXLength(){
				    return 1;
				}
				public Integer CND_RECPIXPrecision(){
				    return 0;
				}
				public String CND_RECPIXDefault(){
				
					return "'N'";
				
				}
				public String CND_RECPIXComment(){
				
				    return "";
				
				}
				public String CND_RECPIXPattern(){
				
					return "";
				
				}
				public String CND_RECPIXOriginalDbColumnName(){
				
					return "CND_RECPIX";
				
				}

				
			    public String CND_TRACNC;

				public String getCND_TRACNC () {
					return this.CND_TRACNC;
				}

				public Boolean CND_TRACNCIsNullable(){
				    return true;
				}
				public Boolean CND_TRACNCIsKey(){
				    return false;
				}
				public Integer CND_TRACNCLength(){
				    return 1;
				}
				public Integer CND_TRACNCPrecision(){
				    return 0;
				}
				public String CND_TRACNCDefault(){
				
					return "'S'";
				
				}
				public String CND_TRACNCComment(){
				
				    return "";
				
				}
				public String CND_TRACNCPattern(){
				
					return "";
				
				}
				public String CND_TRACNCOriginalDbColumnName(){
				
					return "CND_TRACNC";
				
				}

				
			    public String CND_TRORFI;

				public String getCND_TRORFI () {
					return this.CND_TRORFI;
				}

				public Boolean CND_TRORFIIsNullable(){
				    return true;
				}
				public Boolean CND_TRORFIIsKey(){
				    return false;
				}
				public Integer CND_TRORFILength(){
				    return 1;
				}
				public Integer CND_TRORFIPrecision(){
				    return 0;
				}
				public String CND_TRORFIDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORFIComment(){
				
				    return "";
				
				}
				public String CND_TRORFIPattern(){
				
					return "";
				
				}
				public String CND_TRORFIOriginalDbColumnName(){
				
					return "CND_TRORFI";
				
				}

				
			    public String CND_TRORPF;

				public String getCND_TRORPF () {
					return this.CND_TRORPF;
				}

				public Boolean CND_TRORPFIsNullable(){
				    return true;
				}
				public Boolean CND_TRORPFIsKey(){
				    return false;
				}
				public Integer CND_TRORPFLength(){
				    return 1;
				}
				public Integer CND_TRORPFPrecision(){
				    return 0;
				}
				public String CND_TRORPFDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORPFComment(){
				
				    return "";
				
				}
				public String CND_TRORPFPattern(){
				
					return "";
				
				}
				public String CND_TRORPFOriginalDbColumnName(){
				
					return "CND_TRORPF";
				
				}

				
			    public String CND_DIACOR;

				public String getCND_DIACOR () {
					return this.CND_DIACOR;
				}

				public Boolean CND_DIACORIsNullable(){
				    return true;
				}
				public Boolean CND_DIACORIsKey(){
				    return false;
				}
				public Integer CND_DIACORLength(){
				    return 1;
				}
				public Integer CND_DIACORPrecision(){
				    return 0;
				}
				public String CND_DIACORDefault(){
				
					return "'N'";
				
				}
				public String CND_DIACORComment(){
				
				    return "";
				
				}
				public String CND_DIACORPattern(){
				
					return "";
				
				}
				public String CND_DIACOROriginalDbColumnName(){
				
					return "CND_DIACOR";
				
				}

				
			    public BigDecimal CND_PERVEN;

				public BigDecimal getCND_PERVEN () {
					return this.CND_PERVEN;
				}

				public Boolean CND_PERVENIsNullable(){
				    return true;
				}
				public Boolean CND_PERVENIsKey(){
				    return false;
				}
				public Integer CND_PERVENLength(){
				    return 12;
				}
				public Integer CND_PERVENPrecision(){
				    return 2;
				}
				public String CND_PERVENDefault(){
				
					return "0.00";
				
				}
				public String CND_PERVENComment(){
				
				    return "";
				
				}
				public String CND_PERVENPattern(){
				
					return "";
				
				}
				public String CND_PERVENOriginalDbColumnName(){
				
					return "CND_PERVEN";
				
				}

				
			    public String CND_GERLNK;

				public String getCND_GERLNK () {
					return this.CND_GERLNK;
				}

				public Boolean CND_GERLNKIsNullable(){
				    return true;
				}
				public Boolean CND_GERLNKIsKey(){
				    return false;
				}
				public Integer CND_GERLNKLength(){
				    return 1;
				}
				public Integer CND_GERLNKPrecision(){
				    return 0;
				}
				public String CND_GERLNKDefault(){
				
					return "'N'";
				
				}
				public String CND_GERLNKComment(){
				
				    return "";
				
				}
				public String CND_GERLNKPattern(){
				
					return "";
				
				}
				public String CND_GERLNKOriginalDbColumnName(){
				
					return "CND_GERLNK";
				
				}

				
			    public String CND_ESPFAT;

				public String getCND_ESPFAT () {
					return this.CND_ESPFAT;
				}

				public Boolean CND_ESPFATIsNullable(){
				    return true;
				}
				public Boolean CND_ESPFATIsKey(){
				    return false;
				}
				public Integer CND_ESPFATLength(){
				    return 3;
				}
				public Integer CND_ESPFATPrecision(){
				    return 0;
				}
				public String CND_ESPFATDefault(){
				
					return "'NF'";
				
				}
				public String CND_ESPFATComment(){
				
				    return "";
				
				}
				public String CND_ESPFATPattern(){
				
					return "";
				
				}
				public String CND_ESPFATOriginalDbColumnName(){
				
					return "CND_ESPFAT";
				
				}

				
			    public String CND_COBPME;

				public String getCND_COBPME () {
					return this.CND_COBPME;
				}

				public Boolean CND_COBPMEIsNullable(){
				    return false;
				}
				public Boolean CND_COBPMEIsKey(){
				    return false;
				}
				public Integer CND_COBPMELength(){
				    return 1;
				}
				public Integer CND_COBPMEPrecision(){
				    return 0;
				}
				public String CND_COBPMEDefault(){
				
					return "'N'";
				
				}
				public String CND_COBPMEComment(){
				
				    return "";
				
				}
				public String CND_COBPMEPattern(){
				
					return "";
				
				}
				public String CND_COBPMEOriginalDbColumnName(){
				
					return "CND_COBPME";
				
				}

				
			    public String CND_EXPTAB;

				public String getCND_EXPTAB () {
					return this.CND_EXPTAB;
				}

				public Boolean CND_EXPTABIsNullable(){
				    return true;
				}
				public Boolean CND_EXPTABIsKey(){
				    return false;
				}
				public Integer CND_EXPTABLength(){
				    return 1;
				}
				public Integer CND_EXPTABPrecision(){
				    return 0;
				}
				public String CND_EXPTABDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPTABComment(){
				
				    return "";
				
				}
				public String CND_EXPTABPattern(){
				
					return "";
				
				}
				public String CND_EXPTABOriginalDbColumnName(){
				
					return "CND_EXPTAB";
				
				}

				
			    public String CND_PMEDVC;

				public String getCND_PMEDVC () {
					return this.CND_PMEDVC;
				}

				public Boolean CND_PMEDVCIsNullable(){
				    return true;
				}
				public Boolean CND_PMEDVCIsKey(){
				    return false;
				}
				public Integer CND_PMEDVCLength(){
				    return 2;
				}
				public Integer CND_PMEDVCPrecision(){
				    return 0;
				}
				public String CND_PMEDVCDefault(){
				
					return "'0'";
				
				}
				public String CND_PMEDVCComment(){
				
				    return "";
				
				}
				public String CND_PMEDVCPattern(){
				
					return "";
				
				}
				public String CND_PMEDVCOriginalDbColumnName(){
				
					return "CND_PMEDVC";
				
				}

				
			    public String CND_PMEQPA;

				public String getCND_PMEQPA () {
					return this.CND_PMEQPA;
				}

				public Boolean CND_PMEQPAIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPAIsKey(){
				    return false;
				}
				public Integer CND_PMEQPALength(){
				    return 30;
				}
				public Integer CND_PMEQPAPrecision(){
				    return 0;
				}
				public String CND_PMEQPADefault(){
				
					return null;
				
				}
				public String CND_PMEQPAComment(){
				
				    return "";
				
				}
				public String CND_PMEQPAPattern(){
				
					return "";
				
				}
				public String CND_PMEQPAOriginalDbColumnName(){
				
					return "CND_PMEQPA";
				
				}

				
			    public String CND_PMEQPJ;

				public String getCND_PMEQPJ () {
					return this.CND_PMEQPJ;
				}

				public Boolean CND_PMEQPJIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPJIsKey(){
				    return false;
				}
				public Integer CND_PMEQPJLength(){
				    return 40;
				}
				public Integer CND_PMEQPJPrecision(){
				    return 0;
				}
				public String CND_PMEQPJDefault(){
				
					return null;
				
				}
				public String CND_PMEQPJComment(){
				
				    return "";
				
				}
				public String CND_PMEQPJPattern(){
				
					return "";
				
				}
				public String CND_PMEQPJOriginalDbColumnName(){
				
					return "CND_PMEQPJ";
				
				}

				
			    public BigDecimal CND_PMEJCT;

				public BigDecimal getCND_PMEJCT () {
					return this.CND_PMEJCT;
				}

				public Boolean CND_PMEJCTIsNullable(){
				    return true;
				}
				public Boolean CND_PMEJCTIsKey(){
				    return false;
				}
				public Integer CND_PMEJCTLength(){
				    return 12;
				}
				public Integer CND_PMEJCTPrecision(){
				    return 2;
				}
				public String CND_PMEJCTDefault(){
				
					return "0.00";
				
				}
				public String CND_PMEJCTComment(){
				
				    return "";
				
				}
				public String CND_PMEJCTPattern(){
				
					return "";
				
				}
				public String CND_PMEJCTOriginalDbColumnName(){
				
					return "CND_PMEJCT";
				
				}

				
			    public String CND_MODIVN;

				public String getCND_MODIVN () {
					return this.CND_MODIVN;
				}

				public Boolean CND_MODIVNIsNullable(){
				    return true;
				}
				public Boolean CND_MODIVNIsKey(){
				    return false;
				}
				public Integer CND_MODIVNLength(){
				    return 1;
				}
				public Integer CND_MODIVNPrecision(){
				    return 0;
				}
				public String CND_MODIVNDefault(){
				
					return "'T'";
				
				}
				public String CND_MODIVNComment(){
				
				    return "";
				
				}
				public String CND_MODIVNPattern(){
				
					return "";
				
				}
				public String CND_MODIVNOriginalDbColumnName(){
				
					return "CND_MODIVN";
				
				}

				
			    public String CND_PETRCD;

				public String getCND_PETRCD () {
					return this.CND_PETRCD;
				}

				public Boolean CND_PETRCDIsNullable(){
				    return false;
				}
				public Boolean CND_PETRCDIsKey(){
				    return false;
				}
				public Integer CND_PETRCDLength(){
				    return 1;
				}
				public Integer CND_PETRCDPrecision(){
				    return 0;
				}
				public String CND_PETRCDDefault(){
				
					return "'N'";
				
				}
				public String CND_PETRCDComment(){
				
				    return "";
				
				}
				public String CND_PETRCDPattern(){
				
					return "";
				
				}
				public String CND_PETRCDOriginalDbColumnName(){
				
					return "CND_PETRCD";
				
				}

				
			    public Integer CND_EMIBOL;

				public Integer getCND_EMIBOL () {
					return this.CND_EMIBOL;
				}

				public Boolean CND_EMIBOLIsNullable(){
				    return true;
				}
				public Boolean CND_EMIBOLIsKey(){
				    return false;
				}
				public Integer CND_EMIBOLLength(){
				    return 10;
				}
				public Integer CND_EMIBOLPrecision(){
				    return 0;
				}
				public String CND_EMIBOLDefault(){
				
					return "2";
				
				}
				public String CND_EMIBOLComment(){
				
				    return "";
				
				}
				public String CND_EMIBOLPattern(){
				
					return "";
				
				}
				public String CND_EMIBOLOriginalDbColumnName(){
				
					return "CND_EMIBOL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TABLEStruct other = (TABLEStruct) obj;
		
						if (this.AUTOINCREM == null) {
							if (other.AUTOINCREM != null)
								return false;
						
						} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TABLEStruct other) {

		other.CND_CODIGO = this.CND_CODIGO;
	            other.CND_DESCRI = this.CND_DESCRI;
	            other.CND_CNDPAG = this.CND_CNDPAG;
	            other.CND_TIPFOR = this.CND_TIPFOR;
	            other.CND_CODPOR = this.CND_CODPOR;
	            other.AUTOINCREM = this.AUTOINCREM;
	            other.CND_CODEMP = this.CND_CODEMP;
	            other.CND_DESMAX = this.CND_DESMAX;
	            other.CND_ABADES = this.CND_ABADES;
	            other.CND_ABDECC = this.CND_ABDECC;
	            other.CND_TXJURO = this.CND_TXJURO;
	            other.CND_CODFPG = this.CND_CODFPG;
	            other.CND_PRZMED = this.CND_PRZMED;
	            other.CND_FATACA = this.CND_FATACA;
	            other.CND_INFANA = this.CND_INFANA;
	            other.CND_STATUS = this.CND_STATUS;
	            other.CND_DESMGE = this.CND_DESMGE;
	            other.CND_ALTPRE = this.CND_ALTPRE;
	            other.CND_CODVEL = this.CND_CODVEL;
	            other.CND_DESPFL = this.CND_DESPFL;
	            other.CND_DIAFIX = this.CND_DIAFIX;
	            other.CND_IMPBOL = this.CND_IMPBOL;
	            other.CND_LIMCRE = this.CND_LIMCRE;
	            other.CND_PERCOM = this.CND_PERCOM;
	            other.CND_PERDPO = this.CND_PERDPO;
	            other.CND_QTDDAV = this.CND_QTDDAV;
	            other.CND_QTDPAR = this.CND_QTDPAR;
	            other.CND_SEMENT = this.CND_SEMENT;
	            other.CND_SENCND = this.CND_SENCND;
	            other.CND_VALMIN = this.CND_VALMIN;
	            other.CND_FATMAX = this.CND_FATMAX;
	            other.CND_FATMIN = this.CND_FATMIN;
	            other.CND_IMPFAT = this.CND_IMPFAT;
	            other.CND_MARMAX = this.CND_MARMAX;
	            other.CND_MARMIN = this.CND_MARMIN;
	            other.CND_PEDEAC = this.CND_PEDEAC;
	            other.CND_TABPRE = this.CND_TABPRE;
	            other.CND_TIPFAT = this.CND_TIPFAT;
	            other.CND_JURPRO = this.CND_JURPRO;
	            other.CND_TIPCND = this.CND_TIPCND;
	            other.CND_ULTALT = this.CND_ULTALT;
	            other.CND_PRAMIN = this.CND_PRAMIN;
	            other.CND_DESMSU = this.CND_DESMSU;
	            other.CND_EMPACE = this.CND_EMPACE;
	            other.CND_EXPFSO = this.CND_EXPFSO;
	            other.CND_FPGNVL = this.CND_FPGNVL;
	            other.CND_LBPDOB = this.CND_LBPDOB;
	            other.CND_MAXCAR = this.CND_MAXCAR;
	            other.CND_MCOBDA = this.CND_MCOBDA;
	            other.CND_SENTRA = this.CND_SENTRA;
	            other.CND_TPFTDA = this.CND_TPFTDA;
	            other.CND_TRCLCR = this.CND_TRCLCR;
	            other.CND_TRTTVE = this.CND_TRTTVE;
	            other.CND_VRDAUV = this.CND_VRDAUV;
	            other.CND_VRDEAC = this.CND_VRDEAC;
	            other.CND_PARMAX = this.CND_PARMAX;
	            other.CND_PARMIN = this.CND_PARMIN;
	            other.CND_RETIRA = this.CND_RETIRA;
	            other.CND_ENTIME = this.CND_ENTIME;
	            other.CND_ENTFUT = this.CND_ENTFUT;
	            other.CND_QTDMAX = this.CND_QTDMAX;
	            other.CND_TRCLCB = this.CND_TRCLCB;
	            other.CND_EXPB2B = this.CND_EXPB2B;
	            other.CND_PRETAB = this.CND_PRETAB;
	            other.CND_LIMITE = this.CND_LIMITE;
	            other.CND_USADEP = this.CND_USADEP;
	            other.CND_RCX_F3 = this.CND_RCX_F3;
	            other.CND_COBYAP = this.CND_COBYAP;
	            other.CND_TRORCR = this.CND_TRORCR;
	            other.CND_TRORCB = this.CND_TRORCB;
	            other.CND_YAPTRA = this.CND_YAPTRA;
	            other.CND_YAPDIS = this.CND_YAPDIS;
	            other.CND_YAPPAR = this.CND_YAPPAR;
	            other.CND_TRAFAT = this.CND_TRAFAT;
	            other.CND_TRAMAR = this.CND_TRAMAR;
	            other.CND_TRAPAR = this.CND_TRAPAR;
	            other.CND_CNDESP = this.CND_CNDESP;
	            other.CND_DESMVM = this.CND_DESMVM;
	            other.CND_DESMSM = this.CND_DESMSM;
	            other.CND_DESMGM = this.CND_DESMGM;
	            other.CND_RECPIX = this.CND_RECPIX;
	            other.CND_TRACNC = this.CND_TRACNC;
	            other.CND_TRORFI = this.CND_TRORFI;
	            other.CND_TRORPF = this.CND_TRORPF;
	            other.CND_DIACOR = this.CND_DIACOR;
	            other.CND_PERVEN = this.CND_PERVEN;
	            other.CND_GERLNK = this.CND_GERLNK;
	            other.CND_ESPFAT = this.CND_ESPFAT;
	            other.CND_COBPME = this.CND_COBPME;
	            other.CND_EXPTAB = this.CND_EXPTAB;
	            other.CND_PMEDVC = this.CND_PMEDVC;
	            other.CND_PMEQPA = this.CND_PMEQPA;
	            other.CND_PMEQPJ = this.CND_PMEQPJ;
	            other.CND_PMEJCT = this.CND_PMEJCT;
	            other.CND_MODIVN = this.CND_MODIVN;
	            other.CND_PETRCD = this.CND_PETRCD;
	            other.CND_EMIBOL = this.CND_EMIBOL;
	            
	}

	public void copyKeysDataTo(TABLEStruct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CND_CODIGO="+CND_CODIGO);
		sb.append(",CND_DESCRI="+CND_DESCRI);
		sb.append(",CND_CNDPAG="+CND_CNDPAG);
		sb.append(",CND_TIPFOR="+CND_TIPFOR);
		sb.append(",CND_CODPOR="+CND_CODPOR);
		sb.append(",AUTOINCREM="+AUTOINCREM);
		sb.append(",CND_CODEMP="+CND_CODEMP);
		sb.append(",CND_DESMAX="+String.valueOf(CND_DESMAX));
		sb.append(",CND_ABADES="+CND_ABADES);
		sb.append(",CND_ABDECC="+CND_ABDECC);
		sb.append(",CND_TXJURO="+String.valueOf(CND_TXJURO));
		sb.append(",CND_CODFPG="+CND_CODFPG);
		sb.append(",CND_PRZMED="+String.valueOf(CND_PRZMED));
		sb.append(",CND_FATACA="+String.valueOf(CND_FATACA));
		sb.append(",CND_INFANA="+CND_INFANA);
		sb.append(",CND_STATUS="+CND_STATUS);
		sb.append(",CND_DESMGE="+String.valueOf(CND_DESMGE));
		sb.append(",CND_ALTPRE="+CND_ALTPRE);
		sb.append(",CND_CODVEL="+CND_CODVEL);
		sb.append(",CND_DESPFL="+CND_DESPFL);
		sb.append(",CND_DIAFIX="+String.valueOf(CND_DIAFIX));
		sb.append(",CND_IMPBOL="+CND_IMPBOL);
		sb.append(",CND_LIMCRE="+CND_LIMCRE);
		sb.append(",CND_PERCOM="+String.valueOf(CND_PERCOM));
		sb.append(",CND_PERDPO="+String.valueOf(CND_PERDPO));
		sb.append(",CND_QTDDAV="+String.valueOf(CND_QTDDAV));
		sb.append(",CND_QTDPAR="+String.valueOf(CND_QTDPAR));
		sb.append(",CND_SEMENT="+CND_SEMENT);
		sb.append(",CND_SENCND="+CND_SENCND);
		sb.append(",CND_VALMIN="+String.valueOf(CND_VALMIN));
		sb.append(",CND_FATMAX="+String.valueOf(CND_FATMAX));
		sb.append(",CND_FATMIN="+String.valueOf(CND_FATMIN));
		sb.append(",CND_IMPFAT="+CND_IMPFAT);
		sb.append(",CND_MARMAX="+String.valueOf(CND_MARMAX));
		sb.append(",CND_MARMIN="+String.valueOf(CND_MARMIN));
		sb.append(",CND_PEDEAC="+String.valueOf(CND_PEDEAC));
		sb.append(",CND_TABPRE="+CND_TABPRE);
		sb.append(",CND_TIPFAT="+CND_TIPFAT);
		sb.append(",CND_JURPRO="+CND_JURPRO);
		sb.append(",CND_TIPCND="+CND_TIPCND);
		sb.append(",CND_ULTALT="+String.valueOf(CND_ULTALT));
		sb.append(",CND_PRAMIN="+CND_PRAMIN);
		sb.append(",CND_DESMSU="+String.valueOf(CND_DESMSU));
		sb.append(",CND_EMPACE="+CND_EMPACE);
		sb.append(",CND_EXPFSO="+CND_EXPFSO);
		sb.append(",CND_FPGNVL="+CND_FPGNVL);
		sb.append(",CND_LBPDOB="+CND_LBPDOB);
		sb.append(",CND_MAXCAR="+String.valueOf(CND_MAXCAR));
		sb.append(",CND_MCOBDA="+CND_MCOBDA);
		sb.append(",CND_SENTRA="+CND_SENTRA);
		sb.append(",CND_TPFTDA="+CND_TPFTDA);
		sb.append(",CND_TRCLCR="+CND_TRCLCR);
		sb.append(",CND_TRTTVE="+CND_TRTTVE);
		sb.append(",CND_VRDAUV="+String.valueOf(CND_VRDAUV));
		sb.append(",CND_VRDEAC="+String.valueOf(CND_VRDEAC));
		sb.append(",CND_PARMAX="+String.valueOf(CND_PARMAX));
		sb.append(",CND_PARMIN="+String.valueOf(CND_PARMIN));
		sb.append(",CND_RETIRA="+CND_RETIRA);
		sb.append(",CND_ENTIME="+CND_ENTIME);
		sb.append(",CND_ENTFUT="+CND_ENTFUT);
		sb.append(",CND_QTDMAX="+String.valueOf(CND_QTDMAX));
		sb.append(",CND_TRCLCB="+CND_TRCLCB);
		sb.append(",CND_EXPB2B="+CND_EXPB2B);
		sb.append(",CND_PRETAB="+CND_PRETAB);
		sb.append(",CND_LIMITE="+String.valueOf(CND_LIMITE));
		sb.append(",CND_USADEP="+CND_USADEP);
		sb.append(",CND_RCX_F3="+CND_RCX_F3);
		sb.append(",CND_COBYAP="+CND_COBYAP);
		sb.append(",CND_TRORCR="+CND_TRORCR);
		sb.append(",CND_TRORCB="+CND_TRORCB);
		sb.append(",CND_YAPTRA="+CND_YAPTRA);
		sb.append(",CND_YAPDIS="+CND_YAPDIS);
		sb.append(",CND_YAPPAR="+String.valueOf(CND_YAPPAR));
		sb.append(",CND_TRAFAT="+CND_TRAFAT);
		sb.append(",CND_TRAMAR="+CND_TRAMAR);
		sb.append(",CND_TRAPAR="+CND_TRAPAR);
		sb.append(",CND_CNDESP="+CND_CNDESP);
		sb.append(",CND_DESMVM="+String.valueOf(CND_DESMVM));
		sb.append(",CND_DESMSM="+String.valueOf(CND_DESMSM));
		sb.append(",CND_DESMGM="+String.valueOf(CND_DESMGM));
		sb.append(",CND_RECPIX="+CND_RECPIX);
		sb.append(",CND_TRACNC="+CND_TRACNC);
		sb.append(",CND_TRORFI="+CND_TRORFI);
		sb.append(",CND_TRORPF="+CND_TRORPF);
		sb.append(",CND_DIACOR="+CND_DIACOR);
		sb.append(",CND_PERVEN="+String.valueOf(CND_PERVEN));
		sb.append(",CND_GERLNK="+CND_GERLNK);
		sb.append(",CND_ESPFAT="+CND_ESPFAT);
		sb.append(",CND_COBPME="+CND_COBPME);
		sb.append(",CND_EXPTAB="+CND_EXPTAB);
		sb.append(",CND_PMEDVC="+CND_PMEDVC);
		sb.append(",CND_PMEQPA="+CND_PMEQPA);
		sb.append(",CND_PMEQPJ="+CND_PMEQPJ);
		sb.append(",CND_PMEJCT="+String.valueOf(CND_PMEJCT));
		sb.append(",CND_MODIVN="+CND_MODIVN);
		sb.append(",CND_PETRCD="+CND_PETRCD);
		sb.append(",CND_EMIBOL="+String.valueOf(CND_EMIBOL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TABLEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUTOINCREM, other.AUTOINCREM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String CND_CODIGO;

				public String getCND_CODIGO () {
					return this.CND_CODIGO;
				}

				public Boolean CND_CODIGOIsNullable(){
				    return false;
				}
				public Boolean CND_CODIGOIsKey(){
				    return false;
				}
				public Integer CND_CODIGOLength(){
				    return 3;
				}
				public Integer CND_CODIGOPrecision(){
				    return 0;
				}
				public String CND_CODIGODefault(){
				
					return null;
				
				}
				public String CND_CODIGOComment(){
				
				    return "";
				
				}
				public String CND_CODIGOPattern(){
				
					return "";
				
				}
				public String CND_CODIGOOriginalDbColumnName(){
				
					return "CND_CODIGO";
				
				}

				
			    public String CND_DESCRI;

				public String getCND_DESCRI () {
					return this.CND_DESCRI;
				}

				public Boolean CND_DESCRIIsNullable(){
				    return true;
				}
				public Boolean CND_DESCRIIsKey(){
				    return false;
				}
				public Integer CND_DESCRILength(){
				    return 70;
				}
				public Integer CND_DESCRIPrecision(){
				    return 0;
				}
				public String CND_DESCRIDefault(){
				
					return null;
				
				}
				public String CND_DESCRIComment(){
				
				    return "";
				
				}
				public String CND_DESCRIPattern(){
				
					return "";
				
				}
				public String CND_DESCRIOriginalDbColumnName(){
				
					return "CND_DESCRI";
				
				}

				
			    public String CND_CNDPAG;

				public String getCND_CNDPAG () {
					return this.CND_CNDPAG;
				}

				public Boolean CND_CNDPAGIsNullable(){
				    return true;
				}
				public Boolean CND_CNDPAGIsKey(){
				    return false;
				}
				public Integer CND_CNDPAGLength(){
				    return 74;
				}
				public Integer CND_CNDPAGPrecision(){
				    return 0;
				}
				public String CND_CNDPAGDefault(){
				
					return null;
				
				}
				public String CND_CNDPAGComment(){
				
				    return "";
				
				}
				public String CND_CNDPAGPattern(){
				
					return "";
				
				}
				public String CND_CNDPAGOriginalDbColumnName(){
				
					return "CND_CNDPAG";
				
				}

				
			    public String CND_TIPFOR;

				public String getCND_TIPFOR () {
					return this.CND_TIPFOR;
				}

				public Boolean CND_TIPFORIsNullable(){
				    return false;
				}
				public Boolean CND_TIPFORIsKey(){
				    return false;
				}
				public Integer CND_TIPFORLength(){
				    return 10;
				}
				public Integer CND_TIPFORPrecision(){
				    return 0;
				}
				public String CND_TIPFORDefault(){
				
					return null;
				
				}
				public String CND_TIPFORComment(){
				
				    return "";
				
				}
				public String CND_TIPFORPattern(){
				
					return "";
				
				}
				public String CND_TIPFOROriginalDbColumnName(){
				
					return "CND_TIPFOR";
				
				}

				
			    public String CND_CODPOR;

				public String getCND_CODPOR () {
					return this.CND_CODPOR;
				}

				public Boolean CND_CODPORIsNullable(){
				    return true;
				}
				public Boolean CND_CODPORIsKey(){
				    return false;
				}
				public Integer CND_CODPORLength(){
				    return 5;
				}
				public Integer CND_CODPORPrecision(){
				    return 0;
				}
				public String CND_CODPORDefault(){
				
					return null;
				
				}
				public String CND_CODPORComment(){
				
				    return "";
				
				}
				public String CND_CODPORPattern(){
				
					return "";
				
				}
				public String CND_CODPOROriginalDbColumnName(){
				
					return "CND_CODPOR";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return false;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return 0;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public String CND_CODEMP;

				public String getCND_CODEMP () {
					return this.CND_CODEMP;
				}

				public Boolean CND_CODEMPIsNullable(){
				    return true;
				}
				public Boolean CND_CODEMPIsKey(){
				    return false;
				}
				public Integer CND_CODEMPLength(){
				    return 3;
				}
				public Integer CND_CODEMPPrecision(){
				    return 0;
				}
				public String CND_CODEMPDefault(){
				
					return null;
				
				}
				public String CND_CODEMPComment(){
				
				    return "";
				
				}
				public String CND_CODEMPPattern(){
				
					return "";
				
				}
				public String CND_CODEMPOriginalDbColumnName(){
				
					return "CND_CODEMP";
				
				}

				
			    public BigDecimal CND_DESMAX;

				public BigDecimal getCND_DESMAX () {
					return this.CND_DESMAX;
				}

				public Boolean CND_DESMAXIsNullable(){
				    return true;
				}
				public Boolean CND_DESMAXIsKey(){
				    return false;
				}
				public Integer CND_DESMAXLength(){
				    return 12;
				}
				public Integer CND_DESMAXPrecision(){
				    return 2;
				}
				public String CND_DESMAXDefault(){
				
					return null;
				
				}
				public String CND_DESMAXComment(){
				
				    return "";
				
				}
				public String CND_DESMAXPattern(){
				
					return "";
				
				}
				public String CND_DESMAXOriginalDbColumnName(){
				
					return "CND_DESMAX";
				
				}

				
			    public String CND_ABADES;

				public String getCND_ABADES () {
					return this.CND_ABADES;
				}

				public Boolean CND_ABADESIsNullable(){
				    return true;
				}
				public Boolean CND_ABADESIsKey(){
				    return false;
				}
				public Integer CND_ABADESLength(){
				    return 1;
				}
				public Integer CND_ABADESPrecision(){
				    return 0;
				}
				public String CND_ABADESDefault(){
				
					return null;
				
				}
				public String CND_ABADESComment(){
				
				    return "";
				
				}
				public String CND_ABADESPattern(){
				
					return "";
				
				}
				public String CND_ABADESOriginalDbColumnName(){
				
					return "CND_ABADES";
				
				}

				
			    public String CND_ABDECC;

				public String getCND_ABDECC () {
					return this.CND_ABDECC;
				}

				public Boolean CND_ABDECCIsNullable(){
				    return true;
				}
				public Boolean CND_ABDECCIsKey(){
				    return false;
				}
				public Integer CND_ABDECCLength(){
				    return 1;
				}
				public Integer CND_ABDECCPrecision(){
				    return 0;
				}
				public String CND_ABDECCDefault(){
				
					return null;
				
				}
				public String CND_ABDECCComment(){
				
				    return "";
				
				}
				public String CND_ABDECCPattern(){
				
					return "";
				
				}
				public String CND_ABDECCOriginalDbColumnName(){
				
					return "CND_ABDECC";
				
				}

				
			    public BigDecimal CND_TXJURO;

				public BigDecimal getCND_TXJURO () {
					return this.CND_TXJURO;
				}

				public Boolean CND_TXJUROIsNullable(){
				    return true;
				}
				public Boolean CND_TXJUROIsKey(){
				    return false;
				}
				public Integer CND_TXJUROLength(){
				    return 12;
				}
				public Integer CND_TXJUROPrecision(){
				    return 4;
				}
				public String CND_TXJURODefault(){
				
					return null;
				
				}
				public String CND_TXJUROComment(){
				
				    return "";
				
				}
				public String CND_TXJUROPattern(){
				
					return "";
				
				}
				public String CND_TXJUROOriginalDbColumnName(){
				
					return "CND_TXJURO";
				
				}

				
			    public String CND_CODFPG;

				public String getCND_CODFPG () {
					return this.CND_CODFPG;
				}

				public Boolean CND_CODFPGIsNullable(){
				    return true;
				}
				public Boolean CND_CODFPGIsKey(){
				    return false;
				}
				public Integer CND_CODFPGLength(){
				    return 3;
				}
				public Integer CND_CODFPGPrecision(){
				    return 0;
				}
				public String CND_CODFPGDefault(){
				
					return null;
				
				}
				public String CND_CODFPGComment(){
				
				    return "";
				
				}
				public String CND_CODFPGPattern(){
				
					return "";
				
				}
				public String CND_CODFPGOriginalDbColumnName(){
				
					return "CND_CODFPG";
				
				}

				
			    public BigDecimal CND_PRZMED;

				public BigDecimal getCND_PRZMED () {
					return this.CND_PRZMED;
				}

				public Boolean CND_PRZMEDIsNullable(){
				    return true;
				}
				public Boolean CND_PRZMEDIsKey(){
				    return false;
				}
				public Integer CND_PRZMEDLength(){
				    return 12;
				}
				public Integer CND_PRZMEDPrecision(){
				    return 2;
				}
				public String CND_PRZMEDDefault(){
				
					return null;
				
				}
				public String CND_PRZMEDComment(){
				
				    return "";
				
				}
				public String CND_PRZMEDPattern(){
				
					return "";
				
				}
				public String CND_PRZMEDOriginalDbColumnName(){
				
					return "CND_PRZMED";
				
				}

				
			    public BigDecimal CND_FATACA;

				public BigDecimal getCND_FATACA () {
					return this.CND_FATACA;
				}

				public Boolean CND_FATACAIsNullable(){
				    return true;
				}
				public Boolean CND_FATACAIsKey(){
				    return false;
				}
				public Integer CND_FATACALength(){
				    return 5;
				}
				public Integer CND_FATACAPrecision(){
				    return 4;
				}
				public String CND_FATACADefault(){
				
					return null;
				
				}
				public String CND_FATACAComment(){
				
				    return "";
				
				}
				public String CND_FATACAPattern(){
				
					return "";
				
				}
				public String CND_FATACAOriginalDbColumnName(){
				
					return "CND_FATACA";
				
				}

				
			    public String CND_INFANA;

				public String getCND_INFANA () {
					return this.CND_INFANA;
				}

				public Boolean CND_INFANAIsNullable(){
				    return true;
				}
				public Boolean CND_INFANAIsKey(){
				    return false;
				}
				public Integer CND_INFANALength(){
				    return 1;
				}
				public Integer CND_INFANAPrecision(){
				    return 0;
				}
				public String CND_INFANADefault(){
				
					return "'S'";
				
				}
				public String CND_INFANAComment(){
				
				    return "";
				
				}
				public String CND_INFANAPattern(){
				
					return "";
				
				}
				public String CND_INFANAOriginalDbColumnName(){
				
					return "CND_INFANA";
				
				}

				
			    public String CND_STATUS;

				public String getCND_STATUS () {
					return this.CND_STATUS;
				}

				public Boolean CND_STATUSIsNullable(){
				    return true;
				}
				public Boolean CND_STATUSIsKey(){
				    return false;
				}
				public Integer CND_STATUSLength(){
				    return 1;
				}
				public Integer CND_STATUSPrecision(){
				    return 0;
				}
				public String CND_STATUSDefault(){
				
					return "'A'";
				
				}
				public String CND_STATUSComment(){
				
				    return "";
				
				}
				public String CND_STATUSPattern(){
				
					return "";
				
				}
				public String CND_STATUSOriginalDbColumnName(){
				
					return "CND_STATUS";
				
				}

				
			    public BigDecimal CND_DESMGE;

				public BigDecimal getCND_DESMGE () {
					return this.CND_DESMGE;
				}

				public Boolean CND_DESMGEIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGEIsKey(){
				    return false;
				}
				public Integer CND_DESMGELength(){
				    return 12;
				}
				public Integer CND_DESMGEPrecision(){
				    return 2;
				}
				public String CND_DESMGEDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGEComment(){
				
				    return "";
				
				}
				public String CND_DESMGEPattern(){
				
					return "";
				
				}
				public String CND_DESMGEOriginalDbColumnName(){
				
					return "CND_DESMGE";
				
				}

				
			    public String CND_ALTPRE;

				public String getCND_ALTPRE () {
					return this.CND_ALTPRE;
				}

				public Boolean CND_ALTPREIsNullable(){
				    return true;
				}
				public Boolean CND_ALTPREIsKey(){
				    return false;
				}
				public Integer CND_ALTPRELength(){
				    return 1;
				}
				public Integer CND_ALTPREPrecision(){
				    return 0;
				}
				public String CND_ALTPREDefault(){
				
					return "'S'";
				
				}
				public String CND_ALTPREComment(){
				
				    return "";
				
				}
				public String CND_ALTPREPattern(){
				
					return "";
				
				}
				public String CND_ALTPREOriginalDbColumnName(){
				
					return "CND_ALTPRE";
				
				}

				
			    public String CND_CODVEL;

				public String getCND_CODVEL () {
					return this.CND_CODVEL;
				}

				public Boolean CND_CODVELIsNullable(){
				    return true;
				}
				public Boolean CND_CODVELIsKey(){
				    return false;
				}
				public Integer CND_CODVELLength(){
				    return 20;
				}
				public Integer CND_CODVELPrecision(){
				    return 0;
				}
				public String CND_CODVELDefault(){
				
					return null;
				
				}
				public String CND_CODVELComment(){
				
				    return "";
				
				}
				public String CND_CODVELPattern(){
				
					return "";
				
				}
				public String CND_CODVELOriginalDbColumnName(){
				
					return "CND_CODVEL";
				
				}

				
			    public String CND_DESPFL;

				public String getCND_DESPFL () {
					return this.CND_DESPFL;
				}

				public Boolean CND_DESPFLIsNullable(){
				    return true;
				}
				public Boolean CND_DESPFLIsKey(){
				    return false;
				}
				public Integer CND_DESPFLLength(){
				    return 255;
				}
				public Integer CND_DESPFLPrecision(){
				    return 0;
				}
				public String CND_DESPFLDefault(){
				
					return null;
				
				}
				public String CND_DESPFLComment(){
				
				    return "";
				
				}
				public String CND_DESPFLPattern(){
				
					return "";
				
				}
				public String CND_DESPFLOriginalDbColumnName(){
				
					return "CND_DESPFL";
				
				}

				
			    public Integer CND_DIAFIX;

				public Integer getCND_DIAFIX () {
					return this.CND_DIAFIX;
				}

				public Boolean CND_DIAFIXIsNullable(){
				    return true;
				}
				public Boolean CND_DIAFIXIsKey(){
				    return false;
				}
				public Integer CND_DIAFIXLength(){
				    return 10;
				}
				public Integer CND_DIAFIXPrecision(){
				    return 0;
				}
				public String CND_DIAFIXDefault(){
				
					return null;
				
				}
				public String CND_DIAFIXComment(){
				
				    return "";
				
				}
				public String CND_DIAFIXPattern(){
				
					return "";
				
				}
				public String CND_DIAFIXOriginalDbColumnName(){
				
					return "CND_DIAFIX";
				
				}

				
			    public String CND_IMPBOL;

				public String getCND_IMPBOL () {
					return this.CND_IMPBOL;
				}

				public Boolean CND_IMPBOLIsNullable(){
				    return true;
				}
				public Boolean CND_IMPBOLIsKey(){
				    return false;
				}
				public Integer CND_IMPBOLLength(){
				    return 1;
				}
				public Integer CND_IMPBOLPrecision(){
				    return 0;
				}
				public String CND_IMPBOLDefault(){
				
					return "'S'";
				
				}
				public String CND_IMPBOLComment(){
				
				    return "";
				
				}
				public String CND_IMPBOLPattern(){
				
					return "";
				
				}
				public String CND_IMPBOLOriginalDbColumnName(){
				
					return "CND_IMPBOL";
				
				}

				
			    public String CND_LIMCRE;

				public String getCND_LIMCRE () {
					return this.CND_LIMCRE;
				}

				public Boolean CND_LIMCREIsNullable(){
				    return true;
				}
				public Boolean CND_LIMCREIsKey(){
				    return false;
				}
				public Integer CND_LIMCRELength(){
				    return 1;
				}
				public Integer CND_LIMCREPrecision(){
				    return 0;
				}
				public String CND_LIMCREDefault(){
				
					return "'S'";
				
				}
				public String CND_LIMCREComment(){
				
				    return "";
				
				}
				public String CND_LIMCREPattern(){
				
					return "";
				
				}
				public String CND_LIMCREOriginalDbColumnName(){
				
					return "CND_LIMCRE";
				
				}

				
			    public BigDecimal CND_PERCOM;

				public BigDecimal getCND_PERCOM () {
					return this.CND_PERCOM;
				}

				public Boolean CND_PERCOMIsNullable(){
				    return true;
				}
				public Boolean CND_PERCOMIsKey(){
				    return false;
				}
				public Integer CND_PERCOMLength(){
				    return 12;
				}
				public Integer CND_PERCOMPrecision(){
				    return 2;
				}
				public String CND_PERCOMDefault(){
				
					return null;
				
				}
				public String CND_PERCOMComment(){
				
				    return "";
				
				}
				public String CND_PERCOMPattern(){
				
					return "";
				
				}
				public String CND_PERCOMOriginalDbColumnName(){
				
					return "CND_PERCOM";
				
				}

				
			    public BigDecimal CND_PERDPO;

				public BigDecimal getCND_PERDPO () {
					return this.CND_PERDPO;
				}

				public Boolean CND_PERDPOIsNullable(){
				    return true;
				}
				public Boolean CND_PERDPOIsKey(){
				    return false;
				}
				public Integer CND_PERDPOLength(){
				    return 12;
				}
				public Integer CND_PERDPOPrecision(){
				    return 2;
				}
				public String CND_PERDPODefault(){
				
					return "0.00";
				
				}
				public String CND_PERDPOComment(){
				
				    return "";
				
				}
				public String CND_PERDPOPattern(){
				
					return "";
				
				}
				public String CND_PERDPOOriginalDbColumnName(){
				
					return "CND_PERDPO";
				
				}

				
			    public Integer CND_QTDDAV;

				public Integer getCND_QTDDAV () {
					return this.CND_QTDDAV;
				}

				public Boolean CND_QTDDAVIsNullable(){
				    return true;
				}
				public Boolean CND_QTDDAVIsKey(){
				    return false;
				}
				public Integer CND_QTDDAVLength(){
				    return 10;
				}
				public Integer CND_QTDDAVPrecision(){
				    return 0;
				}
				public String CND_QTDDAVDefault(){
				
					return "0";
				
				}
				public String CND_QTDDAVComment(){
				
				    return "";
				
				}
				public String CND_QTDDAVPattern(){
				
					return "";
				
				}
				public String CND_QTDDAVOriginalDbColumnName(){
				
					return "CND_QTDDAV";
				
				}

				
			    public Integer CND_QTDPAR;

				public Integer getCND_QTDPAR () {
					return this.CND_QTDPAR;
				}

				public Boolean CND_QTDPARIsNullable(){
				    return true;
				}
				public Boolean CND_QTDPARIsKey(){
				    return false;
				}
				public Integer CND_QTDPARLength(){
				    return 10;
				}
				public Integer CND_QTDPARPrecision(){
				    return 0;
				}
				public String CND_QTDPARDefault(){
				
					return null;
				
				}
				public String CND_QTDPARComment(){
				
				    return "";
				
				}
				public String CND_QTDPARPattern(){
				
					return "";
				
				}
				public String CND_QTDPAROriginalDbColumnName(){
				
					return "CND_QTDPAR";
				
				}

				
			    public String CND_SEMENT;

				public String getCND_SEMENT () {
					return this.CND_SEMENT;
				}

				public Boolean CND_SEMENTIsNullable(){
				    return true;
				}
				public Boolean CND_SEMENTIsKey(){
				    return false;
				}
				public Integer CND_SEMENTLength(){
				    return 1;
				}
				public Integer CND_SEMENTPrecision(){
				    return 0;
				}
				public String CND_SEMENTDefault(){
				
					return "'N'";
				
				}
				public String CND_SEMENTComment(){
				
				    return "";
				
				}
				public String CND_SEMENTPattern(){
				
					return "";
				
				}
				public String CND_SEMENTOriginalDbColumnName(){
				
					return "CND_SEMENT";
				
				}

				
			    public String CND_SENCND;

				public String getCND_SENCND () {
					return this.CND_SENCND;
				}

				public Boolean CND_SENCNDIsNullable(){
				    return true;
				}
				public Boolean CND_SENCNDIsKey(){
				    return false;
				}
				public Integer CND_SENCNDLength(){
				    return 1;
				}
				public Integer CND_SENCNDPrecision(){
				    return 0;
				}
				public String CND_SENCNDDefault(){
				
					return "'S'";
				
				}
				public String CND_SENCNDComment(){
				
				    return "";
				
				}
				public String CND_SENCNDPattern(){
				
					return "";
				
				}
				public String CND_SENCNDOriginalDbColumnName(){
				
					return "CND_SENCND";
				
				}

				
			    public BigDecimal CND_VALMIN;

				public BigDecimal getCND_VALMIN () {
					return this.CND_VALMIN;
				}

				public Boolean CND_VALMINIsNullable(){
				    return true;
				}
				public Boolean CND_VALMINIsKey(){
				    return false;
				}
				public Integer CND_VALMINLength(){
				    return 12;
				}
				public Integer CND_VALMINPrecision(){
				    return 2;
				}
				public String CND_VALMINDefault(){
				
					return null;
				
				}
				public String CND_VALMINComment(){
				
				    return "";
				
				}
				public String CND_VALMINPattern(){
				
					return "";
				
				}
				public String CND_VALMINOriginalDbColumnName(){
				
					return "CND_VALMIN";
				
				}

				
			    public BigDecimal CND_FATMAX;

				public BigDecimal getCND_FATMAX () {
					return this.CND_FATMAX;
				}

				public Boolean CND_FATMAXIsNullable(){
				    return true;
				}
				public Boolean CND_FATMAXIsKey(){
				    return false;
				}
				public Integer CND_FATMAXLength(){
				    return 12;
				}
				public Integer CND_FATMAXPrecision(){
				    return 2;
				}
				public String CND_FATMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_FATMAXComment(){
				
				    return "";
				
				}
				public String CND_FATMAXPattern(){
				
					return "";
				
				}
				public String CND_FATMAXOriginalDbColumnName(){
				
					return "CND_FATMAX";
				
				}

				
			    public BigDecimal CND_FATMIN;

				public BigDecimal getCND_FATMIN () {
					return this.CND_FATMIN;
				}

				public Boolean CND_FATMINIsNullable(){
				    return true;
				}
				public Boolean CND_FATMINIsKey(){
				    return false;
				}
				public Integer CND_FATMINLength(){
				    return 12;
				}
				public Integer CND_FATMINPrecision(){
				    return 2;
				}
				public String CND_FATMINDefault(){
				
					return "0.00";
				
				}
				public String CND_FATMINComment(){
				
				    return "";
				
				}
				public String CND_FATMINPattern(){
				
					return "";
				
				}
				public String CND_FATMINOriginalDbColumnName(){
				
					return "CND_FATMIN";
				
				}

				
			    public String CND_IMPFAT;

				public String getCND_IMPFAT () {
					return this.CND_IMPFAT;
				}

				public Boolean CND_IMPFATIsNullable(){
				    return true;
				}
				public Boolean CND_IMPFATIsKey(){
				    return false;
				}
				public Integer CND_IMPFATLength(){
				    return 1;
				}
				public Integer CND_IMPFATPrecision(){
				    return 0;
				}
				public String CND_IMPFATDefault(){
				
					return "'N'";
				
				}
				public String CND_IMPFATComment(){
				
				    return "";
				
				}
				public String CND_IMPFATPattern(){
				
					return "";
				
				}
				public String CND_IMPFATOriginalDbColumnName(){
				
					return "CND_IMPFAT";
				
				}

				
			    public BigDecimal CND_MARMAX;

				public BigDecimal getCND_MARMAX () {
					return this.CND_MARMAX;
				}

				public Boolean CND_MARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_MARMAXIsKey(){
				    return false;
				}
				public Integer CND_MARMAXLength(){
				    return 12;
				}
				public Integer CND_MARMAXPrecision(){
				    return 2;
				}
				public String CND_MARMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_MARMAXComment(){
				
				    return "";
				
				}
				public String CND_MARMAXPattern(){
				
					return "";
				
				}
				public String CND_MARMAXOriginalDbColumnName(){
				
					return "CND_MARMAX";
				
				}

				
			    public BigDecimal CND_MARMIN;

				public BigDecimal getCND_MARMIN () {
					return this.CND_MARMIN;
				}

				public Boolean CND_MARMINIsNullable(){
				    return true;
				}
				public Boolean CND_MARMINIsKey(){
				    return false;
				}
				public Integer CND_MARMINLength(){
				    return 12;
				}
				public Integer CND_MARMINPrecision(){
				    return 2;
				}
				public String CND_MARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_MARMINComment(){
				
				    return "";
				
				}
				public String CND_MARMINPattern(){
				
					return "";
				
				}
				public String CND_MARMINOriginalDbColumnName(){
				
					return "CND_MARMIN";
				
				}

				
			    public BigDecimal CND_PEDEAC;

				public BigDecimal getCND_PEDEAC () {
					return this.CND_PEDEAC;
				}

				public Boolean CND_PEDEACIsNullable(){
				    return true;
				}
				public Boolean CND_PEDEACIsKey(){
				    return false;
				}
				public Integer CND_PEDEACLength(){
				    return 5;
				}
				public Integer CND_PEDEACPrecision(){
				    return 2;
				}
				public String CND_PEDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_PEDEACComment(){
				
				    return "";
				
				}
				public String CND_PEDEACPattern(){
				
					return "";
				
				}
				public String CND_PEDEACOriginalDbColumnName(){
				
					return "CND_PEDEAC";
				
				}

				
			    public String CND_TABPRE;

				public String getCND_TABPRE () {
					return this.CND_TABPRE;
				}

				public Boolean CND_TABPREIsNullable(){
				    return true;
				}
				public Boolean CND_TABPREIsKey(){
				    return false;
				}
				public Integer CND_TABPRELength(){
				    return 1;
				}
				public Integer CND_TABPREPrecision(){
				    return 0;
				}
				public String CND_TABPREDefault(){
				
					return null;
				
				}
				public String CND_TABPREComment(){
				
				    return "";
				
				}
				public String CND_TABPREPattern(){
				
					return "";
				
				}
				public String CND_TABPREOriginalDbColumnName(){
				
					return "CND_TABPRE";
				
				}

				
			    public String CND_TIPFAT;

				public String getCND_TIPFAT () {
					return this.CND_TIPFAT;
				}

				public Boolean CND_TIPFATIsNullable(){
				    return true;
				}
				public Boolean CND_TIPFATIsKey(){
				    return false;
				}
				public Integer CND_TIPFATLength(){
				    return 4;
				}
				public Integer CND_TIPFATPrecision(){
				    return 0;
				}
				public String CND_TIPFATDefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TIPFATComment(){
				
				    return "";
				
				}
				public String CND_TIPFATPattern(){
				
					return "";
				
				}
				public String CND_TIPFATOriginalDbColumnName(){
				
					return "CND_TIPFAT";
				
				}

				
			    public String CND_JURPRO;

				public String getCND_JURPRO () {
					return this.CND_JURPRO;
				}

				public Boolean CND_JURPROIsNullable(){
				    return true;
				}
				public Boolean CND_JURPROIsKey(){
				    return false;
				}
				public Integer CND_JURPROLength(){
				    return 1;
				}
				public Integer CND_JURPROPrecision(){
				    return 0;
				}
				public String CND_JURPRODefault(){
				
					return "'S'";
				
				}
				public String CND_JURPROComment(){
				
				    return "";
				
				}
				public String CND_JURPROPattern(){
				
					return "";
				
				}
				public String CND_JURPROOriginalDbColumnName(){
				
					return "CND_JURPRO";
				
				}

				
			    public String CND_TIPCND;

				public String getCND_TIPCND () {
					return this.CND_TIPCND;
				}

				public Boolean CND_TIPCNDIsNullable(){
				    return true;
				}
				public Boolean CND_TIPCNDIsKey(){
				    return false;
				}
				public Integer CND_TIPCNDLength(){
				    return 1;
				}
				public Integer CND_TIPCNDPrecision(){
				    return 0;
				}
				public String CND_TIPCNDDefault(){
				
					return "'V'";
				
				}
				public String CND_TIPCNDComment(){
				
				    return "";
				
				}
				public String CND_TIPCNDPattern(){
				
					return "";
				
				}
				public String CND_TIPCNDOriginalDbColumnName(){
				
					return "CND_TIPCND";
				
				}

				
			    public java.util.Date CND_ULTALT;

				public java.util.Date getCND_ULTALT () {
					return this.CND_ULTALT;
				}

				public Boolean CND_ULTALTIsNullable(){
				    return true;
				}
				public Boolean CND_ULTALTIsKey(){
				    return false;
				}
				public Integer CND_ULTALTLength(){
				    return 10;
				}
				public Integer CND_ULTALTPrecision(){
				    return 0;
				}
				public String CND_ULTALTDefault(){
				
					return null;
				
				}
				public String CND_ULTALTComment(){
				
				    return "";
				
				}
				public String CND_ULTALTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CND_ULTALTOriginalDbColumnName(){
				
					return "CND_ULTALT";
				
				}

				
			    public String CND_PRAMIN;

				public String getCND_PRAMIN () {
					return this.CND_PRAMIN;
				}

				public Boolean CND_PRAMINIsNullable(){
				    return true;
				}
				public Boolean CND_PRAMINIsKey(){
				    return false;
				}
				public Integer CND_PRAMINLength(){
				    return 1;
				}
				public Integer CND_PRAMINPrecision(){
				    return 0;
				}
				public String CND_PRAMINDefault(){
				
					return "'S'";
				
				}
				public String CND_PRAMINComment(){
				
				    return "";
				
				}
				public String CND_PRAMINPattern(){
				
					return "";
				
				}
				public String CND_PRAMINOriginalDbColumnName(){
				
					return "CND_PRAMIN";
				
				}

				
			    public BigDecimal CND_DESMSU;

				public BigDecimal getCND_DESMSU () {
					return this.CND_DESMSU;
				}

				public Boolean CND_DESMSUIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSUIsKey(){
				    return false;
				}
				public Integer CND_DESMSULength(){
				    return 12;
				}
				public Integer CND_DESMSUPrecision(){
				    return 2;
				}
				public String CND_DESMSUDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSUComment(){
				
				    return "";
				
				}
				public String CND_DESMSUPattern(){
				
					return "";
				
				}
				public String CND_DESMSUOriginalDbColumnName(){
				
					return "CND_DESMSU";
				
				}

				
			    public String CND_EMPACE;

				public String getCND_EMPACE () {
					return this.CND_EMPACE;
				}

				public Boolean CND_EMPACEIsNullable(){
				    return true;
				}
				public Boolean CND_EMPACEIsKey(){
				    return false;
				}
				public Integer CND_EMPACELength(){
				    return 65535;
				}
				public Integer CND_EMPACEPrecision(){
				    return 0;
				}
				public String CND_EMPACEDefault(){
				
					return null;
				
				}
				public String CND_EMPACEComment(){
				
				    return "";
				
				}
				public String CND_EMPACEPattern(){
				
					return "";
				
				}
				public String CND_EMPACEOriginalDbColumnName(){
				
					return "CND_EMPACE";
				
				}

				
			    public String CND_EXPFSO;

				public String getCND_EXPFSO () {
					return this.CND_EXPFSO;
				}

				public Boolean CND_EXPFSOIsNullable(){
				    return true;
				}
				public Boolean CND_EXPFSOIsKey(){
				    return false;
				}
				public Integer CND_EXPFSOLength(){
				    return 1;
				}
				public Integer CND_EXPFSOPrecision(){
				    return 0;
				}
				public String CND_EXPFSODefault(){
				
					return "'S'";
				
				}
				public String CND_EXPFSOComment(){
				
				    return "";
				
				}
				public String CND_EXPFSOPattern(){
				
					return "";
				
				}
				public String CND_EXPFSOOriginalDbColumnName(){
				
					return "CND_EXPFSO";
				
				}

				
			    public String CND_FPGNVL;

				public String getCND_FPGNVL () {
					return this.CND_FPGNVL;
				}

				public Boolean CND_FPGNVLIsNullable(){
				    return true;
				}
				public Boolean CND_FPGNVLIsKey(){
				    return false;
				}
				public Integer CND_FPGNVLLength(){
				    return 16;
				}
				public Integer CND_FPGNVLPrecision(){
				    return 0;
				}
				public String CND_FPGNVLDefault(){
				
					return null;
				
				}
				public String CND_FPGNVLComment(){
				
				    return "";
				
				}
				public String CND_FPGNVLPattern(){
				
					return "";
				
				}
				public String CND_FPGNVLOriginalDbColumnName(){
				
					return "CND_FPGNVL";
				
				}

				
			    public String CND_LBPDOB;

				public String getCND_LBPDOB () {
					return this.CND_LBPDOB;
				}

				public Boolean CND_LBPDOBIsNullable(){
				    return true;
				}
				public Boolean CND_LBPDOBIsKey(){
				    return false;
				}
				public Integer CND_LBPDOBLength(){
				    return 1;
				}
				public Integer CND_LBPDOBPrecision(){
				    return 0;
				}
				public String CND_LBPDOBDefault(){
				
					return "'N'";
				
				}
				public String CND_LBPDOBComment(){
				
				    return "";
				
				}
				public String CND_LBPDOBPattern(){
				
					return "";
				
				}
				public String CND_LBPDOBOriginalDbColumnName(){
				
					return "CND_LBPDOB";
				
				}

				
			    public Integer CND_MAXCAR;

				public Integer getCND_MAXCAR () {
					return this.CND_MAXCAR;
				}

				public Boolean CND_MAXCARIsNullable(){
				    return true;
				}
				public Boolean CND_MAXCARIsKey(){
				    return false;
				}
				public Integer CND_MAXCARLength(){
				    return 10;
				}
				public Integer CND_MAXCARPrecision(){
				    return 0;
				}
				public String CND_MAXCARDefault(){
				
					return null;
				
				}
				public String CND_MAXCARComment(){
				
				    return "";
				
				}
				public String CND_MAXCARPattern(){
				
					return "";
				
				}
				public String CND_MAXCAROriginalDbColumnName(){
				
					return "CND_MAXCAR";
				
				}

				
			    public String CND_MCOBDA;

				public String getCND_MCOBDA () {
					return this.CND_MCOBDA;
				}

				public Boolean CND_MCOBDAIsNullable(){
				    return true;
				}
				public Boolean CND_MCOBDAIsKey(){
				    return false;
				}
				public Integer CND_MCOBDALength(){
				    return 1;
				}
				public Integer CND_MCOBDAPrecision(){
				    return 0;
				}
				public String CND_MCOBDADefault(){
				
					return "'1'";
				
				}
				public String CND_MCOBDAComment(){
				
				    return "";
				
				}
				public String CND_MCOBDAPattern(){
				
					return "";
				
				}
				public String CND_MCOBDAOriginalDbColumnName(){
				
					return "CND_MCOBDA";
				
				}

				
			    public String CND_SENTRA;

				public String getCND_SENTRA () {
					return this.CND_SENTRA;
				}

				public Boolean CND_SENTRAIsNullable(){
				    return true;
				}
				public Boolean CND_SENTRAIsKey(){
				    return false;
				}
				public Integer CND_SENTRALength(){
				    return 1;
				}
				public Integer CND_SENTRAPrecision(){
				    return 0;
				}
				public String CND_SENTRADefault(){
				
					return "'N'";
				
				}
				public String CND_SENTRAComment(){
				
				    return "";
				
				}
				public String CND_SENTRAPattern(){
				
					return "";
				
				}
				public String CND_SENTRAOriginalDbColumnName(){
				
					return "CND_SENTRA";
				
				}

				
			    public String CND_TPFTDA;

				public String getCND_TPFTDA () {
					return this.CND_TPFTDA;
				}

				public Boolean CND_TPFTDAIsNullable(){
				    return true;
				}
				public Boolean CND_TPFTDAIsKey(){
				    return false;
				}
				public Integer CND_TPFTDALength(){
				    return 4;
				}
				public Integer CND_TPFTDAPrecision(){
				    return 0;
				}
				public String CND_TPFTDADefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TPFTDAComment(){
				
				    return "";
				
				}
				public String CND_TPFTDAPattern(){
				
					return "";
				
				}
				public String CND_TPFTDAOriginalDbColumnName(){
				
					return "CND_TPFTDA";
				
				}

				
			    public String CND_TRCLCR;

				public String getCND_TRCLCR () {
					return this.CND_TRCLCR;
				}

				public Boolean CND_TRCLCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCRIsKey(){
				    return false;
				}
				public Integer CND_TRCLCRLength(){
				    return 1;
				}
				public Integer CND_TRCLCRPrecision(){
				    return 0;
				}
				public String CND_TRCLCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCRComment(){
				
				    return "";
				
				}
				public String CND_TRCLCRPattern(){
				
					return "";
				
				}
				public String CND_TRCLCROriginalDbColumnName(){
				
					return "CND_TRCLCR";
				
				}

				
			    public String CND_TRTTVE;

				public String getCND_TRTTVE () {
					return this.CND_TRTTVE;
				}

				public Boolean CND_TRTTVEIsNullable(){
				    return true;
				}
				public Boolean CND_TRTTVEIsKey(){
				    return false;
				}
				public Integer CND_TRTTVELength(){
				    return 1;
				}
				public Integer CND_TRTTVEPrecision(){
				    return 0;
				}
				public String CND_TRTTVEDefault(){
				
					return "'S'";
				
				}
				public String CND_TRTTVEComment(){
				
				    return "";
				
				}
				public String CND_TRTTVEPattern(){
				
					return "";
				
				}
				public String CND_TRTTVEOriginalDbColumnName(){
				
					return "CND_TRTTVE";
				
				}

				
			    public BigDecimal CND_VRDAUV;

				public BigDecimal getCND_VRDAUV () {
					return this.CND_VRDAUV;
				}

				public Boolean CND_VRDAUVIsNullable(){
				    return true;
				}
				public Boolean CND_VRDAUVIsKey(){
				    return false;
				}
				public Integer CND_VRDAUVLength(){
				    return 12;
				}
				public Integer CND_VRDAUVPrecision(){
				    return 2;
				}
				public String CND_VRDAUVDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDAUVComment(){
				
				    return "";
				
				}
				public String CND_VRDAUVPattern(){
				
					return "";
				
				}
				public String CND_VRDAUVOriginalDbColumnName(){
				
					return "CND_VRDAUV";
				
				}

				
			    public BigDecimal CND_VRDEAC;

				public BigDecimal getCND_VRDEAC () {
					return this.CND_VRDEAC;
				}

				public Boolean CND_VRDEACIsNullable(){
				    return true;
				}
				public Boolean CND_VRDEACIsKey(){
				    return false;
				}
				public Integer CND_VRDEACLength(){
				    return 12;
				}
				public Integer CND_VRDEACPrecision(){
				    return 2;
				}
				public String CND_VRDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDEACComment(){
				
				    return "";
				
				}
				public String CND_VRDEACPattern(){
				
					return "";
				
				}
				public String CND_VRDEACOriginalDbColumnName(){
				
					return "CND_VRDEAC";
				
				}

				
			    public BigDecimal CND_PARMAX;

				public BigDecimal getCND_PARMAX () {
					return this.CND_PARMAX;
				}

				public Boolean CND_PARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_PARMAXIsKey(){
				    return false;
				}
				public Integer CND_PARMAXLength(){
				    return 12;
				}
				public Integer CND_PARMAXPrecision(){
				    return 2;
				}
				public String CND_PARMAXDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMAXComment(){
				
				    return "";
				
				}
				public String CND_PARMAXPattern(){
				
					return "";
				
				}
				public String CND_PARMAXOriginalDbColumnName(){
				
					return "CND_PARMAX";
				
				}

				
			    public BigDecimal CND_PARMIN;

				public BigDecimal getCND_PARMIN () {
					return this.CND_PARMIN;
				}

				public Boolean CND_PARMINIsNullable(){
				    return true;
				}
				public Boolean CND_PARMINIsKey(){
				    return false;
				}
				public Integer CND_PARMINLength(){
				    return 12;
				}
				public Integer CND_PARMINPrecision(){
				    return 2;
				}
				public String CND_PARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMINComment(){
				
				    return "";
				
				}
				public String CND_PARMINPattern(){
				
					return "";
				
				}
				public String CND_PARMINOriginalDbColumnName(){
				
					return "CND_PARMIN";
				
				}

				
			    public String CND_RETIRA;

				public String getCND_RETIRA () {
					return this.CND_RETIRA;
				}

				public Boolean CND_RETIRAIsNullable(){
				    return true;
				}
				public Boolean CND_RETIRAIsKey(){
				    return false;
				}
				public Integer CND_RETIRALength(){
				    return 1;
				}
				public Integer CND_RETIRAPrecision(){
				    return 0;
				}
				public String CND_RETIRADefault(){
				
					return "'S'";
				
				}
				public String CND_RETIRAComment(){
				
				    return "";
				
				}
				public String CND_RETIRAPattern(){
				
					return "";
				
				}
				public String CND_RETIRAOriginalDbColumnName(){
				
					return "CND_RETIRA";
				
				}

				
			    public String CND_ENTIME;

				public String getCND_ENTIME () {
					return this.CND_ENTIME;
				}

				public Boolean CND_ENTIMEIsNullable(){
				    return true;
				}
				public Boolean CND_ENTIMEIsKey(){
				    return false;
				}
				public Integer CND_ENTIMELength(){
				    return 1;
				}
				public Integer CND_ENTIMEPrecision(){
				    return 0;
				}
				public String CND_ENTIMEDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTIMEComment(){
				
				    return "";
				
				}
				public String CND_ENTIMEPattern(){
				
					return "";
				
				}
				public String CND_ENTIMEOriginalDbColumnName(){
				
					return "CND_ENTIME";
				
				}

				
			    public String CND_ENTFUT;

				public String getCND_ENTFUT () {
					return this.CND_ENTFUT;
				}

				public Boolean CND_ENTFUTIsNullable(){
				    return true;
				}
				public Boolean CND_ENTFUTIsKey(){
				    return false;
				}
				public Integer CND_ENTFUTLength(){
				    return 1;
				}
				public Integer CND_ENTFUTPrecision(){
				    return 0;
				}
				public String CND_ENTFUTDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTFUTComment(){
				
				    return "";
				
				}
				public String CND_ENTFUTPattern(){
				
					return "";
				
				}
				public String CND_ENTFUTOriginalDbColumnName(){
				
					return "CND_ENTFUT";
				
				}

				
			    public Integer CND_QTDMAX;

				public Integer getCND_QTDMAX () {
					return this.CND_QTDMAX;
				}

				public Boolean CND_QTDMAXIsNullable(){
				    return true;
				}
				public Boolean CND_QTDMAXIsKey(){
				    return false;
				}
				public Integer CND_QTDMAXLength(){
				    return 10;
				}
				public Integer CND_QTDMAXPrecision(){
				    return 0;
				}
				public String CND_QTDMAXDefault(){
				
					return "0";
				
				}
				public String CND_QTDMAXComment(){
				
				    return "";
				
				}
				public String CND_QTDMAXPattern(){
				
					return "";
				
				}
				public String CND_QTDMAXOriginalDbColumnName(){
				
					return "CND_QTDMAX";
				
				}

				
			    public String CND_TRCLCB;

				public String getCND_TRCLCB () {
					return this.CND_TRCLCB;
				}

				public Boolean CND_TRCLCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCBIsKey(){
				    return false;
				}
				public Integer CND_TRCLCBLength(){
				    return 1;
				}
				public Integer CND_TRCLCBPrecision(){
				    return 0;
				}
				public String CND_TRCLCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCBComment(){
				
				    return "";
				
				}
				public String CND_TRCLCBPattern(){
				
					return "";
				
				}
				public String CND_TRCLCBOriginalDbColumnName(){
				
					return "CND_TRCLCB";
				
				}

				
			    public String CND_EXPB2B;

				public String getCND_EXPB2B () {
					return this.CND_EXPB2B;
				}

				public Boolean CND_EXPB2BIsNullable(){
				    return true;
				}
				public Boolean CND_EXPB2BIsKey(){
				    return false;
				}
				public Integer CND_EXPB2BLength(){
				    return 1;
				}
				public Integer CND_EXPB2BPrecision(){
				    return 0;
				}
				public String CND_EXPB2BDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPB2BComment(){
				
				    return "";
				
				}
				public String CND_EXPB2BPattern(){
				
					return "";
				
				}
				public String CND_EXPB2BOriginalDbColumnName(){
				
					return "CND_EXPB2B";
				
				}

				
			    public String CND_PRETAB;

				public String getCND_PRETAB () {
					return this.CND_PRETAB;
				}

				public Boolean CND_PRETABIsNullable(){
				    return true;
				}
				public Boolean CND_PRETABIsKey(){
				    return false;
				}
				public Integer CND_PRETABLength(){
				    return 7;
				}
				public Integer CND_PRETABPrecision(){
				    return 0;
				}
				public String CND_PRETABDefault(){
				
					return "'NNNNNNN'";
				
				}
				public String CND_PRETABComment(){
				
				    return "";
				
				}
				public String CND_PRETABPattern(){
				
					return "";
				
				}
				public String CND_PRETABOriginalDbColumnName(){
				
					return "CND_PRETAB";
				
				}

				
			    public Integer CND_LIMITE;

				public Integer getCND_LIMITE () {
					return this.CND_LIMITE;
				}

				public Boolean CND_LIMITEIsNullable(){
				    return true;
				}
				public Boolean CND_LIMITEIsKey(){
				    return false;
				}
				public Integer CND_LIMITELength(){
				    return 10;
				}
				public Integer CND_LIMITEPrecision(){
				    return 0;
				}
				public String CND_LIMITEDefault(){
				
					return "0";
				
				}
				public String CND_LIMITEComment(){
				
				    return "";
				
				}
				public String CND_LIMITEPattern(){
				
					return "";
				
				}
				public String CND_LIMITEOriginalDbColumnName(){
				
					return "CND_LIMITE";
				
				}

				
			    public String CND_USADEP;

				public String getCND_USADEP () {
					return this.CND_USADEP;
				}

				public Boolean CND_USADEPIsNullable(){
				    return true;
				}
				public Boolean CND_USADEPIsKey(){
				    return false;
				}
				public Integer CND_USADEPLength(){
				    return 1;
				}
				public Integer CND_USADEPPrecision(){
				    return 0;
				}
				public String CND_USADEPDefault(){
				
					return "'N'";
				
				}
				public String CND_USADEPComment(){
				
				    return "";
				
				}
				public String CND_USADEPPattern(){
				
					return "";
				
				}
				public String CND_USADEPOriginalDbColumnName(){
				
					return "CND_USADEP";
				
				}

				
			    public String CND_RCX_F3;

				public String getCND_RCX_F3 () {
					return this.CND_RCX_F3;
				}

				public Boolean CND_RCX_F3IsNullable(){
				    return true;
				}
				public Boolean CND_RCX_F3IsKey(){
				    return false;
				}
				public Integer CND_RCX_F3Length(){
				    return 1;
				}
				public Integer CND_RCX_F3Precision(){
				    return 0;
				}
				public String CND_RCX_F3Default(){
				
					return "'S'";
				
				}
				public String CND_RCX_F3Comment(){
				
				    return "";
				
				}
				public String CND_RCX_F3Pattern(){
				
					return "";
				
				}
				public String CND_RCX_F3OriginalDbColumnName(){
				
					return "CND_RCX_F3";
				
				}

				
			    public String CND_COBYAP;

				public String getCND_COBYAP () {
					return this.CND_COBYAP;
				}

				public Boolean CND_COBYAPIsNullable(){
				    return true;
				}
				public Boolean CND_COBYAPIsKey(){
				    return false;
				}
				public Integer CND_COBYAPLength(){
				    return 1;
				}
				public Integer CND_COBYAPPrecision(){
				    return 0;
				}
				public String CND_COBYAPDefault(){
				
					return "'N'";
				
				}
				public String CND_COBYAPComment(){
				
				    return "";
				
				}
				public String CND_COBYAPPattern(){
				
					return "";
				
				}
				public String CND_COBYAPOriginalDbColumnName(){
				
					return "CND_COBYAP";
				
				}

				
			    public String CND_TRORCR;

				public String getCND_TRORCR () {
					return this.CND_TRORCR;
				}

				public Boolean CND_TRORCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCRIsKey(){
				    return false;
				}
				public Integer CND_TRORCRLength(){
				    return 1;
				}
				public Integer CND_TRORCRPrecision(){
				    return 0;
				}
				public String CND_TRORCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCRComment(){
				
				    return "";
				
				}
				public String CND_TRORCRPattern(){
				
					return "";
				
				}
				public String CND_TRORCROriginalDbColumnName(){
				
					return "CND_TRORCR";
				
				}

				
			    public String CND_TRORCB;

				public String getCND_TRORCB () {
					return this.CND_TRORCB;
				}

				public Boolean CND_TRORCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCBIsKey(){
				    return false;
				}
				public Integer CND_TRORCBLength(){
				    return 1;
				}
				public Integer CND_TRORCBPrecision(){
				    return 0;
				}
				public String CND_TRORCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCBComment(){
				
				    return "";
				
				}
				public String CND_TRORCBPattern(){
				
					return "";
				
				}
				public String CND_TRORCBOriginalDbColumnName(){
				
					return "CND_TRORCB";
				
				}

				
			    public String CND_YAPTRA;

				public String getCND_YAPTRA () {
					return this.CND_YAPTRA;
				}

				public Boolean CND_YAPTRAIsNullable(){
				    return true;
				}
				public Boolean CND_YAPTRAIsKey(){
				    return false;
				}
				public Integer CND_YAPTRALength(){
				    return 1;
				}
				public Integer CND_YAPTRAPrecision(){
				    return 0;
				}
				public String CND_YAPTRADefault(){
				
					return "'S'";
				
				}
				public String CND_YAPTRAComment(){
				
				    return "";
				
				}
				public String CND_YAPTRAPattern(){
				
					return "";
				
				}
				public String CND_YAPTRAOriginalDbColumnName(){
				
					return "CND_YAPTRA";
				
				}

				
			    public String CND_YAPDIS;

				public String getCND_YAPDIS () {
					return this.CND_YAPDIS;
				}

				public Boolean CND_YAPDISIsNullable(){
				    return true;
				}
				public Boolean CND_YAPDISIsKey(){
				    return false;
				}
				public Integer CND_YAPDISLength(){
				    return 255;
				}
				public Integer CND_YAPDISPrecision(){
				    return 0;
				}
				public String CND_YAPDISDefault(){
				
					return null;
				
				}
				public String CND_YAPDISComment(){
				
				    return "";
				
				}
				public String CND_YAPDISPattern(){
				
					return "";
				
				}
				public String CND_YAPDISOriginalDbColumnName(){
				
					return "CND_YAPDIS";
				
				}

				
			    public Integer CND_YAPPAR;

				public Integer getCND_YAPPAR () {
					return this.CND_YAPPAR;
				}

				public Boolean CND_YAPPARIsNullable(){
				    return true;
				}
				public Boolean CND_YAPPARIsKey(){
				    return false;
				}
				public Integer CND_YAPPARLength(){
				    return 10;
				}
				public Integer CND_YAPPARPrecision(){
				    return 0;
				}
				public String CND_YAPPARDefault(){
				
					return null;
				
				}
				public String CND_YAPPARComment(){
				
				    return "";
				
				}
				public String CND_YAPPARPattern(){
				
					return "";
				
				}
				public String CND_YAPPAROriginalDbColumnName(){
				
					return "CND_YAPPAR";
				
				}

				
			    public String CND_TRAFAT;

				public String getCND_TRAFAT () {
					return this.CND_TRAFAT;
				}

				public Boolean CND_TRAFATIsNullable(){
				    return false;
				}
				public Boolean CND_TRAFATIsKey(){
				    return false;
				}
				public Integer CND_TRAFATLength(){
				    return 1;
				}
				public Integer CND_TRAFATPrecision(){
				    return 0;
				}
				public String CND_TRAFATDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAFATComment(){
				
				    return "";
				
				}
				public String CND_TRAFATPattern(){
				
					return "";
				
				}
				public String CND_TRAFATOriginalDbColumnName(){
				
					return "CND_TRAFAT";
				
				}

				
			    public String CND_TRAMAR;

				public String getCND_TRAMAR () {
					return this.CND_TRAMAR;
				}

				public Boolean CND_TRAMARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAMARIsKey(){
				    return false;
				}
				public Integer CND_TRAMARLength(){
				    return 1;
				}
				public Integer CND_TRAMARPrecision(){
				    return 0;
				}
				public String CND_TRAMARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAMARComment(){
				
				    return "";
				
				}
				public String CND_TRAMARPattern(){
				
					return "";
				
				}
				public String CND_TRAMAROriginalDbColumnName(){
				
					return "CND_TRAMAR";
				
				}

				
			    public String CND_TRAPAR;

				public String getCND_TRAPAR () {
					return this.CND_TRAPAR;
				}

				public Boolean CND_TRAPARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAPARIsKey(){
				    return false;
				}
				public Integer CND_TRAPARLength(){
				    return 1;
				}
				public Integer CND_TRAPARPrecision(){
				    return 0;
				}
				public String CND_TRAPARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAPARComment(){
				
				    return "";
				
				}
				public String CND_TRAPARPattern(){
				
					return "";
				
				}
				public String CND_TRAPAROriginalDbColumnName(){
				
					return "CND_TRAPAR";
				
				}

				
			    public String CND_CNDESP;

				public String getCND_CNDESP () {
					return this.CND_CNDESP;
				}

				public Boolean CND_CNDESPIsNullable(){
				    return true;
				}
				public Boolean CND_CNDESPIsKey(){
				    return false;
				}
				public Integer CND_CNDESPLength(){
				    return 1;
				}
				public Integer CND_CNDESPPrecision(){
				    return 0;
				}
				public String CND_CNDESPDefault(){
				
					return "'N'";
				
				}
				public String CND_CNDESPComment(){
				
				    return "";
				
				}
				public String CND_CNDESPPattern(){
				
					return "";
				
				}
				public String CND_CNDESPOriginalDbColumnName(){
				
					return "CND_CNDESP";
				
				}

				
			    public BigDecimal CND_DESMVM;

				public BigDecimal getCND_DESMVM () {
					return this.CND_DESMVM;
				}

				public Boolean CND_DESMVMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMVMIsKey(){
				    return false;
				}
				public Integer CND_DESMVMLength(){
				    return 12;
				}
				public Integer CND_DESMVMPrecision(){
				    return 2;
				}
				public String CND_DESMVMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMVMComment(){
				
				    return "";
				
				}
				public String CND_DESMVMPattern(){
				
					return "";
				
				}
				public String CND_DESMVMOriginalDbColumnName(){
				
					return "CND_DESMVM";
				
				}

				
			    public BigDecimal CND_DESMSM;

				public BigDecimal getCND_DESMSM () {
					return this.CND_DESMSM;
				}

				public Boolean CND_DESMSMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSMIsKey(){
				    return false;
				}
				public Integer CND_DESMSMLength(){
				    return 12;
				}
				public Integer CND_DESMSMPrecision(){
				    return 2;
				}
				public String CND_DESMSMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSMComment(){
				
				    return "";
				
				}
				public String CND_DESMSMPattern(){
				
					return "";
				
				}
				public String CND_DESMSMOriginalDbColumnName(){
				
					return "CND_DESMSM";
				
				}

				
			    public BigDecimal CND_DESMGM;

				public BigDecimal getCND_DESMGM () {
					return this.CND_DESMGM;
				}

				public Boolean CND_DESMGMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGMIsKey(){
				    return false;
				}
				public Integer CND_DESMGMLength(){
				    return 12;
				}
				public Integer CND_DESMGMPrecision(){
				    return 2;
				}
				public String CND_DESMGMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGMComment(){
				
				    return "";
				
				}
				public String CND_DESMGMPattern(){
				
					return "";
				
				}
				public String CND_DESMGMOriginalDbColumnName(){
				
					return "CND_DESMGM";
				
				}

				
			    public String CND_RECPIX;

				public String getCND_RECPIX () {
					return this.CND_RECPIX;
				}

				public Boolean CND_RECPIXIsNullable(){
				    return true;
				}
				public Boolean CND_RECPIXIsKey(){
				    return false;
				}
				public Integer CND_RECPIXLength(){
				    return 1;
				}
				public Integer CND_RECPIXPrecision(){
				    return 0;
				}
				public String CND_RECPIXDefault(){
				
					return "'N'";
				
				}
				public String CND_RECPIXComment(){
				
				    return "";
				
				}
				public String CND_RECPIXPattern(){
				
					return "";
				
				}
				public String CND_RECPIXOriginalDbColumnName(){
				
					return "CND_RECPIX";
				
				}

				
			    public String CND_TRACNC;

				public String getCND_TRACNC () {
					return this.CND_TRACNC;
				}

				public Boolean CND_TRACNCIsNullable(){
				    return true;
				}
				public Boolean CND_TRACNCIsKey(){
				    return false;
				}
				public Integer CND_TRACNCLength(){
				    return 1;
				}
				public Integer CND_TRACNCPrecision(){
				    return 0;
				}
				public String CND_TRACNCDefault(){
				
					return "'S'";
				
				}
				public String CND_TRACNCComment(){
				
				    return "";
				
				}
				public String CND_TRACNCPattern(){
				
					return "";
				
				}
				public String CND_TRACNCOriginalDbColumnName(){
				
					return "CND_TRACNC";
				
				}

				
			    public String CND_TRORFI;

				public String getCND_TRORFI () {
					return this.CND_TRORFI;
				}

				public Boolean CND_TRORFIIsNullable(){
				    return true;
				}
				public Boolean CND_TRORFIIsKey(){
				    return false;
				}
				public Integer CND_TRORFILength(){
				    return 1;
				}
				public Integer CND_TRORFIPrecision(){
				    return 0;
				}
				public String CND_TRORFIDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORFIComment(){
				
				    return "";
				
				}
				public String CND_TRORFIPattern(){
				
					return "";
				
				}
				public String CND_TRORFIOriginalDbColumnName(){
				
					return "CND_TRORFI";
				
				}

				
			    public String CND_TRORPF;

				public String getCND_TRORPF () {
					return this.CND_TRORPF;
				}

				public Boolean CND_TRORPFIsNullable(){
				    return true;
				}
				public Boolean CND_TRORPFIsKey(){
				    return false;
				}
				public Integer CND_TRORPFLength(){
				    return 1;
				}
				public Integer CND_TRORPFPrecision(){
				    return 0;
				}
				public String CND_TRORPFDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORPFComment(){
				
				    return "";
				
				}
				public String CND_TRORPFPattern(){
				
					return "";
				
				}
				public String CND_TRORPFOriginalDbColumnName(){
				
					return "CND_TRORPF";
				
				}

				
			    public String CND_DIACOR;

				public String getCND_DIACOR () {
					return this.CND_DIACOR;
				}

				public Boolean CND_DIACORIsNullable(){
				    return true;
				}
				public Boolean CND_DIACORIsKey(){
				    return false;
				}
				public Integer CND_DIACORLength(){
				    return 1;
				}
				public Integer CND_DIACORPrecision(){
				    return 0;
				}
				public String CND_DIACORDefault(){
				
					return "'N'";
				
				}
				public String CND_DIACORComment(){
				
				    return "";
				
				}
				public String CND_DIACORPattern(){
				
					return "";
				
				}
				public String CND_DIACOROriginalDbColumnName(){
				
					return "CND_DIACOR";
				
				}

				
			    public BigDecimal CND_PERVEN;

				public BigDecimal getCND_PERVEN () {
					return this.CND_PERVEN;
				}

				public Boolean CND_PERVENIsNullable(){
				    return true;
				}
				public Boolean CND_PERVENIsKey(){
				    return false;
				}
				public Integer CND_PERVENLength(){
				    return 12;
				}
				public Integer CND_PERVENPrecision(){
				    return 2;
				}
				public String CND_PERVENDefault(){
				
					return "0.00";
				
				}
				public String CND_PERVENComment(){
				
				    return "";
				
				}
				public String CND_PERVENPattern(){
				
					return "";
				
				}
				public String CND_PERVENOriginalDbColumnName(){
				
					return "CND_PERVEN";
				
				}

				
			    public String CND_GERLNK;

				public String getCND_GERLNK () {
					return this.CND_GERLNK;
				}

				public Boolean CND_GERLNKIsNullable(){
				    return true;
				}
				public Boolean CND_GERLNKIsKey(){
				    return false;
				}
				public Integer CND_GERLNKLength(){
				    return 1;
				}
				public Integer CND_GERLNKPrecision(){
				    return 0;
				}
				public String CND_GERLNKDefault(){
				
					return "'N'";
				
				}
				public String CND_GERLNKComment(){
				
				    return "";
				
				}
				public String CND_GERLNKPattern(){
				
					return "";
				
				}
				public String CND_GERLNKOriginalDbColumnName(){
				
					return "CND_GERLNK";
				
				}

				
			    public String CND_ESPFAT;

				public String getCND_ESPFAT () {
					return this.CND_ESPFAT;
				}

				public Boolean CND_ESPFATIsNullable(){
				    return true;
				}
				public Boolean CND_ESPFATIsKey(){
				    return false;
				}
				public Integer CND_ESPFATLength(){
				    return 3;
				}
				public Integer CND_ESPFATPrecision(){
				    return 0;
				}
				public String CND_ESPFATDefault(){
				
					return "'NF'";
				
				}
				public String CND_ESPFATComment(){
				
				    return "";
				
				}
				public String CND_ESPFATPattern(){
				
					return "";
				
				}
				public String CND_ESPFATOriginalDbColumnName(){
				
					return "CND_ESPFAT";
				
				}

				
			    public String CND_COBPME;

				public String getCND_COBPME () {
					return this.CND_COBPME;
				}

				public Boolean CND_COBPMEIsNullable(){
				    return false;
				}
				public Boolean CND_COBPMEIsKey(){
				    return false;
				}
				public Integer CND_COBPMELength(){
				    return 1;
				}
				public Integer CND_COBPMEPrecision(){
				    return 0;
				}
				public String CND_COBPMEDefault(){
				
					return "'N'";
				
				}
				public String CND_COBPMEComment(){
				
				    return "";
				
				}
				public String CND_COBPMEPattern(){
				
					return "";
				
				}
				public String CND_COBPMEOriginalDbColumnName(){
				
					return "CND_COBPME";
				
				}

				
			    public String CND_EXPTAB;

				public String getCND_EXPTAB () {
					return this.CND_EXPTAB;
				}

				public Boolean CND_EXPTABIsNullable(){
				    return true;
				}
				public Boolean CND_EXPTABIsKey(){
				    return false;
				}
				public Integer CND_EXPTABLength(){
				    return 1;
				}
				public Integer CND_EXPTABPrecision(){
				    return 0;
				}
				public String CND_EXPTABDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPTABComment(){
				
				    return "";
				
				}
				public String CND_EXPTABPattern(){
				
					return "";
				
				}
				public String CND_EXPTABOriginalDbColumnName(){
				
					return "CND_EXPTAB";
				
				}

				
			    public String CND_PMEDVC;

				public String getCND_PMEDVC () {
					return this.CND_PMEDVC;
				}

				public Boolean CND_PMEDVCIsNullable(){
				    return true;
				}
				public Boolean CND_PMEDVCIsKey(){
				    return false;
				}
				public Integer CND_PMEDVCLength(){
				    return 2;
				}
				public Integer CND_PMEDVCPrecision(){
				    return 0;
				}
				public String CND_PMEDVCDefault(){
				
					return "'0'";
				
				}
				public String CND_PMEDVCComment(){
				
				    return "";
				
				}
				public String CND_PMEDVCPattern(){
				
					return "";
				
				}
				public String CND_PMEDVCOriginalDbColumnName(){
				
					return "CND_PMEDVC";
				
				}

				
			    public String CND_PMEQPA;

				public String getCND_PMEQPA () {
					return this.CND_PMEQPA;
				}

				public Boolean CND_PMEQPAIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPAIsKey(){
				    return false;
				}
				public Integer CND_PMEQPALength(){
				    return 30;
				}
				public Integer CND_PMEQPAPrecision(){
				    return 0;
				}
				public String CND_PMEQPADefault(){
				
					return null;
				
				}
				public String CND_PMEQPAComment(){
				
				    return "";
				
				}
				public String CND_PMEQPAPattern(){
				
					return "";
				
				}
				public String CND_PMEQPAOriginalDbColumnName(){
				
					return "CND_PMEQPA";
				
				}

				
			    public String CND_PMEQPJ;

				public String getCND_PMEQPJ () {
					return this.CND_PMEQPJ;
				}

				public Boolean CND_PMEQPJIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPJIsKey(){
				    return false;
				}
				public Integer CND_PMEQPJLength(){
				    return 40;
				}
				public Integer CND_PMEQPJPrecision(){
				    return 0;
				}
				public String CND_PMEQPJDefault(){
				
					return null;
				
				}
				public String CND_PMEQPJComment(){
				
				    return "";
				
				}
				public String CND_PMEQPJPattern(){
				
					return "";
				
				}
				public String CND_PMEQPJOriginalDbColumnName(){
				
					return "CND_PMEQPJ";
				
				}

				
			    public BigDecimal CND_PMEJCT;

				public BigDecimal getCND_PMEJCT () {
					return this.CND_PMEJCT;
				}

				public Boolean CND_PMEJCTIsNullable(){
				    return true;
				}
				public Boolean CND_PMEJCTIsKey(){
				    return false;
				}
				public Integer CND_PMEJCTLength(){
				    return 12;
				}
				public Integer CND_PMEJCTPrecision(){
				    return 2;
				}
				public String CND_PMEJCTDefault(){
				
					return "0.00";
				
				}
				public String CND_PMEJCTComment(){
				
				    return "";
				
				}
				public String CND_PMEJCTPattern(){
				
					return "";
				
				}
				public String CND_PMEJCTOriginalDbColumnName(){
				
					return "CND_PMEJCT";
				
				}

				
			    public String CND_MODIVN;

				public String getCND_MODIVN () {
					return this.CND_MODIVN;
				}

				public Boolean CND_MODIVNIsNullable(){
				    return true;
				}
				public Boolean CND_MODIVNIsKey(){
				    return false;
				}
				public Integer CND_MODIVNLength(){
				    return 1;
				}
				public Integer CND_MODIVNPrecision(){
				    return 0;
				}
				public String CND_MODIVNDefault(){
				
					return "'T'";
				
				}
				public String CND_MODIVNComment(){
				
				    return "";
				
				}
				public String CND_MODIVNPattern(){
				
					return "";
				
				}
				public String CND_MODIVNOriginalDbColumnName(){
				
					return "CND_MODIVN";
				
				}

				
			    public String CND_PETRCD;

				public String getCND_PETRCD () {
					return this.CND_PETRCD;
				}

				public Boolean CND_PETRCDIsNullable(){
				    return false;
				}
				public Boolean CND_PETRCDIsKey(){
				    return false;
				}
				public Integer CND_PETRCDLength(){
				    return 1;
				}
				public Integer CND_PETRCDPrecision(){
				    return 0;
				}
				public String CND_PETRCDDefault(){
				
					return "'N'";
				
				}
				public String CND_PETRCDComment(){
				
				    return "";
				
				}
				public String CND_PETRCDPattern(){
				
					return "";
				
				}
				public String CND_PETRCDOriginalDbColumnName(){
				
					return "CND_PETRCD";
				
				}

				
			    public Integer CND_EMIBOL;

				public Integer getCND_EMIBOL () {
					return this.CND_EMIBOL;
				}

				public Boolean CND_EMIBOLIsNullable(){
				    return true;
				}
				public Boolean CND_EMIBOLIsKey(){
				    return false;
				}
				public Integer CND_EMIBOLLength(){
				    return 10;
				}
				public Integer CND_EMIBOLPrecision(){
				    return 0;
				}
				public String CND_EMIBOLDefault(){
				
					return "2";
				
				}
				public String CND_EMIBOLComment(){
				
				    return "";
				
				}
				public String CND_EMIBOLPattern(){
				
					return "";
				
				}
				public String CND_EMIBOLOriginalDbColumnName(){
				
					return "CND_EMIBOL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CND_CODIGO="+CND_CODIGO);
		sb.append(",CND_DESCRI="+CND_DESCRI);
		sb.append(",CND_CNDPAG="+CND_CNDPAG);
		sb.append(",CND_TIPFOR="+CND_TIPFOR);
		sb.append(",CND_CODPOR="+CND_CODPOR);
		sb.append(",AUTOINCREM="+AUTOINCREM);
		sb.append(",CND_CODEMP="+CND_CODEMP);
		sb.append(",CND_DESMAX="+String.valueOf(CND_DESMAX));
		sb.append(",CND_ABADES="+CND_ABADES);
		sb.append(",CND_ABDECC="+CND_ABDECC);
		sb.append(",CND_TXJURO="+String.valueOf(CND_TXJURO));
		sb.append(",CND_CODFPG="+CND_CODFPG);
		sb.append(",CND_PRZMED="+String.valueOf(CND_PRZMED));
		sb.append(",CND_FATACA="+String.valueOf(CND_FATACA));
		sb.append(",CND_INFANA="+CND_INFANA);
		sb.append(",CND_STATUS="+CND_STATUS);
		sb.append(",CND_DESMGE="+String.valueOf(CND_DESMGE));
		sb.append(",CND_ALTPRE="+CND_ALTPRE);
		sb.append(",CND_CODVEL="+CND_CODVEL);
		sb.append(",CND_DESPFL="+CND_DESPFL);
		sb.append(",CND_DIAFIX="+String.valueOf(CND_DIAFIX));
		sb.append(",CND_IMPBOL="+CND_IMPBOL);
		sb.append(",CND_LIMCRE="+CND_LIMCRE);
		sb.append(",CND_PERCOM="+String.valueOf(CND_PERCOM));
		sb.append(",CND_PERDPO="+String.valueOf(CND_PERDPO));
		sb.append(",CND_QTDDAV="+String.valueOf(CND_QTDDAV));
		sb.append(",CND_QTDPAR="+String.valueOf(CND_QTDPAR));
		sb.append(",CND_SEMENT="+CND_SEMENT);
		sb.append(",CND_SENCND="+CND_SENCND);
		sb.append(",CND_VALMIN="+String.valueOf(CND_VALMIN));
		sb.append(",CND_FATMAX="+String.valueOf(CND_FATMAX));
		sb.append(",CND_FATMIN="+String.valueOf(CND_FATMIN));
		sb.append(",CND_IMPFAT="+CND_IMPFAT);
		sb.append(",CND_MARMAX="+String.valueOf(CND_MARMAX));
		sb.append(",CND_MARMIN="+String.valueOf(CND_MARMIN));
		sb.append(",CND_PEDEAC="+String.valueOf(CND_PEDEAC));
		sb.append(",CND_TABPRE="+CND_TABPRE);
		sb.append(",CND_TIPFAT="+CND_TIPFAT);
		sb.append(",CND_JURPRO="+CND_JURPRO);
		sb.append(",CND_TIPCND="+CND_TIPCND);
		sb.append(",CND_ULTALT="+String.valueOf(CND_ULTALT));
		sb.append(",CND_PRAMIN="+CND_PRAMIN);
		sb.append(",CND_DESMSU="+String.valueOf(CND_DESMSU));
		sb.append(",CND_EMPACE="+CND_EMPACE);
		sb.append(",CND_EXPFSO="+CND_EXPFSO);
		sb.append(",CND_FPGNVL="+CND_FPGNVL);
		sb.append(",CND_LBPDOB="+CND_LBPDOB);
		sb.append(",CND_MAXCAR="+String.valueOf(CND_MAXCAR));
		sb.append(",CND_MCOBDA="+CND_MCOBDA);
		sb.append(",CND_SENTRA="+CND_SENTRA);
		sb.append(",CND_TPFTDA="+CND_TPFTDA);
		sb.append(",CND_TRCLCR="+CND_TRCLCR);
		sb.append(",CND_TRTTVE="+CND_TRTTVE);
		sb.append(",CND_VRDAUV="+String.valueOf(CND_VRDAUV));
		sb.append(",CND_VRDEAC="+String.valueOf(CND_VRDEAC));
		sb.append(",CND_PARMAX="+String.valueOf(CND_PARMAX));
		sb.append(",CND_PARMIN="+String.valueOf(CND_PARMIN));
		sb.append(",CND_RETIRA="+CND_RETIRA);
		sb.append(",CND_ENTIME="+CND_ENTIME);
		sb.append(",CND_ENTFUT="+CND_ENTFUT);
		sb.append(",CND_QTDMAX="+String.valueOf(CND_QTDMAX));
		sb.append(",CND_TRCLCB="+CND_TRCLCB);
		sb.append(",CND_EXPB2B="+CND_EXPB2B);
		sb.append(",CND_PRETAB="+CND_PRETAB);
		sb.append(",CND_LIMITE="+String.valueOf(CND_LIMITE));
		sb.append(",CND_USADEP="+CND_USADEP);
		sb.append(",CND_RCX_F3="+CND_RCX_F3);
		sb.append(",CND_COBYAP="+CND_COBYAP);
		sb.append(",CND_TRORCR="+CND_TRORCR);
		sb.append(",CND_TRORCB="+CND_TRORCB);
		sb.append(",CND_YAPTRA="+CND_YAPTRA);
		sb.append(",CND_YAPDIS="+CND_YAPDIS);
		sb.append(",CND_YAPPAR="+String.valueOf(CND_YAPPAR));
		sb.append(",CND_TRAFAT="+CND_TRAFAT);
		sb.append(",CND_TRAMAR="+CND_TRAMAR);
		sb.append(",CND_TRAPAR="+CND_TRAPAR);
		sb.append(",CND_CNDESP="+CND_CNDESP);
		sb.append(",CND_DESMVM="+String.valueOf(CND_DESMVM));
		sb.append(",CND_DESMSM="+String.valueOf(CND_DESMSM));
		sb.append(",CND_DESMGM="+String.valueOf(CND_DESMGM));
		sb.append(",CND_RECPIX="+CND_RECPIX);
		sb.append(",CND_TRACNC="+CND_TRACNC);
		sb.append(",CND_TRORFI="+CND_TRORFI);
		sb.append(",CND_TRORPF="+CND_TRORPF);
		sb.append(",CND_DIACOR="+CND_DIACOR);
		sb.append(",CND_PERVEN="+String.valueOf(CND_PERVEN));
		sb.append(",CND_GERLNK="+CND_GERLNK);
		sb.append(",CND_ESPFAT="+CND_ESPFAT);
		sb.append(",CND_COBPME="+CND_COBPME);
		sb.append(",CND_EXPTAB="+CND_EXPTAB);
		sb.append(",CND_PMEDVC="+CND_PMEDVC);
		sb.append(",CND_PMEQPA="+CND_PMEQPA);
		sb.append(",CND_PMEQPJ="+CND_PMEQPJ);
		sb.append(",CND_PMEJCT="+String.valueOf(CND_PMEJCT));
		sb.append(",CND_MODIVN="+CND_MODIVN);
		sb.append(",CND_PETRCD="+CND_PETRCD);
		sb.append(",CND_EMIBOL="+String.valueOf(CND_EMIBOL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
TABLEStruct TABLE = new TABLEStruct();





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TABLE");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TABLEStruct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_stg_cadcnd_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TABLEStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
TABLEStruct TABLE_tmp = new TABLEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect * from CADCND\n\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.CND_CODIGO = null;
							} else {
	                         		
        	row5.CND_CODIGO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.CND_DESCRI = null;
							} else {
	                         		
        	row5.CND_DESCRI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.CND_CNDPAG = null;
							} else {
	                         		
        	row5.CND_CNDPAG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.CND_TIPFOR = null;
							} else {
	                         		
        	row5.CND_TIPFOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.CND_CODPOR = null;
							} else {
	                         		
        	row5.CND_CODPOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.AUTOINCREM = null;
							} else {
	                         		
        	row5.AUTOINCREM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row5.CND_CODEMP = null;
							} else {
	                         		
        	row5.CND_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row5.CND_DESMAX = null;
							} else {
		                          
            row5.CND_DESMAX = rs_tDBInput_3.getBigDecimal(8);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMAX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row5.CND_ABADES = null;
							} else {
	                         		
        	row5.CND_ABADES = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row5.CND_ABDECC = null;
							} else {
	                         		
        	row5.CND_ABDECC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row5.CND_TXJURO = null;
							} else {
		                          
            row5.CND_TXJURO = rs_tDBInput_3.getBigDecimal(11);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_TXJURO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row5.CND_CODFPG = null;
							} else {
	                         		
        	row5.CND_CODFPG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row5.CND_PRZMED = null;
							} else {
		                          
            row5.CND_PRZMED = rs_tDBInput_3.getBigDecimal(13);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PRZMED = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row5.CND_FATACA = null;
							} else {
		                          
            row5.CND_FATACA = rs_tDBInput_3.getBigDecimal(14);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_FATACA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row5.CND_INFANA = null;
							} else {
	                         		
        	row5.CND_INFANA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row5.CND_STATUS = null;
							} else {
	                         		
        	row5.CND_STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row5.CND_DESMGE = null;
							} else {
		                          
            row5.CND_DESMGE = rs_tDBInput_3.getBigDecimal(17);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMGE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row5.CND_ALTPRE = null;
							} else {
	                         		
        	row5.CND_ALTPRE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row5.CND_CODVEL = null;
							} else {
	                         		
        	row5.CND_CODVEL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row5.CND_DESPFL = null;
							} else {
	                         		
        	row5.CND_DESPFL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row5.CND_DIAFIX = null;
							} else {
		                          
            row5.CND_DIAFIX = rs_tDBInput_3.getInt(21);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DIAFIX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row5.CND_IMPBOL = null;
							} else {
	                         		
        	row5.CND_IMPBOL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row5.CND_LIMCRE = null;
							} else {
	                         		
        	row5.CND_LIMCRE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row5.CND_PERCOM = null;
							} else {
		                          
            row5.CND_PERCOM = rs_tDBInput_3.getBigDecimal(24);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PERCOM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row5.CND_PERDPO = null;
							} else {
		                          
            row5.CND_PERDPO = rs_tDBInput_3.getBigDecimal(25);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PERDPO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row5.CND_QTDDAV = null;
							} else {
		                          
            row5.CND_QTDDAV = rs_tDBInput_3.getInt(26);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_QTDDAV = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row5.CND_QTDPAR = null;
							} else {
		                          
            row5.CND_QTDPAR = rs_tDBInput_3.getInt(27);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_QTDPAR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row5.CND_SEMENT = null;
							} else {
	                         		
        	row5.CND_SEMENT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row5.CND_SENCND = null;
							} else {
	                         		
        	row5.CND_SENCND = routines.system.JDBCUtil.getString(rs_tDBInput_3, 29, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row5.CND_VALMIN = null;
							} else {
		                          
            row5.CND_VALMIN = rs_tDBInput_3.getBigDecimal(30);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_VALMIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row5.CND_FATMAX = null;
							} else {
		                          
            row5.CND_FATMAX = rs_tDBInput_3.getBigDecimal(31);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_FATMAX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row5.CND_FATMIN = null;
							} else {
		                          
            row5.CND_FATMIN = rs_tDBInput_3.getBigDecimal(32);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_FATMIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row5.CND_IMPFAT = null;
							} else {
	                         		
        	row5.CND_IMPFAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 33, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row5.CND_MARMAX = null;
							} else {
		                          
            row5.CND_MARMAX = rs_tDBInput_3.getBigDecimal(34);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_MARMAX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row5.CND_MARMIN = null;
							} else {
		                          
            row5.CND_MARMIN = rs_tDBInput_3.getBigDecimal(35);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_MARMIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row5.CND_PEDEAC = null;
							} else {
		                          
            row5.CND_PEDEAC = rs_tDBInput_3.getBigDecimal(36);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PEDEAC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row5.CND_TABPRE = null;
							} else {
	                         		
        	row5.CND_TABPRE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 37, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row5.CND_TIPFAT = null;
							} else {
	                         		
        	row5.CND_TIPFAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 38, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row5.CND_JURPRO = null;
							} else {
	                         		
        	row5.CND_JURPRO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 39, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row5.CND_TIPCND = null;
							} else {
	                         		
        	row5.CND_TIPCND = routines.system.JDBCUtil.getString(rs_tDBInput_3, 40, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row5.CND_ULTALT = null;
							} else {
										
				if(rs_tDBInput_3.getString(41) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(41);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row5.CND_ULTALT = rs_tDBInput_3.getTimestamp(41);
					} else {
						row5.CND_ULTALT = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row5.CND_ULTALT =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row5.CND_PRAMIN = null;
							} else {
	                         		
        	row5.CND_PRAMIN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row5.CND_DESMSU = null;
							} else {
		                          
            row5.CND_DESMSU = rs_tDBInput_3.getBigDecimal(43);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMSU = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 44) {
								row5.CND_EMPACE = null;
							} else {
	                         		
        	row5.CND_EMPACE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 44, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 45) {
								row5.CND_EXPFSO = null;
							} else {
	                         		
        	row5.CND_EXPFSO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 45, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 46) {
								row5.CND_FPGNVL = null;
							} else {
	                         		
        	row5.CND_FPGNVL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 46, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 47) {
								row5.CND_LBPDOB = null;
							} else {
	                         		
        	row5.CND_LBPDOB = routines.system.JDBCUtil.getString(rs_tDBInput_3, 47, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 48) {
								row5.CND_MAXCAR = null;
							} else {
		                          
            row5.CND_MAXCAR = rs_tDBInput_3.getInt(48);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_MAXCAR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 49) {
								row5.CND_MCOBDA = null;
							} else {
	                         		
        	row5.CND_MCOBDA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 49, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 50) {
								row5.CND_SENTRA = null;
							} else {
	                         		
        	row5.CND_SENTRA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 50, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 51) {
								row5.CND_TPFTDA = null;
							} else {
	                         		
        	row5.CND_TPFTDA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 51, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 52) {
								row5.CND_TRCLCR = null;
							} else {
	                         		
        	row5.CND_TRCLCR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 52, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 53) {
								row5.CND_TRTTVE = null;
							} else {
	                         		
        	row5.CND_TRTTVE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 53, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 54) {
								row5.CND_VRDAUV = null;
							} else {
		                          
            row5.CND_VRDAUV = rs_tDBInput_3.getBigDecimal(54);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_VRDAUV = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 55) {
								row5.CND_VRDEAC = null;
							} else {
		                          
            row5.CND_VRDEAC = rs_tDBInput_3.getBigDecimal(55);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_VRDEAC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 56) {
								row5.CND_PARMAX = null;
							} else {
		                          
            row5.CND_PARMAX = rs_tDBInput_3.getBigDecimal(56);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PARMAX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 57) {
								row5.CND_PARMIN = null;
							} else {
		                          
            row5.CND_PARMIN = rs_tDBInput_3.getBigDecimal(57);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PARMIN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 58) {
								row5.CND_RETIRA = null;
							} else {
	                         		
        	row5.CND_RETIRA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 58, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 59) {
								row5.CND_ENTIME = null;
							} else {
	                         		
        	row5.CND_ENTIME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 59, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 60) {
								row5.CND_ENTFUT = null;
							} else {
	                         		
        	row5.CND_ENTFUT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 60, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 61) {
								row5.CND_QTDMAX = null;
							} else {
		                          
            row5.CND_QTDMAX = rs_tDBInput_3.getInt(61);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_QTDMAX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 62) {
								row5.CND_TRCLCB = null;
							} else {
	                         		
        	row5.CND_TRCLCB = routines.system.JDBCUtil.getString(rs_tDBInput_3, 62, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 63) {
								row5.CND_EXPB2B = null;
							} else {
	                         		
        	row5.CND_EXPB2B = routines.system.JDBCUtil.getString(rs_tDBInput_3, 63, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 64) {
								row5.CND_PRETAB = null;
							} else {
	                         		
        	row5.CND_PRETAB = routines.system.JDBCUtil.getString(rs_tDBInput_3, 64, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 65) {
								row5.CND_LIMITE = null;
							} else {
		                          
            row5.CND_LIMITE = rs_tDBInput_3.getInt(65);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_LIMITE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 66) {
								row5.CND_USADEP = null;
							} else {
	                         		
        	row5.CND_USADEP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 66, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 67) {
								row5.CND_RCX_F3 = null;
							} else {
	                         		
        	row5.CND_RCX_F3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 67, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 68) {
								row5.CND_COBYAP = null;
							} else {
	                         		
        	row5.CND_COBYAP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 68, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 69) {
								row5.CND_TRORCR = null;
							} else {
	                         		
        	row5.CND_TRORCR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 69, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 70) {
								row5.CND_TRORCB = null;
							} else {
	                         		
        	row5.CND_TRORCB = routines.system.JDBCUtil.getString(rs_tDBInput_3, 70, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 71) {
								row5.CND_YAPTRA = null;
							} else {
	                         		
        	row5.CND_YAPTRA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 71, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 72) {
								row5.CND_YAPDIS = null;
							} else {
	                         		
        	row5.CND_YAPDIS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 72, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 73) {
								row5.CND_YAPPAR = null;
							} else {
		                          
            row5.CND_YAPPAR = rs_tDBInput_3.getInt(73);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_YAPPAR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 74) {
								row5.CND_TRAFAT = null;
							} else {
	                         		
        	row5.CND_TRAFAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 74, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 75) {
								row5.CND_TRAMAR = null;
							} else {
	                         		
        	row5.CND_TRAMAR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 75, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 76) {
								row5.CND_TRAPAR = null;
							} else {
	                         		
        	row5.CND_TRAPAR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 76, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 77) {
								row5.CND_CNDESP = null;
							} else {
	                         		
        	row5.CND_CNDESP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 77, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 78) {
								row5.CND_DESMVM = null;
							} else {
		                          
            row5.CND_DESMVM = rs_tDBInput_3.getBigDecimal(78);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMVM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 79) {
								row5.CND_DESMSM = null;
							} else {
		                          
            row5.CND_DESMSM = rs_tDBInput_3.getBigDecimal(79);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMSM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 80) {
								row5.CND_DESMGM = null;
							} else {
		                          
            row5.CND_DESMGM = rs_tDBInput_3.getBigDecimal(80);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_DESMGM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 81) {
								row5.CND_RECPIX = null;
							} else {
	                         		
        	row5.CND_RECPIX = routines.system.JDBCUtil.getString(rs_tDBInput_3, 81, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 82) {
								row5.CND_TRACNC = null;
							} else {
	                         		
        	row5.CND_TRACNC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 82, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 83) {
								row5.CND_TRORFI = null;
							} else {
	                         		
        	row5.CND_TRORFI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 83, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 84) {
								row5.CND_TRORPF = null;
							} else {
	                         		
        	row5.CND_TRORPF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 84, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 85) {
								row5.CND_DIACOR = null;
							} else {
	                         		
        	row5.CND_DIACOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 85, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 86) {
								row5.CND_PERVEN = null;
							} else {
		                          
            row5.CND_PERVEN = rs_tDBInput_3.getBigDecimal(86);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PERVEN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 87) {
								row5.CND_GERLNK = null;
							} else {
	                         		
        	row5.CND_GERLNK = routines.system.JDBCUtil.getString(rs_tDBInput_3, 87, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 88) {
								row5.CND_ESPFAT = null;
							} else {
	                         		
        	row5.CND_ESPFAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 88, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 89) {
								row5.CND_COBPME = null;
							} else {
	                         		
        	row5.CND_COBPME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 89, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 90) {
								row5.CND_EXPTAB = null;
							} else {
	                         		
        	row5.CND_EXPTAB = routines.system.JDBCUtil.getString(rs_tDBInput_3, 90, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 91) {
								row5.CND_PMEDVC = null;
							} else {
	                         		
        	row5.CND_PMEDVC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 91, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 92) {
								row5.CND_PMEQPA = null;
							} else {
	                         		
        	row5.CND_PMEQPA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 92, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 93) {
								row5.CND_PMEQPJ = null;
							} else {
	                         		
        	row5.CND_PMEQPJ = routines.system.JDBCUtil.getString(rs_tDBInput_3, 93, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 94) {
								row5.CND_PMEJCT = null;
							} else {
		                          
            row5.CND_PMEJCT = rs_tDBInput_3.getBigDecimal(94);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_PMEJCT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 95) {
								row5.CND_MODIVN = null;
							} else {
	                         		
        	row5.CND_MODIVN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 95, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 96) {
								row5.CND_PETRCD = null;
							} else {
	                         		
        	row5.CND_PETRCD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 96, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 97) {
								row5.CND_EMIBOL = null;
							} else {
		                          
            row5.CND_EMIBOL = rs_tDBInput_3.getInt(97);
            if(rs_tDBInput_3.wasNull()){
                    row5.CND_EMIBOL = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

TABLE = null;


// # Output table : 'TABLE'
TABLE_tmp.CND_CODIGO = row5.CND_CODIGO ;
TABLE_tmp.CND_DESCRI = row5.CND_DESCRI ;
TABLE_tmp.CND_CNDPAG = row5.CND_CNDPAG ;
TABLE_tmp.CND_TIPFOR = row5.CND_TIPFOR ;
TABLE_tmp.CND_CODPOR = row5.CND_CODPOR ;
TABLE_tmp.AUTOINCREM = row5.AUTOINCREM ;
TABLE_tmp.CND_CODEMP = row5.CND_CODEMP ;
TABLE_tmp.CND_DESMAX = row5.CND_DESMAX ;
TABLE_tmp.CND_ABADES = row5.CND_ABADES ;
TABLE_tmp.CND_ABDECC = row5.CND_ABDECC ;
TABLE_tmp.CND_TXJURO = row5.CND_TXJURO ;
TABLE_tmp.CND_CODFPG = row5.CND_CODFPG ;
TABLE_tmp.CND_PRZMED = row5.CND_PRZMED ;
TABLE_tmp.CND_FATACA = row5.CND_FATACA ;
TABLE_tmp.CND_INFANA = row5.CND_INFANA ;
TABLE_tmp.CND_STATUS = row5.CND_STATUS ;
TABLE_tmp.CND_DESMGE = row5.CND_DESMGE ;
TABLE_tmp.CND_ALTPRE = row5.CND_ALTPRE ;
TABLE_tmp.CND_CODVEL = row5.CND_CODVEL ;
TABLE_tmp.CND_DESPFL = row5.CND_DESPFL ;
TABLE_tmp.CND_DIAFIX = row5.CND_DIAFIX ;
TABLE_tmp.CND_IMPBOL = row5.CND_IMPBOL ;
TABLE_tmp.CND_LIMCRE = row5.CND_LIMCRE ;
TABLE_tmp.CND_PERCOM = row5.CND_PERCOM ;
TABLE_tmp.CND_PERDPO = row5.CND_PERDPO ;
TABLE_tmp.CND_QTDDAV = row5.CND_QTDDAV ;
TABLE_tmp.CND_QTDPAR = row5.CND_QTDPAR ;
TABLE_tmp.CND_SEMENT = row5.CND_SEMENT ;
TABLE_tmp.CND_SENCND = row5.CND_SENCND ;
TABLE_tmp.CND_VALMIN = row5.CND_VALMIN ;
TABLE_tmp.CND_FATMAX = row5.CND_FATMAX ;
TABLE_tmp.CND_FATMIN = row5.CND_FATMIN ;
TABLE_tmp.CND_IMPFAT = row5.CND_IMPFAT ;
TABLE_tmp.CND_MARMAX = row5.CND_MARMAX ;
TABLE_tmp.CND_MARMIN = row5.CND_MARMIN ;
TABLE_tmp.CND_PEDEAC = row5.CND_PEDEAC ;
TABLE_tmp.CND_TABPRE = row5.CND_TABPRE ;
TABLE_tmp.CND_TIPFAT = row5.CND_TIPFAT ;
TABLE_tmp.CND_JURPRO = row5.CND_JURPRO ;
TABLE_tmp.CND_TIPCND = row5.CND_TIPCND ;
TABLE_tmp.CND_ULTALT = row5.CND_ULTALT ;
TABLE_tmp.CND_PRAMIN = row5.CND_PRAMIN ;
TABLE_tmp.CND_DESMSU = row5.CND_DESMSU ;
TABLE_tmp.CND_EMPACE = row5.CND_EMPACE ;
TABLE_tmp.CND_EXPFSO = row5.CND_EXPFSO ;
TABLE_tmp.CND_FPGNVL = row5.CND_FPGNVL ;
TABLE_tmp.CND_LBPDOB = row5.CND_LBPDOB ;
TABLE_tmp.CND_MAXCAR = row5.CND_MAXCAR ;
TABLE_tmp.CND_MCOBDA = row5.CND_MCOBDA ;
TABLE_tmp.CND_SENTRA = row5.CND_SENTRA ;
TABLE_tmp.CND_TPFTDA = row5.CND_TPFTDA ;
TABLE_tmp.CND_TRCLCR = row5.CND_TRCLCR ;
TABLE_tmp.CND_TRTTVE = row5.CND_TRTTVE ;
TABLE_tmp.CND_VRDAUV = row5.CND_VRDAUV ;
TABLE_tmp.CND_VRDEAC = row5.CND_VRDEAC ;
TABLE_tmp.CND_PARMAX = row5.CND_PARMAX ;
TABLE_tmp.CND_PARMIN = row5.CND_PARMIN ;
TABLE_tmp.CND_RETIRA = row5.CND_RETIRA ;
TABLE_tmp.CND_ENTIME = row5.CND_ENTIME ;
TABLE_tmp.CND_ENTFUT = row5.CND_ENTFUT ;
TABLE_tmp.CND_QTDMAX = row5.CND_QTDMAX ;
TABLE_tmp.CND_TRCLCB = row5.CND_TRCLCB ;
TABLE_tmp.CND_EXPB2B = row5.CND_EXPB2B ;
TABLE_tmp.CND_PRETAB = row5.CND_PRETAB ;
TABLE_tmp.CND_LIMITE = row5.CND_LIMITE ;
TABLE_tmp.CND_USADEP = row5.CND_USADEP ;
TABLE_tmp.CND_RCX_F3 = row5.CND_RCX_F3 ;
TABLE_tmp.CND_COBYAP = row5.CND_COBYAP ;
TABLE_tmp.CND_TRORCR = row5.CND_TRORCR ;
TABLE_tmp.CND_TRORCB = row5.CND_TRORCB ;
TABLE_tmp.CND_YAPTRA = row5.CND_YAPTRA ;
TABLE_tmp.CND_YAPDIS = row5.CND_YAPDIS ;
TABLE_tmp.CND_YAPPAR = row5.CND_YAPPAR ;
TABLE_tmp.CND_TRAFAT = row5.CND_TRAFAT ;
TABLE_tmp.CND_TRAMAR = row5.CND_TRAMAR ;
TABLE_tmp.CND_TRAPAR = row5.CND_TRAPAR ;
TABLE_tmp.CND_CNDESP = row5.CND_CNDESP ;
TABLE_tmp.CND_DESMVM = row5.CND_DESMVM ;
TABLE_tmp.CND_DESMSM = row5.CND_DESMSM ;
TABLE_tmp.CND_DESMGM = row5.CND_DESMGM ;
TABLE_tmp.CND_RECPIX = row5.CND_RECPIX ;
TABLE_tmp.CND_TRACNC = row5.CND_TRACNC ;
TABLE_tmp.CND_TRORFI = row5.CND_TRORFI ;
TABLE_tmp.CND_TRORPF = row5.CND_TRORPF ;
TABLE_tmp.CND_DIACOR = row5.CND_DIACOR ;
TABLE_tmp.CND_PERVEN = row5.CND_PERVEN ;
TABLE_tmp.CND_GERLNK = row5.CND_GERLNK ;
TABLE_tmp.CND_ESPFAT = row5.CND_ESPFAT ;
TABLE_tmp.CND_COBPME = row5.CND_COBPME ;
TABLE_tmp.CND_EXPTAB = row5.CND_EXPTAB ;
TABLE_tmp.CND_PMEDVC = row5.CND_PMEDVC ;
TABLE_tmp.CND_PMEQPA = row5.CND_PMEQPA ;
TABLE_tmp.CND_PMEQPJ = row5.CND_PMEQPJ ;
TABLE_tmp.CND_PMEJCT = row5.CND_PMEJCT ;
TABLE_tmp.CND_MODIVN = row5.CND_MODIVN ;
TABLE_tmp.CND_PETRCD = row5.CND_PETRCD ;
TABLE_tmp.CND_EMIBOL = row5.CND_EMIBOL ;
TABLE = TABLE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "TABLE"
if(TABLE != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TABLE"
						
						);
					}
					



    
		TABLEStruct oneRow_tHashOutput_2 = new TABLEStruct();
				
					oneRow_tHashOutput_2.CND_CODIGO = TABLE.CND_CODIGO;
					oneRow_tHashOutput_2.CND_DESCRI = TABLE.CND_DESCRI;
					oneRow_tHashOutput_2.CND_CNDPAG = TABLE.CND_CNDPAG;
					oneRow_tHashOutput_2.CND_TIPFOR = TABLE.CND_TIPFOR;
					oneRow_tHashOutput_2.CND_CODPOR = TABLE.CND_CODPOR;
					oneRow_tHashOutput_2.AUTOINCREM = TABLE.AUTOINCREM;
					oneRow_tHashOutput_2.CND_CODEMP = TABLE.CND_CODEMP;
					oneRow_tHashOutput_2.CND_DESMAX = TABLE.CND_DESMAX;
					oneRow_tHashOutput_2.CND_ABADES = TABLE.CND_ABADES;
					oneRow_tHashOutput_2.CND_ABDECC = TABLE.CND_ABDECC;
					oneRow_tHashOutput_2.CND_TXJURO = TABLE.CND_TXJURO;
					oneRow_tHashOutput_2.CND_CODFPG = TABLE.CND_CODFPG;
					oneRow_tHashOutput_2.CND_PRZMED = TABLE.CND_PRZMED;
					oneRow_tHashOutput_2.CND_FATACA = TABLE.CND_FATACA;
					oneRow_tHashOutput_2.CND_INFANA = TABLE.CND_INFANA;
					oneRow_tHashOutput_2.CND_STATUS = TABLE.CND_STATUS;
					oneRow_tHashOutput_2.CND_DESMGE = TABLE.CND_DESMGE;
					oneRow_tHashOutput_2.CND_ALTPRE = TABLE.CND_ALTPRE;
					oneRow_tHashOutput_2.CND_CODVEL = TABLE.CND_CODVEL;
					oneRow_tHashOutput_2.CND_DESPFL = TABLE.CND_DESPFL;
					oneRow_tHashOutput_2.CND_DIAFIX = TABLE.CND_DIAFIX;
					oneRow_tHashOutput_2.CND_IMPBOL = TABLE.CND_IMPBOL;
					oneRow_tHashOutput_2.CND_LIMCRE = TABLE.CND_LIMCRE;
					oneRow_tHashOutput_2.CND_PERCOM = TABLE.CND_PERCOM;
					oneRow_tHashOutput_2.CND_PERDPO = TABLE.CND_PERDPO;
					oneRow_tHashOutput_2.CND_QTDDAV = TABLE.CND_QTDDAV;
					oneRow_tHashOutput_2.CND_QTDPAR = TABLE.CND_QTDPAR;
					oneRow_tHashOutput_2.CND_SEMENT = TABLE.CND_SEMENT;
					oneRow_tHashOutput_2.CND_SENCND = TABLE.CND_SENCND;
					oneRow_tHashOutput_2.CND_VALMIN = TABLE.CND_VALMIN;
					oneRow_tHashOutput_2.CND_FATMAX = TABLE.CND_FATMAX;
					oneRow_tHashOutput_2.CND_FATMIN = TABLE.CND_FATMIN;
					oneRow_tHashOutput_2.CND_IMPFAT = TABLE.CND_IMPFAT;
					oneRow_tHashOutput_2.CND_MARMAX = TABLE.CND_MARMAX;
					oneRow_tHashOutput_2.CND_MARMIN = TABLE.CND_MARMIN;
					oneRow_tHashOutput_2.CND_PEDEAC = TABLE.CND_PEDEAC;
					oneRow_tHashOutput_2.CND_TABPRE = TABLE.CND_TABPRE;
					oneRow_tHashOutput_2.CND_TIPFAT = TABLE.CND_TIPFAT;
					oneRow_tHashOutput_2.CND_JURPRO = TABLE.CND_JURPRO;
					oneRow_tHashOutput_2.CND_TIPCND = TABLE.CND_TIPCND;
					oneRow_tHashOutput_2.CND_ULTALT = TABLE.CND_ULTALT;
					oneRow_tHashOutput_2.CND_PRAMIN = TABLE.CND_PRAMIN;
					oneRow_tHashOutput_2.CND_DESMSU = TABLE.CND_DESMSU;
					oneRow_tHashOutput_2.CND_EMPACE = TABLE.CND_EMPACE;
					oneRow_tHashOutput_2.CND_EXPFSO = TABLE.CND_EXPFSO;
					oneRow_tHashOutput_2.CND_FPGNVL = TABLE.CND_FPGNVL;
					oneRow_tHashOutput_2.CND_LBPDOB = TABLE.CND_LBPDOB;
					oneRow_tHashOutput_2.CND_MAXCAR = TABLE.CND_MAXCAR;
					oneRow_tHashOutput_2.CND_MCOBDA = TABLE.CND_MCOBDA;
					oneRow_tHashOutput_2.CND_SENTRA = TABLE.CND_SENTRA;
					oneRow_tHashOutput_2.CND_TPFTDA = TABLE.CND_TPFTDA;
					oneRow_tHashOutput_2.CND_TRCLCR = TABLE.CND_TRCLCR;
					oneRow_tHashOutput_2.CND_TRTTVE = TABLE.CND_TRTTVE;
					oneRow_tHashOutput_2.CND_VRDAUV = TABLE.CND_VRDAUV;
					oneRow_tHashOutput_2.CND_VRDEAC = TABLE.CND_VRDEAC;
					oneRow_tHashOutput_2.CND_PARMAX = TABLE.CND_PARMAX;
					oneRow_tHashOutput_2.CND_PARMIN = TABLE.CND_PARMIN;
					oneRow_tHashOutput_2.CND_RETIRA = TABLE.CND_RETIRA;
					oneRow_tHashOutput_2.CND_ENTIME = TABLE.CND_ENTIME;
					oneRow_tHashOutput_2.CND_ENTFUT = TABLE.CND_ENTFUT;
					oneRow_tHashOutput_2.CND_QTDMAX = TABLE.CND_QTDMAX;
					oneRow_tHashOutput_2.CND_TRCLCB = TABLE.CND_TRCLCB;
					oneRow_tHashOutput_2.CND_EXPB2B = TABLE.CND_EXPB2B;
					oneRow_tHashOutput_2.CND_PRETAB = TABLE.CND_PRETAB;
					oneRow_tHashOutput_2.CND_LIMITE = TABLE.CND_LIMITE;
					oneRow_tHashOutput_2.CND_USADEP = TABLE.CND_USADEP;
					oneRow_tHashOutput_2.CND_RCX_F3 = TABLE.CND_RCX_F3;
					oneRow_tHashOutput_2.CND_COBYAP = TABLE.CND_COBYAP;
					oneRow_tHashOutput_2.CND_TRORCR = TABLE.CND_TRORCR;
					oneRow_tHashOutput_2.CND_TRORCB = TABLE.CND_TRORCB;
					oneRow_tHashOutput_2.CND_YAPTRA = TABLE.CND_YAPTRA;
					oneRow_tHashOutput_2.CND_YAPDIS = TABLE.CND_YAPDIS;
					oneRow_tHashOutput_2.CND_YAPPAR = TABLE.CND_YAPPAR;
					oneRow_tHashOutput_2.CND_TRAFAT = TABLE.CND_TRAFAT;
					oneRow_tHashOutput_2.CND_TRAMAR = TABLE.CND_TRAMAR;
					oneRow_tHashOutput_2.CND_TRAPAR = TABLE.CND_TRAPAR;
					oneRow_tHashOutput_2.CND_CNDESP = TABLE.CND_CNDESP;
					oneRow_tHashOutput_2.CND_DESMVM = TABLE.CND_DESMVM;
					oneRow_tHashOutput_2.CND_DESMSM = TABLE.CND_DESMSM;
					oneRow_tHashOutput_2.CND_DESMGM = TABLE.CND_DESMGM;
					oneRow_tHashOutput_2.CND_RECPIX = TABLE.CND_RECPIX;
					oneRow_tHashOutput_2.CND_TRACNC = TABLE.CND_TRACNC;
					oneRow_tHashOutput_2.CND_TRORFI = TABLE.CND_TRORFI;
					oneRow_tHashOutput_2.CND_TRORPF = TABLE.CND_TRORPF;
					oneRow_tHashOutput_2.CND_DIACOR = TABLE.CND_DIACOR;
					oneRow_tHashOutput_2.CND_PERVEN = TABLE.CND_PERVEN;
					oneRow_tHashOutput_2.CND_GERLNK = TABLE.CND_GERLNK;
					oneRow_tHashOutput_2.CND_ESPFAT = TABLE.CND_ESPFAT;
					oneRow_tHashOutput_2.CND_COBPME = TABLE.CND_COBPME;
					oneRow_tHashOutput_2.CND_EXPTAB = TABLE.CND_EXPTAB;
					oneRow_tHashOutput_2.CND_PMEDVC = TABLE.CND_PMEDVC;
					oneRow_tHashOutput_2.CND_PMEQPA = TABLE.CND_PMEQPA;
					oneRow_tHashOutput_2.CND_PMEQPJ = TABLE.CND_PMEQPJ;
					oneRow_tHashOutput_2.CND_PMEJCT = TABLE.CND_PMEJCT;
					oneRow_tHashOutput_2.CND_MODIVN = TABLE.CND_MODIVN;
					oneRow_tHashOutput_2.CND_PETRCD = TABLE.CND_PETRCD;
					oneRow_tHashOutput_2.CND_EMIBOL = TABLE.CND_EMIBOL;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "TABLE"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TABLE");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class insert_tableStruct implements routines.system.IPersistableRow<insert_tableStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CND_CODIGO;

				public String getCND_CODIGO () {
					return this.CND_CODIGO;
				}

				public Boolean CND_CODIGOIsNullable(){
				    return false;
				}
				public Boolean CND_CODIGOIsKey(){
				    return false;
				}
				public Integer CND_CODIGOLength(){
				    return 3;
				}
				public Integer CND_CODIGOPrecision(){
				    return 0;
				}
				public String CND_CODIGODefault(){
				
					return null;
				
				}
				public String CND_CODIGOComment(){
				
				    return "";
				
				}
				public String CND_CODIGOPattern(){
				
					return "";
				
				}
				public String CND_CODIGOOriginalDbColumnName(){
				
					return "CND_CODIGO";
				
				}

				
			    public String CND_DESCRI;

				public String getCND_DESCRI () {
					return this.CND_DESCRI;
				}

				public Boolean CND_DESCRIIsNullable(){
				    return true;
				}
				public Boolean CND_DESCRIIsKey(){
				    return false;
				}
				public Integer CND_DESCRILength(){
				    return 70;
				}
				public Integer CND_DESCRIPrecision(){
				    return 0;
				}
				public String CND_DESCRIDefault(){
				
					return null;
				
				}
				public String CND_DESCRIComment(){
				
				    return "";
				
				}
				public String CND_DESCRIPattern(){
				
					return "";
				
				}
				public String CND_DESCRIOriginalDbColumnName(){
				
					return "CND_DESCRI";
				
				}

				
			    public String CND_CNDPAG;

				public String getCND_CNDPAG () {
					return this.CND_CNDPAG;
				}

				public Boolean CND_CNDPAGIsNullable(){
				    return true;
				}
				public Boolean CND_CNDPAGIsKey(){
				    return false;
				}
				public Integer CND_CNDPAGLength(){
				    return 74;
				}
				public Integer CND_CNDPAGPrecision(){
				    return 0;
				}
				public String CND_CNDPAGDefault(){
				
					return null;
				
				}
				public String CND_CNDPAGComment(){
				
				    return "";
				
				}
				public String CND_CNDPAGPattern(){
				
					return "";
				
				}
				public String CND_CNDPAGOriginalDbColumnName(){
				
					return "CND_CNDPAG";
				
				}

				
			    public String CND_TIPFOR;

				public String getCND_TIPFOR () {
					return this.CND_TIPFOR;
				}

				public Boolean CND_TIPFORIsNullable(){
				    return false;
				}
				public Boolean CND_TIPFORIsKey(){
				    return false;
				}
				public Integer CND_TIPFORLength(){
				    return 10;
				}
				public Integer CND_TIPFORPrecision(){
				    return 0;
				}
				public String CND_TIPFORDefault(){
				
					return null;
				
				}
				public String CND_TIPFORComment(){
				
				    return "";
				
				}
				public String CND_TIPFORPattern(){
				
					return "";
				
				}
				public String CND_TIPFOROriginalDbColumnName(){
				
					return "CND_TIPFOR";
				
				}

				
			    public String CND_CODPOR;

				public String getCND_CODPOR () {
					return this.CND_CODPOR;
				}

				public Boolean CND_CODPORIsNullable(){
				    return true;
				}
				public Boolean CND_CODPORIsKey(){
				    return false;
				}
				public Integer CND_CODPORLength(){
				    return 5;
				}
				public Integer CND_CODPORPrecision(){
				    return 0;
				}
				public String CND_CODPORDefault(){
				
					return null;
				
				}
				public String CND_CODPORComment(){
				
				    return "";
				
				}
				public String CND_CODPORPattern(){
				
					return "";
				
				}
				public String CND_CODPOROriginalDbColumnName(){
				
					return "CND_CODPOR";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return false;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return 0;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public String CND_CODEMP;

				public String getCND_CODEMP () {
					return this.CND_CODEMP;
				}

				public Boolean CND_CODEMPIsNullable(){
				    return true;
				}
				public Boolean CND_CODEMPIsKey(){
				    return false;
				}
				public Integer CND_CODEMPLength(){
				    return 3;
				}
				public Integer CND_CODEMPPrecision(){
				    return 0;
				}
				public String CND_CODEMPDefault(){
				
					return null;
				
				}
				public String CND_CODEMPComment(){
				
				    return "";
				
				}
				public String CND_CODEMPPattern(){
				
					return "";
				
				}
				public String CND_CODEMPOriginalDbColumnName(){
				
					return "CND_CODEMP";
				
				}

				
			    public BigDecimal CND_DESMAX;

				public BigDecimal getCND_DESMAX () {
					return this.CND_DESMAX;
				}

				public Boolean CND_DESMAXIsNullable(){
				    return true;
				}
				public Boolean CND_DESMAXIsKey(){
				    return false;
				}
				public Integer CND_DESMAXLength(){
				    return 12;
				}
				public Integer CND_DESMAXPrecision(){
				    return 2;
				}
				public String CND_DESMAXDefault(){
				
					return null;
				
				}
				public String CND_DESMAXComment(){
				
				    return "";
				
				}
				public String CND_DESMAXPattern(){
				
					return "";
				
				}
				public String CND_DESMAXOriginalDbColumnName(){
				
					return "CND_DESMAX";
				
				}

				
			    public String CND_ABADES;

				public String getCND_ABADES () {
					return this.CND_ABADES;
				}

				public Boolean CND_ABADESIsNullable(){
				    return true;
				}
				public Boolean CND_ABADESIsKey(){
				    return false;
				}
				public Integer CND_ABADESLength(){
				    return 1;
				}
				public Integer CND_ABADESPrecision(){
				    return 0;
				}
				public String CND_ABADESDefault(){
				
					return null;
				
				}
				public String CND_ABADESComment(){
				
				    return "";
				
				}
				public String CND_ABADESPattern(){
				
					return "";
				
				}
				public String CND_ABADESOriginalDbColumnName(){
				
					return "CND_ABADES";
				
				}

				
			    public String CND_ABDECC;

				public String getCND_ABDECC () {
					return this.CND_ABDECC;
				}

				public Boolean CND_ABDECCIsNullable(){
				    return true;
				}
				public Boolean CND_ABDECCIsKey(){
				    return false;
				}
				public Integer CND_ABDECCLength(){
				    return 1;
				}
				public Integer CND_ABDECCPrecision(){
				    return 0;
				}
				public String CND_ABDECCDefault(){
				
					return null;
				
				}
				public String CND_ABDECCComment(){
				
				    return "";
				
				}
				public String CND_ABDECCPattern(){
				
					return "";
				
				}
				public String CND_ABDECCOriginalDbColumnName(){
				
					return "CND_ABDECC";
				
				}

				
			    public BigDecimal CND_TXJURO;

				public BigDecimal getCND_TXJURO () {
					return this.CND_TXJURO;
				}

				public Boolean CND_TXJUROIsNullable(){
				    return true;
				}
				public Boolean CND_TXJUROIsKey(){
				    return false;
				}
				public Integer CND_TXJUROLength(){
				    return 12;
				}
				public Integer CND_TXJUROPrecision(){
				    return 4;
				}
				public String CND_TXJURODefault(){
				
					return null;
				
				}
				public String CND_TXJUROComment(){
				
				    return "";
				
				}
				public String CND_TXJUROPattern(){
				
					return "";
				
				}
				public String CND_TXJUROOriginalDbColumnName(){
				
					return "CND_TXJURO";
				
				}

				
			    public String CND_CODFPG;

				public String getCND_CODFPG () {
					return this.CND_CODFPG;
				}

				public Boolean CND_CODFPGIsNullable(){
				    return true;
				}
				public Boolean CND_CODFPGIsKey(){
				    return false;
				}
				public Integer CND_CODFPGLength(){
				    return 3;
				}
				public Integer CND_CODFPGPrecision(){
				    return 0;
				}
				public String CND_CODFPGDefault(){
				
					return null;
				
				}
				public String CND_CODFPGComment(){
				
				    return "";
				
				}
				public String CND_CODFPGPattern(){
				
					return "";
				
				}
				public String CND_CODFPGOriginalDbColumnName(){
				
					return "CND_CODFPG";
				
				}

				
			    public BigDecimal CND_PRZMED;

				public BigDecimal getCND_PRZMED () {
					return this.CND_PRZMED;
				}

				public Boolean CND_PRZMEDIsNullable(){
				    return true;
				}
				public Boolean CND_PRZMEDIsKey(){
				    return false;
				}
				public Integer CND_PRZMEDLength(){
				    return 12;
				}
				public Integer CND_PRZMEDPrecision(){
				    return 2;
				}
				public String CND_PRZMEDDefault(){
				
					return null;
				
				}
				public String CND_PRZMEDComment(){
				
				    return "";
				
				}
				public String CND_PRZMEDPattern(){
				
					return "";
				
				}
				public String CND_PRZMEDOriginalDbColumnName(){
				
					return "CND_PRZMED";
				
				}

				
			    public BigDecimal CND_FATACA;

				public BigDecimal getCND_FATACA () {
					return this.CND_FATACA;
				}

				public Boolean CND_FATACAIsNullable(){
				    return true;
				}
				public Boolean CND_FATACAIsKey(){
				    return false;
				}
				public Integer CND_FATACALength(){
				    return 5;
				}
				public Integer CND_FATACAPrecision(){
				    return 4;
				}
				public String CND_FATACADefault(){
				
					return null;
				
				}
				public String CND_FATACAComment(){
				
				    return "";
				
				}
				public String CND_FATACAPattern(){
				
					return "";
				
				}
				public String CND_FATACAOriginalDbColumnName(){
				
					return "CND_FATACA";
				
				}

				
			    public String CND_INFANA;

				public String getCND_INFANA () {
					return this.CND_INFANA;
				}

				public Boolean CND_INFANAIsNullable(){
				    return true;
				}
				public Boolean CND_INFANAIsKey(){
				    return false;
				}
				public Integer CND_INFANALength(){
				    return 1;
				}
				public Integer CND_INFANAPrecision(){
				    return 0;
				}
				public String CND_INFANADefault(){
				
					return "'S'";
				
				}
				public String CND_INFANAComment(){
				
				    return "";
				
				}
				public String CND_INFANAPattern(){
				
					return "";
				
				}
				public String CND_INFANAOriginalDbColumnName(){
				
					return "CND_INFANA";
				
				}

				
			    public String CND_STATUS;

				public String getCND_STATUS () {
					return this.CND_STATUS;
				}

				public Boolean CND_STATUSIsNullable(){
				    return true;
				}
				public Boolean CND_STATUSIsKey(){
				    return false;
				}
				public Integer CND_STATUSLength(){
				    return 1;
				}
				public Integer CND_STATUSPrecision(){
				    return 0;
				}
				public String CND_STATUSDefault(){
				
					return "'A'";
				
				}
				public String CND_STATUSComment(){
				
				    return "";
				
				}
				public String CND_STATUSPattern(){
				
					return "";
				
				}
				public String CND_STATUSOriginalDbColumnName(){
				
					return "CND_STATUS";
				
				}

				
			    public BigDecimal CND_DESMGE;

				public BigDecimal getCND_DESMGE () {
					return this.CND_DESMGE;
				}

				public Boolean CND_DESMGEIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGEIsKey(){
				    return false;
				}
				public Integer CND_DESMGELength(){
				    return 12;
				}
				public Integer CND_DESMGEPrecision(){
				    return 2;
				}
				public String CND_DESMGEDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGEComment(){
				
				    return "";
				
				}
				public String CND_DESMGEPattern(){
				
					return "";
				
				}
				public String CND_DESMGEOriginalDbColumnName(){
				
					return "CND_DESMGE";
				
				}

				
			    public String CND_ALTPRE;

				public String getCND_ALTPRE () {
					return this.CND_ALTPRE;
				}

				public Boolean CND_ALTPREIsNullable(){
				    return true;
				}
				public Boolean CND_ALTPREIsKey(){
				    return false;
				}
				public Integer CND_ALTPRELength(){
				    return 1;
				}
				public Integer CND_ALTPREPrecision(){
				    return 0;
				}
				public String CND_ALTPREDefault(){
				
					return "'S'";
				
				}
				public String CND_ALTPREComment(){
				
				    return "";
				
				}
				public String CND_ALTPREPattern(){
				
					return "";
				
				}
				public String CND_ALTPREOriginalDbColumnName(){
				
					return "CND_ALTPRE";
				
				}

				
			    public String CND_CODVEL;

				public String getCND_CODVEL () {
					return this.CND_CODVEL;
				}

				public Boolean CND_CODVELIsNullable(){
				    return true;
				}
				public Boolean CND_CODVELIsKey(){
				    return false;
				}
				public Integer CND_CODVELLength(){
				    return 20;
				}
				public Integer CND_CODVELPrecision(){
				    return 0;
				}
				public String CND_CODVELDefault(){
				
					return null;
				
				}
				public String CND_CODVELComment(){
				
				    return "";
				
				}
				public String CND_CODVELPattern(){
				
					return "";
				
				}
				public String CND_CODVELOriginalDbColumnName(){
				
					return "CND_CODVEL";
				
				}

				
			    public String CND_DESPFL;

				public String getCND_DESPFL () {
					return this.CND_DESPFL;
				}

				public Boolean CND_DESPFLIsNullable(){
				    return true;
				}
				public Boolean CND_DESPFLIsKey(){
				    return false;
				}
				public Integer CND_DESPFLLength(){
				    return 255;
				}
				public Integer CND_DESPFLPrecision(){
				    return 0;
				}
				public String CND_DESPFLDefault(){
				
					return null;
				
				}
				public String CND_DESPFLComment(){
				
				    return "";
				
				}
				public String CND_DESPFLPattern(){
				
					return "";
				
				}
				public String CND_DESPFLOriginalDbColumnName(){
				
					return "CND_DESPFL";
				
				}

				
			    public Integer CND_DIAFIX;

				public Integer getCND_DIAFIX () {
					return this.CND_DIAFIX;
				}

				public Boolean CND_DIAFIXIsNullable(){
				    return true;
				}
				public Boolean CND_DIAFIXIsKey(){
				    return false;
				}
				public Integer CND_DIAFIXLength(){
				    return 10;
				}
				public Integer CND_DIAFIXPrecision(){
				    return 0;
				}
				public String CND_DIAFIXDefault(){
				
					return null;
				
				}
				public String CND_DIAFIXComment(){
				
				    return "";
				
				}
				public String CND_DIAFIXPattern(){
				
					return "";
				
				}
				public String CND_DIAFIXOriginalDbColumnName(){
				
					return "CND_DIAFIX";
				
				}

				
			    public String CND_IMPBOL;

				public String getCND_IMPBOL () {
					return this.CND_IMPBOL;
				}

				public Boolean CND_IMPBOLIsNullable(){
				    return true;
				}
				public Boolean CND_IMPBOLIsKey(){
				    return false;
				}
				public Integer CND_IMPBOLLength(){
				    return 1;
				}
				public Integer CND_IMPBOLPrecision(){
				    return 0;
				}
				public String CND_IMPBOLDefault(){
				
					return "'S'";
				
				}
				public String CND_IMPBOLComment(){
				
				    return "";
				
				}
				public String CND_IMPBOLPattern(){
				
					return "";
				
				}
				public String CND_IMPBOLOriginalDbColumnName(){
				
					return "CND_IMPBOL";
				
				}

				
			    public String CND_LIMCRE;

				public String getCND_LIMCRE () {
					return this.CND_LIMCRE;
				}

				public Boolean CND_LIMCREIsNullable(){
				    return true;
				}
				public Boolean CND_LIMCREIsKey(){
				    return false;
				}
				public Integer CND_LIMCRELength(){
				    return 1;
				}
				public Integer CND_LIMCREPrecision(){
				    return 0;
				}
				public String CND_LIMCREDefault(){
				
					return "'S'";
				
				}
				public String CND_LIMCREComment(){
				
				    return "";
				
				}
				public String CND_LIMCREPattern(){
				
					return "";
				
				}
				public String CND_LIMCREOriginalDbColumnName(){
				
					return "CND_LIMCRE";
				
				}

				
			    public BigDecimal CND_PERCOM;

				public BigDecimal getCND_PERCOM () {
					return this.CND_PERCOM;
				}

				public Boolean CND_PERCOMIsNullable(){
				    return true;
				}
				public Boolean CND_PERCOMIsKey(){
				    return false;
				}
				public Integer CND_PERCOMLength(){
				    return 12;
				}
				public Integer CND_PERCOMPrecision(){
				    return 2;
				}
				public String CND_PERCOMDefault(){
				
					return null;
				
				}
				public String CND_PERCOMComment(){
				
				    return "";
				
				}
				public String CND_PERCOMPattern(){
				
					return "";
				
				}
				public String CND_PERCOMOriginalDbColumnName(){
				
					return "CND_PERCOM";
				
				}

				
			    public BigDecimal CND_PERDPO;

				public BigDecimal getCND_PERDPO () {
					return this.CND_PERDPO;
				}

				public Boolean CND_PERDPOIsNullable(){
				    return true;
				}
				public Boolean CND_PERDPOIsKey(){
				    return false;
				}
				public Integer CND_PERDPOLength(){
				    return 12;
				}
				public Integer CND_PERDPOPrecision(){
				    return 2;
				}
				public String CND_PERDPODefault(){
				
					return "0.00";
				
				}
				public String CND_PERDPOComment(){
				
				    return "";
				
				}
				public String CND_PERDPOPattern(){
				
					return "";
				
				}
				public String CND_PERDPOOriginalDbColumnName(){
				
					return "CND_PERDPO";
				
				}

				
			    public Integer CND_QTDDAV;

				public Integer getCND_QTDDAV () {
					return this.CND_QTDDAV;
				}

				public Boolean CND_QTDDAVIsNullable(){
				    return true;
				}
				public Boolean CND_QTDDAVIsKey(){
				    return false;
				}
				public Integer CND_QTDDAVLength(){
				    return 10;
				}
				public Integer CND_QTDDAVPrecision(){
				    return 0;
				}
				public String CND_QTDDAVDefault(){
				
					return "0";
				
				}
				public String CND_QTDDAVComment(){
				
				    return "";
				
				}
				public String CND_QTDDAVPattern(){
				
					return "";
				
				}
				public String CND_QTDDAVOriginalDbColumnName(){
				
					return "CND_QTDDAV";
				
				}

				
			    public Integer CND_QTDPAR;

				public Integer getCND_QTDPAR () {
					return this.CND_QTDPAR;
				}

				public Boolean CND_QTDPARIsNullable(){
				    return true;
				}
				public Boolean CND_QTDPARIsKey(){
				    return false;
				}
				public Integer CND_QTDPARLength(){
				    return 10;
				}
				public Integer CND_QTDPARPrecision(){
				    return 0;
				}
				public String CND_QTDPARDefault(){
				
					return null;
				
				}
				public String CND_QTDPARComment(){
				
				    return "";
				
				}
				public String CND_QTDPARPattern(){
				
					return "";
				
				}
				public String CND_QTDPAROriginalDbColumnName(){
				
					return "CND_QTDPAR";
				
				}

				
			    public String CND_SEMENT;

				public String getCND_SEMENT () {
					return this.CND_SEMENT;
				}

				public Boolean CND_SEMENTIsNullable(){
				    return true;
				}
				public Boolean CND_SEMENTIsKey(){
				    return false;
				}
				public Integer CND_SEMENTLength(){
				    return 1;
				}
				public Integer CND_SEMENTPrecision(){
				    return 0;
				}
				public String CND_SEMENTDefault(){
				
					return "'N'";
				
				}
				public String CND_SEMENTComment(){
				
				    return "";
				
				}
				public String CND_SEMENTPattern(){
				
					return "";
				
				}
				public String CND_SEMENTOriginalDbColumnName(){
				
					return "CND_SEMENT";
				
				}

				
			    public String CND_SENCND;

				public String getCND_SENCND () {
					return this.CND_SENCND;
				}

				public Boolean CND_SENCNDIsNullable(){
				    return true;
				}
				public Boolean CND_SENCNDIsKey(){
				    return false;
				}
				public Integer CND_SENCNDLength(){
				    return 1;
				}
				public Integer CND_SENCNDPrecision(){
				    return 0;
				}
				public String CND_SENCNDDefault(){
				
					return "'S'";
				
				}
				public String CND_SENCNDComment(){
				
				    return "";
				
				}
				public String CND_SENCNDPattern(){
				
					return "";
				
				}
				public String CND_SENCNDOriginalDbColumnName(){
				
					return "CND_SENCND";
				
				}

				
			    public BigDecimal CND_VALMIN;

				public BigDecimal getCND_VALMIN () {
					return this.CND_VALMIN;
				}

				public Boolean CND_VALMINIsNullable(){
				    return true;
				}
				public Boolean CND_VALMINIsKey(){
				    return false;
				}
				public Integer CND_VALMINLength(){
				    return 12;
				}
				public Integer CND_VALMINPrecision(){
				    return 2;
				}
				public String CND_VALMINDefault(){
				
					return null;
				
				}
				public String CND_VALMINComment(){
				
				    return "";
				
				}
				public String CND_VALMINPattern(){
				
					return "";
				
				}
				public String CND_VALMINOriginalDbColumnName(){
				
					return "CND_VALMIN";
				
				}

				
			    public BigDecimal CND_FATMAX;

				public BigDecimal getCND_FATMAX () {
					return this.CND_FATMAX;
				}

				public Boolean CND_FATMAXIsNullable(){
				    return true;
				}
				public Boolean CND_FATMAXIsKey(){
				    return false;
				}
				public Integer CND_FATMAXLength(){
				    return 12;
				}
				public Integer CND_FATMAXPrecision(){
				    return 2;
				}
				public String CND_FATMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_FATMAXComment(){
				
				    return "";
				
				}
				public String CND_FATMAXPattern(){
				
					return "";
				
				}
				public String CND_FATMAXOriginalDbColumnName(){
				
					return "CND_FATMAX";
				
				}

				
			    public BigDecimal CND_FATMIN;

				public BigDecimal getCND_FATMIN () {
					return this.CND_FATMIN;
				}

				public Boolean CND_FATMINIsNullable(){
				    return true;
				}
				public Boolean CND_FATMINIsKey(){
				    return false;
				}
				public Integer CND_FATMINLength(){
				    return 12;
				}
				public Integer CND_FATMINPrecision(){
				    return 2;
				}
				public String CND_FATMINDefault(){
				
					return "0.00";
				
				}
				public String CND_FATMINComment(){
				
				    return "";
				
				}
				public String CND_FATMINPattern(){
				
					return "";
				
				}
				public String CND_FATMINOriginalDbColumnName(){
				
					return "CND_FATMIN";
				
				}

				
			    public String CND_IMPFAT;

				public String getCND_IMPFAT () {
					return this.CND_IMPFAT;
				}

				public Boolean CND_IMPFATIsNullable(){
				    return true;
				}
				public Boolean CND_IMPFATIsKey(){
				    return false;
				}
				public Integer CND_IMPFATLength(){
				    return 1;
				}
				public Integer CND_IMPFATPrecision(){
				    return 0;
				}
				public String CND_IMPFATDefault(){
				
					return "'N'";
				
				}
				public String CND_IMPFATComment(){
				
				    return "";
				
				}
				public String CND_IMPFATPattern(){
				
					return "";
				
				}
				public String CND_IMPFATOriginalDbColumnName(){
				
					return "CND_IMPFAT";
				
				}

				
			    public BigDecimal CND_MARMAX;

				public BigDecimal getCND_MARMAX () {
					return this.CND_MARMAX;
				}

				public Boolean CND_MARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_MARMAXIsKey(){
				    return false;
				}
				public Integer CND_MARMAXLength(){
				    return 12;
				}
				public Integer CND_MARMAXPrecision(){
				    return 2;
				}
				public String CND_MARMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_MARMAXComment(){
				
				    return "";
				
				}
				public String CND_MARMAXPattern(){
				
					return "";
				
				}
				public String CND_MARMAXOriginalDbColumnName(){
				
					return "CND_MARMAX";
				
				}

				
			    public BigDecimal CND_MARMIN;

				public BigDecimal getCND_MARMIN () {
					return this.CND_MARMIN;
				}

				public Boolean CND_MARMINIsNullable(){
				    return true;
				}
				public Boolean CND_MARMINIsKey(){
				    return false;
				}
				public Integer CND_MARMINLength(){
				    return 12;
				}
				public Integer CND_MARMINPrecision(){
				    return 2;
				}
				public String CND_MARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_MARMINComment(){
				
				    return "";
				
				}
				public String CND_MARMINPattern(){
				
					return "";
				
				}
				public String CND_MARMINOriginalDbColumnName(){
				
					return "CND_MARMIN";
				
				}

				
			    public BigDecimal CND_PEDEAC;

				public BigDecimal getCND_PEDEAC () {
					return this.CND_PEDEAC;
				}

				public Boolean CND_PEDEACIsNullable(){
				    return true;
				}
				public Boolean CND_PEDEACIsKey(){
				    return false;
				}
				public Integer CND_PEDEACLength(){
				    return 5;
				}
				public Integer CND_PEDEACPrecision(){
				    return 2;
				}
				public String CND_PEDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_PEDEACComment(){
				
				    return "";
				
				}
				public String CND_PEDEACPattern(){
				
					return "";
				
				}
				public String CND_PEDEACOriginalDbColumnName(){
				
					return "CND_PEDEAC";
				
				}

				
			    public String CND_TABPRE;

				public String getCND_TABPRE () {
					return this.CND_TABPRE;
				}

				public Boolean CND_TABPREIsNullable(){
				    return true;
				}
				public Boolean CND_TABPREIsKey(){
				    return false;
				}
				public Integer CND_TABPRELength(){
				    return 1;
				}
				public Integer CND_TABPREPrecision(){
				    return 0;
				}
				public String CND_TABPREDefault(){
				
					return null;
				
				}
				public String CND_TABPREComment(){
				
				    return "";
				
				}
				public String CND_TABPREPattern(){
				
					return "";
				
				}
				public String CND_TABPREOriginalDbColumnName(){
				
					return "CND_TABPRE";
				
				}

				
			    public String CND_TIPFAT;

				public String getCND_TIPFAT () {
					return this.CND_TIPFAT;
				}

				public Boolean CND_TIPFATIsNullable(){
				    return true;
				}
				public Boolean CND_TIPFATIsKey(){
				    return false;
				}
				public Integer CND_TIPFATLength(){
				    return 4;
				}
				public Integer CND_TIPFATPrecision(){
				    return 0;
				}
				public String CND_TIPFATDefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TIPFATComment(){
				
				    return "";
				
				}
				public String CND_TIPFATPattern(){
				
					return "";
				
				}
				public String CND_TIPFATOriginalDbColumnName(){
				
					return "CND_TIPFAT";
				
				}

				
			    public String CND_JURPRO;

				public String getCND_JURPRO () {
					return this.CND_JURPRO;
				}

				public Boolean CND_JURPROIsNullable(){
				    return true;
				}
				public Boolean CND_JURPROIsKey(){
				    return false;
				}
				public Integer CND_JURPROLength(){
				    return 1;
				}
				public Integer CND_JURPROPrecision(){
				    return 0;
				}
				public String CND_JURPRODefault(){
				
					return "'S'";
				
				}
				public String CND_JURPROComment(){
				
				    return "";
				
				}
				public String CND_JURPROPattern(){
				
					return "";
				
				}
				public String CND_JURPROOriginalDbColumnName(){
				
					return "CND_JURPRO";
				
				}

				
			    public String CND_TIPCND;

				public String getCND_TIPCND () {
					return this.CND_TIPCND;
				}

				public Boolean CND_TIPCNDIsNullable(){
				    return true;
				}
				public Boolean CND_TIPCNDIsKey(){
				    return false;
				}
				public Integer CND_TIPCNDLength(){
				    return 1;
				}
				public Integer CND_TIPCNDPrecision(){
				    return 0;
				}
				public String CND_TIPCNDDefault(){
				
					return "'V'";
				
				}
				public String CND_TIPCNDComment(){
				
				    return "";
				
				}
				public String CND_TIPCNDPattern(){
				
					return "";
				
				}
				public String CND_TIPCNDOriginalDbColumnName(){
				
					return "CND_TIPCND";
				
				}

				
			    public java.util.Date CND_ULTALT;

				public java.util.Date getCND_ULTALT () {
					return this.CND_ULTALT;
				}

				public Boolean CND_ULTALTIsNullable(){
				    return true;
				}
				public Boolean CND_ULTALTIsKey(){
				    return false;
				}
				public Integer CND_ULTALTLength(){
				    return 10;
				}
				public Integer CND_ULTALTPrecision(){
				    return 0;
				}
				public String CND_ULTALTDefault(){
				
					return null;
				
				}
				public String CND_ULTALTComment(){
				
				    return "";
				
				}
				public String CND_ULTALTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CND_ULTALTOriginalDbColumnName(){
				
					return "CND_ULTALT";
				
				}

				
			    public String CND_PRAMIN;

				public String getCND_PRAMIN () {
					return this.CND_PRAMIN;
				}

				public Boolean CND_PRAMINIsNullable(){
				    return true;
				}
				public Boolean CND_PRAMINIsKey(){
				    return false;
				}
				public Integer CND_PRAMINLength(){
				    return 1;
				}
				public Integer CND_PRAMINPrecision(){
				    return 0;
				}
				public String CND_PRAMINDefault(){
				
					return "'S'";
				
				}
				public String CND_PRAMINComment(){
				
				    return "";
				
				}
				public String CND_PRAMINPattern(){
				
					return "";
				
				}
				public String CND_PRAMINOriginalDbColumnName(){
				
					return "CND_PRAMIN";
				
				}

				
			    public BigDecimal CND_DESMSU;

				public BigDecimal getCND_DESMSU () {
					return this.CND_DESMSU;
				}

				public Boolean CND_DESMSUIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSUIsKey(){
				    return false;
				}
				public Integer CND_DESMSULength(){
				    return 12;
				}
				public Integer CND_DESMSUPrecision(){
				    return 2;
				}
				public String CND_DESMSUDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSUComment(){
				
				    return "";
				
				}
				public String CND_DESMSUPattern(){
				
					return "";
				
				}
				public String CND_DESMSUOriginalDbColumnName(){
				
					return "CND_DESMSU";
				
				}

				
			    public String CND_EMPACE;

				public String getCND_EMPACE () {
					return this.CND_EMPACE;
				}

				public Boolean CND_EMPACEIsNullable(){
				    return true;
				}
				public Boolean CND_EMPACEIsKey(){
				    return false;
				}
				public Integer CND_EMPACELength(){
				    return 65535;
				}
				public Integer CND_EMPACEPrecision(){
				    return 0;
				}
				public String CND_EMPACEDefault(){
				
					return null;
				
				}
				public String CND_EMPACEComment(){
				
				    return "";
				
				}
				public String CND_EMPACEPattern(){
				
					return "";
				
				}
				public String CND_EMPACEOriginalDbColumnName(){
				
					return "CND_EMPACE";
				
				}

				
			    public String CND_EXPFSO;

				public String getCND_EXPFSO () {
					return this.CND_EXPFSO;
				}

				public Boolean CND_EXPFSOIsNullable(){
				    return true;
				}
				public Boolean CND_EXPFSOIsKey(){
				    return false;
				}
				public Integer CND_EXPFSOLength(){
				    return 1;
				}
				public Integer CND_EXPFSOPrecision(){
				    return 0;
				}
				public String CND_EXPFSODefault(){
				
					return "'S'";
				
				}
				public String CND_EXPFSOComment(){
				
				    return "";
				
				}
				public String CND_EXPFSOPattern(){
				
					return "";
				
				}
				public String CND_EXPFSOOriginalDbColumnName(){
				
					return "CND_EXPFSO";
				
				}

				
			    public String CND_FPGNVL;

				public String getCND_FPGNVL () {
					return this.CND_FPGNVL;
				}

				public Boolean CND_FPGNVLIsNullable(){
				    return true;
				}
				public Boolean CND_FPGNVLIsKey(){
				    return false;
				}
				public Integer CND_FPGNVLLength(){
				    return 16;
				}
				public Integer CND_FPGNVLPrecision(){
				    return 0;
				}
				public String CND_FPGNVLDefault(){
				
					return null;
				
				}
				public String CND_FPGNVLComment(){
				
				    return "";
				
				}
				public String CND_FPGNVLPattern(){
				
					return "";
				
				}
				public String CND_FPGNVLOriginalDbColumnName(){
				
					return "CND_FPGNVL";
				
				}

				
			    public String CND_LBPDOB;

				public String getCND_LBPDOB () {
					return this.CND_LBPDOB;
				}

				public Boolean CND_LBPDOBIsNullable(){
				    return true;
				}
				public Boolean CND_LBPDOBIsKey(){
				    return false;
				}
				public Integer CND_LBPDOBLength(){
				    return 1;
				}
				public Integer CND_LBPDOBPrecision(){
				    return 0;
				}
				public String CND_LBPDOBDefault(){
				
					return "'N'";
				
				}
				public String CND_LBPDOBComment(){
				
				    return "";
				
				}
				public String CND_LBPDOBPattern(){
				
					return "";
				
				}
				public String CND_LBPDOBOriginalDbColumnName(){
				
					return "CND_LBPDOB";
				
				}

				
			    public Integer CND_MAXCAR;

				public Integer getCND_MAXCAR () {
					return this.CND_MAXCAR;
				}

				public Boolean CND_MAXCARIsNullable(){
				    return true;
				}
				public Boolean CND_MAXCARIsKey(){
				    return false;
				}
				public Integer CND_MAXCARLength(){
				    return 10;
				}
				public Integer CND_MAXCARPrecision(){
				    return 0;
				}
				public String CND_MAXCARDefault(){
				
					return null;
				
				}
				public String CND_MAXCARComment(){
				
				    return "";
				
				}
				public String CND_MAXCARPattern(){
				
					return "";
				
				}
				public String CND_MAXCAROriginalDbColumnName(){
				
					return "CND_MAXCAR";
				
				}

				
			    public String CND_MCOBDA;

				public String getCND_MCOBDA () {
					return this.CND_MCOBDA;
				}

				public Boolean CND_MCOBDAIsNullable(){
				    return true;
				}
				public Boolean CND_MCOBDAIsKey(){
				    return false;
				}
				public Integer CND_MCOBDALength(){
				    return 1;
				}
				public Integer CND_MCOBDAPrecision(){
				    return 0;
				}
				public String CND_MCOBDADefault(){
				
					return "'1'";
				
				}
				public String CND_MCOBDAComment(){
				
				    return "";
				
				}
				public String CND_MCOBDAPattern(){
				
					return "";
				
				}
				public String CND_MCOBDAOriginalDbColumnName(){
				
					return "CND_MCOBDA";
				
				}

				
			    public String CND_SENTRA;

				public String getCND_SENTRA () {
					return this.CND_SENTRA;
				}

				public Boolean CND_SENTRAIsNullable(){
				    return true;
				}
				public Boolean CND_SENTRAIsKey(){
				    return false;
				}
				public Integer CND_SENTRALength(){
				    return 1;
				}
				public Integer CND_SENTRAPrecision(){
				    return 0;
				}
				public String CND_SENTRADefault(){
				
					return "'N'";
				
				}
				public String CND_SENTRAComment(){
				
				    return "";
				
				}
				public String CND_SENTRAPattern(){
				
					return "";
				
				}
				public String CND_SENTRAOriginalDbColumnName(){
				
					return "CND_SENTRA";
				
				}

				
			    public String CND_TPFTDA;

				public String getCND_TPFTDA () {
					return this.CND_TPFTDA;
				}

				public Boolean CND_TPFTDAIsNullable(){
				    return true;
				}
				public Boolean CND_TPFTDAIsKey(){
				    return false;
				}
				public Integer CND_TPFTDALength(){
				    return 4;
				}
				public Integer CND_TPFTDAPrecision(){
				    return 0;
				}
				public String CND_TPFTDADefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TPFTDAComment(){
				
				    return "";
				
				}
				public String CND_TPFTDAPattern(){
				
					return "";
				
				}
				public String CND_TPFTDAOriginalDbColumnName(){
				
					return "CND_TPFTDA";
				
				}

				
			    public String CND_TRCLCR;

				public String getCND_TRCLCR () {
					return this.CND_TRCLCR;
				}

				public Boolean CND_TRCLCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCRIsKey(){
				    return false;
				}
				public Integer CND_TRCLCRLength(){
				    return 1;
				}
				public Integer CND_TRCLCRPrecision(){
				    return 0;
				}
				public String CND_TRCLCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCRComment(){
				
				    return "";
				
				}
				public String CND_TRCLCRPattern(){
				
					return "";
				
				}
				public String CND_TRCLCROriginalDbColumnName(){
				
					return "CND_TRCLCR";
				
				}

				
			    public String CND_TRTTVE;

				public String getCND_TRTTVE () {
					return this.CND_TRTTVE;
				}

				public Boolean CND_TRTTVEIsNullable(){
				    return true;
				}
				public Boolean CND_TRTTVEIsKey(){
				    return false;
				}
				public Integer CND_TRTTVELength(){
				    return 1;
				}
				public Integer CND_TRTTVEPrecision(){
				    return 0;
				}
				public String CND_TRTTVEDefault(){
				
					return "'S'";
				
				}
				public String CND_TRTTVEComment(){
				
				    return "";
				
				}
				public String CND_TRTTVEPattern(){
				
					return "";
				
				}
				public String CND_TRTTVEOriginalDbColumnName(){
				
					return "CND_TRTTVE";
				
				}

				
			    public BigDecimal CND_VRDAUV;

				public BigDecimal getCND_VRDAUV () {
					return this.CND_VRDAUV;
				}

				public Boolean CND_VRDAUVIsNullable(){
				    return true;
				}
				public Boolean CND_VRDAUVIsKey(){
				    return false;
				}
				public Integer CND_VRDAUVLength(){
				    return 12;
				}
				public Integer CND_VRDAUVPrecision(){
				    return 2;
				}
				public String CND_VRDAUVDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDAUVComment(){
				
				    return "";
				
				}
				public String CND_VRDAUVPattern(){
				
					return "";
				
				}
				public String CND_VRDAUVOriginalDbColumnName(){
				
					return "CND_VRDAUV";
				
				}

				
			    public BigDecimal CND_VRDEAC;

				public BigDecimal getCND_VRDEAC () {
					return this.CND_VRDEAC;
				}

				public Boolean CND_VRDEACIsNullable(){
				    return true;
				}
				public Boolean CND_VRDEACIsKey(){
				    return false;
				}
				public Integer CND_VRDEACLength(){
				    return 12;
				}
				public Integer CND_VRDEACPrecision(){
				    return 2;
				}
				public String CND_VRDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDEACComment(){
				
				    return "";
				
				}
				public String CND_VRDEACPattern(){
				
					return "";
				
				}
				public String CND_VRDEACOriginalDbColumnName(){
				
					return "CND_VRDEAC";
				
				}

				
			    public BigDecimal CND_PARMAX;

				public BigDecimal getCND_PARMAX () {
					return this.CND_PARMAX;
				}

				public Boolean CND_PARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_PARMAXIsKey(){
				    return false;
				}
				public Integer CND_PARMAXLength(){
				    return 12;
				}
				public Integer CND_PARMAXPrecision(){
				    return 2;
				}
				public String CND_PARMAXDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMAXComment(){
				
				    return "";
				
				}
				public String CND_PARMAXPattern(){
				
					return "";
				
				}
				public String CND_PARMAXOriginalDbColumnName(){
				
					return "CND_PARMAX";
				
				}

				
			    public BigDecimal CND_PARMIN;

				public BigDecimal getCND_PARMIN () {
					return this.CND_PARMIN;
				}

				public Boolean CND_PARMINIsNullable(){
				    return true;
				}
				public Boolean CND_PARMINIsKey(){
				    return false;
				}
				public Integer CND_PARMINLength(){
				    return 12;
				}
				public Integer CND_PARMINPrecision(){
				    return 2;
				}
				public String CND_PARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMINComment(){
				
				    return "";
				
				}
				public String CND_PARMINPattern(){
				
					return "";
				
				}
				public String CND_PARMINOriginalDbColumnName(){
				
					return "CND_PARMIN";
				
				}

				
			    public String CND_RETIRA;

				public String getCND_RETIRA () {
					return this.CND_RETIRA;
				}

				public Boolean CND_RETIRAIsNullable(){
				    return true;
				}
				public Boolean CND_RETIRAIsKey(){
				    return false;
				}
				public Integer CND_RETIRALength(){
				    return 1;
				}
				public Integer CND_RETIRAPrecision(){
				    return 0;
				}
				public String CND_RETIRADefault(){
				
					return "'S'";
				
				}
				public String CND_RETIRAComment(){
				
				    return "";
				
				}
				public String CND_RETIRAPattern(){
				
					return "";
				
				}
				public String CND_RETIRAOriginalDbColumnName(){
				
					return "CND_RETIRA";
				
				}

				
			    public String CND_ENTIME;

				public String getCND_ENTIME () {
					return this.CND_ENTIME;
				}

				public Boolean CND_ENTIMEIsNullable(){
				    return true;
				}
				public Boolean CND_ENTIMEIsKey(){
				    return false;
				}
				public Integer CND_ENTIMELength(){
				    return 1;
				}
				public Integer CND_ENTIMEPrecision(){
				    return 0;
				}
				public String CND_ENTIMEDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTIMEComment(){
				
				    return "";
				
				}
				public String CND_ENTIMEPattern(){
				
					return "";
				
				}
				public String CND_ENTIMEOriginalDbColumnName(){
				
					return "CND_ENTIME";
				
				}

				
			    public String CND_ENTFUT;

				public String getCND_ENTFUT () {
					return this.CND_ENTFUT;
				}

				public Boolean CND_ENTFUTIsNullable(){
				    return true;
				}
				public Boolean CND_ENTFUTIsKey(){
				    return false;
				}
				public Integer CND_ENTFUTLength(){
				    return 1;
				}
				public Integer CND_ENTFUTPrecision(){
				    return 0;
				}
				public String CND_ENTFUTDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTFUTComment(){
				
				    return "";
				
				}
				public String CND_ENTFUTPattern(){
				
					return "";
				
				}
				public String CND_ENTFUTOriginalDbColumnName(){
				
					return "CND_ENTFUT";
				
				}

				
			    public Integer CND_QTDMAX;

				public Integer getCND_QTDMAX () {
					return this.CND_QTDMAX;
				}

				public Boolean CND_QTDMAXIsNullable(){
				    return true;
				}
				public Boolean CND_QTDMAXIsKey(){
				    return false;
				}
				public Integer CND_QTDMAXLength(){
				    return 10;
				}
				public Integer CND_QTDMAXPrecision(){
				    return 0;
				}
				public String CND_QTDMAXDefault(){
				
					return "0";
				
				}
				public String CND_QTDMAXComment(){
				
				    return "";
				
				}
				public String CND_QTDMAXPattern(){
				
					return "";
				
				}
				public String CND_QTDMAXOriginalDbColumnName(){
				
					return "CND_QTDMAX";
				
				}

				
			    public String CND_TRCLCB;

				public String getCND_TRCLCB () {
					return this.CND_TRCLCB;
				}

				public Boolean CND_TRCLCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCBIsKey(){
				    return false;
				}
				public Integer CND_TRCLCBLength(){
				    return 1;
				}
				public Integer CND_TRCLCBPrecision(){
				    return 0;
				}
				public String CND_TRCLCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCBComment(){
				
				    return "";
				
				}
				public String CND_TRCLCBPattern(){
				
					return "";
				
				}
				public String CND_TRCLCBOriginalDbColumnName(){
				
					return "CND_TRCLCB";
				
				}

				
			    public String CND_EXPB2B;

				public String getCND_EXPB2B () {
					return this.CND_EXPB2B;
				}

				public Boolean CND_EXPB2BIsNullable(){
				    return true;
				}
				public Boolean CND_EXPB2BIsKey(){
				    return false;
				}
				public Integer CND_EXPB2BLength(){
				    return 1;
				}
				public Integer CND_EXPB2BPrecision(){
				    return 0;
				}
				public String CND_EXPB2BDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPB2BComment(){
				
				    return "";
				
				}
				public String CND_EXPB2BPattern(){
				
					return "";
				
				}
				public String CND_EXPB2BOriginalDbColumnName(){
				
					return "CND_EXPB2B";
				
				}

				
			    public String CND_PRETAB;

				public String getCND_PRETAB () {
					return this.CND_PRETAB;
				}

				public Boolean CND_PRETABIsNullable(){
				    return true;
				}
				public Boolean CND_PRETABIsKey(){
				    return false;
				}
				public Integer CND_PRETABLength(){
				    return 7;
				}
				public Integer CND_PRETABPrecision(){
				    return 0;
				}
				public String CND_PRETABDefault(){
				
					return "'NNNNNNN'";
				
				}
				public String CND_PRETABComment(){
				
				    return "";
				
				}
				public String CND_PRETABPattern(){
				
					return "";
				
				}
				public String CND_PRETABOriginalDbColumnName(){
				
					return "CND_PRETAB";
				
				}

				
			    public Integer CND_LIMITE;

				public Integer getCND_LIMITE () {
					return this.CND_LIMITE;
				}

				public Boolean CND_LIMITEIsNullable(){
				    return true;
				}
				public Boolean CND_LIMITEIsKey(){
				    return false;
				}
				public Integer CND_LIMITELength(){
				    return 10;
				}
				public Integer CND_LIMITEPrecision(){
				    return 0;
				}
				public String CND_LIMITEDefault(){
				
					return "0";
				
				}
				public String CND_LIMITEComment(){
				
				    return "";
				
				}
				public String CND_LIMITEPattern(){
				
					return "";
				
				}
				public String CND_LIMITEOriginalDbColumnName(){
				
					return "CND_LIMITE";
				
				}

				
			    public String CND_USADEP;

				public String getCND_USADEP () {
					return this.CND_USADEP;
				}

				public Boolean CND_USADEPIsNullable(){
				    return true;
				}
				public Boolean CND_USADEPIsKey(){
				    return false;
				}
				public Integer CND_USADEPLength(){
				    return 1;
				}
				public Integer CND_USADEPPrecision(){
				    return 0;
				}
				public String CND_USADEPDefault(){
				
					return "'N'";
				
				}
				public String CND_USADEPComment(){
				
				    return "";
				
				}
				public String CND_USADEPPattern(){
				
					return "";
				
				}
				public String CND_USADEPOriginalDbColumnName(){
				
					return "CND_USADEP";
				
				}

				
			    public String CND_RCX_F3;

				public String getCND_RCX_F3 () {
					return this.CND_RCX_F3;
				}

				public Boolean CND_RCX_F3IsNullable(){
				    return true;
				}
				public Boolean CND_RCX_F3IsKey(){
				    return false;
				}
				public Integer CND_RCX_F3Length(){
				    return 1;
				}
				public Integer CND_RCX_F3Precision(){
				    return 0;
				}
				public String CND_RCX_F3Default(){
				
					return "'S'";
				
				}
				public String CND_RCX_F3Comment(){
				
				    return "";
				
				}
				public String CND_RCX_F3Pattern(){
				
					return "";
				
				}
				public String CND_RCX_F3OriginalDbColumnName(){
				
					return "CND_RCX_F3";
				
				}

				
			    public String CND_COBYAP;

				public String getCND_COBYAP () {
					return this.CND_COBYAP;
				}

				public Boolean CND_COBYAPIsNullable(){
				    return true;
				}
				public Boolean CND_COBYAPIsKey(){
				    return false;
				}
				public Integer CND_COBYAPLength(){
				    return 1;
				}
				public Integer CND_COBYAPPrecision(){
				    return 0;
				}
				public String CND_COBYAPDefault(){
				
					return "'N'";
				
				}
				public String CND_COBYAPComment(){
				
				    return "";
				
				}
				public String CND_COBYAPPattern(){
				
					return "";
				
				}
				public String CND_COBYAPOriginalDbColumnName(){
				
					return "CND_COBYAP";
				
				}

				
			    public String CND_TRORCR;

				public String getCND_TRORCR () {
					return this.CND_TRORCR;
				}

				public Boolean CND_TRORCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCRIsKey(){
				    return false;
				}
				public Integer CND_TRORCRLength(){
				    return 1;
				}
				public Integer CND_TRORCRPrecision(){
				    return 0;
				}
				public String CND_TRORCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCRComment(){
				
				    return "";
				
				}
				public String CND_TRORCRPattern(){
				
					return "";
				
				}
				public String CND_TRORCROriginalDbColumnName(){
				
					return "CND_TRORCR";
				
				}

				
			    public String CND_TRORCB;

				public String getCND_TRORCB () {
					return this.CND_TRORCB;
				}

				public Boolean CND_TRORCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCBIsKey(){
				    return false;
				}
				public Integer CND_TRORCBLength(){
				    return 1;
				}
				public Integer CND_TRORCBPrecision(){
				    return 0;
				}
				public String CND_TRORCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCBComment(){
				
				    return "";
				
				}
				public String CND_TRORCBPattern(){
				
					return "";
				
				}
				public String CND_TRORCBOriginalDbColumnName(){
				
					return "CND_TRORCB";
				
				}

				
			    public String CND_YAPTRA;

				public String getCND_YAPTRA () {
					return this.CND_YAPTRA;
				}

				public Boolean CND_YAPTRAIsNullable(){
				    return true;
				}
				public Boolean CND_YAPTRAIsKey(){
				    return false;
				}
				public Integer CND_YAPTRALength(){
				    return 1;
				}
				public Integer CND_YAPTRAPrecision(){
				    return 0;
				}
				public String CND_YAPTRADefault(){
				
					return "'S'";
				
				}
				public String CND_YAPTRAComment(){
				
				    return "";
				
				}
				public String CND_YAPTRAPattern(){
				
					return "";
				
				}
				public String CND_YAPTRAOriginalDbColumnName(){
				
					return "CND_YAPTRA";
				
				}

				
			    public String CND_YAPDIS;

				public String getCND_YAPDIS () {
					return this.CND_YAPDIS;
				}

				public Boolean CND_YAPDISIsNullable(){
				    return true;
				}
				public Boolean CND_YAPDISIsKey(){
				    return false;
				}
				public Integer CND_YAPDISLength(){
				    return 255;
				}
				public Integer CND_YAPDISPrecision(){
				    return 0;
				}
				public String CND_YAPDISDefault(){
				
					return null;
				
				}
				public String CND_YAPDISComment(){
				
				    return "";
				
				}
				public String CND_YAPDISPattern(){
				
					return "";
				
				}
				public String CND_YAPDISOriginalDbColumnName(){
				
					return "CND_YAPDIS";
				
				}

				
			    public Integer CND_YAPPAR;

				public Integer getCND_YAPPAR () {
					return this.CND_YAPPAR;
				}

				public Boolean CND_YAPPARIsNullable(){
				    return true;
				}
				public Boolean CND_YAPPARIsKey(){
				    return false;
				}
				public Integer CND_YAPPARLength(){
				    return 10;
				}
				public Integer CND_YAPPARPrecision(){
				    return 0;
				}
				public String CND_YAPPARDefault(){
				
					return null;
				
				}
				public String CND_YAPPARComment(){
				
				    return "";
				
				}
				public String CND_YAPPARPattern(){
				
					return "";
				
				}
				public String CND_YAPPAROriginalDbColumnName(){
				
					return "CND_YAPPAR";
				
				}

				
			    public String CND_TRAFAT;

				public String getCND_TRAFAT () {
					return this.CND_TRAFAT;
				}

				public Boolean CND_TRAFATIsNullable(){
				    return false;
				}
				public Boolean CND_TRAFATIsKey(){
				    return false;
				}
				public Integer CND_TRAFATLength(){
				    return 1;
				}
				public Integer CND_TRAFATPrecision(){
				    return 0;
				}
				public String CND_TRAFATDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAFATComment(){
				
				    return "";
				
				}
				public String CND_TRAFATPattern(){
				
					return "";
				
				}
				public String CND_TRAFATOriginalDbColumnName(){
				
					return "CND_TRAFAT";
				
				}

				
			    public String CND_TRAMAR;

				public String getCND_TRAMAR () {
					return this.CND_TRAMAR;
				}

				public Boolean CND_TRAMARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAMARIsKey(){
				    return false;
				}
				public Integer CND_TRAMARLength(){
				    return 1;
				}
				public Integer CND_TRAMARPrecision(){
				    return 0;
				}
				public String CND_TRAMARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAMARComment(){
				
				    return "";
				
				}
				public String CND_TRAMARPattern(){
				
					return "";
				
				}
				public String CND_TRAMAROriginalDbColumnName(){
				
					return "CND_TRAMAR";
				
				}

				
			    public String CND_TRAPAR;

				public String getCND_TRAPAR () {
					return this.CND_TRAPAR;
				}

				public Boolean CND_TRAPARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAPARIsKey(){
				    return false;
				}
				public Integer CND_TRAPARLength(){
				    return 1;
				}
				public Integer CND_TRAPARPrecision(){
				    return 0;
				}
				public String CND_TRAPARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAPARComment(){
				
				    return "";
				
				}
				public String CND_TRAPARPattern(){
				
					return "";
				
				}
				public String CND_TRAPAROriginalDbColumnName(){
				
					return "CND_TRAPAR";
				
				}

				
			    public String CND_CNDESP;

				public String getCND_CNDESP () {
					return this.CND_CNDESP;
				}

				public Boolean CND_CNDESPIsNullable(){
				    return true;
				}
				public Boolean CND_CNDESPIsKey(){
				    return false;
				}
				public Integer CND_CNDESPLength(){
				    return 1;
				}
				public Integer CND_CNDESPPrecision(){
				    return 0;
				}
				public String CND_CNDESPDefault(){
				
					return "'N'";
				
				}
				public String CND_CNDESPComment(){
				
				    return "";
				
				}
				public String CND_CNDESPPattern(){
				
					return "";
				
				}
				public String CND_CNDESPOriginalDbColumnName(){
				
					return "CND_CNDESP";
				
				}

				
			    public BigDecimal CND_DESMVM;

				public BigDecimal getCND_DESMVM () {
					return this.CND_DESMVM;
				}

				public Boolean CND_DESMVMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMVMIsKey(){
				    return false;
				}
				public Integer CND_DESMVMLength(){
				    return 12;
				}
				public Integer CND_DESMVMPrecision(){
				    return 2;
				}
				public String CND_DESMVMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMVMComment(){
				
				    return "";
				
				}
				public String CND_DESMVMPattern(){
				
					return "";
				
				}
				public String CND_DESMVMOriginalDbColumnName(){
				
					return "CND_DESMVM";
				
				}

				
			    public BigDecimal CND_DESMSM;

				public BigDecimal getCND_DESMSM () {
					return this.CND_DESMSM;
				}

				public Boolean CND_DESMSMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSMIsKey(){
				    return false;
				}
				public Integer CND_DESMSMLength(){
				    return 12;
				}
				public Integer CND_DESMSMPrecision(){
				    return 2;
				}
				public String CND_DESMSMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSMComment(){
				
				    return "";
				
				}
				public String CND_DESMSMPattern(){
				
					return "";
				
				}
				public String CND_DESMSMOriginalDbColumnName(){
				
					return "CND_DESMSM";
				
				}

				
			    public BigDecimal CND_DESMGM;

				public BigDecimal getCND_DESMGM () {
					return this.CND_DESMGM;
				}

				public Boolean CND_DESMGMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGMIsKey(){
				    return false;
				}
				public Integer CND_DESMGMLength(){
				    return 12;
				}
				public Integer CND_DESMGMPrecision(){
				    return 2;
				}
				public String CND_DESMGMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGMComment(){
				
				    return "";
				
				}
				public String CND_DESMGMPattern(){
				
					return "";
				
				}
				public String CND_DESMGMOriginalDbColumnName(){
				
					return "CND_DESMGM";
				
				}

				
			    public String CND_RECPIX;

				public String getCND_RECPIX () {
					return this.CND_RECPIX;
				}

				public Boolean CND_RECPIXIsNullable(){
				    return true;
				}
				public Boolean CND_RECPIXIsKey(){
				    return false;
				}
				public Integer CND_RECPIXLength(){
				    return 1;
				}
				public Integer CND_RECPIXPrecision(){
				    return 0;
				}
				public String CND_RECPIXDefault(){
				
					return "'N'";
				
				}
				public String CND_RECPIXComment(){
				
				    return "";
				
				}
				public String CND_RECPIXPattern(){
				
					return "";
				
				}
				public String CND_RECPIXOriginalDbColumnName(){
				
					return "CND_RECPIX";
				
				}

				
			    public String CND_TRACNC;

				public String getCND_TRACNC () {
					return this.CND_TRACNC;
				}

				public Boolean CND_TRACNCIsNullable(){
				    return true;
				}
				public Boolean CND_TRACNCIsKey(){
				    return false;
				}
				public Integer CND_TRACNCLength(){
				    return 1;
				}
				public Integer CND_TRACNCPrecision(){
				    return 0;
				}
				public String CND_TRACNCDefault(){
				
					return "'S'";
				
				}
				public String CND_TRACNCComment(){
				
				    return "";
				
				}
				public String CND_TRACNCPattern(){
				
					return "";
				
				}
				public String CND_TRACNCOriginalDbColumnName(){
				
					return "CND_TRACNC";
				
				}

				
			    public String CND_TRORFI;

				public String getCND_TRORFI () {
					return this.CND_TRORFI;
				}

				public Boolean CND_TRORFIIsNullable(){
				    return true;
				}
				public Boolean CND_TRORFIIsKey(){
				    return false;
				}
				public Integer CND_TRORFILength(){
				    return 1;
				}
				public Integer CND_TRORFIPrecision(){
				    return 0;
				}
				public String CND_TRORFIDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORFIComment(){
				
				    return "";
				
				}
				public String CND_TRORFIPattern(){
				
					return "";
				
				}
				public String CND_TRORFIOriginalDbColumnName(){
				
					return "CND_TRORFI";
				
				}

				
			    public String CND_TRORPF;

				public String getCND_TRORPF () {
					return this.CND_TRORPF;
				}

				public Boolean CND_TRORPFIsNullable(){
				    return true;
				}
				public Boolean CND_TRORPFIsKey(){
				    return false;
				}
				public Integer CND_TRORPFLength(){
				    return 1;
				}
				public Integer CND_TRORPFPrecision(){
				    return 0;
				}
				public String CND_TRORPFDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORPFComment(){
				
				    return "";
				
				}
				public String CND_TRORPFPattern(){
				
					return "";
				
				}
				public String CND_TRORPFOriginalDbColumnName(){
				
					return "CND_TRORPF";
				
				}

				
			    public String CND_DIACOR;

				public String getCND_DIACOR () {
					return this.CND_DIACOR;
				}

				public Boolean CND_DIACORIsNullable(){
				    return true;
				}
				public Boolean CND_DIACORIsKey(){
				    return false;
				}
				public Integer CND_DIACORLength(){
				    return 1;
				}
				public Integer CND_DIACORPrecision(){
				    return 0;
				}
				public String CND_DIACORDefault(){
				
					return "'N'";
				
				}
				public String CND_DIACORComment(){
				
				    return "";
				
				}
				public String CND_DIACORPattern(){
				
					return "";
				
				}
				public String CND_DIACOROriginalDbColumnName(){
				
					return "CND_DIACOR";
				
				}

				
			    public BigDecimal CND_PERVEN;

				public BigDecimal getCND_PERVEN () {
					return this.CND_PERVEN;
				}

				public Boolean CND_PERVENIsNullable(){
				    return true;
				}
				public Boolean CND_PERVENIsKey(){
				    return false;
				}
				public Integer CND_PERVENLength(){
				    return 12;
				}
				public Integer CND_PERVENPrecision(){
				    return 2;
				}
				public String CND_PERVENDefault(){
				
					return "0.00";
				
				}
				public String CND_PERVENComment(){
				
				    return "";
				
				}
				public String CND_PERVENPattern(){
				
					return "";
				
				}
				public String CND_PERVENOriginalDbColumnName(){
				
					return "CND_PERVEN";
				
				}

				
			    public String CND_GERLNK;

				public String getCND_GERLNK () {
					return this.CND_GERLNK;
				}

				public Boolean CND_GERLNKIsNullable(){
				    return true;
				}
				public Boolean CND_GERLNKIsKey(){
				    return false;
				}
				public Integer CND_GERLNKLength(){
				    return 1;
				}
				public Integer CND_GERLNKPrecision(){
				    return 0;
				}
				public String CND_GERLNKDefault(){
				
					return "'N'";
				
				}
				public String CND_GERLNKComment(){
				
				    return "";
				
				}
				public String CND_GERLNKPattern(){
				
					return "";
				
				}
				public String CND_GERLNKOriginalDbColumnName(){
				
					return "CND_GERLNK";
				
				}

				
			    public String CND_ESPFAT;

				public String getCND_ESPFAT () {
					return this.CND_ESPFAT;
				}

				public Boolean CND_ESPFATIsNullable(){
				    return true;
				}
				public Boolean CND_ESPFATIsKey(){
				    return false;
				}
				public Integer CND_ESPFATLength(){
				    return 3;
				}
				public Integer CND_ESPFATPrecision(){
				    return 0;
				}
				public String CND_ESPFATDefault(){
				
					return "'NF'";
				
				}
				public String CND_ESPFATComment(){
				
				    return "";
				
				}
				public String CND_ESPFATPattern(){
				
					return "";
				
				}
				public String CND_ESPFATOriginalDbColumnName(){
				
					return "CND_ESPFAT";
				
				}

				
			    public String CND_COBPME;

				public String getCND_COBPME () {
					return this.CND_COBPME;
				}

				public Boolean CND_COBPMEIsNullable(){
				    return false;
				}
				public Boolean CND_COBPMEIsKey(){
				    return false;
				}
				public Integer CND_COBPMELength(){
				    return 1;
				}
				public Integer CND_COBPMEPrecision(){
				    return 0;
				}
				public String CND_COBPMEDefault(){
				
					return "'N'";
				
				}
				public String CND_COBPMEComment(){
				
				    return "";
				
				}
				public String CND_COBPMEPattern(){
				
					return "";
				
				}
				public String CND_COBPMEOriginalDbColumnName(){
				
					return "CND_COBPME";
				
				}

				
			    public String CND_EXPTAB;

				public String getCND_EXPTAB () {
					return this.CND_EXPTAB;
				}

				public Boolean CND_EXPTABIsNullable(){
				    return true;
				}
				public Boolean CND_EXPTABIsKey(){
				    return false;
				}
				public Integer CND_EXPTABLength(){
				    return 1;
				}
				public Integer CND_EXPTABPrecision(){
				    return 0;
				}
				public String CND_EXPTABDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPTABComment(){
				
				    return "";
				
				}
				public String CND_EXPTABPattern(){
				
					return "";
				
				}
				public String CND_EXPTABOriginalDbColumnName(){
				
					return "CND_EXPTAB";
				
				}

				
			    public String CND_PMEDVC;

				public String getCND_PMEDVC () {
					return this.CND_PMEDVC;
				}

				public Boolean CND_PMEDVCIsNullable(){
				    return true;
				}
				public Boolean CND_PMEDVCIsKey(){
				    return false;
				}
				public Integer CND_PMEDVCLength(){
				    return 2;
				}
				public Integer CND_PMEDVCPrecision(){
				    return 0;
				}
				public String CND_PMEDVCDefault(){
				
					return "'0'";
				
				}
				public String CND_PMEDVCComment(){
				
				    return "";
				
				}
				public String CND_PMEDVCPattern(){
				
					return "";
				
				}
				public String CND_PMEDVCOriginalDbColumnName(){
				
					return "CND_PMEDVC";
				
				}

				
			    public String CND_PMEQPA;

				public String getCND_PMEQPA () {
					return this.CND_PMEQPA;
				}

				public Boolean CND_PMEQPAIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPAIsKey(){
				    return false;
				}
				public Integer CND_PMEQPALength(){
				    return 30;
				}
				public Integer CND_PMEQPAPrecision(){
				    return 0;
				}
				public String CND_PMEQPADefault(){
				
					return null;
				
				}
				public String CND_PMEQPAComment(){
				
				    return "";
				
				}
				public String CND_PMEQPAPattern(){
				
					return "";
				
				}
				public String CND_PMEQPAOriginalDbColumnName(){
				
					return "CND_PMEQPA";
				
				}

				
			    public String CND_PMEQPJ;

				public String getCND_PMEQPJ () {
					return this.CND_PMEQPJ;
				}

				public Boolean CND_PMEQPJIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPJIsKey(){
				    return false;
				}
				public Integer CND_PMEQPJLength(){
				    return 40;
				}
				public Integer CND_PMEQPJPrecision(){
				    return 0;
				}
				public String CND_PMEQPJDefault(){
				
					return null;
				
				}
				public String CND_PMEQPJComment(){
				
				    return "";
				
				}
				public String CND_PMEQPJPattern(){
				
					return "";
				
				}
				public String CND_PMEQPJOriginalDbColumnName(){
				
					return "CND_PMEQPJ";
				
				}

				
			    public BigDecimal CND_PMEJCT;

				public BigDecimal getCND_PMEJCT () {
					return this.CND_PMEJCT;
				}

				public Boolean CND_PMEJCTIsNullable(){
				    return true;
				}
				public Boolean CND_PMEJCTIsKey(){
				    return false;
				}
				public Integer CND_PMEJCTLength(){
				    return 12;
				}
				public Integer CND_PMEJCTPrecision(){
				    return 2;
				}
				public String CND_PMEJCTDefault(){
				
					return "0.00";
				
				}
				public String CND_PMEJCTComment(){
				
				    return "";
				
				}
				public String CND_PMEJCTPattern(){
				
					return "";
				
				}
				public String CND_PMEJCTOriginalDbColumnName(){
				
					return "CND_PMEJCT";
				
				}

				
			    public String CND_MODIVN;

				public String getCND_MODIVN () {
					return this.CND_MODIVN;
				}

				public Boolean CND_MODIVNIsNullable(){
				    return true;
				}
				public Boolean CND_MODIVNIsKey(){
				    return false;
				}
				public Integer CND_MODIVNLength(){
				    return 1;
				}
				public Integer CND_MODIVNPrecision(){
				    return 0;
				}
				public String CND_MODIVNDefault(){
				
					return "'T'";
				
				}
				public String CND_MODIVNComment(){
				
				    return "";
				
				}
				public String CND_MODIVNPattern(){
				
					return "";
				
				}
				public String CND_MODIVNOriginalDbColumnName(){
				
					return "CND_MODIVN";
				
				}

				
			    public String CND_PETRCD;

				public String getCND_PETRCD () {
					return this.CND_PETRCD;
				}

				public Boolean CND_PETRCDIsNullable(){
				    return false;
				}
				public Boolean CND_PETRCDIsKey(){
				    return false;
				}
				public Integer CND_PETRCDLength(){
				    return 1;
				}
				public Integer CND_PETRCDPrecision(){
				    return 0;
				}
				public String CND_PETRCDDefault(){
				
					return "'N'";
				
				}
				public String CND_PETRCDComment(){
				
				    return "";
				
				}
				public String CND_PETRCDPattern(){
				
					return "";
				
				}
				public String CND_PETRCDOriginalDbColumnName(){
				
					return "CND_PETRCD";
				
				}

				
			    public Integer CND_EMIBOL;

				public Integer getCND_EMIBOL () {
					return this.CND_EMIBOL;
				}

				public Boolean CND_EMIBOLIsNullable(){
				    return true;
				}
				public Boolean CND_EMIBOLIsKey(){
				    return false;
				}
				public Integer CND_EMIBOLLength(){
				    return 10;
				}
				public Integer CND_EMIBOLPrecision(){
				    return 0;
				}
				public String CND_EMIBOLDefault(){
				
					return "2";
				
				}
				public String CND_EMIBOLComment(){
				
				    return "";
				
				}
				public String CND_EMIBOLPattern(){
				
					return "";
				
				}
				public String CND_EMIBOLOriginalDbColumnName(){
				
					return "CND_EMIBOL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insert_tableStruct other = (insert_tableStruct) obj;
		
						if (this.AUTOINCREM == null) {
							if (other.AUTOINCREM != null)
								return false;
						
						} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insert_tableStruct other) {

		other.CND_CODIGO = this.CND_CODIGO;
	            other.CND_DESCRI = this.CND_DESCRI;
	            other.CND_CNDPAG = this.CND_CNDPAG;
	            other.CND_TIPFOR = this.CND_TIPFOR;
	            other.CND_CODPOR = this.CND_CODPOR;
	            other.AUTOINCREM = this.AUTOINCREM;
	            other.CND_CODEMP = this.CND_CODEMP;
	            other.CND_DESMAX = this.CND_DESMAX;
	            other.CND_ABADES = this.CND_ABADES;
	            other.CND_ABDECC = this.CND_ABDECC;
	            other.CND_TXJURO = this.CND_TXJURO;
	            other.CND_CODFPG = this.CND_CODFPG;
	            other.CND_PRZMED = this.CND_PRZMED;
	            other.CND_FATACA = this.CND_FATACA;
	            other.CND_INFANA = this.CND_INFANA;
	            other.CND_STATUS = this.CND_STATUS;
	            other.CND_DESMGE = this.CND_DESMGE;
	            other.CND_ALTPRE = this.CND_ALTPRE;
	            other.CND_CODVEL = this.CND_CODVEL;
	            other.CND_DESPFL = this.CND_DESPFL;
	            other.CND_DIAFIX = this.CND_DIAFIX;
	            other.CND_IMPBOL = this.CND_IMPBOL;
	            other.CND_LIMCRE = this.CND_LIMCRE;
	            other.CND_PERCOM = this.CND_PERCOM;
	            other.CND_PERDPO = this.CND_PERDPO;
	            other.CND_QTDDAV = this.CND_QTDDAV;
	            other.CND_QTDPAR = this.CND_QTDPAR;
	            other.CND_SEMENT = this.CND_SEMENT;
	            other.CND_SENCND = this.CND_SENCND;
	            other.CND_VALMIN = this.CND_VALMIN;
	            other.CND_FATMAX = this.CND_FATMAX;
	            other.CND_FATMIN = this.CND_FATMIN;
	            other.CND_IMPFAT = this.CND_IMPFAT;
	            other.CND_MARMAX = this.CND_MARMAX;
	            other.CND_MARMIN = this.CND_MARMIN;
	            other.CND_PEDEAC = this.CND_PEDEAC;
	            other.CND_TABPRE = this.CND_TABPRE;
	            other.CND_TIPFAT = this.CND_TIPFAT;
	            other.CND_JURPRO = this.CND_JURPRO;
	            other.CND_TIPCND = this.CND_TIPCND;
	            other.CND_ULTALT = this.CND_ULTALT;
	            other.CND_PRAMIN = this.CND_PRAMIN;
	            other.CND_DESMSU = this.CND_DESMSU;
	            other.CND_EMPACE = this.CND_EMPACE;
	            other.CND_EXPFSO = this.CND_EXPFSO;
	            other.CND_FPGNVL = this.CND_FPGNVL;
	            other.CND_LBPDOB = this.CND_LBPDOB;
	            other.CND_MAXCAR = this.CND_MAXCAR;
	            other.CND_MCOBDA = this.CND_MCOBDA;
	            other.CND_SENTRA = this.CND_SENTRA;
	            other.CND_TPFTDA = this.CND_TPFTDA;
	            other.CND_TRCLCR = this.CND_TRCLCR;
	            other.CND_TRTTVE = this.CND_TRTTVE;
	            other.CND_VRDAUV = this.CND_VRDAUV;
	            other.CND_VRDEAC = this.CND_VRDEAC;
	            other.CND_PARMAX = this.CND_PARMAX;
	            other.CND_PARMIN = this.CND_PARMIN;
	            other.CND_RETIRA = this.CND_RETIRA;
	            other.CND_ENTIME = this.CND_ENTIME;
	            other.CND_ENTFUT = this.CND_ENTFUT;
	            other.CND_QTDMAX = this.CND_QTDMAX;
	            other.CND_TRCLCB = this.CND_TRCLCB;
	            other.CND_EXPB2B = this.CND_EXPB2B;
	            other.CND_PRETAB = this.CND_PRETAB;
	            other.CND_LIMITE = this.CND_LIMITE;
	            other.CND_USADEP = this.CND_USADEP;
	            other.CND_RCX_F3 = this.CND_RCX_F3;
	            other.CND_COBYAP = this.CND_COBYAP;
	            other.CND_TRORCR = this.CND_TRORCR;
	            other.CND_TRORCB = this.CND_TRORCB;
	            other.CND_YAPTRA = this.CND_YAPTRA;
	            other.CND_YAPDIS = this.CND_YAPDIS;
	            other.CND_YAPPAR = this.CND_YAPPAR;
	            other.CND_TRAFAT = this.CND_TRAFAT;
	            other.CND_TRAMAR = this.CND_TRAMAR;
	            other.CND_TRAPAR = this.CND_TRAPAR;
	            other.CND_CNDESP = this.CND_CNDESP;
	            other.CND_DESMVM = this.CND_DESMVM;
	            other.CND_DESMSM = this.CND_DESMSM;
	            other.CND_DESMGM = this.CND_DESMGM;
	            other.CND_RECPIX = this.CND_RECPIX;
	            other.CND_TRACNC = this.CND_TRACNC;
	            other.CND_TRORFI = this.CND_TRORFI;
	            other.CND_TRORPF = this.CND_TRORPF;
	            other.CND_DIACOR = this.CND_DIACOR;
	            other.CND_PERVEN = this.CND_PERVEN;
	            other.CND_GERLNK = this.CND_GERLNK;
	            other.CND_ESPFAT = this.CND_ESPFAT;
	            other.CND_COBPME = this.CND_COBPME;
	            other.CND_EXPTAB = this.CND_EXPTAB;
	            other.CND_PMEDVC = this.CND_PMEDVC;
	            other.CND_PMEQPA = this.CND_PMEQPA;
	            other.CND_PMEQPJ = this.CND_PMEQPJ;
	            other.CND_PMEJCT = this.CND_PMEJCT;
	            other.CND_MODIVN = this.CND_MODIVN;
	            other.CND_PETRCD = this.CND_PETRCD;
	            other.CND_EMIBOL = this.CND_EMIBOL;
	            
	}

	public void copyKeysDataTo(insert_tableStruct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CND_CODIGO="+CND_CODIGO);
		sb.append(",CND_DESCRI="+CND_DESCRI);
		sb.append(",CND_CNDPAG="+CND_CNDPAG);
		sb.append(",CND_TIPFOR="+CND_TIPFOR);
		sb.append(",CND_CODPOR="+CND_CODPOR);
		sb.append(",AUTOINCREM="+AUTOINCREM);
		sb.append(",CND_CODEMP="+CND_CODEMP);
		sb.append(",CND_DESMAX="+String.valueOf(CND_DESMAX));
		sb.append(",CND_ABADES="+CND_ABADES);
		sb.append(",CND_ABDECC="+CND_ABDECC);
		sb.append(",CND_TXJURO="+String.valueOf(CND_TXJURO));
		sb.append(",CND_CODFPG="+CND_CODFPG);
		sb.append(",CND_PRZMED="+String.valueOf(CND_PRZMED));
		sb.append(",CND_FATACA="+String.valueOf(CND_FATACA));
		sb.append(",CND_INFANA="+CND_INFANA);
		sb.append(",CND_STATUS="+CND_STATUS);
		sb.append(",CND_DESMGE="+String.valueOf(CND_DESMGE));
		sb.append(",CND_ALTPRE="+CND_ALTPRE);
		sb.append(",CND_CODVEL="+CND_CODVEL);
		sb.append(",CND_DESPFL="+CND_DESPFL);
		sb.append(",CND_DIAFIX="+String.valueOf(CND_DIAFIX));
		sb.append(",CND_IMPBOL="+CND_IMPBOL);
		sb.append(",CND_LIMCRE="+CND_LIMCRE);
		sb.append(",CND_PERCOM="+String.valueOf(CND_PERCOM));
		sb.append(",CND_PERDPO="+String.valueOf(CND_PERDPO));
		sb.append(",CND_QTDDAV="+String.valueOf(CND_QTDDAV));
		sb.append(",CND_QTDPAR="+String.valueOf(CND_QTDPAR));
		sb.append(",CND_SEMENT="+CND_SEMENT);
		sb.append(",CND_SENCND="+CND_SENCND);
		sb.append(",CND_VALMIN="+String.valueOf(CND_VALMIN));
		sb.append(",CND_FATMAX="+String.valueOf(CND_FATMAX));
		sb.append(",CND_FATMIN="+String.valueOf(CND_FATMIN));
		sb.append(",CND_IMPFAT="+CND_IMPFAT);
		sb.append(",CND_MARMAX="+String.valueOf(CND_MARMAX));
		sb.append(",CND_MARMIN="+String.valueOf(CND_MARMIN));
		sb.append(",CND_PEDEAC="+String.valueOf(CND_PEDEAC));
		sb.append(",CND_TABPRE="+CND_TABPRE);
		sb.append(",CND_TIPFAT="+CND_TIPFAT);
		sb.append(",CND_JURPRO="+CND_JURPRO);
		sb.append(",CND_TIPCND="+CND_TIPCND);
		sb.append(",CND_ULTALT="+String.valueOf(CND_ULTALT));
		sb.append(",CND_PRAMIN="+CND_PRAMIN);
		sb.append(",CND_DESMSU="+String.valueOf(CND_DESMSU));
		sb.append(",CND_EMPACE="+CND_EMPACE);
		sb.append(",CND_EXPFSO="+CND_EXPFSO);
		sb.append(",CND_FPGNVL="+CND_FPGNVL);
		sb.append(",CND_LBPDOB="+CND_LBPDOB);
		sb.append(",CND_MAXCAR="+String.valueOf(CND_MAXCAR));
		sb.append(",CND_MCOBDA="+CND_MCOBDA);
		sb.append(",CND_SENTRA="+CND_SENTRA);
		sb.append(",CND_TPFTDA="+CND_TPFTDA);
		sb.append(",CND_TRCLCR="+CND_TRCLCR);
		sb.append(",CND_TRTTVE="+CND_TRTTVE);
		sb.append(",CND_VRDAUV="+String.valueOf(CND_VRDAUV));
		sb.append(",CND_VRDEAC="+String.valueOf(CND_VRDEAC));
		sb.append(",CND_PARMAX="+String.valueOf(CND_PARMAX));
		sb.append(",CND_PARMIN="+String.valueOf(CND_PARMIN));
		sb.append(",CND_RETIRA="+CND_RETIRA);
		sb.append(",CND_ENTIME="+CND_ENTIME);
		sb.append(",CND_ENTFUT="+CND_ENTFUT);
		sb.append(",CND_QTDMAX="+String.valueOf(CND_QTDMAX));
		sb.append(",CND_TRCLCB="+CND_TRCLCB);
		sb.append(",CND_EXPB2B="+CND_EXPB2B);
		sb.append(",CND_PRETAB="+CND_PRETAB);
		sb.append(",CND_LIMITE="+String.valueOf(CND_LIMITE));
		sb.append(",CND_USADEP="+CND_USADEP);
		sb.append(",CND_RCX_F3="+CND_RCX_F3);
		sb.append(",CND_COBYAP="+CND_COBYAP);
		sb.append(",CND_TRORCR="+CND_TRORCR);
		sb.append(",CND_TRORCB="+CND_TRORCB);
		sb.append(",CND_YAPTRA="+CND_YAPTRA);
		sb.append(",CND_YAPDIS="+CND_YAPDIS);
		sb.append(",CND_YAPPAR="+String.valueOf(CND_YAPPAR));
		sb.append(",CND_TRAFAT="+CND_TRAFAT);
		sb.append(",CND_TRAMAR="+CND_TRAMAR);
		sb.append(",CND_TRAPAR="+CND_TRAPAR);
		sb.append(",CND_CNDESP="+CND_CNDESP);
		sb.append(",CND_DESMVM="+String.valueOf(CND_DESMVM));
		sb.append(",CND_DESMSM="+String.valueOf(CND_DESMSM));
		sb.append(",CND_DESMGM="+String.valueOf(CND_DESMGM));
		sb.append(",CND_RECPIX="+CND_RECPIX);
		sb.append(",CND_TRACNC="+CND_TRACNC);
		sb.append(",CND_TRORFI="+CND_TRORFI);
		sb.append(",CND_TRORPF="+CND_TRORPF);
		sb.append(",CND_DIACOR="+CND_DIACOR);
		sb.append(",CND_PERVEN="+String.valueOf(CND_PERVEN));
		sb.append(",CND_GERLNK="+CND_GERLNK);
		sb.append(",CND_ESPFAT="+CND_ESPFAT);
		sb.append(",CND_COBPME="+CND_COBPME);
		sb.append(",CND_EXPTAB="+CND_EXPTAB);
		sb.append(",CND_PMEDVC="+CND_PMEDVC);
		sb.append(",CND_PMEQPA="+CND_PMEQPA);
		sb.append(",CND_PMEQPJ="+CND_PMEQPJ);
		sb.append(",CND_PMEJCT="+String.valueOf(CND_PMEJCT));
		sb.append(",CND_MODIVN="+CND_MODIVN);
		sb.append(",CND_PETRCD="+CND_PETRCD);
		sb.append(",CND_EMIBOL="+String.valueOf(CND_EMIBOL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_tableStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUTOINCREM, other.AUTOINCREM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String CND_CODIGO;

				public String getCND_CODIGO () {
					return this.CND_CODIGO;
				}

				public Boolean CND_CODIGOIsNullable(){
				    return false;
				}
				public Boolean CND_CODIGOIsKey(){
				    return false;
				}
				public Integer CND_CODIGOLength(){
				    return 3;
				}
				public Integer CND_CODIGOPrecision(){
				    return 0;
				}
				public String CND_CODIGODefault(){
				
					return null;
				
				}
				public String CND_CODIGOComment(){
				
				    return "";
				
				}
				public String CND_CODIGOPattern(){
				
					return "";
				
				}
				public String CND_CODIGOOriginalDbColumnName(){
				
					return "CND_CODIGO";
				
				}

				
			    public String CND_DESCRI;

				public String getCND_DESCRI () {
					return this.CND_DESCRI;
				}

				public Boolean CND_DESCRIIsNullable(){
				    return true;
				}
				public Boolean CND_DESCRIIsKey(){
				    return false;
				}
				public Integer CND_DESCRILength(){
				    return 70;
				}
				public Integer CND_DESCRIPrecision(){
				    return 0;
				}
				public String CND_DESCRIDefault(){
				
					return null;
				
				}
				public String CND_DESCRIComment(){
				
				    return "";
				
				}
				public String CND_DESCRIPattern(){
				
					return "";
				
				}
				public String CND_DESCRIOriginalDbColumnName(){
				
					return "CND_DESCRI";
				
				}

				
			    public String CND_CNDPAG;

				public String getCND_CNDPAG () {
					return this.CND_CNDPAG;
				}

				public Boolean CND_CNDPAGIsNullable(){
				    return true;
				}
				public Boolean CND_CNDPAGIsKey(){
				    return false;
				}
				public Integer CND_CNDPAGLength(){
				    return 74;
				}
				public Integer CND_CNDPAGPrecision(){
				    return 0;
				}
				public String CND_CNDPAGDefault(){
				
					return null;
				
				}
				public String CND_CNDPAGComment(){
				
				    return "";
				
				}
				public String CND_CNDPAGPattern(){
				
					return "";
				
				}
				public String CND_CNDPAGOriginalDbColumnName(){
				
					return "CND_CNDPAG";
				
				}

				
			    public String CND_TIPFOR;

				public String getCND_TIPFOR () {
					return this.CND_TIPFOR;
				}

				public Boolean CND_TIPFORIsNullable(){
				    return false;
				}
				public Boolean CND_TIPFORIsKey(){
				    return false;
				}
				public Integer CND_TIPFORLength(){
				    return 10;
				}
				public Integer CND_TIPFORPrecision(){
				    return 0;
				}
				public String CND_TIPFORDefault(){
				
					return null;
				
				}
				public String CND_TIPFORComment(){
				
				    return "";
				
				}
				public String CND_TIPFORPattern(){
				
					return "";
				
				}
				public String CND_TIPFOROriginalDbColumnName(){
				
					return "CND_TIPFOR";
				
				}

				
			    public String CND_CODPOR;

				public String getCND_CODPOR () {
					return this.CND_CODPOR;
				}

				public Boolean CND_CODPORIsNullable(){
				    return true;
				}
				public Boolean CND_CODPORIsKey(){
				    return false;
				}
				public Integer CND_CODPORLength(){
				    return 5;
				}
				public Integer CND_CODPORPrecision(){
				    return 0;
				}
				public String CND_CODPORDefault(){
				
					return null;
				
				}
				public String CND_CODPORComment(){
				
				    return "";
				
				}
				public String CND_CODPORPattern(){
				
					return "";
				
				}
				public String CND_CODPOROriginalDbColumnName(){
				
					return "CND_CODPOR";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return false;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return 0;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public String CND_CODEMP;

				public String getCND_CODEMP () {
					return this.CND_CODEMP;
				}

				public Boolean CND_CODEMPIsNullable(){
				    return true;
				}
				public Boolean CND_CODEMPIsKey(){
				    return false;
				}
				public Integer CND_CODEMPLength(){
				    return 3;
				}
				public Integer CND_CODEMPPrecision(){
				    return 0;
				}
				public String CND_CODEMPDefault(){
				
					return null;
				
				}
				public String CND_CODEMPComment(){
				
				    return "";
				
				}
				public String CND_CODEMPPattern(){
				
					return "";
				
				}
				public String CND_CODEMPOriginalDbColumnName(){
				
					return "CND_CODEMP";
				
				}

				
			    public BigDecimal CND_DESMAX;

				public BigDecimal getCND_DESMAX () {
					return this.CND_DESMAX;
				}

				public Boolean CND_DESMAXIsNullable(){
				    return true;
				}
				public Boolean CND_DESMAXIsKey(){
				    return false;
				}
				public Integer CND_DESMAXLength(){
				    return 12;
				}
				public Integer CND_DESMAXPrecision(){
				    return 2;
				}
				public String CND_DESMAXDefault(){
				
					return null;
				
				}
				public String CND_DESMAXComment(){
				
				    return "";
				
				}
				public String CND_DESMAXPattern(){
				
					return "";
				
				}
				public String CND_DESMAXOriginalDbColumnName(){
				
					return "CND_DESMAX";
				
				}

				
			    public String CND_ABADES;

				public String getCND_ABADES () {
					return this.CND_ABADES;
				}

				public Boolean CND_ABADESIsNullable(){
				    return true;
				}
				public Boolean CND_ABADESIsKey(){
				    return false;
				}
				public Integer CND_ABADESLength(){
				    return 1;
				}
				public Integer CND_ABADESPrecision(){
				    return 0;
				}
				public String CND_ABADESDefault(){
				
					return null;
				
				}
				public String CND_ABADESComment(){
				
				    return "";
				
				}
				public String CND_ABADESPattern(){
				
					return "";
				
				}
				public String CND_ABADESOriginalDbColumnName(){
				
					return "CND_ABADES";
				
				}

				
			    public String CND_ABDECC;

				public String getCND_ABDECC () {
					return this.CND_ABDECC;
				}

				public Boolean CND_ABDECCIsNullable(){
				    return true;
				}
				public Boolean CND_ABDECCIsKey(){
				    return false;
				}
				public Integer CND_ABDECCLength(){
				    return 1;
				}
				public Integer CND_ABDECCPrecision(){
				    return 0;
				}
				public String CND_ABDECCDefault(){
				
					return null;
				
				}
				public String CND_ABDECCComment(){
				
				    return "";
				
				}
				public String CND_ABDECCPattern(){
				
					return "";
				
				}
				public String CND_ABDECCOriginalDbColumnName(){
				
					return "CND_ABDECC";
				
				}

				
			    public BigDecimal CND_TXJURO;

				public BigDecimal getCND_TXJURO () {
					return this.CND_TXJURO;
				}

				public Boolean CND_TXJUROIsNullable(){
				    return true;
				}
				public Boolean CND_TXJUROIsKey(){
				    return false;
				}
				public Integer CND_TXJUROLength(){
				    return 12;
				}
				public Integer CND_TXJUROPrecision(){
				    return 4;
				}
				public String CND_TXJURODefault(){
				
					return null;
				
				}
				public String CND_TXJUROComment(){
				
				    return "";
				
				}
				public String CND_TXJUROPattern(){
				
					return "";
				
				}
				public String CND_TXJUROOriginalDbColumnName(){
				
					return "CND_TXJURO";
				
				}

				
			    public String CND_CODFPG;

				public String getCND_CODFPG () {
					return this.CND_CODFPG;
				}

				public Boolean CND_CODFPGIsNullable(){
				    return true;
				}
				public Boolean CND_CODFPGIsKey(){
				    return false;
				}
				public Integer CND_CODFPGLength(){
				    return 3;
				}
				public Integer CND_CODFPGPrecision(){
				    return 0;
				}
				public String CND_CODFPGDefault(){
				
					return null;
				
				}
				public String CND_CODFPGComment(){
				
				    return "";
				
				}
				public String CND_CODFPGPattern(){
				
					return "";
				
				}
				public String CND_CODFPGOriginalDbColumnName(){
				
					return "CND_CODFPG";
				
				}

				
			    public BigDecimal CND_PRZMED;

				public BigDecimal getCND_PRZMED () {
					return this.CND_PRZMED;
				}

				public Boolean CND_PRZMEDIsNullable(){
				    return true;
				}
				public Boolean CND_PRZMEDIsKey(){
				    return false;
				}
				public Integer CND_PRZMEDLength(){
				    return 12;
				}
				public Integer CND_PRZMEDPrecision(){
				    return 2;
				}
				public String CND_PRZMEDDefault(){
				
					return null;
				
				}
				public String CND_PRZMEDComment(){
				
				    return "";
				
				}
				public String CND_PRZMEDPattern(){
				
					return "";
				
				}
				public String CND_PRZMEDOriginalDbColumnName(){
				
					return "CND_PRZMED";
				
				}

				
			    public BigDecimal CND_FATACA;

				public BigDecimal getCND_FATACA () {
					return this.CND_FATACA;
				}

				public Boolean CND_FATACAIsNullable(){
				    return true;
				}
				public Boolean CND_FATACAIsKey(){
				    return false;
				}
				public Integer CND_FATACALength(){
				    return 5;
				}
				public Integer CND_FATACAPrecision(){
				    return 4;
				}
				public String CND_FATACADefault(){
				
					return null;
				
				}
				public String CND_FATACAComment(){
				
				    return "";
				
				}
				public String CND_FATACAPattern(){
				
					return "";
				
				}
				public String CND_FATACAOriginalDbColumnName(){
				
					return "CND_FATACA";
				
				}

				
			    public String CND_INFANA;

				public String getCND_INFANA () {
					return this.CND_INFANA;
				}

				public Boolean CND_INFANAIsNullable(){
				    return true;
				}
				public Boolean CND_INFANAIsKey(){
				    return false;
				}
				public Integer CND_INFANALength(){
				    return 1;
				}
				public Integer CND_INFANAPrecision(){
				    return 0;
				}
				public String CND_INFANADefault(){
				
					return "'S'";
				
				}
				public String CND_INFANAComment(){
				
				    return "";
				
				}
				public String CND_INFANAPattern(){
				
					return "";
				
				}
				public String CND_INFANAOriginalDbColumnName(){
				
					return "CND_INFANA";
				
				}

				
			    public String CND_STATUS;

				public String getCND_STATUS () {
					return this.CND_STATUS;
				}

				public Boolean CND_STATUSIsNullable(){
				    return true;
				}
				public Boolean CND_STATUSIsKey(){
				    return false;
				}
				public Integer CND_STATUSLength(){
				    return 1;
				}
				public Integer CND_STATUSPrecision(){
				    return 0;
				}
				public String CND_STATUSDefault(){
				
					return "'A'";
				
				}
				public String CND_STATUSComment(){
				
				    return "";
				
				}
				public String CND_STATUSPattern(){
				
					return "";
				
				}
				public String CND_STATUSOriginalDbColumnName(){
				
					return "CND_STATUS";
				
				}

				
			    public BigDecimal CND_DESMGE;

				public BigDecimal getCND_DESMGE () {
					return this.CND_DESMGE;
				}

				public Boolean CND_DESMGEIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGEIsKey(){
				    return false;
				}
				public Integer CND_DESMGELength(){
				    return 12;
				}
				public Integer CND_DESMGEPrecision(){
				    return 2;
				}
				public String CND_DESMGEDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGEComment(){
				
				    return "";
				
				}
				public String CND_DESMGEPattern(){
				
					return "";
				
				}
				public String CND_DESMGEOriginalDbColumnName(){
				
					return "CND_DESMGE";
				
				}

				
			    public String CND_ALTPRE;

				public String getCND_ALTPRE () {
					return this.CND_ALTPRE;
				}

				public Boolean CND_ALTPREIsNullable(){
				    return true;
				}
				public Boolean CND_ALTPREIsKey(){
				    return false;
				}
				public Integer CND_ALTPRELength(){
				    return 1;
				}
				public Integer CND_ALTPREPrecision(){
				    return 0;
				}
				public String CND_ALTPREDefault(){
				
					return "'S'";
				
				}
				public String CND_ALTPREComment(){
				
				    return "";
				
				}
				public String CND_ALTPREPattern(){
				
					return "";
				
				}
				public String CND_ALTPREOriginalDbColumnName(){
				
					return "CND_ALTPRE";
				
				}

				
			    public String CND_CODVEL;

				public String getCND_CODVEL () {
					return this.CND_CODVEL;
				}

				public Boolean CND_CODVELIsNullable(){
				    return true;
				}
				public Boolean CND_CODVELIsKey(){
				    return false;
				}
				public Integer CND_CODVELLength(){
				    return 20;
				}
				public Integer CND_CODVELPrecision(){
				    return 0;
				}
				public String CND_CODVELDefault(){
				
					return null;
				
				}
				public String CND_CODVELComment(){
				
				    return "";
				
				}
				public String CND_CODVELPattern(){
				
					return "";
				
				}
				public String CND_CODVELOriginalDbColumnName(){
				
					return "CND_CODVEL";
				
				}

				
			    public String CND_DESPFL;

				public String getCND_DESPFL () {
					return this.CND_DESPFL;
				}

				public Boolean CND_DESPFLIsNullable(){
				    return true;
				}
				public Boolean CND_DESPFLIsKey(){
				    return false;
				}
				public Integer CND_DESPFLLength(){
				    return 255;
				}
				public Integer CND_DESPFLPrecision(){
				    return 0;
				}
				public String CND_DESPFLDefault(){
				
					return null;
				
				}
				public String CND_DESPFLComment(){
				
				    return "";
				
				}
				public String CND_DESPFLPattern(){
				
					return "";
				
				}
				public String CND_DESPFLOriginalDbColumnName(){
				
					return "CND_DESPFL";
				
				}

				
			    public Integer CND_DIAFIX;

				public Integer getCND_DIAFIX () {
					return this.CND_DIAFIX;
				}

				public Boolean CND_DIAFIXIsNullable(){
				    return true;
				}
				public Boolean CND_DIAFIXIsKey(){
				    return false;
				}
				public Integer CND_DIAFIXLength(){
				    return 10;
				}
				public Integer CND_DIAFIXPrecision(){
				    return 0;
				}
				public String CND_DIAFIXDefault(){
				
					return null;
				
				}
				public String CND_DIAFIXComment(){
				
				    return "";
				
				}
				public String CND_DIAFIXPattern(){
				
					return "";
				
				}
				public String CND_DIAFIXOriginalDbColumnName(){
				
					return "CND_DIAFIX";
				
				}

				
			    public String CND_IMPBOL;

				public String getCND_IMPBOL () {
					return this.CND_IMPBOL;
				}

				public Boolean CND_IMPBOLIsNullable(){
				    return true;
				}
				public Boolean CND_IMPBOLIsKey(){
				    return false;
				}
				public Integer CND_IMPBOLLength(){
				    return 1;
				}
				public Integer CND_IMPBOLPrecision(){
				    return 0;
				}
				public String CND_IMPBOLDefault(){
				
					return "'S'";
				
				}
				public String CND_IMPBOLComment(){
				
				    return "";
				
				}
				public String CND_IMPBOLPattern(){
				
					return "";
				
				}
				public String CND_IMPBOLOriginalDbColumnName(){
				
					return "CND_IMPBOL";
				
				}

				
			    public String CND_LIMCRE;

				public String getCND_LIMCRE () {
					return this.CND_LIMCRE;
				}

				public Boolean CND_LIMCREIsNullable(){
				    return true;
				}
				public Boolean CND_LIMCREIsKey(){
				    return false;
				}
				public Integer CND_LIMCRELength(){
				    return 1;
				}
				public Integer CND_LIMCREPrecision(){
				    return 0;
				}
				public String CND_LIMCREDefault(){
				
					return "'S'";
				
				}
				public String CND_LIMCREComment(){
				
				    return "";
				
				}
				public String CND_LIMCREPattern(){
				
					return "";
				
				}
				public String CND_LIMCREOriginalDbColumnName(){
				
					return "CND_LIMCRE";
				
				}

				
			    public BigDecimal CND_PERCOM;

				public BigDecimal getCND_PERCOM () {
					return this.CND_PERCOM;
				}

				public Boolean CND_PERCOMIsNullable(){
				    return true;
				}
				public Boolean CND_PERCOMIsKey(){
				    return false;
				}
				public Integer CND_PERCOMLength(){
				    return 12;
				}
				public Integer CND_PERCOMPrecision(){
				    return 2;
				}
				public String CND_PERCOMDefault(){
				
					return null;
				
				}
				public String CND_PERCOMComment(){
				
				    return "";
				
				}
				public String CND_PERCOMPattern(){
				
					return "";
				
				}
				public String CND_PERCOMOriginalDbColumnName(){
				
					return "CND_PERCOM";
				
				}

				
			    public BigDecimal CND_PERDPO;

				public BigDecimal getCND_PERDPO () {
					return this.CND_PERDPO;
				}

				public Boolean CND_PERDPOIsNullable(){
				    return true;
				}
				public Boolean CND_PERDPOIsKey(){
				    return false;
				}
				public Integer CND_PERDPOLength(){
				    return 12;
				}
				public Integer CND_PERDPOPrecision(){
				    return 2;
				}
				public String CND_PERDPODefault(){
				
					return "0.00";
				
				}
				public String CND_PERDPOComment(){
				
				    return "";
				
				}
				public String CND_PERDPOPattern(){
				
					return "";
				
				}
				public String CND_PERDPOOriginalDbColumnName(){
				
					return "CND_PERDPO";
				
				}

				
			    public Integer CND_QTDDAV;

				public Integer getCND_QTDDAV () {
					return this.CND_QTDDAV;
				}

				public Boolean CND_QTDDAVIsNullable(){
				    return true;
				}
				public Boolean CND_QTDDAVIsKey(){
				    return false;
				}
				public Integer CND_QTDDAVLength(){
				    return 10;
				}
				public Integer CND_QTDDAVPrecision(){
				    return 0;
				}
				public String CND_QTDDAVDefault(){
				
					return "0";
				
				}
				public String CND_QTDDAVComment(){
				
				    return "";
				
				}
				public String CND_QTDDAVPattern(){
				
					return "";
				
				}
				public String CND_QTDDAVOriginalDbColumnName(){
				
					return "CND_QTDDAV";
				
				}

				
			    public Integer CND_QTDPAR;

				public Integer getCND_QTDPAR () {
					return this.CND_QTDPAR;
				}

				public Boolean CND_QTDPARIsNullable(){
				    return true;
				}
				public Boolean CND_QTDPARIsKey(){
				    return false;
				}
				public Integer CND_QTDPARLength(){
				    return 10;
				}
				public Integer CND_QTDPARPrecision(){
				    return 0;
				}
				public String CND_QTDPARDefault(){
				
					return null;
				
				}
				public String CND_QTDPARComment(){
				
				    return "";
				
				}
				public String CND_QTDPARPattern(){
				
					return "";
				
				}
				public String CND_QTDPAROriginalDbColumnName(){
				
					return "CND_QTDPAR";
				
				}

				
			    public String CND_SEMENT;

				public String getCND_SEMENT () {
					return this.CND_SEMENT;
				}

				public Boolean CND_SEMENTIsNullable(){
				    return true;
				}
				public Boolean CND_SEMENTIsKey(){
				    return false;
				}
				public Integer CND_SEMENTLength(){
				    return 1;
				}
				public Integer CND_SEMENTPrecision(){
				    return 0;
				}
				public String CND_SEMENTDefault(){
				
					return "'N'";
				
				}
				public String CND_SEMENTComment(){
				
				    return "";
				
				}
				public String CND_SEMENTPattern(){
				
					return "";
				
				}
				public String CND_SEMENTOriginalDbColumnName(){
				
					return "CND_SEMENT";
				
				}

				
			    public String CND_SENCND;

				public String getCND_SENCND () {
					return this.CND_SENCND;
				}

				public Boolean CND_SENCNDIsNullable(){
				    return true;
				}
				public Boolean CND_SENCNDIsKey(){
				    return false;
				}
				public Integer CND_SENCNDLength(){
				    return 1;
				}
				public Integer CND_SENCNDPrecision(){
				    return 0;
				}
				public String CND_SENCNDDefault(){
				
					return "'S'";
				
				}
				public String CND_SENCNDComment(){
				
				    return "";
				
				}
				public String CND_SENCNDPattern(){
				
					return "";
				
				}
				public String CND_SENCNDOriginalDbColumnName(){
				
					return "CND_SENCND";
				
				}

				
			    public BigDecimal CND_VALMIN;

				public BigDecimal getCND_VALMIN () {
					return this.CND_VALMIN;
				}

				public Boolean CND_VALMINIsNullable(){
				    return true;
				}
				public Boolean CND_VALMINIsKey(){
				    return false;
				}
				public Integer CND_VALMINLength(){
				    return 12;
				}
				public Integer CND_VALMINPrecision(){
				    return 2;
				}
				public String CND_VALMINDefault(){
				
					return null;
				
				}
				public String CND_VALMINComment(){
				
				    return "";
				
				}
				public String CND_VALMINPattern(){
				
					return "";
				
				}
				public String CND_VALMINOriginalDbColumnName(){
				
					return "CND_VALMIN";
				
				}

				
			    public BigDecimal CND_FATMAX;

				public BigDecimal getCND_FATMAX () {
					return this.CND_FATMAX;
				}

				public Boolean CND_FATMAXIsNullable(){
				    return true;
				}
				public Boolean CND_FATMAXIsKey(){
				    return false;
				}
				public Integer CND_FATMAXLength(){
				    return 12;
				}
				public Integer CND_FATMAXPrecision(){
				    return 2;
				}
				public String CND_FATMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_FATMAXComment(){
				
				    return "";
				
				}
				public String CND_FATMAXPattern(){
				
					return "";
				
				}
				public String CND_FATMAXOriginalDbColumnName(){
				
					return "CND_FATMAX";
				
				}

				
			    public BigDecimal CND_FATMIN;

				public BigDecimal getCND_FATMIN () {
					return this.CND_FATMIN;
				}

				public Boolean CND_FATMINIsNullable(){
				    return true;
				}
				public Boolean CND_FATMINIsKey(){
				    return false;
				}
				public Integer CND_FATMINLength(){
				    return 12;
				}
				public Integer CND_FATMINPrecision(){
				    return 2;
				}
				public String CND_FATMINDefault(){
				
					return "0.00";
				
				}
				public String CND_FATMINComment(){
				
				    return "";
				
				}
				public String CND_FATMINPattern(){
				
					return "";
				
				}
				public String CND_FATMINOriginalDbColumnName(){
				
					return "CND_FATMIN";
				
				}

				
			    public String CND_IMPFAT;

				public String getCND_IMPFAT () {
					return this.CND_IMPFAT;
				}

				public Boolean CND_IMPFATIsNullable(){
				    return true;
				}
				public Boolean CND_IMPFATIsKey(){
				    return false;
				}
				public Integer CND_IMPFATLength(){
				    return 1;
				}
				public Integer CND_IMPFATPrecision(){
				    return 0;
				}
				public String CND_IMPFATDefault(){
				
					return "'N'";
				
				}
				public String CND_IMPFATComment(){
				
				    return "";
				
				}
				public String CND_IMPFATPattern(){
				
					return "";
				
				}
				public String CND_IMPFATOriginalDbColumnName(){
				
					return "CND_IMPFAT";
				
				}

				
			    public BigDecimal CND_MARMAX;

				public BigDecimal getCND_MARMAX () {
					return this.CND_MARMAX;
				}

				public Boolean CND_MARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_MARMAXIsKey(){
				    return false;
				}
				public Integer CND_MARMAXLength(){
				    return 12;
				}
				public Integer CND_MARMAXPrecision(){
				    return 2;
				}
				public String CND_MARMAXDefault(){
				
					return "100.00";
				
				}
				public String CND_MARMAXComment(){
				
				    return "";
				
				}
				public String CND_MARMAXPattern(){
				
					return "";
				
				}
				public String CND_MARMAXOriginalDbColumnName(){
				
					return "CND_MARMAX";
				
				}

				
			    public BigDecimal CND_MARMIN;

				public BigDecimal getCND_MARMIN () {
					return this.CND_MARMIN;
				}

				public Boolean CND_MARMINIsNullable(){
				    return true;
				}
				public Boolean CND_MARMINIsKey(){
				    return false;
				}
				public Integer CND_MARMINLength(){
				    return 12;
				}
				public Integer CND_MARMINPrecision(){
				    return 2;
				}
				public String CND_MARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_MARMINComment(){
				
				    return "";
				
				}
				public String CND_MARMINPattern(){
				
					return "";
				
				}
				public String CND_MARMINOriginalDbColumnName(){
				
					return "CND_MARMIN";
				
				}

				
			    public BigDecimal CND_PEDEAC;

				public BigDecimal getCND_PEDEAC () {
					return this.CND_PEDEAC;
				}

				public Boolean CND_PEDEACIsNullable(){
				    return true;
				}
				public Boolean CND_PEDEACIsKey(){
				    return false;
				}
				public Integer CND_PEDEACLength(){
				    return 5;
				}
				public Integer CND_PEDEACPrecision(){
				    return 2;
				}
				public String CND_PEDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_PEDEACComment(){
				
				    return "";
				
				}
				public String CND_PEDEACPattern(){
				
					return "";
				
				}
				public String CND_PEDEACOriginalDbColumnName(){
				
					return "CND_PEDEAC";
				
				}

				
			    public String CND_TABPRE;

				public String getCND_TABPRE () {
					return this.CND_TABPRE;
				}

				public Boolean CND_TABPREIsNullable(){
				    return true;
				}
				public Boolean CND_TABPREIsKey(){
				    return false;
				}
				public Integer CND_TABPRELength(){
				    return 1;
				}
				public Integer CND_TABPREPrecision(){
				    return 0;
				}
				public String CND_TABPREDefault(){
				
					return null;
				
				}
				public String CND_TABPREComment(){
				
				    return "";
				
				}
				public String CND_TABPREPattern(){
				
					return "";
				
				}
				public String CND_TABPREOriginalDbColumnName(){
				
					return "CND_TABPRE";
				
				}

				
			    public String CND_TIPFAT;

				public String getCND_TIPFAT () {
					return this.CND_TIPFAT;
				}

				public Boolean CND_TIPFATIsNullable(){
				    return true;
				}
				public Boolean CND_TIPFATIsKey(){
				    return false;
				}
				public Integer CND_TIPFATLength(){
				    return 4;
				}
				public Integer CND_TIPFATPrecision(){
				    return 0;
				}
				public String CND_TIPFATDefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TIPFATComment(){
				
				    return "";
				
				}
				public String CND_TIPFATPattern(){
				
					return "";
				
				}
				public String CND_TIPFATOriginalDbColumnName(){
				
					return "CND_TIPFAT";
				
				}

				
			    public String CND_JURPRO;

				public String getCND_JURPRO () {
					return this.CND_JURPRO;
				}

				public Boolean CND_JURPROIsNullable(){
				    return true;
				}
				public Boolean CND_JURPROIsKey(){
				    return false;
				}
				public Integer CND_JURPROLength(){
				    return 1;
				}
				public Integer CND_JURPROPrecision(){
				    return 0;
				}
				public String CND_JURPRODefault(){
				
					return "'S'";
				
				}
				public String CND_JURPROComment(){
				
				    return "";
				
				}
				public String CND_JURPROPattern(){
				
					return "";
				
				}
				public String CND_JURPROOriginalDbColumnName(){
				
					return "CND_JURPRO";
				
				}

				
			    public String CND_TIPCND;

				public String getCND_TIPCND () {
					return this.CND_TIPCND;
				}

				public Boolean CND_TIPCNDIsNullable(){
				    return true;
				}
				public Boolean CND_TIPCNDIsKey(){
				    return false;
				}
				public Integer CND_TIPCNDLength(){
				    return 1;
				}
				public Integer CND_TIPCNDPrecision(){
				    return 0;
				}
				public String CND_TIPCNDDefault(){
				
					return "'V'";
				
				}
				public String CND_TIPCNDComment(){
				
				    return "";
				
				}
				public String CND_TIPCNDPattern(){
				
					return "";
				
				}
				public String CND_TIPCNDOriginalDbColumnName(){
				
					return "CND_TIPCND";
				
				}

				
			    public java.util.Date CND_ULTALT;

				public java.util.Date getCND_ULTALT () {
					return this.CND_ULTALT;
				}

				public Boolean CND_ULTALTIsNullable(){
				    return true;
				}
				public Boolean CND_ULTALTIsKey(){
				    return false;
				}
				public Integer CND_ULTALTLength(){
				    return 10;
				}
				public Integer CND_ULTALTPrecision(){
				    return 0;
				}
				public String CND_ULTALTDefault(){
				
					return null;
				
				}
				public String CND_ULTALTComment(){
				
				    return "";
				
				}
				public String CND_ULTALTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CND_ULTALTOriginalDbColumnName(){
				
					return "CND_ULTALT";
				
				}

				
			    public String CND_PRAMIN;

				public String getCND_PRAMIN () {
					return this.CND_PRAMIN;
				}

				public Boolean CND_PRAMINIsNullable(){
				    return true;
				}
				public Boolean CND_PRAMINIsKey(){
				    return false;
				}
				public Integer CND_PRAMINLength(){
				    return 1;
				}
				public Integer CND_PRAMINPrecision(){
				    return 0;
				}
				public String CND_PRAMINDefault(){
				
					return "'S'";
				
				}
				public String CND_PRAMINComment(){
				
				    return "";
				
				}
				public String CND_PRAMINPattern(){
				
					return "";
				
				}
				public String CND_PRAMINOriginalDbColumnName(){
				
					return "CND_PRAMIN";
				
				}

				
			    public BigDecimal CND_DESMSU;

				public BigDecimal getCND_DESMSU () {
					return this.CND_DESMSU;
				}

				public Boolean CND_DESMSUIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSUIsKey(){
				    return false;
				}
				public Integer CND_DESMSULength(){
				    return 12;
				}
				public Integer CND_DESMSUPrecision(){
				    return 2;
				}
				public String CND_DESMSUDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSUComment(){
				
				    return "";
				
				}
				public String CND_DESMSUPattern(){
				
					return "";
				
				}
				public String CND_DESMSUOriginalDbColumnName(){
				
					return "CND_DESMSU";
				
				}

				
			    public String CND_EMPACE;

				public String getCND_EMPACE () {
					return this.CND_EMPACE;
				}

				public Boolean CND_EMPACEIsNullable(){
				    return true;
				}
				public Boolean CND_EMPACEIsKey(){
				    return false;
				}
				public Integer CND_EMPACELength(){
				    return 65535;
				}
				public Integer CND_EMPACEPrecision(){
				    return 0;
				}
				public String CND_EMPACEDefault(){
				
					return null;
				
				}
				public String CND_EMPACEComment(){
				
				    return "";
				
				}
				public String CND_EMPACEPattern(){
				
					return "";
				
				}
				public String CND_EMPACEOriginalDbColumnName(){
				
					return "CND_EMPACE";
				
				}

				
			    public String CND_EXPFSO;

				public String getCND_EXPFSO () {
					return this.CND_EXPFSO;
				}

				public Boolean CND_EXPFSOIsNullable(){
				    return true;
				}
				public Boolean CND_EXPFSOIsKey(){
				    return false;
				}
				public Integer CND_EXPFSOLength(){
				    return 1;
				}
				public Integer CND_EXPFSOPrecision(){
				    return 0;
				}
				public String CND_EXPFSODefault(){
				
					return "'S'";
				
				}
				public String CND_EXPFSOComment(){
				
				    return "";
				
				}
				public String CND_EXPFSOPattern(){
				
					return "";
				
				}
				public String CND_EXPFSOOriginalDbColumnName(){
				
					return "CND_EXPFSO";
				
				}

				
			    public String CND_FPGNVL;

				public String getCND_FPGNVL () {
					return this.CND_FPGNVL;
				}

				public Boolean CND_FPGNVLIsNullable(){
				    return true;
				}
				public Boolean CND_FPGNVLIsKey(){
				    return false;
				}
				public Integer CND_FPGNVLLength(){
				    return 16;
				}
				public Integer CND_FPGNVLPrecision(){
				    return 0;
				}
				public String CND_FPGNVLDefault(){
				
					return null;
				
				}
				public String CND_FPGNVLComment(){
				
				    return "";
				
				}
				public String CND_FPGNVLPattern(){
				
					return "";
				
				}
				public String CND_FPGNVLOriginalDbColumnName(){
				
					return "CND_FPGNVL";
				
				}

				
			    public String CND_LBPDOB;

				public String getCND_LBPDOB () {
					return this.CND_LBPDOB;
				}

				public Boolean CND_LBPDOBIsNullable(){
				    return true;
				}
				public Boolean CND_LBPDOBIsKey(){
				    return false;
				}
				public Integer CND_LBPDOBLength(){
				    return 1;
				}
				public Integer CND_LBPDOBPrecision(){
				    return 0;
				}
				public String CND_LBPDOBDefault(){
				
					return "'N'";
				
				}
				public String CND_LBPDOBComment(){
				
				    return "";
				
				}
				public String CND_LBPDOBPattern(){
				
					return "";
				
				}
				public String CND_LBPDOBOriginalDbColumnName(){
				
					return "CND_LBPDOB";
				
				}

				
			    public Integer CND_MAXCAR;

				public Integer getCND_MAXCAR () {
					return this.CND_MAXCAR;
				}

				public Boolean CND_MAXCARIsNullable(){
				    return true;
				}
				public Boolean CND_MAXCARIsKey(){
				    return false;
				}
				public Integer CND_MAXCARLength(){
				    return 10;
				}
				public Integer CND_MAXCARPrecision(){
				    return 0;
				}
				public String CND_MAXCARDefault(){
				
					return null;
				
				}
				public String CND_MAXCARComment(){
				
				    return "";
				
				}
				public String CND_MAXCARPattern(){
				
					return "";
				
				}
				public String CND_MAXCAROriginalDbColumnName(){
				
					return "CND_MAXCAR";
				
				}

				
			    public String CND_MCOBDA;

				public String getCND_MCOBDA () {
					return this.CND_MCOBDA;
				}

				public Boolean CND_MCOBDAIsNullable(){
				    return true;
				}
				public Boolean CND_MCOBDAIsKey(){
				    return false;
				}
				public Integer CND_MCOBDALength(){
				    return 1;
				}
				public Integer CND_MCOBDAPrecision(){
				    return 0;
				}
				public String CND_MCOBDADefault(){
				
					return "'1'";
				
				}
				public String CND_MCOBDAComment(){
				
				    return "";
				
				}
				public String CND_MCOBDAPattern(){
				
					return "";
				
				}
				public String CND_MCOBDAOriginalDbColumnName(){
				
					return "CND_MCOBDA";
				
				}

				
			    public String CND_SENTRA;

				public String getCND_SENTRA () {
					return this.CND_SENTRA;
				}

				public Boolean CND_SENTRAIsNullable(){
				    return true;
				}
				public Boolean CND_SENTRAIsKey(){
				    return false;
				}
				public Integer CND_SENTRALength(){
				    return 1;
				}
				public Integer CND_SENTRAPrecision(){
				    return 0;
				}
				public String CND_SENTRADefault(){
				
					return "'N'";
				
				}
				public String CND_SENTRAComment(){
				
				    return "";
				
				}
				public String CND_SENTRAPattern(){
				
					return "";
				
				}
				public String CND_SENTRAOriginalDbColumnName(){
				
					return "CND_SENTRA";
				
				}

				
			    public String CND_TPFTDA;

				public String getCND_TPFTDA () {
					return this.CND_TPFTDA;
				}

				public Boolean CND_TPFTDAIsNullable(){
				    return true;
				}
				public Boolean CND_TPFTDAIsKey(){
				    return false;
				}
				public Integer CND_TPFTDALength(){
				    return 4;
				}
				public Integer CND_TPFTDAPrecision(){
				    return 0;
				}
				public String CND_TPFTDADefault(){
				
					return "'ABCD'";
				
				}
				public String CND_TPFTDAComment(){
				
				    return "";
				
				}
				public String CND_TPFTDAPattern(){
				
					return "";
				
				}
				public String CND_TPFTDAOriginalDbColumnName(){
				
					return "CND_TPFTDA";
				
				}

				
			    public String CND_TRCLCR;

				public String getCND_TRCLCR () {
					return this.CND_TRCLCR;
				}

				public Boolean CND_TRCLCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCRIsKey(){
				    return false;
				}
				public Integer CND_TRCLCRLength(){
				    return 1;
				}
				public Integer CND_TRCLCRPrecision(){
				    return 0;
				}
				public String CND_TRCLCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCRComment(){
				
				    return "";
				
				}
				public String CND_TRCLCRPattern(){
				
					return "";
				
				}
				public String CND_TRCLCROriginalDbColumnName(){
				
					return "CND_TRCLCR";
				
				}

				
			    public String CND_TRTTVE;

				public String getCND_TRTTVE () {
					return this.CND_TRTTVE;
				}

				public Boolean CND_TRTTVEIsNullable(){
				    return true;
				}
				public Boolean CND_TRTTVEIsKey(){
				    return false;
				}
				public Integer CND_TRTTVELength(){
				    return 1;
				}
				public Integer CND_TRTTVEPrecision(){
				    return 0;
				}
				public String CND_TRTTVEDefault(){
				
					return "'S'";
				
				}
				public String CND_TRTTVEComment(){
				
				    return "";
				
				}
				public String CND_TRTTVEPattern(){
				
					return "";
				
				}
				public String CND_TRTTVEOriginalDbColumnName(){
				
					return "CND_TRTTVE";
				
				}

				
			    public BigDecimal CND_VRDAUV;

				public BigDecimal getCND_VRDAUV () {
					return this.CND_VRDAUV;
				}

				public Boolean CND_VRDAUVIsNullable(){
				    return true;
				}
				public Boolean CND_VRDAUVIsKey(){
				    return false;
				}
				public Integer CND_VRDAUVLength(){
				    return 12;
				}
				public Integer CND_VRDAUVPrecision(){
				    return 2;
				}
				public String CND_VRDAUVDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDAUVComment(){
				
				    return "";
				
				}
				public String CND_VRDAUVPattern(){
				
					return "";
				
				}
				public String CND_VRDAUVOriginalDbColumnName(){
				
					return "CND_VRDAUV";
				
				}

				
			    public BigDecimal CND_VRDEAC;

				public BigDecimal getCND_VRDEAC () {
					return this.CND_VRDEAC;
				}

				public Boolean CND_VRDEACIsNullable(){
				    return true;
				}
				public Boolean CND_VRDEACIsKey(){
				    return false;
				}
				public Integer CND_VRDEACLength(){
				    return 12;
				}
				public Integer CND_VRDEACPrecision(){
				    return 2;
				}
				public String CND_VRDEACDefault(){
				
					return "0.00";
				
				}
				public String CND_VRDEACComment(){
				
				    return "";
				
				}
				public String CND_VRDEACPattern(){
				
					return "";
				
				}
				public String CND_VRDEACOriginalDbColumnName(){
				
					return "CND_VRDEAC";
				
				}

				
			    public BigDecimal CND_PARMAX;

				public BigDecimal getCND_PARMAX () {
					return this.CND_PARMAX;
				}

				public Boolean CND_PARMAXIsNullable(){
				    return true;
				}
				public Boolean CND_PARMAXIsKey(){
				    return false;
				}
				public Integer CND_PARMAXLength(){
				    return 12;
				}
				public Integer CND_PARMAXPrecision(){
				    return 2;
				}
				public String CND_PARMAXDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMAXComment(){
				
				    return "";
				
				}
				public String CND_PARMAXPattern(){
				
					return "";
				
				}
				public String CND_PARMAXOriginalDbColumnName(){
				
					return "CND_PARMAX";
				
				}

				
			    public BigDecimal CND_PARMIN;

				public BigDecimal getCND_PARMIN () {
					return this.CND_PARMIN;
				}

				public Boolean CND_PARMINIsNullable(){
				    return true;
				}
				public Boolean CND_PARMINIsKey(){
				    return false;
				}
				public Integer CND_PARMINLength(){
				    return 12;
				}
				public Integer CND_PARMINPrecision(){
				    return 2;
				}
				public String CND_PARMINDefault(){
				
					return "0.00";
				
				}
				public String CND_PARMINComment(){
				
				    return "";
				
				}
				public String CND_PARMINPattern(){
				
					return "";
				
				}
				public String CND_PARMINOriginalDbColumnName(){
				
					return "CND_PARMIN";
				
				}

				
			    public String CND_RETIRA;

				public String getCND_RETIRA () {
					return this.CND_RETIRA;
				}

				public Boolean CND_RETIRAIsNullable(){
				    return true;
				}
				public Boolean CND_RETIRAIsKey(){
				    return false;
				}
				public Integer CND_RETIRALength(){
				    return 1;
				}
				public Integer CND_RETIRAPrecision(){
				    return 0;
				}
				public String CND_RETIRADefault(){
				
					return "'S'";
				
				}
				public String CND_RETIRAComment(){
				
				    return "";
				
				}
				public String CND_RETIRAPattern(){
				
					return "";
				
				}
				public String CND_RETIRAOriginalDbColumnName(){
				
					return "CND_RETIRA";
				
				}

				
			    public String CND_ENTIME;

				public String getCND_ENTIME () {
					return this.CND_ENTIME;
				}

				public Boolean CND_ENTIMEIsNullable(){
				    return true;
				}
				public Boolean CND_ENTIMEIsKey(){
				    return false;
				}
				public Integer CND_ENTIMELength(){
				    return 1;
				}
				public Integer CND_ENTIMEPrecision(){
				    return 0;
				}
				public String CND_ENTIMEDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTIMEComment(){
				
				    return "";
				
				}
				public String CND_ENTIMEPattern(){
				
					return "";
				
				}
				public String CND_ENTIMEOriginalDbColumnName(){
				
					return "CND_ENTIME";
				
				}

				
			    public String CND_ENTFUT;

				public String getCND_ENTFUT () {
					return this.CND_ENTFUT;
				}

				public Boolean CND_ENTFUTIsNullable(){
				    return true;
				}
				public Boolean CND_ENTFUTIsKey(){
				    return false;
				}
				public Integer CND_ENTFUTLength(){
				    return 1;
				}
				public Integer CND_ENTFUTPrecision(){
				    return 0;
				}
				public String CND_ENTFUTDefault(){
				
					return "'S'";
				
				}
				public String CND_ENTFUTComment(){
				
				    return "";
				
				}
				public String CND_ENTFUTPattern(){
				
					return "";
				
				}
				public String CND_ENTFUTOriginalDbColumnName(){
				
					return "CND_ENTFUT";
				
				}

				
			    public Integer CND_QTDMAX;

				public Integer getCND_QTDMAX () {
					return this.CND_QTDMAX;
				}

				public Boolean CND_QTDMAXIsNullable(){
				    return true;
				}
				public Boolean CND_QTDMAXIsKey(){
				    return false;
				}
				public Integer CND_QTDMAXLength(){
				    return 10;
				}
				public Integer CND_QTDMAXPrecision(){
				    return 0;
				}
				public String CND_QTDMAXDefault(){
				
					return "0";
				
				}
				public String CND_QTDMAXComment(){
				
				    return "";
				
				}
				public String CND_QTDMAXPattern(){
				
					return "";
				
				}
				public String CND_QTDMAXOriginalDbColumnName(){
				
					return "CND_QTDMAX";
				
				}

				
			    public String CND_TRCLCB;

				public String getCND_TRCLCB () {
					return this.CND_TRCLCB;
				}

				public Boolean CND_TRCLCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRCLCBIsKey(){
				    return false;
				}
				public Integer CND_TRCLCBLength(){
				    return 1;
				}
				public Integer CND_TRCLCBPrecision(){
				    return 0;
				}
				public String CND_TRCLCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRCLCBComment(){
				
				    return "";
				
				}
				public String CND_TRCLCBPattern(){
				
					return "";
				
				}
				public String CND_TRCLCBOriginalDbColumnName(){
				
					return "CND_TRCLCB";
				
				}

				
			    public String CND_EXPB2B;

				public String getCND_EXPB2B () {
					return this.CND_EXPB2B;
				}

				public Boolean CND_EXPB2BIsNullable(){
				    return true;
				}
				public Boolean CND_EXPB2BIsKey(){
				    return false;
				}
				public Integer CND_EXPB2BLength(){
				    return 1;
				}
				public Integer CND_EXPB2BPrecision(){
				    return 0;
				}
				public String CND_EXPB2BDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPB2BComment(){
				
				    return "";
				
				}
				public String CND_EXPB2BPattern(){
				
					return "";
				
				}
				public String CND_EXPB2BOriginalDbColumnName(){
				
					return "CND_EXPB2B";
				
				}

				
			    public String CND_PRETAB;

				public String getCND_PRETAB () {
					return this.CND_PRETAB;
				}

				public Boolean CND_PRETABIsNullable(){
				    return true;
				}
				public Boolean CND_PRETABIsKey(){
				    return false;
				}
				public Integer CND_PRETABLength(){
				    return 7;
				}
				public Integer CND_PRETABPrecision(){
				    return 0;
				}
				public String CND_PRETABDefault(){
				
					return "'NNNNNNN'";
				
				}
				public String CND_PRETABComment(){
				
				    return "";
				
				}
				public String CND_PRETABPattern(){
				
					return "";
				
				}
				public String CND_PRETABOriginalDbColumnName(){
				
					return "CND_PRETAB";
				
				}

				
			    public Integer CND_LIMITE;

				public Integer getCND_LIMITE () {
					return this.CND_LIMITE;
				}

				public Boolean CND_LIMITEIsNullable(){
				    return true;
				}
				public Boolean CND_LIMITEIsKey(){
				    return false;
				}
				public Integer CND_LIMITELength(){
				    return 10;
				}
				public Integer CND_LIMITEPrecision(){
				    return 0;
				}
				public String CND_LIMITEDefault(){
				
					return "0";
				
				}
				public String CND_LIMITEComment(){
				
				    return "";
				
				}
				public String CND_LIMITEPattern(){
				
					return "";
				
				}
				public String CND_LIMITEOriginalDbColumnName(){
				
					return "CND_LIMITE";
				
				}

				
			    public String CND_USADEP;

				public String getCND_USADEP () {
					return this.CND_USADEP;
				}

				public Boolean CND_USADEPIsNullable(){
				    return true;
				}
				public Boolean CND_USADEPIsKey(){
				    return false;
				}
				public Integer CND_USADEPLength(){
				    return 1;
				}
				public Integer CND_USADEPPrecision(){
				    return 0;
				}
				public String CND_USADEPDefault(){
				
					return "'N'";
				
				}
				public String CND_USADEPComment(){
				
				    return "";
				
				}
				public String CND_USADEPPattern(){
				
					return "";
				
				}
				public String CND_USADEPOriginalDbColumnName(){
				
					return "CND_USADEP";
				
				}

				
			    public String CND_RCX_F3;

				public String getCND_RCX_F3 () {
					return this.CND_RCX_F3;
				}

				public Boolean CND_RCX_F3IsNullable(){
				    return true;
				}
				public Boolean CND_RCX_F3IsKey(){
				    return false;
				}
				public Integer CND_RCX_F3Length(){
				    return 1;
				}
				public Integer CND_RCX_F3Precision(){
				    return 0;
				}
				public String CND_RCX_F3Default(){
				
					return "'S'";
				
				}
				public String CND_RCX_F3Comment(){
				
				    return "";
				
				}
				public String CND_RCX_F3Pattern(){
				
					return "";
				
				}
				public String CND_RCX_F3OriginalDbColumnName(){
				
					return "CND_RCX_F3";
				
				}

				
			    public String CND_COBYAP;

				public String getCND_COBYAP () {
					return this.CND_COBYAP;
				}

				public Boolean CND_COBYAPIsNullable(){
				    return true;
				}
				public Boolean CND_COBYAPIsKey(){
				    return false;
				}
				public Integer CND_COBYAPLength(){
				    return 1;
				}
				public Integer CND_COBYAPPrecision(){
				    return 0;
				}
				public String CND_COBYAPDefault(){
				
					return "'N'";
				
				}
				public String CND_COBYAPComment(){
				
				    return "";
				
				}
				public String CND_COBYAPPattern(){
				
					return "";
				
				}
				public String CND_COBYAPOriginalDbColumnName(){
				
					return "CND_COBYAP";
				
				}

				
			    public String CND_TRORCR;

				public String getCND_TRORCR () {
					return this.CND_TRORCR;
				}

				public Boolean CND_TRORCRIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCRIsKey(){
				    return false;
				}
				public Integer CND_TRORCRLength(){
				    return 1;
				}
				public Integer CND_TRORCRPrecision(){
				    return 0;
				}
				public String CND_TRORCRDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCRComment(){
				
				    return "";
				
				}
				public String CND_TRORCRPattern(){
				
					return "";
				
				}
				public String CND_TRORCROriginalDbColumnName(){
				
					return "CND_TRORCR";
				
				}

				
			    public String CND_TRORCB;

				public String getCND_TRORCB () {
					return this.CND_TRORCB;
				}

				public Boolean CND_TRORCBIsNullable(){
				    return true;
				}
				public Boolean CND_TRORCBIsKey(){
				    return false;
				}
				public Integer CND_TRORCBLength(){
				    return 1;
				}
				public Integer CND_TRORCBPrecision(){
				    return 0;
				}
				public String CND_TRORCBDefault(){
				
					return "'N'";
				
				}
				public String CND_TRORCBComment(){
				
				    return "";
				
				}
				public String CND_TRORCBPattern(){
				
					return "";
				
				}
				public String CND_TRORCBOriginalDbColumnName(){
				
					return "CND_TRORCB";
				
				}

				
			    public String CND_YAPTRA;

				public String getCND_YAPTRA () {
					return this.CND_YAPTRA;
				}

				public Boolean CND_YAPTRAIsNullable(){
				    return true;
				}
				public Boolean CND_YAPTRAIsKey(){
				    return false;
				}
				public Integer CND_YAPTRALength(){
				    return 1;
				}
				public Integer CND_YAPTRAPrecision(){
				    return 0;
				}
				public String CND_YAPTRADefault(){
				
					return "'S'";
				
				}
				public String CND_YAPTRAComment(){
				
				    return "";
				
				}
				public String CND_YAPTRAPattern(){
				
					return "";
				
				}
				public String CND_YAPTRAOriginalDbColumnName(){
				
					return "CND_YAPTRA";
				
				}

				
			    public String CND_YAPDIS;

				public String getCND_YAPDIS () {
					return this.CND_YAPDIS;
				}

				public Boolean CND_YAPDISIsNullable(){
				    return true;
				}
				public Boolean CND_YAPDISIsKey(){
				    return false;
				}
				public Integer CND_YAPDISLength(){
				    return 255;
				}
				public Integer CND_YAPDISPrecision(){
				    return 0;
				}
				public String CND_YAPDISDefault(){
				
					return null;
				
				}
				public String CND_YAPDISComment(){
				
				    return "";
				
				}
				public String CND_YAPDISPattern(){
				
					return "";
				
				}
				public String CND_YAPDISOriginalDbColumnName(){
				
					return "CND_YAPDIS";
				
				}

				
			    public Integer CND_YAPPAR;

				public Integer getCND_YAPPAR () {
					return this.CND_YAPPAR;
				}

				public Boolean CND_YAPPARIsNullable(){
				    return true;
				}
				public Boolean CND_YAPPARIsKey(){
				    return false;
				}
				public Integer CND_YAPPARLength(){
				    return 10;
				}
				public Integer CND_YAPPARPrecision(){
				    return 0;
				}
				public String CND_YAPPARDefault(){
				
					return null;
				
				}
				public String CND_YAPPARComment(){
				
				    return "";
				
				}
				public String CND_YAPPARPattern(){
				
					return "";
				
				}
				public String CND_YAPPAROriginalDbColumnName(){
				
					return "CND_YAPPAR";
				
				}

				
			    public String CND_TRAFAT;

				public String getCND_TRAFAT () {
					return this.CND_TRAFAT;
				}

				public Boolean CND_TRAFATIsNullable(){
				    return false;
				}
				public Boolean CND_TRAFATIsKey(){
				    return false;
				}
				public Integer CND_TRAFATLength(){
				    return 1;
				}
				public Integer CND_TRAFATPrecision(){
				    return 0;
				}
				public String CND_TRAFATDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAFATComment(){
				
				    return "";
				
				}
				public String CND_TRAFATPattern(){
				
					return "";
				
				}
				public String CND_TRAFATOriginalDbColumnName(){
				
					return "CND_TRAFAT";
				
				}

				
			    public String CND_TRAMAR;

				public String getCND_TRAMAR () {
					return this.CND_TRAMAR;
				}

				public Boolean CND_TRAMARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAMARIsKey(){
				    return false;
				}
				public Integer CND_TRAMARLength(){
				    return 1;
				}
				public Integer CND_TRAMARPrecision(){
				    return 0;
				}
				public String CND_TRAMARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAMARComment(){
				
				    return "";
				
				}
				public String CND_TRAMARPattern(){
				
					return "";
				
				}
				public String CND_TRAMAROriginalDbColumnName(){
				
					return "CND_TRAMAR";
				
				}

				
			    public String CND_TRAPAR;

				public String getCND_TRAPAR () {
					return this.CND_TRAPAR;
				}

				public Boolean CND_TRAPARIsNullable(){
				    return false;
				}
				public Boolean CND_TRAPARIsKey(){
				    return false;
				}
				public Integer CND_TRAPARLength(){
				    return 1;
				}
				public Integer CND_TRAPARPrecision(){
				    return 0;
				}
				public String CND_TRAPARDefault(){
				
					return "'S'";
				
				}
				public String CND_TRAPARComment(){
				
				    return "";
				
				}
				public String CND_TRAPARPattern(){
				
					return "";
				
				}
				public String CND_TRAPAROriginalDbColumnName(){
				
					return "CND_TRAPAR";
				
				}

				
			    public String CND_CNDESP;

				public String getCND_CNDESP () {
					return this.CND_CNDESP;
				}

				public Boolean CND_CNDESPIsNullable(){
				    return true;
				}
				public Boolean CND_CNDESPIsKey(){
				    return false;
				}
				public Integer CND_CNDESPLength(){
				    return 1;
				}
				public Integer CND_CNDESPPrecision(){
				    return 0;
				}
				public String CND_CNDESPDefault(){
				
					return "'N'";
				
				}
				public String CND_CNDESPComment(){
				
				    return "";
				
				}
				public String CND_CNDESPPattern(){
				
					return "";
				
				}
				public String CND_CNDESPOriginalDbColumnName(){
				
					return "CND_CNDESP";
				
				}

				
			    public BigDecimal CND_DESMVM;

				public BigDecimal getCND_DESMVM () {
					return this.CND_DESMVM;
				}

				public Boolean CND_DESMVMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMVMIsKey(){
				    return false;
				}
				public Integer CND_DESMVMLength(){
				    return 12;
				}
				public Integer CND_DESMVMPrecision(){
				    return 2;
				}
				public String CND_DESMVMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMVMComment(){
				
				    return "";
				
				}
				public String CND_DESMVMPattern(){
				
					return "";
				
				}
				public String CND_DESMVMOriginalDbColumnName(){
				
					return "CND_DESMVM";
				
				}

				
			    public BigDecimal CND_DESMSM;

				public BigDecimal getCND_DESMSM () {
					return this.CND_DESMSM;
				}

				public Boolean CND_DESMSMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMSMIsKey(){
				    return false;
				}
				public Integer CND_DESMSMLength(){
				    return 12;
				}
				public Integer CND_DESMSMPrecision(){
				    return 2;
				}
				public String CND_DESMSMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMSMComment(){
				
				    return "";
				
				}
				public String CND_DESMSMPattern(){
				
					return "";
				
				}
				public String CND_DESMSMOriginalDbColumnName(){
				
					return "CND_DESMSM";
				
				}

				
			    public BigDecimal CND_DESMGM;

				public BigDecimal getCND_DESMGM () {
					return this.CND_DESMGM;
				}

				public Boolean CND_DESMGMIsNullable(){
				    return true;
				}
				public Boolean CND_DESMGMIsKey(){
				    return false;
				}
				public Integer CND_DESMGMLength(){
				    return 12;
				}
				public Integer CND_DESMGMPrecision(){
				    return 2;
				}
				public String CND_DESMGMDefault(){
				
					return "0.00";
				
				}
				public String CND_DESMGMComment(){
				
				    return "";
				
				}
				public String CND_DESMGMPattern(){
				
					return "";
				
				}
				public String CND_DESMGMOriginalDbColumnName(){
				
					return "CND_DESMGM";
				
				}

				
			    public String CND_RECPIX;

				public String getCND_RECPIX () {
					return this.CND_RECPIX;
				}

				public Boolean CND_RECPIXIsNullable(){
				    return true;
				}
				public Boolean CND_RECPIXIsKey(){
				    return false;
				}
				public Integer CND_RECPIXLength(){
				    return 1;
				}
				public Integer CND_RECPIXPrecision(){
				    return 0;
				}
				public String CND_RECPIXDefault(){
				
					return "'N'";
				
				}
				public String CND_RECPIXComment(){
				
				    return "";
				
				}
				public String CND_RECPIXPattern(){
				
					return "";
				
				}
				public String CND_RECPIXOriginalDbColumnName(){
				
					return "CND_RECPIX";
				
				}

				
			    public String CND_TRACNC;

				public String getCND_TRACNC () {
					return this.CND_TRACNC;
				}

				public Boolean CND_TRACNCIsNullable(){
				    return true;
				}
				public Boolean CND_TRACNCIsKey(){
				    return false;
				}
				public Integer CND_TRACNCLength(){
				    return 1;
				}
				public Integer CND_TRACNCPrecision(){
				    return 0;
				}
				public String CND_TRACNCDefault(){
				
					return "'S'";
				
				}
				public String CND_TRACNCComment(){
				
				    return "";
				
				}
				public String CND_TRACNCPattern(){
				
					return "";
				
				}
				public String CND_TRACNCOriginalDbColumnName(){
				
					return "CND_TRACNC";
				
				}

				
			    public String CND_TRORFI;

				public String getCND_TRORFI () {
					return this.CND_TRORFI;
				}

				public Boolean CND_TRORFIIsNullable(){
				    return true;
				}
				public Boolean CND_TRORFIIsKey(){
				    return false;
				}
				public Integer CND_TRORFILength(){
				    return 1;
				}
				public Integer CND_TRORFIPrecision(){
				    return 0;
				}
				public String CND_TRORFIDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORFIComment(){
				
				    return "";
				
				}
				public String CND_TRORFIPattern(){
				
					return "";
				
				}
				public String CND_TRORFIOriginalDbColumnName(){
				
					return "CND_TRORFI";
				
				}

				
			    public String CND_TRORPF;

				public String getCND_TRORPF () {
					return this.CND_TRORPF;
				}

				public Boolean CND_TRORPFIsNullable(){
				    return true;
				}
				public Boolean CND_TRORPFIsKey(){
				    return false;
				}
				public Integer CND_TRORPFLength(){
				    return 1;
				}
				public Integer CND_TRORPFPrecision(){
				    return 0;
				}
				public String CND_TRORPFDefault(){
				
					return "'T'";
				
				}
				public String CND_TRORPFComment(){
				
				    return "";
				
				}
				public String CND_TRORPFPattern(){
				
					return "";
				
				}
				public String CND_TRORPFOriginalDbColumnName(){
				
					return "CND_TRORPF";
				
				}

				
			    public String CND_DIACOR;

				public String getCND_DIACOR () {
					return this.CND_DIACOR;
				}

				public Boolean CND_DIACORIsNullable(){
				    return true;
				}
				public Boolean CND_DIACORIsKey(){
				    return false;
				}
				public Integer CND_DIACORLength(){
				    return 1;
				}
				public Integer CND_DIACORPrecision(){
				    return 0;
				}
				public String CND_DIACORDefault(){
				
					return "'N'";
				
				}
				public String CND_DIACORComment(){
				
				    return "";
				
				}
				public String CND_DIACORPattern(){
				
					return "";
				
				}
				public String CND_DIACOROriginalDbColumnName(){
				
					return "CND_DIACOR";
				
				}

				
			    public BigDecimal CND_PERVEN;

				public BigDecimal getCND_PERVEN () {
					return this.CND_PERVEN;
				}

				public Boolean CND_PERVENIsNullable(){
				    return true;
				}
				public Boolean CND_PERVENIsKey(){
				    return false;
				}
				public Integer CND_PERVENLength(){
				    return 12;
				}
				public Integer CND_PERVENPrecision(){
				    return 2;
				}
				public String CND_PERVENDefault(){
				
					return "0.00";
				
				}
				public String CND_PERVENComment(){
				
				    return "";
				
				}
				public String CND_PERVENPattern(){
				
					return "";
				
				}
				public String CND_PERVENOriginalDbColumnName(){
				
					return "CND_PERVEN";
				
				}

				
			    public String CND_GERLNK;

				public String getCND_GERLNK () {
					return this.CND_GERLNK;
				}

				public Boolean CND_GERLNKIsNullable(){
				    return true;
				}
				public Boolean CND_GERLNKIsKey(){
				    return false;
				}
				public Integer CND_GERLNKLength(){
				    return 1;
				}
				public Integer CND_GERLNKPrecision(){
				    return 0;
				}
				public String CND_GERLNKDefault(){
				
					return "'N'";
				
				}
				public String CND_GERLNKComment(){
				
				    return "";
				
				}
				public String CND_GERLNKPattern(){
				
					return "";
				
				}
				public String CND_GERLNKOriginalDbColumnName(){
				
					return "CND_GERLNK";
				
				}

				
			    public String CND_ESPFAT;

				public String getCND_ESPFAT () {
					return this.CND_ESPFAT;
				}

				public Boolean CND_ESPFATIsNullable(){
				    return true;
				}
				public Boolean CND_ESPFATIsKey(){
				    return false;
				}
				public Integer CND_ESPFATLength(){
				    return 3;
				}
				public Integer CND_ESPFATPrecision(){
				    return 0;
				}
				public String CND_ESPFATDefault(){
				
					return "'NF'";
				
				}
				public String CND_ESPFATComment(){
				
				    return "";
				
				}
				public String CND_ESPFATPattern(){
				
					return "";
				
				}
				public String CND_ESPFATOriginalDbColumnName(){
				
					return "CND_ESPFAT";
				
				}

				
			    public String CND_COBPME;

				public String getCND_COBPME () {
					return this.CND_COBPME;
				}

				public Boolean CND_COBPMEIsNullable(){
				    return false;
				}
				public Boolean CND_COBPMEIsKey(){
				    return false;
				}
				public Integer CND_COBPMELength(){
				    return 1;
				}
				public Integer CND_COBPMEPrecision(){
				    return 0;
				}
				public String CND_COBPMEDefault(){
				
					return "'N'";
				
				}
				public String CND_COBPMEComment(){
				
				    return "";
				
				}
				public String CND_COBPMEPattern(){
				
					return "";
				
				}
				public String CND_COBPMEOriginalDbColumnName(){
				
					return "CND_COBPME";
				
				}

				
			    public String CND_EXPTAB;

				public String getCND_EXPTAB () {
					return this.CND_EXPTAB;
				}

				public Boolean CND_EXPTABIsNullable(){
				    return true;
				}
				public Boolean CND_EXPTABIsKey(){
				    return false;
				}
				public Integer CND_EXPTABLength(){
				    return 1;
				}
				public Integer CND_EXPTABPrecision(){
				    return 0;
				}
				public String CND_EXPTABDefault(){
				
					return "'S'";
				
				}
				public String CND_EXPTABComment(){
				
				    return "";
				
				}
				public String CND_EXPTABPattern(){
				
					return "";
				
				}
				public String CND_EXPTABOriginalDbColumnName(){
				
					return "CND_EXPTAB";
				
				}

				
			    public String CND_PMEDVC;

				public String getCND_PMEDVC () {
					return this.CND_PMEDVC;
				}

				public Boolean CND_PMEDVCIsNullable(){
				    return true;
				}
				public Boolean CND_PMEDVCIsKey(){
				    return false;
				}
				public Integer CND_PMEDVCLength(){
				    return 2;
				}
				public Integer CND_PMEDVCPrecision(){
				    return 0;
				}
				public String CND_PMEDVCDefault(){
				
					return "'0'";
				
				}
				public String CND_PMEDVCComment(){
				
				    return "";
				
				}
				public String CND_PMEDVCPattern(){
				
					return "";
				
				}
				public String CND_PMEDVCOriginalDbColumnName(){
				
					return "CND_PMEDVC";
				
				}

				
			    public String CND_PMEQPA;

				public String getCND_PMEQPA () {
					return this.CND_PMEQPA;
				}

				public Boolean CND_PMEQPAIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPAIsKey(){
				    return false;
				}
				public Integer CND_PMEQPALength(){
				    return 30;
				}
				public Integer CND_PMEQPAPrecision(){
				    return 0;
				}
				public String CND_PMEQPADefault(){
				
					return null;
				
				}
				public String CND_PMEQPAComment(){
				
				    return "";
				
				}
				public String CND_PMEQPAPattern(){
				
					return "";
				
				}
				public String CND_PMEQPAOriginalDbColumnName(){
				
					return "CND_PMEQPA";
				
				}

				
			    public String CND_PMEQPJ;

				public String getCND_PMEQPJ () {
					return this.CND_PMEQPJ;
				}

				public Boolean CND_PMEQPJIsNullable(){
				    return true;
				}
				public Boolean CND_PMEQPJIsKey(){
				    return false;
				}
				public Integer CND_PMEQPJLength(){
				    return 40;
				}
				public Integer CND_PMEQPJPrecision(){
				    return 0;
				}
				public String CND_PMEQPJDefault(){
				
					return null;
				
				}
				public String CND_PMEQPJComment(){
				
				    return "";
				
				}
				public String CND_PMEQPJPattern(){
				
					return "";
				
				}
				public String CND_PMEQPJOriginalDbColumnName(){
				
					return "CND_PMEQPJ";
				
				}

				
			    public BigDecimal CND_PMEJCT;

				public BigDecimal getCND_PMEJCT () {
					return this.CND_PMEJCT;
				}

				public Boolean CND_PMEJCTIsNullable(){
				    return true;
				}
				public Boolean CND_PMEJCTIsKey(){
				    return false;
				}
				public Integer CND_PMEJCTLength(){
				    return 12;
				}
				public Integer CND_PMEJCTPrecision(){
				    return 2;
				}
				public String CND_PMEJCTDefault(){
				
					return "0.00";
				
				}
				public String CND_PMEJCTComment(){
				
				    return "";
				
				}
				public String CND_PMEJCTPattern(){
				
					return "";
				
				}
				public String CND_PMEJCTOriginalDbColumnName(){
				
					return "CND_PMEJCT";
				
				}

				
			    public String CND_MODIVN;

				public String getCND_MODIVN () {
					return this.CND_MODIVN;
				}

				public Boolean CND_MODIVNIsNullable(){
				    return true;
				}
				public Boolean CND_MODIVNIsKey(){
				    return false;
				}
				public Integer CND_MODIVNLength(){
				    return 1;
				}
				public Integer CND_MODIVNPrecision(){
				    return 0;
				}
				public String CND_MODIVNDefault(){
				
					return "'T'";
				
				}
				public String CND_MODIVNComment(){
				
				    return "";
				
				}
				public String CND_MODIVNPattern(){
				
					return "";
				
				}
				public String CND_MODIVNOriginalDbColumnName(){
				
					return "CND_MODIVN";
				
				}

				
			    public String CND_PETRCD;

				public String getCND_PETRCD () {
					return this.CND_PETRCD;
				}

				public Boolean CND_PETRCDIsNullable(){
				    return false;
				}
				public Boolean CND_PETRCDIsKey(){
				    return false;
				}
				public Integer CND_PETRCDLength(){
				    return 1;
				}
				public Integer CND_PETRCDPrecision(){
				    return 0;
				}
				public String CND_PETRCDDefault(){
				
					return "'N'";
				
				}
				public String CND_PETRCDComment(){
				
				    return "";
				
				}
				public String CND_PETRCDPattern(){
				
					return "";
				
				}
				public String CND_PETRCDOriginalDbColumnName(){
				
					return "CND_PETRCD";
				
				}

				
			    public Integer CND_EMIBOL;

				public Integer getCND_EMIBOL () {
					return this.CND_EMIBOL;
				}

				public Boolean CND_EMIBOLIsNullable(){
				    return true;
				}
				public Boolean CND_EMIBOLIsKey(){
				    return false;
				}
				public Integer CND_EMIBOLLength(){
				    return 10;
				}
				public Integer CND_EMIBOLPrecision(){
				    return 0;
				}
				public String CND_EMIBOLDefault(){
				
					return "2";
				
				}
				public String CND_EMIBOLComment(){
				
				    return "";
				
				}
				public String CND_EMIBOLPattern(){
				
					return "";
				
				}
				public String CND_EMIBOLOriginalDbColumnName(){
				
					return "CND_EMIBOL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.CND_CODIGO = readString(dis);
					
					this.CND_DESCRI = readString(dis);
					
					this.CND_CNDPAG = readString(dis);
					
					this.CND_TIPFOR = readString(dis);
					
					this.CND_CODPOR = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.CND_CODEMP = readString(dis);
					
						this.CND_DESMAX = (BigDecimal) dis.readObject();
					
					this.CND_ABADES = readString(dis);
					
					this.CND_ABDECC = readString(dis);
					
						this.CND_TXJURO = (BigDecimal) dis.readObject();
					
					this.CND_CODFPG = readString(dis);
					
						this.CND_PRZMED = (BigDecimal) dis.readObject();
					
						this.CND_FATACA = (BigDecimal) dis.readObject();
					
					this.CND_INFANA = readString(dis);
					
					this.CND_STATUS = readString(dis);
					
						this.CND_DESMGE = (BigDecimal) dis.readObject();
					
					this.CND_ALTPRE = readString(dis);
					
					this.CND_CODVEL = readString(dis);
					
					this.CND_DESPFL = readString(dis);
					
						this.CND_DIAFIX = readInteger(dis);
					
					this.CND_IMPBOL = readString(dis);
					
					this.CND_LIMCRE = readString(dis);
					
						this.CND_PERCOM = (BigDecimal) dis.readObject();
					
						this.CND_PERDPO = (BigDecimal) dis.readObject();
					
						this.CND_QTDDAV = readInteger(dis);
					
						this.CND_QTDPAR = readInteger(dis);
					
					this.CND_SEMENT = readString(dis);
					
					this.CND_SENCND = readString(dis);
					
						this.CND_VALMIN = (BigDecimal) dis.readObject();
					
						this.CND_FATMAX = (BigDecimal) dis.readObject();
					
						this.CND_FATMIN = (BigDecimal) dis.readObject();
					
					this.CND_IMPFAT = readString(dis);
					
						this.CND_MARMAX = (BigDecimal) dis.readObject();
					
						this.CND_MARMIN = (BigDecimal) dis.readObject();
					
						this.CND_PEDEAC = (BigDecimal) dis.readObject();
					
					this.CND_TABPRE = readString(dis);
					
					this.CND_TIPFAT = readString(dis);
					
					this.CND_JURPRO = readString(dis);
					
					this.CND_TIPCND = readString(dis);
					
					this.CND_ULTALT = readDate(dis);
					
					this.CND_PRAMIN = readString(dis);
					
						this.CND_DESMSU = (BigDecimal) dis.readObject();
					
					this.CND_EMPACE = readString(dis);
					
					this.CND_EXPFSO = readString(dis);
					
					this.CND_FPGNVL = readString(dis);
					
					this.CND_LBPDOB = readString(dis);
					
						this.CND_MAXCAR = readInteger(dis);
					
					this.CND_MCOBDA = readString(dis);
					
					this.CND_SENTRA = readString(dis);
					
					this.CND_TPFTDA = readString(dis);
					
					this.CND_TRCLCR = readString(dis);
					
					this.CND_TRTTVE = readString(dis);
					
						this.CND_VRDAUV = (BigDecimal) dis.readObject();
					
						this.CND_VRDEAC = (BigDecimal) dis.readObject();
					
						this.CND_PARMAX = (BigDecimal) dis.readObject();
					
						this.CND_PARMIN = (BigDecimal) dis.readObject();
					
					this.CND_RETIRA = readString(dis);
					
					this.CND_ENTIME = readString(dis);
					
					this.CND_ENTFUT = readString(dis);
					
						this.CND_QTDMAX = readInteger(dis);
					
					this.CND_TRCLCB = readString(dis);
					
					this.CND_EXPB2B = readString(dis);
					
					this.CND_PRETAB = readString(dis);
					
						this.CND_LIMITE = readInteger(dis);
					
					this.CND_USADEP = readString(dis);
					
					this.CND_RCX_F3 = readString(dis);
					
					this.CND_COBYAP = readString(dis);
					
					this.CND_TRORCR = readString(dis);
					
					this.CND_TRORCB = readString(dis);
					
					this.CND_YAPTRA = readString(dis);
					
					this.CND_YAPDIS = readString(dis);
					
						this.CND_YAPPAR = readInteger(dis);
					
					this.CND_TRAFAT = readString(dis);
					
					this.CND_TRAMAR = readString(dis);
					
					this.CND_TRAPAR = readString(dis);
					
					this.CND_CNDESP = readString(dis);
					
						this.CND_DESMVM = (BigDecimal) dis.readObject();
					
						this.CND_DESMSM = (BigDecimal) dis.readObject();
					
						this.CND_DESMGM = (BigDecimal) dis.readObject();
					
					this.CND_RECPIX = readString(dis);
					
					this.CND_TRACNC = readString(dis);
					
					this.CND_TRORFI = readString(dis);
					
					this.CND_TRORPF = readString(dis);
					
					this.CND_DIACOR = readString(dis);
					
						this.CND_PERVEN = (BigDecimal) dis.readObject();
					
					this.CND_GERLNK = readString(dis);
					
					this.CND_ESPFAT = readString(dis);
					
					this.CND_COBPME = readString(dis);
					
					this.CND_EXPTAB = readString(dis);
					
					this.CND_PMEDVC = readString(dis);
					
					this.CND_PMEQPA = readString(dis);
					
					this.CND_PMEQPJ = readString(dis);
					
						this.CND_PMEJCT = (BigDecimal) dis.readObject();
					
					this.CND_MODIVN = readString(dis);
					
					this.CND_PETRCD = readString(dis);
					
						this.CND_EMIBOL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CND_CODIGO,dos);
					
					// String
				
						writeString(this.CND_DESCRI,dos);
					
					// String
				
						writeString(this.CND_CNDPAG,dos);
					
					// String
				
						writeString(this.CND_TIPFOR,dos);
					
					// String
				
						writeString(this.CND_CODPOR,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.CND_CODEMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMAX);
					
					// String
				
						writeString(this.CND_ABADES,dos);
					
					// String
				
						writeString(this.CND_ABDECC,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_TXJURO);
					
					// String
				
						writeString(this.CND_CODFPG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PRZMED);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATACA);
					
					// String
				
						writeString(this.CND_INFANA,dos);
					
					// String
				
						writeString(this.CND_STATUS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGE);
					
					// String
				
						writeString(this.CND_ALTPRE,dos);
					
					// String
				
						writeString(this.CND_CODVEL,dos);
					
					// String
				
						writeString(this.CND_DESPFL,dos);
					
					// Integer
				
						writeInteger(this.CND_DIAFIX,dos);
					
					// String
				
						writeString(this.CND_IMPBOL,dos);
					
					// String
				
						writeString(this.CND_LIMCRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERDPO);
					
					// Integer
				
						writeInteger(this.CND_QTDDAV,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDPAR,dos);
					
					// String
				
						writeString(this.CND_SEMENT,dos);
					
					// String
				
						writeString(this.CND_SENCND,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VALMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_FATMIN);
					
					// String
				
						writeString(this.CND_IMPFAT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_MARMIN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PEDEAC);
					
					// String
				
						writeString(this.CND_TABPRE,dos);
					
					// String
				
						writeString(this.CND_TIPFAT,dos);
					
					// String
				
						writeString(this.CND_JURPRO,dos);
					
					// String
				
						writeString(this.CND_TIPCND,dos);
					
					// java.util.Date
				
						writeDate(this.CND_ULTALT,dos);
					
					// String
				
						writeString(this.CND_PRAMIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSU);
					
					// String
				
						writeString(this.CND_EMPACE,dos);
					
					// String
				
						writeString(this.CND_EXPFSO,dos);
					
					// String
				
						writeString(this.CND_FPGNVL,dos);
					
					// String
				
						writeString(this.CND_LBPDOB,dos);
					
					// Integer
				
						writeInteger(this.CND_MAXCAR,dos);
					
					// String
				
						writeString(this.CND_MCOBDA,dos);
					
					// String
				
						writeString(this.CND_SENTRA,dos);
					
					// String
				
						writeString(this.CND_TPFTDA,dos);
					
					// String
				
						writeString(this.CND_TRCLCR,dos);
					
					// String
				
						writeString(this.CND_TRTTVE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDAUV);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_VRDEAC);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMAX);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PARMIN);
					
					// String
				
						writeString(this.CND_RETIRA,dos);
					
					// String
				
						writeString(this.CND_ENTIME,dos);
					
					// String
				
						writeString(this.CND_ENTFUT,dos);
					
					// Integer
				
						writeInteger(this.CND_QTDMAX,dos);
					
					// String
				
						writeString(this.CND_TRCLCB,dos);
					
					// String
				
						writeString(this.CND_EXPB2B,dos);
					
					// String
				
						writeString(this.CND_PRETAB,dos);
					
					// Integer
				
						writeInteger(this.CND_LIMITE,dos);
					
					// String
				
						writeString(this.CND_USADEP,dos);
					
					// String
				
						writeString(this.CND_RCX_F3,dos);
					
					// String
				
						writeString(this.CND_COBYAP,dos);
					
					// String
				
						writeString(this.CND_TRORCR,dos);
					
					// String
				
						writeString(this.CND_TRORCB,dos);
					
					// String
				
						writeString(this.CND_YAPTRA,dos);
					
					// String
				
						writeString(this.CND_YAPDIS,dos);
					
					// Integer
				
						writeInteger(this.CND_YAPPAR,dos);
					
					// String
				
						writeString(this.CND_TRAFAT,dos);
					
					// String
				
						writeString(this.CND_TRAMAR,dos);
					
					// String
				
						writeString(this.CND_TRAPAR,dos);
					
					// String
				
						writeString(this.CND_CNDESP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMVM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMSM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_DESMGM);
					
					// String
				
						writeString(this.CND_RECPIX,dos);
					
					// String
				
						writeString(this.CND_TRACNC,dos);
					
					// String
				
						writeString(this.CND_TRORFI,dos);
					
					// String
				
						writeString(this.CND_TRORPF,dos);
					
					// String
				
						writeString(this.CND_DIACOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PERVEN);
					
					// String
				
						writeString(this.CND_GERLNK,dos);
					
					// String
				
						writeString(this.CND_ESPFAT,dos);
					
					// String
				
						writeString(this.CND_COBPME,dos);
					
					// String
				
						writeString(this.CND_EXPTAB,dos);
					
					// String
				
						writeString(this.CND_PMEDVC,dos);
					
					// String
				
						writeString(this.CND_PMEQPA,dos);
					
					// String
				
						writeString(this.CND_PMEQPJ,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CND_PMEJCT);
					
					// String
				
						writeString(this.CND_MODIVN,dos);
					
					// String
				
						writeString(this.CND_PETRCD,dos);
					
					// Integer
				
						writeInteger(this.CND_EMIBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CND_CODIGO="+CND_CODIGO);
		sb.append(",CND_DESCRI="+CND_DESCRI);
		sb.append(",CND_CNDPAG="+CND_CNDPAG);
		sb.append(",CND_TIPFOR="+CND_TIPFOR);
		sb.append(",CND_CODPOR="+CND_CODPOR);
		sb.append(",AUTOINCREM="+AUTOINCREM);
		sb.append(",CND_CODEMP="+CND_CODEMP);
		sb.append(",CND_DESMAX="+String.valueOf(CND_DESMAX));
		sb.append(",CND_ABADES="+CND_ABADES);
		sb.append(",CND_ABDECC="+CND_ABDECC);
		sb.append(",CND_TXJURO="+String.valueOf(CND_TXJURO));
		sb.append(",CND_CODFPG="+CND_CODFPG);
		sb.append(",CND_PRZMED="+String.valueOf(CND_PRZMED));
		sb.append(",CND_FATACA="+String.valueOf(CND_FATACA));
		sb.append(",CND_INFANA="+CND_INFANA);
		sb.append(",CND_STATUS="+CND_STATUS);
		sb.append(",CND_DESMGE="+String.valueOf(CND_DESMGE));
		sb.append(",CND_ALTPRE="+CND_ALTPRE);
		sb.append(",CND_CODVEL="+CND_CODVEL);
		sb.append(",CND_DESPFL="+CND_DESPFL);
		sb.append(",CND_DIAFIX="+String.valueOf(CND_DIAFIX));
		sb.append(",CND_IMPBOL="+CND_IMPBOL);
		sb.append(",CND_LIMCRE="+CND_LIMCRE);
		sb.append(",CND_PERCOM="+String.valueOf(CND_PERCOM));
		sb.append(",CND_PERDPO="+String.valueOf(CND_PERDPO));
		sb.append(",CND_QTDDAV="+String.valueOf(CND_QTDDAV));
		sb.append(",CND_QTDPAR="+String.valueOf(CND_QTDPAR));
		sb.append(",CND_SEMENT="+CND_SEMENT);
		sb.append(",CND_SENCND="+CND_SENCND);
		sb.append(",CND_VALMIN="+String.valueOf(CND_VALMIN));
		sb.append(",CND_FATMAX="+String.valueOf(CND_FATMAX));
		sb.append(",CND_FATMIN="+String.valueOf(CND_FATMIN));
		sb.append(",CND_IMPFAT="+CND_IMPFAT);
		sb.append(",CND_MARMAX="+String.valueOf(CND_MARMAX));
		sb.append(",CND_MARMIN="+String.valueOf(CND_MARMIN));
		sb.append(",CND_PEDEAC="+String.valueOf(CND_PEDEAC));
		sb.append(",CND_TABPRE="+CND_TABPRE);
		sb.append(",CND_TIPFAT="+CND_TIPFAT);
		sb.append(",CND_JURPRO="+CND_JURPRO);
		sb.append(",CND_TIPCND="+CND_TIPCND);
		sb.append(",CND_ULTALT="+String.valueOf(CND_ULTALT));
		sb.append(",CND_PRAMIN="+CND_PRAMIN);
		sb.append(",CND_DESMSU="+String.valueOf(CND_DESMSU));
		sb.append(",CND_EMPACE="+CND_EMPACE);
		sb.append(",CND_EXPFSO="+CND_EXPFSO);
		sb.append(",CND_FPGNVL="+CND_FPGNVL);
		sb.append(",CND_LBPDOB="+CND_LBPDOB);
		sb.append(",CND_MAXCAR="+String.valueOf(CND_MAXCAR));
		sb.append(",CND_MCOBDA="+CND_MCOBDA);
		sb.append(",CND_SENTRA="+CND_SENTRA);
		sb.append(",CND_TPFTDA="+CND_TPFTDA);
		sb.append(",CND_TRCLCR="+CND_TRCLCR);
		sb.append(",CND_TRTTVE="+CND_TRTTVE);
		sb.append(",CND_VRDAUV="+String.valueOf(CND_VRDAUV));
		sb.append(",CND_VRDEAC="+String.valueOf(CND_VRDEAC));
		sb.append(",CND_PARMAX="+String.valueOf(CND_PARMAX));
		sb.append(",CND_PARMIN="+String.valueOf(CND_PARMIN));
		sb.append(",CND_RETIRA="+CND_RETIRA);
		sb.append(",CND_ENTIME="+CND_ENTIME);
		sb.append(",CND_ENTFUT="+CND_ENTFUT);
		sb.append(",CND_QTDMAX="+String.valueOf(CND_QTDMAX));
		sb.append(",CND_TRCLCB="+CND_TRCLCB);
		sb.append(",CND_EXPB2B="+CND_EXPB2B);
		sb.append(",CND_PRETAB="+CND_PRETAB);
		sb.append(",CND_LIMITE="+String.valueOf(CND_LIMITE));
		sb.append(",CND_USADEP="+CND_USADEP);
		sb.append(",CND_RCX_F3="+CND_RCX_F3);
		sb.append(",CND_COBYAP="+CND_COBYAP);
		sb.append(",CND_TRORCR="+CND_TRORCR);
		sb.append(",CND_TRORCB="+CND_TRORCB);
		sb.append(",CND_YAPTRA="+CND_YAPTRA);
		sb.append(",CND_YAPDIS="+CND_YAPDIS);
		sb.append(",CND_YAPPAR="+String.valueOf(CND_YAPPAR));
		sb.append(",CND_TRAFAT="+CND_TRAFAT);
		sb.append(",CND_TRAMAR="+CND_TRAMAR);
		sb.append(",CND_TRAPAR="+CND_TRAPAR);
		sb.append(",CND_CNDESP="+CND_CNDESP);
		sb.append(",CND_DESMVM="+String.valueOf(CND_DESMVM));
		sb.append(",CND_DESMSM="+String.valueOf(CND_DESMSM));
		sb.append(",CND_DESMGM="+String.valueOf(CND_DESMGM));
		sb.append(",CND_RECPIX="+CND_RECPIX);
		sb.append(",CND_TRACNC="+CND_TRACNC);
		sb.append(",CND_TRORFI="+CND_TRORFI);
		sb.append(",CND_TRORPF="+CND_TRORPF);
		sb.append(",CND_DIACOR="+CND_DIACOR);
		sb.append(",CND_PERVEN="+String.valueOf(CND_PERVEN));
		sb.append(",CND_GERLNK="+CND_GERLNK);
		sb.append(",CND_ESPFAT="+CND_ESPFAT);
		sb.append(",CND_COBPME="+CND_COBPME);
		sb.append(",CND_EXPTAB="+CND_EXPTAB);
		sb.append(",CND_PMEDVC="+CND_PMEDVC);
		sb.append(",CND_PMEQPA="+CND_PMEQPA);
		sb.append(",CND_PMEQPJ="+CND_PMEQPJ);
		sb.append(",CND_PMEJCT="+String.valueOf(CND_PMEJCT));
		sb.append(",CND_MODIVN="+CND_MODIVN);
		sb.append(",CND_PETRCD="+CND_PETRCD);
		sb.append(",CND_EMIBOL="+String.valueOf(CND_EMIBOL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
insert_tableStruct insert_table = new insert_tableStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_table");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("stg_cadcnd").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("stg_cadcnd").toLowerCase();
}


int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	


   int batchSize_tDBOutput_4 = 1000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
            try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_4 = new java.lang.StringBuilder();
        sb_tDBOutput_4.append("INSERT INTO \"").append(tableName_tDBOutput_4).append("\" (\"cnd_codigo\",\"cnd_descri\",\"cnd_cndpag\",\"cnd_tipfor\",\"cnd_codpor\",\"autoincrem\",\"cnd_codemp\",\"cnd_desmax\",\"cnd_abades\",\"cnd_abdecc\",\"cnd_txjuro\",\"cnd_codfpg\",\"cnd_przmed\",\"cnd_fataca\",\"cnd_infana\",\"cnd_status\",\"cnd_desmge\",\"cnd_altpre\",\"cnd_codvel\",\"cnd_despfl\",\"cnd_diafix\",\"cnd_impbol\",\"cnd_limcre\",\"cnd_percom\",\"cnd_perdpo\",\"cnd_qtddav\",\"cnd_qtdpar\",\"cnd_sement\",\"cnd_sencnd\",\"cnd_valmin\",\"cnd_fatmax\",\"cnd_fatmin\",\"cnd_impfat\",\"cnd_marmax\",\"cnd_marmin\",\"cnd_pedeac\",\"cnd_tabpre\",\"cnd_tipfat\",\"cnd_jurpro\",\"cnd_tipcnd\",\"cnd_ultalt\",\"cnd_pramin\",\"cnd_desmsu\",\"cnd_empace\",\"cnd_expfso\",\"cnd_fpgnvl\",\"cnd_lbpdob\",\"cnd_maxcar\",\"cnd_mcobda\",\"cnd_sentra\",\"cnd_tpftda\",\"cnd_trclcr\",\"cnd_trttve\",\"cnd_vrdauv\",\"cnd_vrdeac\",\"cnd_parmax\",\"cnd_parmin\",\"cnd_retira\",\"cnd_entime\",\"cnd_entfut\",\"cnd_qtdmax\",\"cnd_trclcb\",\"cnd_expb2b\",\"cnd_pretab\",\"cnd_limite\",\"cnd_usadep\",\"cnd_rcx_f3\",\"cnd_cobyap\",\"cnd_trorcr\",\"cnd_trorcb\",\"cnd_yaptra\",\"cnd_yapdis\",\"cnd_yappar\",\"cnd_trafat\",\"cnd_tramar\",\"cnd_trapar\",\"cnd_cndesp\",\"cnd_desmvm\",\"cnd_desmsm\",\"cnd_desmgm\",\"cnd_recpix\",\"cnd_tracnc\",\"cnd_trorfi\",\"cnd_trorpf\",\"cnd_diacor\",\"cnd_perven\",\"cnd_gerlnk\",\"cnd_espfat\",\"cnd_cobpme\",\"cnd_exptab\",\"cnd_pmedvc\",\"cnd_pmeqpa\",\"cnd_pmeqpj\",\"cnd_pmejct\",\"cnd_modivn\",\"cnd_petrcd\",\"cnd_emibol\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_4 = sb_tDBOutput_4.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_tableStruct insert_table_tmp = new insert_tableStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<TABLEStruct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_stg_cadcnd_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<TABLEStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    TABLEStruct next_tHashInput_2 = iterator_tHashInput_2.next();

	row2.CND_CODIGO = next_tHashInput_2.CND_CODIGO;
	row2.CND_DESCRI = next_tHashInput_2.CND_DESCRI;
	row2.CND_CNDPAG = next_tHashInput_2.CND_CNDPAG;
	row2.CND_TIPFOR = next_tHashInput_2.CND_TIPFOR;
	row2.CND_CODPOR = next_tHashInput_2.CND_CODPOR;
	row2.AUTOINCREM = next_tHashInput_2.AUTOINCREM;
	row2.CND_CODEMP = next_tHashInput_2.CND_CODEMP;
	row2.CND_DESMAX = next_tHashInput_2.CND_DESMAX;
	row2.CND_ABADES = next_tHashInput_2.CND_ABADES;
	row2.CND_ABDECC = next_tHashInput_2.CND_ABDECC;
	row2.CND_TXJURO = next_tHashInput_2.CND_TXJURO;
	row2.CND_CODFPG = next_tHashInput_2.CND_CODFPG;
	row2.CND_PRZMED = next_tHashInput_2.CND_PRZMED;
	row2.CND_FATACA = next_tHashInput_2.CND_FATACA;
	row2.CND_INFANA = next_tHashInput_2.CND_INFANA;
	row2.CND_STATUS = next_tHashInput_2.CND_STATUS;
	row2.CND_DESMGE = next_tHashInput_2.CND_DESMGE;
	row2.CND_ALTPRE = next_tHashInput_2.CND_ALTPRE;
	row2.CND_CODVEL = next_tHashInput_2.CND_CODVEL;
	row2.CND_DESPFL = next_tHashInput_2.CND_DESPFL;
	row2.CND_DIAFIX = next_tHashInput_2.CND_DIAFIX;
	row2.CND_IMPBOL = next_tHashInput_2.CND_IMPBOL;
	row2.CND_LIMCRE = next_tHashInput_2.CND_LIMCRE;
	row2.CND_PERCOM = next_tHashInput_2.CND_PERCOM;
	row2.CND_PERDPO = next_tHashInput_2.CND_PERDPO;
	row2.CND_QTDDAV = next_tHashInput_2.CND_QTDDAV;
	row2.CND_QTDPAR = next_tHashInput_2.CND_QTDPAR;
	row2.CND_SEMENT = next_tHashInput_2.CND_SEMENT;
	row2.CND_SENCND = next_tHashInput_2.CND_SENCND;
	row2.CND_VALMIN = next_tHashInput_2.CND_VALMIN;
	row2.CND_FATMAX = next_tHashInput_2.CND_FATMAX;
	row2.CND_FATMIN = next_tHashInput_2.CND_FATMIN;
	row2.CND_IMPFAT = next_tHashInput_2.CND_IMPFAT;
	row2.CND_MARMAX = next_tHashInput_2.CND_MARMAX;
	row2.CND_MARMIN = next_tHashInput_2.CND_MARMIN;
	row2.CND_PEDEAC = next_tHashInput_2.CND_PEDEAC;
	row2.CND_TABPRE = next_tHashInput_2.CND_TABPRE;
	row2.CND_TIPFAT = next_tHashInput_2.CND_TIPFAT;
	row2.CND_JURPRO = next_tHashInput_2.CND_JURPRO;
	row2.CND_TIPCND = next_tHashInput_2.CND_TIPCND;
	row2.CND_ULTALT = next_tHashInput_2.CND_ULTALT;
	row2.CND_PRAMIN = next_tHashInput_2.CND_PRAMIN;
	row2.CND_DESMSU = next_tHashInput_2.CND_DESMSU;
	row2.CND_EMPACE = next_tHashInput_2.CND_EMPACE;
	row2.CND_EXPFSO = next_tHashInput_2.CND_EXPFSO;
	row2.CND_FPGNVL = next_tHashInput_2.CND_FPGNVL;
	row2.CND_LBPDOB = next_tHashInput_2.CND_LBPDOB;
	row2.CND_MAXCAR = next_tHashInput_2.CND_MAXCAR;
	row2.CND_MCOBDA = next_tHashInput_2.CND_MCOBDA;
	row2.CND_SENTRA = next_tHashInput_2.CND_SENTRA;
	row2.CND_TPFTDA = next_tHashInput_2.CND_TPFTDA;
	row2.CND_TRCLCR = next_tHashInput_2.CND_TRCLCR;
	row2.CND_TRTTVE = next_tHashInput_2.CND_TRTTVE;
	row2.CND_VRDAUV = next_tHashInput_2.CND_VRDAUV;
	row2.CND_VRDEAC = next_tHashInput_2.CND_VRDEAC;
	row2.CND_PARMAX = next_tHashInput_2.CND_PARMAX;
	row2.CND_PARMIN = next_tHashInput_2.CND_PARMIN;
	row2.CND_RETIRA = next_tHashInput_2.CND_RETIRA;
	row2.CND_ENTIME = next_tHashInput_2.CND_ENTIME;
	row2.CND_ENTFUT = next_tHashInput_2.CND_ENTFUT;
	row2.CND_QTDMAX = next_tHashInput_2.CND_QTDMAX;
	row2.CND_TRCLCB = next_tHashInput_2.CND_TRCLCB;
	row2.CND_EXPB2B = next_tHashInput_2.CND_EXPB2B;
	row2.CND_PRETAB = next_tHashInput_2.CND_PRETAB;
	row2.CND_LIMITE = next_tHashInput_2.CND_LIMITE;
	row2.CND_USADEP = next_tHashInput_2.CND_USADEP;
	row2.CND_RCX_F3 = next_tHashInput_2.CND_RCX_F3;
	row2.CND_COBYAP = next_tHashInput_2.CND_COBYAP;
	row2.CND_TRORCR = next_tHashInput_2.CND_TRORCR;
	row2.CND_TRORCB = next_tHashInput_2.CND_TRORCB;
	row2.CND_YAPTRA = next_tHashInput_2.CND_YAPTRA;
	row2.CND_YAPDIS = next_tHashInput_2.CND_YAPDIS;
	row2.CND_YAPPAR = next_tHashInput_2.CND_YAPPAR;
	row2.CND_TRAFAT = next_tHashInput_2.CND_TRAFAT;
	row2.CND_TRAMAR = next_tHashInput_2.CND_TRAMAR;
	row2.CND_TRAPAR = next_tHashInput_2.CND_TRAPAR;
	row2.CND_CNDESP = next_tHashInput_2.CND_CNDESP;
	row2.CND_DESMVM = next_tHashInput_2.CND_DESMVM;
	row2.CND_DESMSM = next_tHashInput_2.CND_DESMSM;
	row2.CND_DESMGM = next_tHashInput_2.CND_DESMGM;
	row2.CND_RECPIX = next_tHashInput_2.CND_RECPIX;
	row2.CND_TRACNC = next_tHashInput_2.CND_TRACNC;
	row2.CND_TRORFI = next_tHashInput_2.CND_TRORFI;
	row2.CND_TRORPF = next_tHashInput_2.CND_TRORPF;
	row2.CND_DIACOR = next_tHashInput_2.CND_DIACOR;
	row2.CND_PERVEN = next_tHashInput_2.CND_PERVEN;
	row2.CND_GERLNK = next_tHashInput_2.CND_GERLNK;
	row2.CND_ESPFAT = next_tHashInput_2.CND_ESPFAT;
	row2.CND_COBPME = next_tHashInput_2.CND_COBPME;
	row2.CND_EXPTAB = next_tHashInput_2.CND_EXPTAB;
	row2.CND_PMEDVC = next_tHashInput_2.CND_PMEDVC;
	row2.CND_PMEQPA = next_tHashInput_2.CND_PMEQPA;
	row2.CND_PMEQPJ = next_tHashInput_2.CND_PMEQPJ;
	row2.CND_PMEJCT = next_tHashInput_2.CND_PMEJCT;
	row2.CND_MODIVN = next_tHashInput_2.CND_MODIVN;
	row2.CND_PETRCD = next_tHashInput_2.CND_PETRCD;
	row2.CND_EMIBOL = next_tHashInput_2.CND_EMIBOL;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

insert_table = null;


// # Output table : 'insert_table'
insert_table_tmp.CND_CODIGO = row2.CND_CODIGO ;
insert_table_tmp.CND_DESCRI = row2.CND_DESCRI ;
insert_table_tmp.CND_CNDPAG = row2.CND_CNDPAG ;
insert_table_tmp.CND_TIPFOR = row2.CND_TIPFOR ;
insert_table_tmp.CND_CODPOR = row2.CND_CODPOR ;
insert_table_tmp.AUTOINCREM = row2.AUTOINCREM ;
insert_table_tmp.CND_CODEMP = row2.CND_CODEMP ;
insert_table_tmp.CND_DESMAX = row2.CND_DESMAX ;
insert_table_tmp.CND_ABADES = row2.CND_ABADES ;
insert_table_tmp.CND_ABDECC = row2.CND_ABDECC ;
insert_table_tmp.CND_TXJURO = row2.CND_TXJURO ;
insert_table_tmp.CND_CODFPG = row2.CND_CODFPG ;
insert_table_tmp.CND_PRZMED = row2.CND_PRZMED ;
insert_table_tmp.CND_FATACA = row2.CND_FATACA ;
insert_table_tmp.CND_INFANA = row2.CND_INFANA ;
insert_table_tmp.CND_STATUS = row2.CND_STATUS ;
insert_table_tmp.CND_DESMGE = row2.CND_DESMGE ;
insert_table_tmp.CND_ALTPRE = row2.CND_ALTPRE ;
insert_table_tmp.CND_CODVEL = row2.CND_CODVEL ;
insert_table_tmp.CND_DESPFL = row2.CND_DESPFL ;
insert_table_tmp.CND_DIAFIX = row2.CND_DIAFIX ;
insert_table_tmp.CND_IMPBOL = row2.CND_IMPBOL ;
insert_table_tmp.CND_LIMCRE = row2.CND_LIMCRE ;
insert_table_tmp.CND_PERCOM = row2.CND_PERCOM ;
insert_table_tmp.CND_PERDPO = row2.CND_PERDPO ;
insert_table_tmp.CND_QTDDAV = row2.CND_QTDDAV ;
insert_table_tmp.CND_QTDPAR = row2.CND_QTDPAR ;
insert_table_tmp.CND_SEMENT = row2.CND_SEMENT ;
insert_table_tmp.CND_SENCND = row2.CND_SENCND ;
insert_table_tmp.CND_VALMIN = row2.CND_VALMIN ;
insert_table_tmp.CND_FATMAX = row2.CND_FATMAX ;
insert_table_tmp.CND_FATMIN = row2.CND_FATMIN ;
insert_table_tmp.CND_IMPFAT = row2.CND_IMPFAT ;
insert_table_tmp.CND_MARMAX = row2.CND_MARMAX ;
insert_table_tmp.CND_MARMIN = row2.CND_MARMIN ;
insert_table_tmp.CND_PEDEAC = row2.CND_PEDEAC ;
insert_table_tmp.CND_TABPRE = row2.CND_TABPRE ;
insert_table_tmp.CND_TIPFAT = row2.CND_TIPFAT ;
insert_table_tmp.CND_JURPRO = row2.CND_JURPRO ;
insert_table_tmp.CND_TIPCND = row2.CND_TIPCND ;
insert_table_tmp.CND_ULTALT = row2.CND_ULTALT ;
insert_table_tmp.CND_PRAMIN = row2.CND_PRAMIN ;
insert_table_tmp.CND_DESMSU = row2.CND_DESMSU ;
insert_table_tmp.CND_EMPACE = row2.CND_EMPACE ;
insert_table_tmp.CND_EXPFSO = row2.CND_EXPFSO ;
insert_table_tmp.CND_FPGNVL = row2.CND_FPGNVL ;
insert_table_tmp.CND_LBPDOB = row2.CND_LBPDOB ;
insert_table_tmp.CND_MAXCAR = row2.CND_MAXCAR ;
insert_table_tmp.CND_MCOBDA = row2.CND_MCOBDA ;
insert_table_tmp.CND_SENTRA = row2.CND_SENTRA ;
insert_table_tmp.CND_TPFTDA = row2.CND_TPFTDA ;
insert_table_tmp.CND_TRCLCR = row2.CND_TRCLCR ;
insert_table_tmp.CND_TRTTVE = row2.CND_TRTTVE ;
insert_table_tmp.CND_VRDAUV = row2.CND_VRDAUV ;
insert_table_tmp.CND_VRDEAC = row2.CND_VRDEAC ;
insert_table_tmp.CND_PARMAX = row2.CND_PARMAX ;
insert_table_tmp.CND_PARMIN = row2.CND_PARMIN ;
insert_table_tmp.CND_RETIRA = row2.CND_RETIRA ;
insert_table_tmp.CND_ENTIME = row2.CND_ENTIME ;
insert_table_tmp.CND_ENTFUT = row2.CND_ENTFUT ;
insert_table_tmp.CND_QTDMAX = row2.CND_QTDMAX ;
insert_table_tmp.CND_TRCLCB = row2.CND_TRCLCB ;
insert_table_tmp.CND_EXPB2B = row2.CND_EXPB2B ;
insert_table_tmp.CND_PRETAB = row2.CND_PRETAB ;
insert_table_tmp.CND_LIMITE = row2.CND_LIMITE ;
insert_table_tmp.CND_USADEP = row2.CND_USADEP ;
insert_table_tmp.CND_RCX_F3 = row2.CND_RCX_F3 ;
insert_table_tmp.CND_COBYAP = row2.CND_COBYAP ;
insert_table_tmp.CND_TRORCR = row2.CND_TRORCR ;
insert_table_tmp.CND_TRORCB = row2.CND_TRORCB ;
insert_table_tmp.CND_YAPTRA = row2.CND_YAPTRA ;
insert_table_tmp.CND_YAPDIS = row2.CND_YAPDIS ;
insert_table_tmp.CND_YAPPAR = row2.CND_YAPPAR ;
insert_table_tmp.CND_TRAFAT = row2.CND_TRAFAT ;
insert_table_tmp.CND_TRAMAR = row2.CND_TRAMAR ;
insert_table_tmp.CND_TRAPAR = row2.CND_TRAPAR ;
insert_table_tmp.CND_CNDESP = row2.CND_CNDESP ;
insert_table_tmp.CND_DESMVM = row2.CND_DESMVM ;
insert_table_tmp.CND_DESMSM = row2.CND_DESMSM ;
insert_table_tmp.CND_DESMGM = row2.CND_DESMGM ;
insert_table_tmp.CND_RECPIX = row2.CND_RECPIX ;
insert_table_tmp.CND_TRACNC = row2.CND_TRACNC ;
insert_table_tmp.CND_TRORFI = row2.CND_TRORFI ;
insert_table_tmp.CND_TRORPF = row2.CND_TRORPF ;
insert_table_tmp.CND_DIACOR = row2.CND_DIACOR ;
insert_table_tmp.CND_PERVEN = row2.CND_PERVEN ;
insert_table_tmp.CND_GERLNK = row2.CND_GERLNK ;
insert_table_tmp.CND_ESPFAT = row2.CND_ESPFAT ;
insert_table_tmp.CND_COBPME = row2.CND_COBPME ;
insert_table_tmp.CND_EXPTAB = row2.CND_EXPTAB ;
insert_table_tmp.CND_PMEDVC = row2.CND_PMEDVC ;
insert_table_tmp.CND_PMEQPA = row2.CND_PMEQPA ;
insert_table_tmp.CND_PMEQPJ = row2.CND_PMEQPJ ;
insert_table_tmp.CND_PMEJCT = row2.CND_PMEJCT ;
insert_table_tmp.CND_MODIVN = row2.CND_MODIVN ;
insert_table_tmp.CND_PETRCD = row2.CND_PETRCD ;
insert_table_tmp.CND_EMIBOL = row2.CND_EMIBOL ;
insert_table = insert_table_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "insert_table"
if(insert_table != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_table"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(insert_table.CND_CODIGO == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, insert_table.CND_CODIGO);
}

                    if(insert_table.CND_DESCRI == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, insert_table.CND_DESCRI);
}

                    if(insert_table.CND_CNDPAG == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, insert_table.CND_CNDPAG);
}

                    if(insert_table.CND_TIPFOR == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, insert_table.CND_TIPFOR);
}

                    if(insert_table.CND_CODPOR == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, insert_table.CND_CODPOR);
}

                    if(insert_table.AUTOINCREM == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, insert_table.AUTOINCREM);
}

                    if(insert_table.CND_CODEMP == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, insert_table.CND_CODEMP);
}

                    pstmt_tDBOutput_4.setBigDecimal(8, insert_table.CND_DESMAX);

                    if(insert_table.CND_ABADES == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, insert_table.CND_ABADES);
}

                    if(insert_table.CND_ABDECC == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, insert_table.CND_ABDECC);
}

                    pstmt_tDBOutput_4.setBigDecimal(11, insert_table.CND_TXJURO);

                    if(insert_table.CND_CODFPG == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, insert_table.CND_CODFPG);
}

                    pstmt_tDBOutput_4.setBigDecimal(13, insert_table.CND_PRZMED);

                    pstmt_tDBOutput_4.setBigDecimal(14, insert_table.CND_FATACA);

                    if(insert_table.CND_INFANA == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, insert_table.CND_INFANA);
}

                    if(insert_table.CND_STATUS == null) {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(16, insert_table.CND_STATUS);
}

                    pstmt_tDBOutput_4.setBigDecimal(17, insert_table.CND_DESMGE);

                    if(insert_table.CND_ALTPRE == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, insert_table.CND_ALTPRE);
}

                    if(insert_table.CND_CODVEL == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(19, insert_table.CND_CODVEL);
}

                    if(insert_table.CND_DESPFL == null) {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(20, insert_table.CND_DESPFL);
}

                    if(insert_table.CND_DIAFIX == null) {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(21, insert_table.CND_DIAFIX);
}

                    if(insert_table.CND_IMPBOL == null) {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(22, insert_table.CND_IMPBOL);
}

                    if(insert_table.CND_LIMCRE == null) {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(23, insert_table.CND_LIMCRE);
}

                    pstmt_tDBOutput_4.setBigDecimal(24, insert_table.CND_PERCOM);

                    pstmt_tDBOutput_4.setBigDecimal(25, insert_table.CND_PERDPO);

                    if(insert_table.CND_QTDDAV == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(26, insert_table.CND_QTDDAV);
}

                    if(insert_table.CND_QTDPAR == null) {
pstmt_tDBOutput_4.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(27, insert_table.CND_QTDPAR);
}

                    if(insert_table.CND_SEMENT == null) {
pstmt_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(28, insert_table.CND_SEMENT);
}

                    if(insert_table.CND_SENCND == null) {
pstmt_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(29, insert_table.CND_SENCND);
}

                    pstmt_tDBOutput_4.setBigDecimal(30, insert_table.CND_VALMIN);

                    pstmt_tDBOutput_4.setBigDecimal(31, insert_table.CND_FATMAX);

                    pstmt_tDBOutput_4.setBigDecimal(32, insert_table.CND_FATMIN);

                    if(insert_table.CND_IMPFAT == null) {
pstmt_tDBOutput_4.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(33, insert_table.CND_IMPFAT);
}

                    pstmt_tDBOutput_4.setBigDecimal(34, insert_table.CND_MARMAX);

                    pstmt_tDBOutput_4.setBigDecimal(35, insert_table.CND_MARMIN);

                    pstmt_tDBOutput_4.setBigDecimal(36, insert_table.CND_PEDEAC);

                    if(insert_table.CND_TABPRE == null) {
pstmt_tDBOutput_4.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(37, insert_table.CND_TABPRE);
}

                    if(insert_table.CND_TIPFAT == null) {
pstmt_tDBOutput_4.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(38, insert_table.CND_TIPFAT);
}

                    if(insert_table.CND_JURPRO == null) {
pstmt_tDBOutput_4.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(39, insert_table.CND_JURPRO);
}

                    if(insert_table.CND_TIPCND == null) {
pstmt_tDBOutput_4.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(40, insert_table.CND_TIPCND);
}

                    if(insert_table.CND_ULTALT != null) {
pstmt_tDBOutput_4.setTimestamp(41, new java.sql.Timestamp(insert_table.CND_ULTALT.getTime()));
} else {
pstmt_tDBOutput_4.setNull(41, java.sql.Types.TIMESTAMP);
}

                    if(insert_table.CND_PRAMIN == null) {
pstmt_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(42, insert_table.CND_PRAMIN);
}

                    pstmt_tDBOutput_4.setBigDecimal(43, insert_table.CND_DESMSU);

                    if(insert_table.CND_EMPACE == null) {
pstmt_tDBOutput_4.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(44, insert_table.CND_EMPACE);
}

                    if(insert_table.CND_EXPFSO == null) {
pstmt_tDBOutput_4.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(45, insert_table.CND_EXPFSO);
}

                    if(insert_table.CND_FPGNVL == null) {
pstmt_tDBOutput_4.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(46, insert_table.CND_FPGNVL);
}

                    if(insert_table.CND_LBPDOB == null) {
pstmt_tDBOutput_4.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(47, insert_table.CND_LBPDOB);
}

                    if(insert_table.CND_MAXCAR == null) {
pstmt_tDBOutput_4.setNull(48, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(48, insert_table.CND_MAXCAR);
}

                    if(insert_table.CND_MCOBDA == null) {
pstmt_tDBOutput_4.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(49, insert_table.CND_MCOBDA);
}

                    if(insert_table.CND_SENTRA == null) {
pstmt_tDBOutput_4.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(50, insert_table.CND_SENTRA);
}

                    if(insert_table.CND_TPFTDA == null) {
pstmt_tDBOutput_4.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(51, insert_table.CND_TPFTDA);
}

                    if(insert_table.CND_TRCLCR == null) {
pstmt_tDBOutput_4.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(52, insert_table.CND_TRCLCR);
}

                    if(insert_table.CND_TRTTVE == null) {
pstmt_tDBOutput_4.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(53, insert_table.CND_TRTTVE);
}

                    pstmt_tDBOutput_4.setBigDecimal(54, insert_table.CND_VRDAUV);

                    pstmt_tDBOutput_4.setBigDecimal(55, insert_table.CND_VRDEAC);

                    pstmt_tDBOutput_4.setBigDecimal(56, insert_table.CND_PARMAX);

                    pstmt_tDBOutput_4.setBigDecimal(57, insert_table.CND_PARMIN);

                    if(insert_table.CND_RETIRA == null) {
pstmt_tDBOutput_4.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(58, insert_table.CND_RETIRA);
}

                    if(insert_table.CND_ENTIME == null) {
pstmt_tDBOutput_4.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(59, insert_table.CND_ENTIME);
}

                    if(insert_table.CND_ENTFUT == null) {
pstmt_tDBOutput_4.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(60, insert_table.CND_ENTFUT);
}

                    if(insert_table.CND_QTDMAX == null) {
pstmt_tDBOutput_4.setNull(61, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(61, insert_table.CND_QTDMAX);
}

                    if(insert_table.CND_TRCLCB == null) {
pstmt_tDBOutput_4.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(62, insert_table.CND_TRCLCB);
}

                    if(insert_table.CND_EXPB2B == null) {
pstmt_tDBOutput_4.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(63, insert_table.CND_EXPB2B);
}

                    if(insert_table.CND_PRETAB == null) {
pstmt_tDBOutput_4.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(64, insert_table.CND_PRETAB);
}

                    if(insert_table.CND_LIMITE == null) {
pstmt_tDBOutput_4.setNull(65, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(65, insert_table.CND_LIMITE);
}

                    if(insert_table.CND_USADEP == null) {
pstmt_tDBOutput_4.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(66, insert_table.CND_USADEP);
}

                    if(insert_table.CND_RCX_F3 == null) {
pstmt_tDBOutput_4.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(67, insert_table.CND_RCX_F3);
}

                    if(insert_table.CND_COBYAP == null) {
pstmt_tDBOutput_4.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(68, insert_table.CND_COBYAP);
}

                    if(insert_table.CND_TRORCR == null) {
pstmt_tDBOutput_4.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(69, insert_table.CND_TRORCR);
}

                    if(insert_table.CND_TRORCB == null) {
pstmt_tDBOutput_4.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(70, insert_table.CND_TRORCB);
}

                    if(insert_table.CND_YAPTRA == null) {
pstmt_tDBOutput_4.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(71, insert_table.CND_YAPTRA);
}

                    if(insert_table.CND_YAPDIS == null) {
pstmt_tDBOutput_4.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(72, insert_table.CND_YAPDIS);
}

                    if(insert_table.CND_YAPPAR == null) {
pstmt_tDBOutput_4.setNull(73, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(73, insert_table.CND_YAPPAR);
}

                    if(insert_table.CND_TRAFAT == null) {
pstmt_tDBOutput_4.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(74, insert_table.CND_TRAFAT);
}

                    if(insert_table.CND_TRAMAR == null) {
pstmt_tDBOutput_4.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(75, insert_table.CND_TRAMAR);
}

                    if(insert_table.CND_TRAPAR == null) {
pstmt_tDBOutput_4.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(76, insert_table.CND_TRAPAR);
}

                    if(insert_table.CND_CNDESP == null) {
pstmt_tDBOutput_4.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(77, insert_table.CND_CNDESP);
}

                    pstmt_tDBOutput_4.setBigDecimal(78, insert_table.CND_DESMVM);

                    pstmt_tDBOutput_4.setBigDecimal(79, insert_table.CND_DESMSM);

                    pstmt_tDBOutput_4.setBigDecimal(80, insert_table.CND_DESMGM);

                    if(insert_table.CND_RECPIX == null) {
pstmt_tDBOutput_4.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(81, insert_table.CND_RECPIX);
}

                    if(insert_table.CND_TRACNC == null) {
pstmt_tDBOutput_4.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(82, insert_table.CND_TRACNC);
}

                    if(insert_table.CND_TRORFI == null) {
pstmt_tDBOutput_4.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(83, insert_table.CND_TRORFI);
}

                    if(insert_table.CND_TRORPF == null) {
pstmt_tDBOutput_4.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(84, insert_table.CND_TRORPF);
}

                    if(insert_table.CND_DIACOR == null) {
pstmt_tDBOutput_4.setNull(85, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(85, insert_table.CND_DIACOR);
}

                    pstmt_tDBOutput_4.setBigDecimal(86, insert_table.CND_PERVEN);

                    if(insert_table.CND_GERLNK == null) {
pstmt_tDBOutput_4.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(87, insert_table.CND_GERLNK);
}

                    if(insert_table.CND_ESPFAT == null) {
pstmt_tDBOutput_4.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(88, insert_table.CND_ESPFAT);
}

                    if(insert_table.CND_COBPME == null) {
pstmt_tDBOutput_4.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(89, insert_table.CND_COBPME);
}

                    if(insert_table.CND_EXPTAB == null) {
pstmt_tDBOutput_4.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(90, insert_table.CND_EXPTAB);
}

                    if(insert_table.CND_PMEDVC == null) {
pstmt_tDBOutput_4.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(91, insert_table.CND_PMEDVC);
}

                    if(insert_table.CND_PMEQPA == null) {
pstmt_tDBOutput_4.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(92, insert_table.CND_PMEQPA);
}

                    if(insert_table.CND_PMEQPJ == null) {
pstmt_tDBOutput_4.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(93, insert_table.CND_PMEQPJ);
}

                    pstmt_tDBOutput_4.setBigDecimal(94, insert_table.CND_PMEJCT);

                    if(insert_table.CND_MODIVN == null) {
pstmt_tDBOutput_4.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(95, insert_table.CND_MODIVN);
}

                    if(insert_table.CND_PETRCD == null) {
pstmt_tDBOutput_4.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(96, insert_table.CND_PETRCD);
}

                    if(insert_table.CND_EMIBOL == null) {
pstmt_tDBOutput_4.setNull(97, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(97, insert_table.CND_EMIBOL);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "insert_table"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_stg_cadcnd_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_table");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_stg_cadcnd, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_stg_cadcnd) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_stg_cadcnd_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_stg_cadcnd_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final stg_cadcnd stg_cadcndClass = new stg_cadcnd();

        int exitCode = stg_cadcndClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = stg_cadcnd.class.getClassLoader().getResourceAsStream("palacio_ferramentas/stg_cadcnd_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = stg_cadcnd.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : stg_cadcnd");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     684801 characters generated by Talend Open Studio for Big Data 
 *     on the 21 de maio de 2024 09:33:47 BRT
 ************************************************************************************************/