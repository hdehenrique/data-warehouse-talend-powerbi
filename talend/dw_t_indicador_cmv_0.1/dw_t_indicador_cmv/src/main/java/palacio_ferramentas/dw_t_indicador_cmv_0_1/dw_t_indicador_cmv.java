// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_indicador_cmv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: dw_t_indicador_cmv Purpose: <br>
 * Description:  <br>
 * @author henriquesantos@palaciodasferramentas.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_indicador_cmv implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_indicador_cmv";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_indicador_cmv.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_indicador_cmv.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_2Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "Erro na Conexão com o Dw", 1);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Erro na Conexão com o Dw");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Erro na Conexão com o Dw");
	globalMap.put("tDie_2_DIE_MESSAGES", "Erro na Conexão com o Dw");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
    	errorCode = new Integer(1);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(1));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_2_DIE_CODE", errorCode);

    
	

	
	
	System.exit(1);

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRowGenerator_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Erro na Conexão com o Autcom", 2);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Erro na Conexão com o Autcom");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Erro na Conexão com o Autcom");
	globalMap.put("tDie_1_DIE_MESSAGES", "Erro na Conexão com o Autcom");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(2);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(2));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(2);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return true;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.nm_programa = this.nm_programa;
	            other.data_inicio_execucao = this.data_inicio_execucao;
	            other.data_termino_execucao = this.data_termino_execucao;
	            other.mensagem = this.mensagem;
	            other.uuid = this.uuid;
	            other.versao = this.versao;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
insert_logStruct insert_log = new insert_logStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_indicador_cmv_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_2", false);
		start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_2";
	
	
		int tos_count_tRowGenerator_2 = 0;
		


int nb_line_tRowGenerator_2 = 0;
int nb_max_row_tRowGenerator_2 = 1;


class tRowGenerator_2Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();
	
	for (int itRowGenerator_2=0; itRowGenerator_2<nb_max_row_tRowGenerator_2 ;itRowGenerator_2++) {
		row2.datainicio = randtRowGenerator_2.getRandomdatainicio();
		nb_line_tRowGenerator_2++;
		

 



/**
 * [tRowGenerator_2 begin ] stop
 */
	
	/**
	 * [tRowGenerator_2 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 


	tos_count_tRowGenerator_2++;

/**
 * [tRowGenerator_2 main ] stop
 */
	
	/**
	 * [tRowGenerator_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row2.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row4 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row4 = new row4Struct();
                                row4.nm_programa = insert_log.nm_programa;
                                row4.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row4.data_termino_execucao = insert_log.data_termino_execucao;
                                row4.mensagem = insert_log.mensagem;
                                row4.uuid = insert_log.uuid;
                                row4.versao = insert_log.versao;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.nm_programa = row4.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row4.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row4.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row4.mensagem;
					oneRow_tHashOutput_1.uuid = row4.uuid;
					oneRow_tHashOutput_1.versao = row4.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_2 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

}
globalMap.put("tRowGenerator_2_NB_LINE",nb_line_tRowGenerator_2);

 

ok_Hash.put("tRowGenerator_2", true);
end_Hash.put("tRowGenerator_2", System.currentTimeMillis());




/**
 * [tRowGenerator_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_2 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfupdate_log_0Struct implements routines.system.IPersistableRow<copyOfupdate_log_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 255;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfupdate_log_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tLogCatcher_1Struct implements routines.system.IPersistableRow<after_tLogCatcher_1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tLogCatcher_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row6Struct row6 = new row6Struct();
copyOfupdate_log_0Struct copyOfupdate_log_0 = new copyOfupdate_log_0Struct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfupdate_log_0");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("dw_log_execucao");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("dw_log_execucao");
}

        int updateKeyCount_tDBOutput_5 = 0;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ?,\"uuid\" = ? WHERE ";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	
		tHash_Lookup_row7.initGet();
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfupdate_log_0Struct copyOfupdate_log_0_tmp = new copyOfupdate_log_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row6.type = lcm.getType();
		row6.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row6.priority = lcm.getPriority();
		row6.message = lcm.getMessage();
		row6.code = lcm.getCode();
		
		row6.moment = java.util.Calendar.getInstance().getTime();
	
    	row6.pid = pid;
		row6.root_pid = rootPid;
		row6.father_pid = fatherPid;
	
    	row6.project = projectName;
    	row6.job = jobName;
    	row6.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row7Struct row7 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfupdate_log_0 = null;


// # Output table : 'copyOfupdate_log_0'
copyOfupdate_log_0_tmp.nm_programa = context.programa;
copyOfupdate_log_0_tmp.data_inicio_execucao = row7.data_inicio_execucao;
copyOfupdate_log_0_tmp.data_termino_execucao = TalendDate.getCurrentDate();
copyOfupdate_log_0_tmp.mensagem = row6.message;
copyOfupdate_log_0_tmp.uuid = row7.uuid ;
copyOfupdate_log_0 = copyOfupdate_log_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfupdate_log_0"
if(copyOfupdate_log_0 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfupdate_log_0"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(copyOfupdate_log_0.nm_programa == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, copyOfupdate_log_0.nm_programa);
}

                    if(copyOfupdate_log_0.data_inicio_execucao != null) {
pstmt_tDBOutput_5.setTimestamp(2, new java.sql.Timestamp(copyOfupdate_log_0.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(copyOfupdate_log_0.data_termino_execucao != null) {
pstmt_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(copyOfupdate_log_0.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(copyOfupdate_log_0.mensagem == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, copyOfupdate_log_0.mensagem);
}

                    if(copyOfupdate_log_0.uuid == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, copyOfupdate_log_0.uuid);
}

    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "copyOfupdate_log_0"



	
		} // close loop of lookup 'row7' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
			
	    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfupdate_log_0");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tHashInput_2 - inputs:(after_tLogCatcher_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_5 - inputs:(row6,row7) outputs:(copyOfupdate_log_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row4Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row7.nm_programa = next_tHashInput_2.nm_programa;
	row7.data_inicio_execucao = next_tHashInput_2.data_inicio_execucao;
	row7.data_termino_execucao = next_tHashInput_2.data_termino_execucao;
	row7.mensagem = next_tHashInput_2.mensagem;
	row7.uuid = next_tHashInput_2.uuid;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.nm_programa = row7.nm_programa;
				
				row7_HashRow.data_inicio_execucao = row7.data_inicio_execucao;
				
				row7_HashRow.data_termino_execucao = row7.data_termino_execucao;
				
				row7_HashRow.mensagem = row7.mensagem;
				
				row7_HashRow.uuid = row7.uuid;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return false;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return false;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_dw_t_indicador_cmv_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nSELECT REPLACE(LPAD( DATA, 7, '0'), '-', '') AS ANOMES,\n	   FAT.COD_ITEM AS COD_ITEM,\n	   ITEM.ITE_DESITE AS DESCRI"
+"CAO,\n	   FAT.EMPRESA AS EMPRESA,\n	   (SELECT M.MAR_DESMAR\n   	      FROM CADMAR M\n	     WHERE M.MAR_CODMAR = ITEM.IT"
+"E_CODMAR) DC_MARCA,\n	   ITEM.ITE_CODFOR COD_FORNECEDOR,\n	   (SELECT F.FOR_NOMFOR\n	      FROM CADFOR F\n	     WHERE FA"
+"T.COD_FORNECEDOR = F.FOR_CODFOR) NM_FORNECEDOR,\n	   (SELECT LEFT(ITEM.ITE_CODGRU,3)\n 	      FROM CADGRU CL\n	     WHER"
+"E CL.GRU_CODGRU = CONCAT(LEFT(ITEM.ITE_CODGRU, 3), '000')) CD_LINHA,\n	   (SELECT CL.GRU_DESGRU\n	      FROM CADGRU CL\n"
+"	     WHERE CL.GRU_CODGRU = CONCAT(LEFT(ITEM.ITE_CODGRU, 3), '000')) LINHAGRUPO,\n 	   RIGHT(ITEM.ITE_CODGRU,3) CD_GRUPO"
+",\n	   (SELECT CG.GRU_DESGRU\n	      FROM CADGRU CG\n  	     WHERE ITEM.ITE_CODGRU = CG.GRU_CODGRU) GRUPO,\n	   SUM(FAT."
+"QTD_ITEM) QTDE_VENDAS,\n	   SUM(FAT.TOTAL_VENDA) FATURAMENTO\n  FROM VW_FATURAMENTO FAT,\n	   CADITE         ITEM\n WHER"
+"E FAT.COD_ITEM = ITEM.ITE_CODITE\n     AND FAT.DATA_ANO = YEAR(CURRENT_DATE())\n     AND FAT.DATA_MES =  MONTH(CURRENT_D"
+"ATE())\n GROUP BY FAT.COD_ITEM,\n	      FAT.EMPRESA,\n   	      REPLACE(LPAD( DATA, 7, '0'), '-', '')\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row1.ANOMES = null;
							} else {
		                          
            row1.ANOMES = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    row1.ANOMES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row1.COD_ITEM = null;
							} else {
	                         		
        	row1.COD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row1.DESCRICAO = null;
							} else {
	                         		
        	row1.DESCRICAO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row1.EMPRESA = null;
							} else {
	                         		
        	row1.EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row1.DC_MARCA = null;
							} else {
	                         		
        	row1.DC_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row1.COD_FORNECEDOR = null;
							} else {
	                         		
        	row1.COD_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row1.NM_FORNECEDOR = null;
							} else {
	                         		
        	row1.NM_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row1.CD_LINHA = null;
							} else {
	                         		
        	row1.CD_LINHA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row1.LINHAGRUPO = null;
							} else {
	                         		
        	row1.LINHAGRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row1.CD_GRUPO = null;
							} else {
	                         		
        	row1.CD_GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row1.GRUPO = null;
							} else {
	                         		
        	row1.GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row1.QTDE_VENDAS = null;
							} else {
		                          
            row1.QTDE_VENDAS = rs_tDBInput_3.getInt(12);
            if(rs_tDBInput_3.wasNull()){
                    row1.QTDE_VENDAS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row1.FATURAMENTO = null;
							} else {
		                          
            row1.FATURAMENTO = rs_tDBInput_3.getBigDecimal(13);
            if(rs_tDBInput_3.wasNull()){
                    row1.FATURAMENTO = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_5 = new row1Struct();
				
					oneRow_tHashOutput_5.ANOMES = row1.ANOMES;
					oneRow_tHashOutput_5.COD_ITEM = row1.COD_ITEM;
					oneRow_tHashOutput_5.DESCRICAO = row1.DESCRICAO;
					oneRow_tHashOutput_5.EMPRESA = row1.EMPRESA;
					oneRow_tHashOutput_5.DC_MARCA = row1.DC_MARCA;
					oneRow_tHashOutput_5.COD_FORNECEDOR = row1.COD_FORNECEDOR;
					oneRow_tHashOutput_5.NM_FORNECEDOR = row1.NM_FORNECEDOR;
					oneRow_tHashOutput_5.CD_LINHA = row1.CD_LINHA;
					oneRow_tHashOutput_5.LINHAGRUPO = row1.LINHAGRUPO;
					oneRow_tHashOutput_5.CD_GRUPO = row1.CD_GRUPO;
					oneRow_tHashOutput_5.GRUPO = row1.GRUPO;
					oneRow_tHashOutput_5.QTDE_VENDAS = row1.QTDE_VENDAS;
					oneRow_tHashOutput_5.FATURAMENTO = row1.FATURAMENTO;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer mes;

				public Integer getMes () {
					return this.mes;
				}

				public Boolean mesIsNullable(){
				    return true;
				}
				public Boolean mesIsKey(){
				    return false;
				}
				public Integer mesLength(){
				    return null;
				}
				public Integer mesPrecision(){
				    return null;
				}
				public String mesDefault(){
				
					return null;
				
				}
				public String mesComment(){
				
				    return "";
				
				}
				public String mesPattern(){
				
					return "";
				
				}
				public String mesOriginalDbColumnName(){
				
					return "mes";
				
				}

				
			    public String cd_emp;

				public String getCd_emp () {
					return this.cd_emp;
				}

				public Boolean cd_empIsNullable(){
				    return true;
				}
				public Boolean cd_empIsKey(){
				    return false;
				}
				public Integer cd_empLength(){
				    return null;
				}
				public Integer cd_empPrecision(){
				    return null;
				}
				public String cd_empDefault(){
				
					return null;
				
				}
				public String cd_empComment(){
				
				    return "";
				
				}
				public String cd_empPattern(){
				
					return "";
				
				}
				public String cd_empOriginalDbColumnName(){
				
					return "cd_emp";
				
				}

				
			    public String cd_item;

				public String getCd_item () {
					return this.cd_item;
				}

				public Boolean cd_itemIsNullable(){
				    return true;
				}
				public Boolean cd_itemIsKey(){
				    return false;
				}
				public Integer cd_itemLength(){
				    return null;
				}
				public Integer cd_itemPrecision(){
				    return null;
				}
				public String cd_itemDefault(){
				
					return null;
				
				}
				public String cd_itemComment(){
				
				    return "";
				
				}
				public String cd_itemPattern(){
				
					return "";
				
				}
				public String cd_itemOriginalDbColumnName(){
				
					return "cd_item";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mes="+String.valueOf(mes));
		sb.append(",cd_emp="+cd_emp);
		sb.append(",cd_item="+cd_item);
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer mes;

				public Integer getMes () {
					return this.mes;
				}

				public Boolean mesIsNullable(){
				    return true;
				}
				public Boolean mesIsKey(){
				    return false;
				}
				public Integer mesLength(){
				    return null;
				}
				public Integer mesPrecision(){
				    return null;
				}
				public String mesDefault(){
				
					return null;
				
				}
				public String mesComment(){
				
				    return "";
				
				}
				public String mesPattern(){
				
					return "";
				
				}
				public String mesOriginalDbColumnName(){
				
					return "mes";
				
				}

				
			    public String cd_emp;

				public String getCd_emp () {
					return this.cd_emp;
				}

				public Boolean cd_empIsNullable(){
				    return true;
				}
				public Boolean cd_empIsKey(){
				    return false;
				}
				public Integer cd_empLength(){
				    return null;
				}
				public Integer cd_empPrecision(){
				    return null;
				}
				public String cd_empDefault(){
				
					return null;
				
				}
				public String cd_empComment(){
				
				    return "";
				
				}
				public String cd_empPattern(){
				
					return "";
				
				}
				public String cd_empOriginalDbColumnName(){
				
					return "cd_emp";
				
				}

				
			    public String cd_item;

				public String getCd_item () {
					return this.cd_item;
				}

				public Boolean cd_itemIsNullable(){
				    return true;
				}
				public Boolean cd_itemIsKey(){
				    return false;
				}
				public Integer cd_itemLength(){
				    return null;
				}
				public Integer cd_itemPrecision(){
				    return null;
				}
				public String cd_itemDefault(){
				
					return null;
				
				}
				public String cd_itemComment(){
				
				    return "";
				
				}
				public String cd_itemPattern(){
				
					return "";
				
				}
				public String cd_itemOriginalDbColumnName(){
				
					return "cd_item";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mes="+String.valueOf(mes));
		sb.append(",cd_emp="+cd_emp);
		sb.append(",cd_item="+cd_item);
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_dw_t_indicador_cmv_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect to_char(dtasai, 'YYYYMM') as mes,\n	   right(numdoc,3) as cd_emp,\n       lpad(codite,5) as cd_item,\n       s"
+"um(totent) as vl_CMV\n   from vw_custo_efetivo\n where dtasai >= current_date - 32\n--	and codite like '%69655%'\ngroup "
+"by to_char(dtasai, 'YYYYMM'), lpad(codite,5), right(numdoc,3);\n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row10.mes = null;
							} else {
		                          
            row10.mes = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    row10.mes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row10.cd_emp = null;
							} else {
	                         		
        	row10.cd_emp = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row10.cd_item = null;
							} else {
	                         		
        	row10.cd_item = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row10.vl_CMV = null;
							} else {
		                          
            row10.vl_CMV = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    row10.vl_CMV = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

    //Code generated according to input schema and output schema
row11.mes = row10.mes;
row11.cd_emp = row10.cd_emp;
row11.cd_item = row10.cd_item;
row11.vl_CMV = row10.vl_CMV;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_6 = new row11Struct();
				
					oneRow_tHashOutput_6.mes = row11.mes;
					oneRow_tHashOutput_6.cd_emp = row11.cd_emp;
					oneRow_tHashOutput_6.cd_item = row11.cd_item;
					oneRow_tHashOutput_6.vl_CMV = row11.vl_CMV;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_3", false);
		start_Hash.put("tPostjob_3", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_3";
	
	
		int tos_count_tPostjob_3 = 0;
		

 



/**
 * [tPostjob_3 begin ] stop
 */
	
	/**
	 * [tPostjob_3 main ] start
	 */

	

	
	
	currentComponent="tPostjob_3";
	
	

 


	tos_count_tPostjob_3++;

/**
 * [tPostjob_3 main ] stop
 */
	
	/**
	 * [tPostjob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_3";
	
	

 



/**
 * [tPostjob_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_3";
	
	

 



/**
 * [tPostjob_3 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_3 end ] start
	 */

	

	
	
	currentComponent="tPostjob_3";
	
	

 

ok_Hash.put("tPostjob_3", true);
end_Hash.put("tPostjob_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tHashInput_6Process(globalMap);



/**
 * [tPostjob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_3 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_3";
	
	

 



/**
 * [tPostjob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_3_SUBPROCESS_STATE", 1);
	}
	


public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				
			    public Integer ESTOQUE;

				public Integer getESTOQUE () {
					return this.ESTOQUE;
				}

				public Boolean ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean ESTOQUEIsKey(){
				    return false;
				}
				public Integer ESTOQUELength(){
				    return null;
				}
				public Integer ESTOQUEPrecision(){
				    return null;
				}
				public String ESTOQUEDefault(){
				
					return null;
				
				}
				public String ESTOQUEComment(){
				
				    return "";
				
				}
				public String ESTOQUEPattern(){
				
					return "";
				
				}
				public String ESTOQUEOriginalDbColumnName(){
				
					return "ESTOQUE";
				
				}

				
			    public BigDecimal VL_ESTOQUE;

				public BigDecimal getVL_ESTOQUE () {
					return this.VL_ESTOQUE;
				}

				public Boolean VL_ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUEIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUELength(){
				    return 12;
				}
				public Integer VL_ESTOQUEPrecision(){
				    return 2;
				}
				public String VL_ESTOQUEDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUEComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUEPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUEOriginalDbColumnName(){
				
					return "VL_ESTOQUE";
				
				}

				
			    public BigDecimal ITE_PREMED;

				public BigDecimal getITE_PREMED () {
					return this.ITE_PREMED;
				}

				public Boolean ITE_PREMEDIsNullable(){
				    return true;
				}
				public Boolean ITE_PREMEDIsKey(){
				    return false;
				}
				public Integer ITE_PREMEDLength(){
				    return 12;
				}
				public Integer ITE_PREMEDPrecision(){
				    return 2;
				}
				public String ITE_PREMEDDefault(){
				
					return null;
				
				}
				public String ITE_PREMEDComment(){
				
				    return "";
				
				}
				public String ITE_PREMEDPattern(){
				
					return "";
				
				}
				public String ITE_PREMEDOriginalDbColumnName(){
				
					return "ITE_PREMED";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ANOMES == null) ? 0 : this.ANOMES.hashCode());
					
						result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
					
						result = prime * result + ((this.EMPRESA == null) ? 0 : this.EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insertStruct other = (insertStruct) obj;
		
						if (this.ANOMES == null) {
							if (other.ANOMES != null)
								return false;
						
						} else if (!this.ANOMES.equals(other.ANOMES))
						
							return false;
					
						if (this.COD_ITEM == null) {
							if (other.COD_ITEM != null)
								return false;
						
						} else if (!this.COD_ITEM.equals(other.COD_ITEM))
						
							return false;
					
						if (this.EMPRESA == null) {
							if (other.EMPRESA != null)
								return false;
						
						} else if (!this.EMPRESA.equals(other.EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insertStruct other) {

		other.ANOMES = this.ANOMES;
	            other.COD_ITEM = this.COD_ITEM;
	            other.DESCRICAO = this.DESCRICAO;
	            other.EMPRESA = this.EMPRESA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.COD_FORNECEDOR = this.COD_FORNECEDOR;
	            other.NM_FORNECEDOR = this.NM_FORNECEDOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHAGRUPO = this.LINHAGRUPO;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.QTDE_VENDAS = this.QTDE_VENDAS;
	            other.FATURAMENTO = this.FATURAMENTO;
	            other.vl_CMV = this.vl_CMV;
	            other.ESTOQUE = this.ESTOQUE;
	            other.VL_ESTOQUE = this.VL_ESTOQUE;
	            other.ITE_PREMED = this.ITE_PREMED;
	            other.DATA_ULT_ATUALIZACAO = this.DATA_ULT_ATUALIZACAO;
	            
	}

	public void copyKeysDataTo(insertStruct other) {

		other.ANOMES = this.ANOMES;
	            	other.COD_ITEM = this.COD_ITEM;
	            	other.EMPRESA = this.EMPRESA;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
		sb.append(",ESTOQUE="+String.valueOf(ESTOQUE));
		sb.append(",VL_ESTOQUE="+String.valueOf(VL_ESTOQUE));
		sb.append(",ITE_PREMED="+String.valueOf(ITE_PREMED));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ANOMES, other.ANOMES);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_ITEM, other.COD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EMPRESA, other.EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class estoqueStruct implements routines.system.IPersistableRow<estoqueStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				
			    public Integer ESTOQUE;

				public Integer getESTOQUE () {
					return this.ESTOQUE;
				}

				public Boolean ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean ESTOQUEIsKey(){
				    return false;
				}
				public Integer ESTOQUELength(){
				    return null;
				}
				public Integer ESTOQUEPrecision(){
				    return null;
				}
				public String ESTOQUEDefault(){
				
					return null;
				
				}
				public String ESTOQUEComment(){
				
				    return "";
				
				}
				public String ESTOQUEPattern(){
				
					return "";
				
				}
				public String ESTOQUEOriginalDbColumnName(){
				
					return "ESTOQUE";
				
				}

				
			    public BigDecimal VL_ESTOQUE;

				public BigDecimal getVL_ESTOQUE () {
					return this.VL_ESTOQUE;
				}

				public Boolean VL_ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUEIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUELength(){
				    return 12;
				}
				public Integer VL_ESTOQUEPrecision(){
				    return 2;
				}
				public String VL_ESTOQUEDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUEComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUEPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUEOriginalDbColumnName(){
				
					return "VL_ESTOQUE";
				
				}

				
			    public BigDecimal ITE_PREMED;

				public BigDecimal getITE_PREMED () {
					return this.ITE_PREMED;
				}

				public Boolean ITE_PREMEDIsNullable(){
				    return true;
				}
				public Boolean ITE_PREMEDIsKey(){
				    return false;
				}
				public Integer ITE_PREMEDLength(){
				    return 12;
				}
				public Integer ITE_PREMEDPrecision(){
				    return 2;
				}
				public String ITE_PREMEDDefault(){
				
					return null;
				
				}
				public String ITE_PREMEDComment(){
				
				    return "";
				
				}
				public String ITE_PREMEDPattern(){
				
					return "";
				
				}
				public String ITE_PREMEDOriginalDbColumnName(){
				
					return "ITE_PREMED";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
		sb.append(",ESTOQUE="+String.valueOf(ESTOQUE));
		sb.append(",VL_ESTOQUE="+String.valueOf(VL_ESTOQUE));
		sb.append(",ITE_PREMED="+String.valueOf(ITE_PREMED));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(estoqueStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateStruct implements routines.system.IPersistableRow<updateStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				
			    public Integer ESTOQUE;

				public Integer getESTOQUE () {
					return this.ESTOQUE;
				}

				public Boolean ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean ESTOQUEIsKey(){
				    return false;
				}
				public Integer ESTOQUELength(){
				    return null;
				}
				public Integer ESTOQUEPrecision(){
				    return null;
				}
				public String ESTOQUEDefault(){
				
					return null;
				
				}
				public String ESTOQUEComment(){
				
				    return "";
				
				}
				public String ESTOQUEPattern(){
				
					return "";
				
				}
				public String ESTOQUEOriginalDbColumnName(){
				
					return "ESTOQUE";
				
				}

				
			    public BigDecimal VL_ESTOQUE;

				public BigDecimal getVL_ESTOQUE () {
					return this.VL_ESTOQUE;
				}

				public Boolean VL_ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUEIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUELength(){
				    return 12;
				}
				public Integer VL_ESTOQUEPrecision(){
				    return 2;
				}
				public String VL_ESTOQUEDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUEComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUEPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUEOriginalDbColumnName(){
				
					return "VL_ESTOQUE";
				
				}

				
			    public BigDecimal ITE_PREMED;

				public BigDecimal getITE_PREMED () {
					return this.ITE_PREMED;
				}

				public Boolean ITE_PREMEDIsNullable(){
				    return true;
				}
				public Boolean ITE_PREMEDIsKey(){
				    return false;
				}
				public Integer ITE_PREMEDLength(){
				    return 12;
				}
				public Integer ITE_PREMEDPrecision(){
				    return 2;
				}
				public String ITE_PREMEDDefault(){
				
					return null;
				
				}
				public String ITE_PREMEDComment(){
				
				    return "";
				
				}
				public String ITE_PREMEDPattern(){
				
					return "";
				
				}
				public String ITE_PREMEDOriginalDbColumnName(){
				
					return "ITE_PREMED";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ANOMES == null) ? 0 : this.ANOMES.hashCode());
					
						result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
					
						result = prime * result + ((this.EMPRESA == null) ? 0 : this.EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updateStruct other = (updateStruct) obj;
		
						if (this.ANOMES == null) {
							if (other.ANOMES != null)
								return false;
						
						} else if (!this.ANOMES.equals(other.ANOMES))
						
							return false;
					
						if (this.COD_ITEM == null) {
							if (other.COD_ITEM != null)
								return false;
						
						} else if (!this.COD_ITEM.equals(other.COD_ITEM))
						
							return false;
					
						if (this.EMPRESA == null) {
							if (other.EMPRESA != null)
								return false;
						
						} else if (!this.EMPRESA.equals(other.EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updateStruct other) {

		other.ANOMES = this.ANOMES;
	            other.COD_ITEM = this.COD_ITEM;
	            other.DESCRICAO = this.DESCRICAO;
	            other.EMPRESA = this.EMPRESA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.COD_FORNECEDOR = this.COD_FORNECEDOR;
	            other.NM_FORNECEDOR = this.NM_FORNECEDOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHAGRUPO = this.LINHAGRUPO;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.QTDE_VENDAS = this.QTDE_VENDAS;
	            other.FATURAMENTO = this.FATURAMENTO;
	            other.vl_CMV = this.vl_CMV;
	            other.ESTOQUE = this.ESTOQUE;
	            other.VL_ESTOQUE = this.VL_ESTOQUE;
	            other.ITE_PREMED = this.ITE_PREMED;
	            other.DATA_ULT_ATUALIZACAO = this.DATA_ULT_ATUALIZACAO;
	            
	}

	public void copyKeysDataTo(updateStruct other) {

		other.ANOMES = this.ANOMES;
	            	other.COD_ITEM = this.COD_ITEM;
	            	other.EMPRESA = this.EMPRESA;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PREMED);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
		sb.append(",ESTOQUE="+String.valueOf(ESTOQUE));
		sb.append(",VL_ESTOQUE="+String.valueOf(VL_ESTOQUE));
		sb.append(",ITE_PREMED="+String.valueOf(ITE_PREMED));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ANOMES, other.ANOMES);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_ITEM, other.COD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EMPRESA, other.EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Saida1Struct implements routines.system.IPersistableRow<Saida1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
						this.vl_CMV = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Saida1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_6Struct implements routines.system.IPersistableRow<after_tHashInput_6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ANOMES;

				public Integer getANOMES () {
					return this.ANOMES;
				}

				public Boolean ANOMESIsNullable(){
				    return true;
				}
				public Boolean ANOMESIsKey(){
				    return true;
				}
				public Integer ANOMESLength(){
				    return 6;
				}
				public Integer ANOMESPrecision(){
				    return null;
				}
				public String ANOMESDefault(){
				
					return null;
				
				}
				public String ANOMESComment(){
				
				    return "";
				
				}
				public String ANOMESPattern(){
				
					return "";
				
				}
				public String ANOMESOriginalDbColumnName(){
				
					return "ANOMES";
				
				}

				
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return true;
				}
				public Integer COD_ITEMLength(){
				    return 5;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String DESCRICAO;

				public String getDESCRICAO () {
					return this.DESCRICAO;
				}

				public Boolean DESCRICAOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAOIsKey(){
				    return false;
				}
				public Integer DESCRICAOLength(){
				    return null;
				}
				public Integer DESCRICAOPrecision(){
				    return null;
				}
				public String DESCRICAODefault(){
				
					return null;
				
				}
				public String DESCRICAOComment(){
				
				    return "";
				
				}
				public String DESCRICAOPattern(){
				
					return "";
				
				}
				public String DESCRICAOOriginalDbColumnName(){
				
					return "DESCRICAO";
				
				}

				
			    public String EMPRESA;

				public String getEMPRESA () {
					return this.EMPRESA;
				}

				public Boolean EMPRESAIsNullable(){
				    return true;
				}
				public Boolean EMPRESAIsKey(){
				    return true;
				}
				public Integer EMPRESALength(){
				    return null;
				}
				public Integer EMPRESAPrecision(){
				    return null;
				}
				public String EMPRESADefault(){
				
					return null;
				
				}
				public String EMPRESAComment(){
				
				    return "";
				
				}
				public String EMPRESAPattern(){
				
					return "";
				
				}
				public String EMPRESAOriginalDbColumnName(){
				
					return "EMPRESA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String COD_FORNECEDOR;

				public String getCOD_FORNECEDOR () {
					return this.COD_FORNECEDOR;
				}

				public Boolean COD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean COD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer COD_FORNECEDORLength(){
				    return null;
				}
				public Integer COD_FORNECEDORPrecision(){
				    return null;
				}
				public String COD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String COD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String COD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String COD_FORNECEDOROriginalDbColumnName(){
				
					return "COD_FORNECEDOR";
				
				}

				
			    public String NM_FORNECEDOR;

				public String getNM_FORNECEDOR () {
					return this.NM_FORNECEDOR;
				}

				public Boolean NM_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean NM_FORNECEDORIsKey(){
				    return false;
				}
				public Integer NM_FORNECEDORLength(){
				    return null;
				}
				public Integer NM_FORNECEDORPrecision(){
				    return null;
				}
				public String NM_FORNECEDORDefault(){
				
					return null;
				
				}
				public String NM_FORNECEDORComment(){
				
				    return "";
				
				}
				public String NM_FORNECEDORPattern(){
				
					return "";
				
				}
				public String NM_FORNECEDOROriginalDbColumnName(){
				
					return "NM_FORNECEDOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return null;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHAGRUPO;

				public String getLINHAGRUPO () {
					return this.LINHAGRUPO;
				}

				public Boolean LINHAGRUPOIsNullable(){
				    return true;
				}
				public Boolean LINHAGRUPOIsKey(){
				    return false;
				}
				public Integer LINHAGRUPOLength(){
				    return null;
				}
				public Integer LINHAGRUPOPrecision(){
				    return null;
				}
				public String LINHAGRUPODefault(){
				
					return null;
				
				}
				public String LINHAGRUPOComment(){
				
				    return "";
				
				}
				public String LINHAGRUPOPattern(){
				
					return "";
				
				}
				public String LINHAGRUPOOriginalDbColumnName(){
				
					return "LINHAGRUPO";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return null;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return null;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public Integer QTDE_VENDAS;

				public Integer getQTDE_VENDAS () {
					return this.QTDE_VENDAS;
				}

				public Boolean QTDE_VENDASIsNullable(){
				    return true;
				}
				public Boolean QTDE_VENDASIsKey(){
				    return false;
				}
				public Integer QTDE_VENDASLength(){
				    return null;
				}
				public Integer QTDE_VENDASPrecision(){
				    return null;
				}
				public String QTDE_VENDASDefault(){
				
					return null;
				
				}
				public String QTDE_VENDASComment(){
				
				    return "";
				
				}
				public String QTDE_VENDASPattern(){
				
					return "";
				
				}
				public String QTDE_VENDASOriginalDbColumnName(){
				
					return "QTDE_VENDAS";
				
				}

				
			    public BigDecimal FATURAMENTO;

				public BigDecimal getFATURAMENTO () {
					return this.FATURAMENTO;
				}

				public Boolean FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean FATURAMENTOIsKey(){
				    return false;
				}
				public Integer FATURAMENTOLength(){
				    return 14;
				}
				public Integer FATURAMENTOPrecision(){
				    return 2;
				}
				public String FATURAMENTODefault(){
				
					return null;
				
				}
				public String FATURAMENTOComment(){
				
				    return "";
				
				}
				public String FATURAMENTOPattern(){
				
					return "";
				
				}
				public String FATURAMENTOOriginalDbColumnName(){
				
					return "FATURAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ANOMES == null) ? 0 : this.ANOMES.hashCode());
					
						result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
					
						result = prime * result + ((this.EMPRESA == null) ? 0 : this.EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_6Struct other = (after_tHashInput_6Struct) obj;
		
						if (this.ANOMES == null) {
							if (other.ANOMES != null)
								return false;
						
						} else if (!this.ANOMES.equals(other.ANOMES))
						
							return false;
					
						if (this.COD_ITEM == null) {
							if (other.COD_ITEM != null)
								return false;
						
						} else if (!this.COD_ITEM.equals(other.COD_ITEM))
						
							return false;
					
						if (this.EMPRESA == null) {
							if (other.EMPRESA != null)
								return false;
						
						} else if (!this.EMPRESA.equals(other.EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_6Struct other) {

		other.ANOMES = this.ANOMES;
	            other.COD_ITEM = this.COD_ITEM;
	            other.DESCRICAO = this.DESCRICAO;
	            other.EMPRESA = this.EMPRESA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.COD_FORNECEDOR = this.COD_FORNECEDOR;
	            other.NM_FORNECEDOR = this.NM_FORNECEDOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHAGRUPO = this.LINHAGRUPO;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.QTDE_VENDAS = this.QTDE_VENDAS;
	            other.FATURAMENTO = this.FATURAMENTO;
	            
	}

	public void copyKeysDataTo(after_tHashInput_6Struct other) {

		other.ANOMES = this.ANOMES;
	            	other.COD_ITEM = this.COD_ITEM;
	            	other.EMPRESA = this.EMPRESA;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.ANOMES = readInteger(dis);
					
					this.COD_ITEM = readString(dis);
					
					this.DESCRICAO = readString(dis);
					
					this.EMPRESA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.COD_FORNECEDOR = readString(dis);
					
					this.NM_FORNECEDOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHAGRUPO = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
						this.QTDE_VENDAS = readInteger(dis);
					
						this.FATURAMENTO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANOMES,dos);
					
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.DESCRICAO,dos);
					
					// String
				
						writeString(this.EMPRESA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.COD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.NM_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHAGRUPO,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// Integer
				
						writeInteger(this.QTDE_VENDAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FATURAMENTO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANOMES="+String.valueOf(ANOMES));
		sb.append(",COD_ITEM="+COD_ITEM);
		sb.append(",DESCRICAO="+DESCRICAO);
		sb.append(",EMPRESA="+EMPRESA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",COD_FORNECEDOR="+COD_FORNECEDOR);
		sb.append(",NM_FORNECEDOR="+NM_FORNECEDOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHAGRUPO="+LINHAGRUPO);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",QTDE_VENDAS="+String.valueOf(QTDE_VENDAS));
		sb.append(",FATURAMENTO="+String.valueOf(FATURAMENTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ANOMES, other.ANOMES);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.COD_ITEM, other.COD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EMPRESA, other.EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_7Process(globalMap);
		tHashInput_3Process(globalMap);
		tHashInput_4Process(globalMap);

		row12Struct row12 = new row12Struct();
Saida1Struct Saida1 = new Saida1Struct();
estoqueStruct estoque = new estoqueStruct();
insertStruct insert = new insertStruct();
updateStruct update = new updateStruct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_t_indicador_cmv").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_t_indicador_cmv").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_1 = 1000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"anomes\",\"cod_item\",\"descricao\",\"empresa\",\"dc_marca\",\"cod_fornecedor\",\"nm_fornecedor\",\"cd_linha\",\"linhagrupo\",\"cd_grupo\",\"grupo\",\"qtde_vendas\",\"faturamento\",\"vl_cmv\",\"estoque\",\"vl_estoque\",\"ite_premed\",\"data_ult_atualizacao\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"estoque");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dw_t_indicador_cmv").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dw_t_indicador_cmv").toLowerCase();
}

        int updateKeyCount_tDBOutput_4 = 3;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 18 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_4 = 1000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"descricao\" = ?,\"dc_marca\" = ?,\"cod_fornecedor\" = ?,\"nm_fornecedor\" = ?,\"cd_linha\" = ?,\"linhagrupo\" = ?,\"cd_grupo\" = ?,\"grupo\" = ?,\"qtde_vendas\" = ?,\"faturamento\" = ?,\"vl_cmv\" = ?,\"estoque\" = ?,\"vl_estoque\" = ?,\"ite_premed\" = ?,\"data_ult_atualizacao\" = ? WHERE \"anomes\" = ? AND \"cod_item\" = ? AND \"empresa\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Saida1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
estoqueStruct estoque_tmp = new estoqueStruct();
updateStruct update_tmp = new updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
Saida1Struct Saida1_tmp = new Saida1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row1Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row12.ANOMES = next_tHashInput_6.ANOMES;
	row12.COD_ITEM = next_tHashInput_6.COD_ITEM;
	row12.DESCRICAO = next_tHashInput_6.DESCRICAO;
	row12.EMPRESA = next_tHashInput_6.EMPRESA;
	row12.DC_MARCA = next_tHashInput_6.DC_MARCA;
	row12.COD_FORNECEDOR = next_tHashInput_6.COD_FORNECEDOR;
	row12.NM_FORNECEDOR = next_tHashInput_6.NM_FORNECEDOR;
	row12.CD_LINHA = next_tHashInput_6.CD_LINHA;
	row12.LINHAGRUPO = next_tHashInput_6.LINHAGRUPO;
	row12.CD_GRUPO = next_tHashInput_6.CD_GRUPO;
	row12.GRUPO = next_tHashInput_6.GRUPO;
	row12.QTDE_VENDAS = next_tHashInput_6.QTDE_VENDAS;
	row12.FATURAMENTO = next_tHashInput_6.FATURAMENTO;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.mes = row12.ANOMES ;
                        		    		
                        		    		    row13HashKey.cd_emp = row12.EMPRESA ;
                        		    		
                        		    		    row13HashKey.cd_item = row12.COD_ITEM ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow13 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow13 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row13'
									
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								
								if(!forceLooprow13) { // G 46
								
							
								 
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow13 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Saida1 = null;


// # Output table : 'Saida1'
Saida1_tmp.ANOMES = row12.ANOMES ;
Saida1_tmp.COD_ITEM = row12.COD_ITEM ;
Saida1_tmp.DESCRICAO = row12.DESCRICAO ;
Saida1_tmp.EMPRESA = row12.EMPRESA ;
Saida1_tmp.DC_MARCA = row12.DC_MARCA ;
Saida1_tmp.COD_FORNECEDOR = row12.COD_FORNECEDOR ;
Saida1_tmp.NM_FORNECEDOR = row12.NM_FORNECEDOR ;
Saida1_tmp.CD_LINHA = row12.CD_LINHA ;
Saida1_tmp.LINHAGRUPO = row12.LINHAGRUPO ;
Saida1_tmp.CD_GRUPO = row12.CD_GRUPO ;
Saida1_tmp.GRUPO = row12.GRUPO ;
Saida1_tmp.QTDE_VENDAS = row12.QTDE_VENDAS ;
Saida1_tmp.FATURAMENTO = row12.FATURAMENTO ;
Saida1_tmp.vl_CMV = row13.vl_CMV != null ? row13.vl_CMV : new BigDecimal(0);
Saida1 = Saida1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Saida1"
if(Saida1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Saida1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row8HashKey.ITE_CODEMP = Saida1.EMPRESA ;
                        		    		
                        		    		    row8HashKey.ITE_CODITE = Saida1.COD_ITEM ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.ITE_CODEMP = '" + row8HashKey.ITE_CODEMP + "', row8.ITE_CODITE = '" + row8HashKey.ITE_CODITE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

estoque = null;
update = null;


// # Output table : 'estoque'
estoque_tmp.ANOMES = Saida1.ANOMES;
estoque_tmp.COD_ITEM = Saida1.COD_ITEM;
estoque_tmp.DESCRICAO = Saida1.DESCRICAO;
estoque_tmp.EMPRESA = Saida1.EMPRESA;
estoque_tmp.DC_MARCA = Saida1.DC_MARCA;
estoque_tmp.COD_FORNECEDOR = Saida1.COD_FORNECEDOR;
estoque_tmp.NM_FORNECEDOR = Saida1.NM_FORNECEDOR;
estoque_tmp.CD_LINHA = Saida1.CD_LINHA;
estoque_tmp.LINHAGRUPO = Saida1.LINHAGRUPO;
estoque_tmp.CD_GRUPO = Saida1.CD_GRUPO;
estoque_tmp.GRUPO = Saida1.GRUPO;
estoque_tmp.QTDE_VENDAS = Saida1.QTDE_VENDAS;
estoque_tmp.FATURAMENTO = Saida1.FATURAMENTO;
estoque_tmp.vl_CMV = Saida1.vl_CMV != null ? Saida1.vl_CMV : new BigDecimal(0);
estoque_tmp.ESTOQUE = row8.ESTOQUE;
estoque_tmp.VL_ESTOQUE = row8.VL_ESTOQUE ;
estoque_tmp.ITE_PREMED = row8.ITE_PREMED ;
estoque_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
estoque = estoque_tmp;

// # Output table : 'update'
update_tmp.ANOMES = Saida1.ANOMES;
update_tmp.COD_ITEM = Saida1.COD_ITEM;
update_tmp.DESCRICAO = Saida1.DESCRICAO;
update_tmp.EMPRESA = Saida1.EMPRESA;
update_tmp.DC_MARCA = Saida1.DC_MARCA;
update_tmp.COD_FORNECEDOR = Saida1.COD_FORNECEDOR;
update_tmp.NM_FORNECEDOR = Saida1.NM_FORNECEDOR;
update_tmp.CD_LINHA = Saida1.CD_LINHA;
update_tmp.LINHAGRUPO = Saida1.LINHAGRUPO;
update_tmp.CD_GRUPO = Saida1.CD_GRUPO;
update_tmp.GRUPO = Saida1.GRUPO;
update_tmp.QTDE_VENDAS = Saida1.QTDE_VENDAS;
update_tmp.FATURAMENTO = Saida1.FATURAMENTO;
update_tmp.vl_CMV = Saida1.vl_CMV;
update_tmp.ESTOQUE = row8.ESTOQUE;
update_tmp.VL_ESTOQUE = row8.VL_ESTOQUE;
update_tmp.ITE_PREMED = row8.ITE_PREMED;
update_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
update = update_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "estoque"
if(estoque != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"estoque"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row15HashKey.anomes = estoque.ANOMES ;
                        		    		
                        		    		    row15HashKey.cod_item = estoque.COD_ITEM ;
                        		    		
                        		    		    row15HashKey.empresa = estoque.EMPRESA ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.anomes = '" + row15HashKey.anomes + "', row15.cod_item = '" + row15HashKey.cod_item + "', row15.empresa = '" + row15HashKey.empresa + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

insert = null;

if(!rejectedInnerJoin_tMap_6 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insert'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
insert_tmp.ANOMES = estoque.ANOMES;
insert_tmp.COD_ITEM = estoque.COD_ITEM;
insert_tmp.DESCRICAO = estoque.DESCRICAO;
insert_tmp.EMPRESA = estoque.EMPRESA;
insert_tmp.DC_MARCA = estoque.DC_MARCA;
insert_tmp.COD_FORNECEDOR = estoque.COD_FORNECEDOR;
insert_tmp.NM_FORNECEDOR = estoque.NM_FORNECEDOR;
insert_tmp.CD_LINHA = estoque.CD_LINHA;
insert_tmp.LINHAGRUPO = estoque.LINHAGRUPO;
insert_tmp.CD_GRUPO = estoque.CD_GRUPO;
insert_tmp.GRUPO = estoque.GRUPO;
insert_tmp.QTDE_VENDAS = estoque.QTDE_VENDAS;
insert_tmp.FATURAMENTO = estoque.FATURAMENTO;
insert_tmp.vl_CMV = estoque.vl_CMV;
insert_tmp.ESTOQUE = estoque.ESTOQUE;
insert_tmp.VL_ESTOQUE = estoque.VL_ESTOQUE;
insert_tmp.ITE_PREMED = estoque.ITE_PREMED;
insert_tmp.DATA_ULT_ATUALIZACAO = estoque.DATA_ULT_ATUALIZACAO;
insert = insert_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(insert.ANOMES == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, insert.ANOMES);
}

                    if(insert.COD_ITEM == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, insert.COD_ITEM);
}

                    if(insert.DESCRICAO == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, insert.DESCRICAO);
}

                    if(insert.EMPRESA == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert.EMPRESA);
}

                    if(insert.DC_MARCA == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert.DC_MARCA);
}

                    if(insert.COD_FORNECEDOR == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, insert.COD_FORNECEDOR);
}

                    if(insert.NM_FORNECEDOR == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, insert.NM_FORNECEDOR);
}

                    if(insert.CD_LINHA == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, insert.CD_LINHA);
}

                    if(insert.LINHAGRUPO == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, insert.LINHAGRUPO);
}

                    if(insert.CD_GRUPO == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, insert.CD_GRUPO);
}

                    if(insert.GRUPO == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, insert.GRUPO);
}

                    if(insert.QTDE_VENDAS == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(12, insert.QTDE_VENDAS);
}

                    pstmt_tDBOutput_1.setBigDecimal(13, insert.FATURAMENTO);

                    pstmt_tDBOutput_1.setBigDecimal(14, insert.vl_CMV);

                    if(insert.ESTOQUE == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(15, insert.ESTOQUE);
}

                    pstmt_tDBOutput_1.setBigDecimal(16, insert.VL_ESTOQUE);

                    pstmt_tDBOutput_1.setBigDecimal(17, insert.ITE_PREMED);

                    if(insert.DATA_ULT_ATUALIZACAO != null) {
pstmt_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(insert.DATA_ULT_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "estoque"




// Start of branch "update"
if(update != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(update.DESCRICAO == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, update.DESCRICAO);
}

                    if(update.DC_MARCA == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, update.DC_MARCA);
}

                    if(update.COD_FORNECEDOR == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, update.COD_FORNECEDOR);
}

                    if(update.NM_FORNECEDOR == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, update.NM_FORNECEDOR);
}

                    if(update.CD_LINHA == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, update.CD_LINHA);
}

                    if(update.LINHAGRUPO == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, update.LINHAGRUPO);
}

                    if(update.CD_GRUPO == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, update.CD_GRUPO);
}

                    if(update.GRUPO == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, update.GRUPO);
}

                    if(update.QTDE_VENDAS == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(9, update.QTDE_VENDAS);
}

                    pstmt_tDBOutput_4.setBigDecimal(10, update.FATURAMENTO);

                    pstmt_tDBOutput_4.setBigDecimal(11, update.vl_CMV);

                    if(update.ESTOQUE == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(12, update.ESTOQUE);
}

                    pstmt_tDBOutput_4.setBigDecimal(13, update.VL_ESTOQUE);

                    pstmt_tDBOutput_4.setBigDecimal(14, update.ITE_PREMED);

                    if(update.DATA_ULT_ATUALIZACAO != null) {
pstmt_tDBOutput_4.setTimestamp(15, new java.sql.Timestamp(update.DATA_ULT_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.TIMESTAMP);
}

                    if(update.ANOMES == null) {
pstmt_tDBOutput_4.setNull(16 + count_tDBOutput_4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(16 + count_tDBOutput_4, update.ANOMES);
}


                    if(update.COD_ITEM == null) {
pstmt_tDBOutput_4.setNull(17 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17 + count_tDBOutput_4, update.COD_ITEM);
}


                    if(update.EMPRESA == null) {
pstmt_tDBOutput_4.setNull(18 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18 + count_tDBOutput_4, update.EMPRESA);
}


    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "update"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "Saida1"



	
		} // close loop of lookup 'row13' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Saida1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"estoque");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */







	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */







	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row4Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5.nm_programa = next_tHashInput_1.nm_programa;
	row5.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row5.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row5.mensagem = next_tHashInput_1.mensagem;
	row5.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row5.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row5.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer mes;

				public Integer getMes () {
					return this.mes;
				}

				public Boolean mesIsNullable(){
				    return true;
				}
				public Boolean mesIsKey(){
				    return false;
				}
				public Integer mesLength(){
				    return null;
				}
				public Integer mesPrecision(){
				    return null;
				}
				public String mesDefault(){
				
					return null;
				
				}
				public String mesComment(){
				
				    return "";
				
				}
				public String mesPattern(){
				
					return "";
				
				}
				public String mesOriginalDbColumnName(){
				
					return "mes";
				
				}

				
			    public String cd_emp;

				public String getCd_emp () {
					return this.cd_emp;
				}

				public Boolean cd_empIsNullable(){
				    return true;
				}
				public Boolean cd_empIsKey(){
				    return false;
				}
				public Integer cd_empLength(){
				    return null;
				}
				public Integer cd_empPrecision(){
				    return null;
				}
				public String cd_empDefault(){
				
					return null;
				
				}
				public String cd_empComment(){
				
				    return "";
				
				}
				public String cd_empPattern(){
				
					return "";
				
				}
				public String cd_empOriginalDbColumnName(){
				
					return "cd_emp";
				
				}

				
			    public String cd_item;

				public String getCd_item () {
					return this.cd_item;
				}

				public Boolean cd_itemIsNullable(){
				    return true;
				}
				public Boolean cd_itemIsKey(){
				    return false;
				}
				public Integer cd_itemLength(){
				    return null;
				}
				public Integer cd_itemPrecision(){
				    return null;
				}
				public String cd_itemDefault(){
				
					return null;
				
				}
				public String cd_itemComment(){
				
				    return "";
				
				}
				public String cd_itemPattern(){
				
					return "";
				
				}
				public String cd_itemOriginalDbColumnName(){
				
					return "cd_item";
				
				}

				
			    public BigDecimal vl_CMV;

				public BigDecimal getVl_CMV () {
					return this.vl_CMV;
				}

				public Boolean vl_CMVIsNullable(){
				    return true;
				}
				public Boolean vl_CMVIsKey(){
				    return false;
				}
				public Integer vl_CMVLength(){
				    return 14;
				}
				public Integer vl_CMVPrecision(){
				    return 2;
				}
				public String vl_CMVDefault(){
				
					return null;
				
				}
				public String vl_CMVComment(){
				
				    return "";
				
				}
				public String vl_CMVPattern(){
				
					return "";
				
				}
				public String vl_CMVOriginalDbColumnName(){
				
					return "vl_CMV";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.mes == null) ? 0 : this.mes.hashCode());
					
						result = prime * result + ((this.cd_emp == null) ? 0 : this.cd_emp.hashCode());
					
						result = prime * result + ((this.cd_item == null) ? 0 : this.cd_item.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.mes == null) {
							if (other.mes != null)
								return false;
						
						} else if (!this.mes.equals(other.mes))
						
							return false;
					
						if (this.cd_emp == null) {
							if (other.cd_emp != null)
								return false;
						
						} else if (!this.cd_emp.equals(other.cd_emp))
						
							return false;
					
						if (this.cd_item == null) {
							if (other.cd_item != null)
								return false;
						
						} else if (!this.cd_item.equals(other.cd_item))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.mes = this.mes;
	            other.cd_emp = this.cd_emp;
	            other.cd_item = this.cd_item;
	            other.vl_CMV = this.vl_CMV;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.mes = this.mes;
	            	other.cd_emp = this.cd_emp;
	            	other.cd_item = this.cd_item;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.mes = readInteger(dis);
					
					this.cd_emp = readString(dis);
					
					this.cd_item = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.mes,dos);
					
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_item,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.vl_CMV = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.vl_CMV = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.vl_CMV);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mes="+String.valueOf(mes));
		sb.append(",cd_emp="+cd_emp);
		sb.append(",cd_item="+cd_item);
		sb.append(",vl_CMV="+String.valueOf(vl_CMV));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.mes, other.mes);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_emp, other.cd_emp);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_item, other.cd_item);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_7 - inputs:(after_tHashInput_6) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row12,row13) outputs:(Saida1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row11Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row13.mes = next_tHashInput_7.mes;
	row13.cd_emp = next_tHashInput_7.cd_emp;
	row13.cd_item = next_tHashInput_7.cd_item;
	row13.vl_CMV = next_tHashInput_7.vl_CMV;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.mes = row13.mes;
				
				row13_HashRow.cd_emp = row13.cd_emp;
				
				row13_HashRow.cd_item = row13.cd_item;
				
				row13_HashRow.vl_CMV = row13.vl_CMV;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PREMED;

				public BigDecimal getITE_PREMED () {
					return this.ITE_PREMED;
				}

				public Boolean ITE_PREMEDIsNullable(){
				    return true;
				}
				public Boolean ITE_PREMEDIsKey(){
				    return false;
				}
				public Integer ITE_PREMEDLength(){
				    return 12;
				}
				public Integer ITE_PREMEDPrecision(){
				    return 2;
				}
				public String ITE_PREMEDDefault(){
				
					return null;
				
				}
				public String ITE_PREMEDComment(){
				
				    return "";
				
				}
				public String ITE_PREMEDPattern(){
				
					return "";
				
				}
				public String ITE_PREMEDOriginalDbColumnName(){
				
					return "ITE_PREMED";
				
				}

				
			    public Integer ESTOQUE;

				public Integer getESTOQUE () {
					return this.ESTOQUE;
				}

				public Boolean ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean ESTOQUEIsKey(){
				    return false;
				}
				public Integer ESTOQUELength(){
				    return null;
				}
				public Integer ESTOQUEPrecision(){
				    return null;
				}
				public String ESTOQUEDefault(){
				
					return null;
				
				}
				public String ESTOQUEComment(){
				
				    return "";
				
				}
				public String ESTOQUEPattern(){
				
					return "";
				
				}
				public String ESTOQUEOriginalDbColumnName(){
				
					return "ESTOQUE";
				
				}

				
			    public BigDecimal VL_ESTOQUE;

				public BigDecimal getVL_ESTOQUE () {
					return this.VL_ESTOQUE;
				}

				public Boolean VL_ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUEIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUELength(){
				    return 12;
				}
				public Integer VL_ESTOQUEPrecision(){
				    return 2;
				}
				public String VL_ESTOQUEDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUEComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUEPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUEOriginalDbColumnName(){
				
					return "VL_ESTOQUE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ITE_CODEMP == null) ? 0 : this.ITE_CODEMP.hashCode());
					
						result = prime * result + ((this.ITE_CODITE == null) ? 0 : this.ITE_CODITE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.ITE_CODEMP == null) {
							if (other.ITE_CODEMP != null)
								return false;
						
						} else if (!this.ITE_CODEMP.equals(other.ITE_CODEMP))
						
							return false;
					
						if (this.ITE_CODITE == null) {
							if (other.ITE_CODITE != null)
								return false;
						
						} else if (!this.ITE_CODITE.equals(other.ITE_CODITE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ITE_CODEMP = this.ITE_CODEMP;
	            other.ITE_CODITE = this.ITE_CODITE;
	            other.ITE_PREMED = this.ITE_PREMED;
	            other.ESTOQUE = this.ESTOQUE;
	            other.VL_ESTOQUE = this.VL_ESTOQUE;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.ITE_CODEMP = this.ITE_CODEMP;
	            	other.ITE_CODITE = this.ITE_CODITE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ITE_PREMED = (BigDecimal) ois.readObject();
					
						this.ESTOQUE = readInteger(dis,ois);
					
       			    	this.VL_ESTOQUE = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ITE_PREMED = (BigDecimal) objectIn.readObject();
					
						this.ESTOQUE = readInteger(dis,objectIn);
					
       			    	this.VL_ESTOQUE = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ITE_PREMED);
					
					writeInteger(this.ESTOQUE, dos, oos);
					
       			    	oos.writeObject(this.VL_ESTOQUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ITE_PREMED);
					
					writeInteger(this.ESTOQUE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VL_ESTOQUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PREMED="+String.valueOf(ITE_PREMED));
		sb.append(",ESTOQUE="+String.valueOf(ESTOQUE));
		sb.append(",VL_ESTOQUE="+String.valueOf(VL_ESTOQUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ITE_CODEMP, other.ITE_CODEMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITE_CODITE, other.ITE_CODITE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_6) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(Saida1,row8) outputs:(estoque,update)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row3Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row8.ITE_CODEMP = next_tHashInput_3.ITE_CODEMP;
	row8.ITE_CODITE = next_tHashInput_3.ITE_CODITE;
	row8.ITE_PREMED = next_tHashInput_3.ITE_PREMED;
	row8.ESTOQUE = next_tHashInput_3.ESTOQUE;
	row8.VL_ESTOQUE = next_tHashInput_3.VL_ESTOQUE;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ITE_CODEMP = row8.ITE_CODEMP;
				
				row8_HashRow.ITE_CODITE = row8.ITE_CODITE;
				
				row8_HashRow.ITE_PREMED = row8.ITE_PREMED;
				
				row8_HashRow.ESTOQUE = row8.ESTOQUE;
				
				row8_HashRow.VL_ESTOQUE = row8.VL_ESTOQUE;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer anomes;

				public Integer getAnomes () {
					return this.anomes;
				}

				public Boolean anomesIsNullable(){
				    return true;
				}
				public Boolean anomesIsKey(){
				    return false;
				}
				public Integer anomesLength(){
				    return null;
				}
				public Integer anomesPrecision(){
				    return null;
				}
				public String anomesDefault(){
				
					return null;
				
				}
				public String anomesComment(){
				
				    return "";
				
				}
				public String anomesPattern(){
				
					return "";
				
				}
				public String anomesOriginalDbColumnName(){
				
					return "anomes";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return null;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String empresa;

				public String getEmpresa () {
					return this.empresa;
				}

				public Boolean empresaIsNullable(){
				    return true;
				}
				public Boolean empresaIsKey(){
				    return false;
				}
				public Integer empresaLength(){
				    return null;
				}
				public Integer empresaPrecision(){
				    return null;
				}
				public String empresaDefault(){
				
					return null;
				
				}
				public String empresaComment(){
				
				    return "";
				
				}
				public String empresaPattern(){
				
					return "";
				
				}
				public String empresaOriginalDbColumnName(){
				
					return "empresa";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.anomes == null) ? 0 : this.anomes.hashCode());
					
						result = prime * result + ((this.cod_item == null) ? 0 : this.cod_item.hashCode());
					
						result = prime * result + ((this.empresa == null) ? 0 : this.empresa.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.anomes == null) {
							if (other.anomes != null)
								return false;
						
						} else if (!this.anomes.equals(other.anomes))
						
							return false;
					
						if (this.cod_item == null) {
							if (other.cod_item != null)
								return false;
						
						} else if (!this.cod_item.equals(other.cod_item))
						
							return false;
					
						if (this.empresa == null) {
							if (other.empresa != null)
								return false;
						
						} else if (!this.empresa.equals(other.empresa))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.anomes = this.anomes;
	            other.cod_item = this.cod_item;
	            other.empresa = this.empresa;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.anomes = this.anomes;
	            	other.cod_item = this.cod_item;
	            	other.empresa = this.empresa;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.anomes = readInteger(dis);
					
					this.cod_item = readString(dis);
					
					this.empresa = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.anomes = readInteger(dis);
					
					this.cod_item = readString(dis);
					
					this.empresa = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.anomes,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.empresa,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.anomes,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.empresa,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("anomes="+String.valueOf(anomes));
		sb.append(",cod_item="+cod_item);
		sb.append(",empresa="+empresa);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.anomes, other.anomes);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cod_item, other.cod_item);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.empresa, other.empresa);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_6) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_6 - inputs:(estoque,row15) outputs:(insert)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row14Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row14Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row15.anomes = next_tHashInput_4.anomes;
	row15.cod_item = next_tHashInput_4.cod_item;
	row15.empresa = next_tHashInput_4.empresa;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.anomes = row15.anomes;
				
				row15_HashRow.cod_item = row15.cod_item;
				
				row15_HashRow.empresa = row15.empresa;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_cmv_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PREMED;

				public BigDecimal getITE_PREMED () {
					return this.ITE_PREMED;
				}

				public Boolean ITE_PREMEDIsNullable(){
				    return true;
				}
				public Boolean ITE_PREMEDIsKey(){
				    return false;
				}
				public Integer ITE_PREMEDLength(){
				    return 12;
				}
				public Integer ITE_PREMEDPrecision(){
				    return 2;
				}
				public String ITE_PREMEDDefault(){
				
					return null;
				
				}
				public String ITE_PREMEDComment(){
				
				    return "";
				
				}
				public String ITE_PREMEDPattern(){
				
					return "";
				
				}
				public String ITE_PREMEDOriginalDbColumnName(){
				
					return "ITE_PREMED";
				
				}

				
			    public Integer ESTOQUE;

				public Integer getESTOQUE () {
					return this.ESTOQUE;
				}

				public Boolean ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean ESTOQUEIsKey(){
				    return false;
				}
				public Integer ESTOQUELength(){
				    return null;
				}
				public Integer ESTOQUEPrecision(){
				    return null;
				}
				public String ESTOQUEDefault(){
				
					return null;
				
				}
				public String ESTOQUEComment(){
				
				    return "";
				
				}
				public String ESTOQUEPattern(){
				
					return "";
				
				}
				public String ESTOQUEOriginalDbColumnName(){
				
					return "ESTOQUE";
				
				}

				
			    public BigDecimal VL_ESTOQUE;

				public BigDecimal getVL_ESTOQUE () {
					return this.VL_ESTOQUE;
				}

				public Boolean VL_ESTOQUEIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUEIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUELength(){
				    return 12;
				}
				public Integer VL_ESTOQUEPrecision(){
				    return 2;
				}
				public String VL_ESTOQUEDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUEComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUEPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUEOriginalDbColumnName(){
				
					return "VL_ESTOQUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PREMED = (BigDecimal) dis.readObject();
					
						this.ESTOQUE = readInteger(dis);
					
						this.VL_ESTOQUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PREMED);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PREMED);
					
					// Integer
				
						writeInteger(this.ESTOQUE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PREMED="+String.valueOf(ITE_PREMED));
		sb.append(",ESTOQUE="+String.valueOf(ESTOQUE));
		sb.append(",VL_ESTOQUE="+String.valueOf(VL_ESTOQUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_indicador_cmv_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\n    SELECT IG002.ITE_CODEMP ,\n         IG002.ITE_CODITE ,\n         round(IG002.ITE_PREMED,2) as ITE_PREMED,\n      "
+"   IG002.ITE_SALDOS - IG002.ITE_SALEXT - IFNULL(IG002.ITE_SALREG,0) - (IFNULL(IG002.ITE_QTPD_V,0) + IFNULL(IG002.ITE_QTP"
+"D_F,0) + IFNULL(IG002.ITE_QTPD_P,0)) AS ESTOQUE,\n         (round(IG002.ITE_PREMED,2)) * (IG002.ITE_SALDOS - IG002.ITE_S"
+"ALEXT - IFNULL(IG002.ITE_SALREG,0) - (IFNULL(IG002.ITE_QTPD_V,0) + IFNULL(IG002.ITE_QTPD_F,0) + IFNULL(IG002.ITE_QTPD_P,"
+"0))) AS VL_ESTOQUE\n    FROM ITEGER IG002;\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row3.ITE_CODEMP = null;
							} else {
	                         		
        	row3.ITE_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row3.ITE_CODITE = null;
							} else {
	                         		
        	row3.ITE_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row3.ITE_PREMED = null;
							} else {
		                          
            row3.ITE_PREMED = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    row3.ITE_PREMED = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row3.ESTOQUE = null;
							} else {
		                          
            row3.ESTOQUE = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    row3.ESTOQUE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row3.VL_ESTOQUE = null;
							} else {
		                          
            row3.VL_ESTOQUE = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    row3.VL_ESTOQUE = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_2 = new row3Struct();
				
					oneRow_tHashOutput_2.ITE_CODEMP = row3.ITE_CODEMP;
					oneRow_tHashOutput_2.ITE_CODITE = row3.ITE_CODITE;
					oneRow_tHashOutput_2.ITE_PREMED = row3.ITE_PREMED;
					oneRow_tHashOutput_2.ESTOQUE = row3.ESTOQUE;
					oneRow_tHashOutput_2.VL_ESTOQUE = row3.VL_ESTOQUE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[0];

	
			    public Integer anomes;

				public Integer getAnomes () {
					return this.anomes;
				}

				public Boolean anomesIsNullable(){
				    return true;
				}
				public Boolean anomesIsKey(){
				    return false;
				}
				public Integer anomesLength(){
				    return null;
				}
				public Integer anomesPrecision(){
				    return null;
				}
				public String anomesDefault(){
				
					return null;
				
				}
				public String anomesComment(){
				
				    return "";
				
				}
				public String anomesPattern(){
				
					return "";
				
				}
				public String anomesOriginalDbColumnName(){
				
					return "anomes";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return null;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String empresa;

				public String getEmpresa () {
					return this.empresa;
				}

				public Boolean empresaIsNullable(){
				    return true;
				}
				public Boolean empresaIsKey(){
				    return false;
				}
				public Integer empresaLength(){
				    return null;
				}
				public Integer empresaPrecision(){
				    return null;
				}
				public String empresaDefault(){
				
					return null;
				
				}
				public String empresaComment(){
				
				    return "";
				
				}
				public String empresaPattern(){
				
					return "";
				
				}
				public String empresaOriginalDbColumnName(){
				
					return "empresa";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_cmv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.anomes = readInteger(dis);
					
					this.cod_item = readString(dis);
					
					this.empresa = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_cmv) {

        	try {

        		int length = 0;
		
						this.anomes = readInteger(dis);
					
					this.cod_item = readString(dis);
					
					this.empresa = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.anomes,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.empresa,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.anomes,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.empresa,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("anomes="+String.valueOf(anomes));
		sb.append(",cod_item="+cod_item);
		sb.append(",empresa="+empresa);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_dw_t_indicador_cmv_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect anomes, cod_item , empresa \n  from dw_t_indicador_cmv;\n";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row14.anomes = null;
							} else {
		                          
            row14.anomes = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    row14.anomes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row14.cod_item = null;
							} else {
	                         		
        	row14.cod_item = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row14.empresa = null;
							} else {
	                         		
        	row14.empresa = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



    
		row14Struct oneRow_tHashOutput_3 = new row14Struct();
				
					oneRow_tHashOutput_3.anomes = row14.anomes;
					oneRow_tHashOutput_3.cod_item = row14.cod_item;
					oneRow_tHashOutput_3.empresa = row14.empresa;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_indicador_cmv dw_t_indicador_cmvClass = new dw_t_indicador_cmv();

        int exitCode = dw_t_indicador_cmvClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_indicador_cmv.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_indicador_cmv_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_indicador_cmv.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}catch (java.lang.Error e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_3) {
globalMap.put("tPostjob_3_SUBPROCESS_STATE", -1);

e_tPostjob_3.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_indicador_cmv");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     622516 characters generated by Talend Open Studio for Big Data 
 *     on the 2 de dezembro de 2024 10:19:47 BRT
 ************************************************************************************************/