// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.gr_media_tempo_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


@SuppressWarnings("unused")

/**
 * Job: gr_media_tempo Purpose: <br>
 * Description:  <br>
 * @author luisll@uol.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class gr_media_tempo implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(aspas != null){
				
					this.setProperty("aspas", aspas.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String aspas;
public String getAspas(){
	return this.aspas;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "gr_media_tempo";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				gr_media_tempo.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(gr_media_tempo.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


String foo = "bar";

//context.data_atual = TalendDate.getCurrentDate();

Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//System.out.println(data);


System.out.println("\n");
System.out.println("*************************************************");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());
System.out.println("Versao do JOB: "+context.versao);
System.out.println("\n");
System.out.println("*************************************************");


System.out.println("AUTCOM_HOST : "+System.getenv(context.AUTCOM_HOST));
System.out.println("AUTCOM_DB : "+System.getenv(context.AUTCOM_DB));
System.out.println("AUTCOM_PORT : "+System.getenv(context.AUTCOM_PORT));
System.out.println("AUTCOM_USER : "+System.getenv(context.AUTCOM_USER));
System.out.println("AUTCOM_PASSWORD : "+System.getenv(context.AUTCOM_PASSWORD));
System.out.println("JDBC_PARAMETERS : "+System.getenv(context.JDBC_PARAMETERS));

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_gr_media_tempo_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row5.mensagem;
					oneRow_tHashOutput_1.uuid = row5.uuid;
					oneRow_tHashOutput_1.versao = row5.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 40;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 12;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 12;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String LIB_AUT;

				public String getLIB_AUT () {
					return this.LIB_AUT;
				}

				public Boolean LIB_AUTIsNullable(){
				    return true;
				}
				public Boolean LIB_AUTIsKey(){
				    return false;
				}
				public Integer LIB_AUTLength(){
				    return null;
				}
				public Integer LIB_AUTPrecision(){
				    return null;
				}
				public String LIB_AUTDefault(){
				
					return null;
				
				}
				public String LIB_AUTComment(){
				
				    return "";
				
				}
				public String LIB_AUTPattern(){
				
					return "";
				
				}
				public String LIB_AUTOriginalDbColumnName(){
				
					return "LIB_AUT";
				
				}

				
			    public String DH_CRI;

				public String getDH_CRI () {
					return this.DH_CRI;
				}

				public Boolean DH_CRIIsNullable(){
				    return true;
				}
				public Boolean DH_CRIIsKey(){
				    return false;
				}
				public Integer DH_CRILength(){
				    return null;
				}
				public Integer DH_CRIPrecision(){
				    return null;
				}
				public String DH_CRIDefault(){
				
					return null;
				
				}
				public String DH_CRIComment(){
				
				    return "";
				
				}
				public String DH_CRIPattern(){
				
					return "";
				
				}
				public String DH_CRIOriginalDbColumnName(){
				
					return "DH_CRI";
				
				}

				
			    public String DH_IMP;

				public String getDH_IMP () {
					return this.DH_IMP;
				}

				public Boolean DH_IMPIsNullable(){
				    return true;
				}
				public Boolean DH_IMPIsKey(){
				    return false;
				}
				public Integer DH_IMPLength(){
				    return null;
				}
				public Integer DH_IMPPrecision(){
				    return null;
				}
				public String DH_IMPDefault(){
				
					return null;
				
				}
				public String DH_IMPComment(){
				
				    return "";
				
				}
				public String DH_IMPPattern(){
				
					return "";
				
				}
				public String DH_IMPOriginalDbColumnName(){
				
					return "DH_IMP";
				
				}

				
			    public Integer TMP_IMP;

				public Integer getTMP_IMP () {
					return this.TMP_IMP;
				}

				public Boolean TMP_IMPIsNullable(){
				    return true;
				}
				public Boolean TMP_IMPIsKey(){
				    return false;
				}
				public Integer TMP_IMPLength(){
				    return null;
				}
				public Integer TMP_IMPPrecision(){
				    return null;
				}
				public String TMP_IMPDefault(){
				
					return null;
				
				}
				public String TMP_IMPComment(){
				
				    return "";
				
				}
				public String TMP_IMPPattern(){
				
					return "";
				
				}
				public String TMP_IMPOriginalDbColumnName(){
				
					return "TMP_IMP";
				
				}

				
			    public String DH_IMP_UTIL;

				public String getDH_IMP_UTIL () {
					return this.DH_IMP_UTIL;
				}

				public Boolean DH_IMP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_IMP_UTILIsKey(){
				    return false;
				}
				public Integer DH_IMP_UTILLength(){
				    return null;
				}
				public Integer DH_IMP_UTILPrecision(){
				    return null;
				}
				public String DH_IMP_UTILDefault(){
				
					return null;
				
				}
				public String DH_IMP_UTILComment(){
				
				    return "";
				
				}
				public String DH_IMP_UTILPattern(){
				
					return "";
				
				}
				public String DH_IMP_UTILOriginalDbColumnName(){
				
					return "DH_IMP_UTIL";
				
				}

				
			    public String DH_LIB_UTIL;

				public String getDH_LIB_UTIL () {
					return this.DH_LIB_UTIL;
				}

				public Boolean DH_LIB_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_LIB_UTILIsKey(){
				    return false;
				}
				public Integer DH_LIB_UTILLength(){
				    return null;
				}
				public Integer DH_LIB_UTILPrecision(){
				    return null;
				}
				public String DH_LIB_UTILDefault(){
				
					return null;
				
				}
				public String DH_LIB_UTILComment(){
				
				    return "";
				
				}
				public String DH_LIB_UTILPattern(){
				
					return "";
				
				}
				public String DH_LIB_UTILOriginalDbColumnName(){
				
					return "DH_LIB_UTIL";
				
				}

				
			    public Integer TMP_UTIL_LIB;

				public Integer getTMP_UTIL_LIB () {
					return this.TMP_UTIL_LIB;
				}

				public Boolean TMP_UTIL_LIBIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_LIBIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_LIBLength(){
				    return null;
				}
				public Integer TMP_UTIL_LIBPrecision(){
				    return null;
				}
				public String TMP_UTIL_LIBDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_LIBComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_LIBPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_LIBOriginalDbColumnName(){
				
					return "TMP_UTIL_LIB";
				
				}

				
			    public String DH_OND_UTIL;

				public String getDH_OND_UTIL () {
					return this.DH_OND_UTIL;
				}

				public Boolean DH_OND_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_OND_UTILIsKey(){
				    return false;
				}
				public Integer DH_OND_UTILLength(){
				    return null;
				}
				public Integer DH_OND_UTILPrecision(){
				    return null;
				}
				public String DH_OND_UTILDefault(){
				
					return null;
				
				}
				public String DH_OND_UTILComment(){
				
				    return "";
				
				}
				public String DH_OND_UTILPattern(){
				
					return "";
				
				}
				public String DH_OND_UTILOriginalDbColumnName(){
				
					return "DH_OND_UTIL";
				
				}

				
			    public Integer TMP_UTIL_OND;

				public Integer getTMP_UTIL_OND () {
					return this.TMP_UTIL_OND;
				}

				public Boolean TMP_UTIL_ONDIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ONDIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ONDLength(){
				    return null;
				}
				public Integer TMP_UTIL_ONDPrecision(){
				    return null;
				}
				public String TMP_UTIL_ONDDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ONDComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ONDPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ONDOriginalDbColumnName(){
				
					return "TMP_UTIL_OND";
				
				}

				
			    public String DH_SEP_UTIL;

				public String getDH_SEP_UTIL () {
					return this.DH_SEP_UTIL;
				}

				public Boolean DH_SEP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_SEP_UTILIsKey(){
				    return false;
				}
				public Integer DH_SEP_UTILLength(){
				    return null;
				}
				public Integer DH_SEP_UTILPrecision(){
				    return null;
				}
				public String DH_SEP_UTILDefault(){
				
					return null;
				
				}
				public String DH_SEP_UTILComment(){
				
				    return "";
				
				}
				public String DH_SEP_UTILPattern(){
				
					return "";
				
				}
				public String DH_SEP_UTILOriginalDbColumnName(){
				
					return "DH_SEP_UTIL";
				
				}

				
			    public Integer TMP_UTIL_SEP;

				public Integer getTMP_UTIL_SEP () {
					return this.TMP_UTIL_SEP;
				}

				public Boolean TMP_UTIL_SEPIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_SEPIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_SEPLength(){
				    return null;
				}
				public Integer TMP_UTIL_SEPPrecision(){
				    return null;
				}
				public String TMP_UTIL_SEPDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_SEPComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_SEPPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_SEPOriginalDbColumnName(){
				
					return "TMP_UTIL_SEP";
				
				}

				
			    public String DH_FAT_UTIL;

				public String getDH_FAT_UTIL () {
					return this.DH_FAT_UTIL;
				}

				public Boolean DH_FAT_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_FAT_UTILIsKey(){
				    return false;
				}
				public Integer DH_FAT_UTILLength(){
				    return null;
				}
				public Integer DH_FAT_UTILPrecision(){
				    return null;
				}
				public String DH_FAT_UTILDefault(){
				
					return null;
				
				}
				public String DH_FAT_UTILComment(){
				
				    return "";
				
				}
				public String DH_FAT_UTILPattern(){
				
					return "";
				
				}
				public String DH_FAT_UTILOriginalDbColumnName(){
				
					return "DH_FAT_UTIL";
				
				}

				
			    public Integer TMP_UTIL_FAT;

				public Integer getTMP_UTIL_FAT () {
					return this.TMP_UTIL_FAT;
				}

				public Boolean TMP_UTIL_FATIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_FATIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_FATLength(){
				    return null;
				}
				public Integer TMP_UTIL_FATPrecision(){
				    return null;
				}
				public String TMP_UTIL_FATDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_FATComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_FATPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_FATOriginalDbColumnName(){
				
					return "TMP_UTIL_FAT";
				
				}

				
			    public String DH_ROM_UTIL;

				public String getDH_ROM_UTIL () {
					return this.DH_ROM_UTIL;
				}

				public Boolean DH_ROM_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_ROM_UTILIsKey(){
				    return false;
				}
				public Integer DH_ROM_UTILLength(){
				    return null;
				}
				public Integer DH_ROM_UTILPrecision(){
				    return null;
				}
				public String DH_ROM_UTILDefault(){
				
					return null;
				
				}
				public String DH_ROM_UTILComment(){
				
				    return "";
				
				}
				public String DH_ROM_UTILPattern(){
				
					return "";
				
				}
				public String DH_ROM_UTILOriginalDbColumnName(){
				
					return "DH_ROM_UTIL";
				
				}

				
			    public Integer TMP_UTIL_ROM;

				public Integer getTMP_UTIL_ROM () {
					return this.TMP_UTIL_ROM;
				}

				public Boolean TMP_UTIL_ROMIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ROMIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ROMLength(){
				    return null;
				}
				public Integer TMP_UTIL_ROMPrecision(){
				    return null;
				}
				public String TMP_UTIL_ROMDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ROMComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ROMPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ROMOriginalDbColumnName(){
				
					return "TMP_UTIL_ROM";
				
				}

				
			    public Integer TMP_UTIL_TOT;

				public Integer getTMP_UTIL_TOT () {
					return this.TMP_UTIL_TOT;
				}

				public Boolean TMP_UTIL_TOTIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_TOTIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_TOTLength(){
				    return null;
				}
				public Integer TMP_UTIL_TOTPrecision(){
				    return null;
				}
				public String TMP_UTIL_TOTDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_TOTComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_TOTPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_TOTOriginalDbColumnName(){
				
					return "TMP_UTIL_TOT";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.LIB_AUT = this.LIB_AUT;
	            other.DH_CRI = this.DH_CRI;
	            other.DH_IMP = this.DH_IMP;
	            other.TMP_IMP = this.TMP_IMP;
	            other.DH_IMP_UTIL = this.DH_IMP_UTIL;
	            other.DH_LIB_UTIL = this.DH_LIB_UTIL;
	            other.TMP_UTIL_LIB = this.TMP_UTIL_LIB;
	            other.DH_OND_UTIL = this.DH_OND_UTIL;
	            other.TMP_UTIL_OND = this.TMP_UTIL_OND;
	            other.DH_SEP_UTIL = this.DH_SEP_UTIL;
	            other.TMP_UTIL_SEP = this.TMP_UTIL_SEP;
	            other.DH_FAT_UTIL = this.DH_FAT_UTIL;
	            other.TMP_UTIL_FAT = this.TMP_UTIL_FAT;
	            other.DH_ROM_UTIL = this.DH_ROM_UTIL;
	            other.TMP_UTIL_ROM = this.TMP_UTIL_ROM;
	            other.TMP_UTIL_TOT = this.TMP_UTIL_TOT;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",LIB_AUT="+LIB_AUT);
		sb.append(",DH_CRI="+DH_CRI);
		sb.append(",DH_IMP="+DH_IMP);
		sb.append(",TMP_IMP="+String.valueOf(TMP_IMP));
		sb.append(",DH_IMP_UTIL="+DH_IMP_UTIL);
		sb.append(",DH_LIB_UTIL="+DH_LIB_UTIL);
		sb.append(",TMP_UTIL_LIB="+String.valueOf(TMP_UTIL_LIB));
		sb.append(",DH_OND_UTIL="+DH_OND_UTIL);
		sb.append(",TMP_UTIL_OND="+String.valueOf(TMP_UTIL_OND));
		sb.append(",DH_SEP_UTIL="+DH_SEP_UTIL);
		sb.append(",TMP_UTIL_SEP="+String.valueOf(TMP_UTIL_SEP));
		sb.append(",DH_FAT_UTIL="+DH_FAT_UTIL);
		sb.append(",TMP_UTIL_FAT="+String.valueOf(TMP_UTIL_FAT));
		sb.append(",DH_ROM_UTIL="+DH_ROM_UTIL);
		sb.append(",TMP_UTIL_ROM="+String.valueOf(TMP_UTIL_ROM));
		sb.append(",TMP_UTIL_TOT="+String.valueOf(TMP_UTIL_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 40;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 12;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 12;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String LIB_AUT;

				public String getLIB_AUT () {
					return this.LIB_AUT;
				}

				public Boolean LIB_AUTIsNullable(){
				    return true;
				}
				public Boolean LIB_AUTIsKey(){
				    return false;
				}
				public Integer LIB_AUTLength(){
				    return null;
				}
				public Integer LIB_AUTPrecision(){
				    return null;
				}
				public String LIB_AUTDefault(){
				
					return null;
				
				}
				public String LIB_AUTComment(){
				
				    return "";
				
				}
				public String LIB_AUTPattern(){
				
					return "";
				
				}
				public String LIB_AUTOriginalDbColumnName(){
				
					return "LIB_AUT";
				
				}

				
			    public String DH_CRI;

				public String getDH_CRI () {
					return this.DH_CRI;
				}

				public Boolean DH_CRIIsNullable(){
				    return true;
				}
				public Boolean DH_CRIIsKey(){
				    return false;
				}
				public Integer DH_CRILength(){
				    return null;
				}
				public Integer DH_CRIPrecision(){
				    return null;
				}
				public String DH_CRIDefault(){
				
					return null;
				
				}
				public String DH_CRIComment(){
				
				    return "";
				
				}
				public String DH_CRIPattern(){
				
					return "";
				
				}
				public String DH_CRIOriginalDbColumnName(){
				
					return "DH_CRI";
				
				}

				
			    public String DH_IMP;

				public String getDH_IMP () {
					return this.DH_IMP;
				}

				public Boolean DH_IMPIsNullable(){
				    return true;
				}
				public Boolean DH_IMPIsKey(){
				    return false;
				}
				public Integer DH_IMPLength(){
				    return null;
				}
				public Integer DH_IMPPrecision(){
				    return null;
				}
				public String DH_IMPDefault(){
				
					return null;
				
				}
				public String DH_IMPComment(){
				
				    return "";
				
				}
				public String DH_IMPPattern(){
				
					return "";
				
				}
				public String DH_IMPOriginalDbColumnName(){
				
					return "DH_IMP";
				
				}

				
			    public Integer TMP_IMP;

				public Integer getTMP_IMP () {
					return this.TMP_IMP;
				}

				public Boolean TMP_IMPIsNullable(){
				    return true;
				}
				public Boolean TMP_IMPIsKey(){
				    return false;
				}
				public Integer TMP_IMPLength(){
				    return null;
				}
				public Integer TMP_IMPPrecision(){
				    return null;
				}
				public String TMP_IMPDefault(){
				
					return null;
				
				}
				public String TMP_IMPComment(){
				
				    return "";
				
				}
				public String TMP_IMPPattern(){
				
					return "";
				
				}
				public String TMP_IMPOriginalDbColumnName(){
				
					return "TMP_IMP";
				
				}

				
			    public String DH_IMP_UTIL;

				public String getDH_IMP_UTIL () {
					return this.DH_IMP_UTIL;
				}

				public Boolean DH_IMP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_IMP_UTILIsKey(){
				    return false;
				}
				public Integer DH_IMP_UTILLength(){
				    return null;
				}
				public Integer DH_IMP_UTILPrecision(){
				    return null;
				}
				public String DH_IMP_UTILDefault(){
				
					return null;
				
				}
				public String DH_IMP_UTILComment(){
				
				    return "";
				
				}
				public String DH_IMP_UTILPattern(){
				
					return "";
				
				}
				public String DH_IMP_UTILOriginalDbColumnName(){
				
					return "DH_IMP_UTIL";
				
				}

				
			    public String DH_LIB_UTIL;

				public String getDH_LIB_UTIL () {
					return this.DH_LIB_UTIL;
				}

				public Boolean DH_LIB_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_LIB_UTILIsKey(){
				    return false;
				}
				public Integer DH_LIB_UTILLength(){
				    return null;
				}
				public Integer DH_LIB_UTILPrecision(){
				    return null;
				}
				public String DH_LIB_UTILDefault(){
				
					return null;
				
				}
				public String DH_LIB_UTILComment(){
				
				    return "";
				
				}
				public String DH_LIB_UTILPattern(){
				
					return "";
				
				}
				public String DH_LIB_UTILOriginalDbColumnName(){
				
					return "DH_LIB_UTIL";
				
				}

				
			    public Integer TMP_UTIL_LIB;

				public Integer getTMP_UTIL_LIB () {
					return this.TMP_UTIL_LIB;
				}

				public Boolean TMP_UTIL_LIBIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_LIBIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_LIBLength(){
				    return null;
				}
				public Integer TMP_UTIL_LIBPrecision(){
				    return null;
				}
				public String TMP_UTIL_LIBDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_LIBComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_LIBPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_LIBOriginalDbColumnName(){
				
					return "TMP_UTIL_LIB";
				
				}

				
			    public String DH_OND_UTIL;

				public String getDH_OND_UTIL () {
					return this.DH_OND_UTIL;
				}

				public Boolean DH_OND_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_OND_UTILIsKey(){
				    return false;
				}
				public Integer DH_OND_UTILLength(){
				    return null;
				}
				public Integer DH_OND_UTILPrecision(){
				    return null;
				}
				public String DH_OND_UTILDefault(){
				
					return null;
				
				}
				public String DH_OND_UTILComment(){
				
				    return "";
				
				}
				public String DH_OND_UTILPattern(){
				
					return "";
				
				}
				public String DH_OND_UTILOriginalDbColumnName(){
				
					return "DH_OND_UTIL";
				
				}

				
			    public Integer TMP_UTIL_OND;

				public Integer getTMP_UTIL_OND () {
					return this.TMP_UTIL_OND;
				}

				public Boolean TMP_UTIL_ONDIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ONDIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ONDLength(){
				    return null;
				}
				public Integer TMP_UTIL_ONDPrecision(){
				    return null;
				}
				public String TMP_UTIL_ONDDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ONDComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ONDPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ONDOriginalDbColumnName(){
				
					return "TMP_UTIL_OND";
				
				}

				
			    public String DH_SEP_UTIL;

				public String getDH_SEP_UTIL () {
					return this.DH_SEP_UTIL;
				}

				public Boolean DH_SEP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_SEP_UTILIsKey(){
				    return false;
				}
				public Integer DH_SEP_UTILLength(){
				    return null;
				}
				public Integer DH_SEP_UTILPrecision(){
				    return null;
				}
				public String DH_SEP_UTILDefault(){
				
					return null;
				
				}
				public String DH_SEP_UTILComment(){
				
				    return "";
				
				}
				public String DH_SEP_UTILPattern(){
				
					return "";
				
				}
				public String DH_SEP_UTILOriginalDbColumnName(){
				
					return "DH_SEP_UTIL";
				
				}

				
			    public Integer TMP_UTIL_SEP;

				public Integer getTMP_UTIL_SEP () {
					return this.TMP_UTIL_SEP;
				}

				public Boolean TMP_UTIL_SEPIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_SEPIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_SEPLength(){
				    return null;
				}
				public Integer TMP_UTIL_SEPPrecision(){
				    return null;
				}
				public String TMP_UTIL_SEPDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_SEPComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_SEPPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_SEPOriginalDbColumnName(){
				
					return "TMP_UTIL_SEP";
				
				}

				
			    public String DH_FAT_UTIL;

				public String getDH_FAT_UTIL () {
					return this.DH_FAT_UTIL;
				}

				public Boolean DH_FAT_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_FAT_UTILIsKey(){
				    return false;
				}
				public Integer DH_FAT_UTILLength(){
				    return null;
				}
				public Integer DH_FAT_UTILPrecision(){
				    return null;
				}
				public String DH_FAT_UTILDefault(){
				
					return null;
				
				}
				public String DH_FAT_UTILComment(){
				
				    return "";
				
				}
				public String DH_FAT_UTILPattern(){
				
					return "";
				
				}
				public String DH_FAT_UTILOriginalDbColumnName(){
				
					return "DH_FAT_UTIL";
				
				}

				
			    public Integer TMP_UTIL_FAT;

				public Integer getTMP_UTIL_FAT () {
					return this.TMP_UTIL_FAT;
				}

				public Boolean TMP_UTIL_FATIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_FATIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_FATLength(){
				    return null;
				}
				public Integer TMP_UTIL_FATPrecision(){
				    return null;
				}
				public String TMP_UTIL_FATDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_FATComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_FATPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_FATOriginalDbColumnName(){
				
					return "TMP_UTIL_FAT";
				
				}

				
			    public String DH_ROM_UTIL;

				public String getDH_ROM_UTIL () {
					return this.DH_ROM_UTIL;
				}

				public Boolean DH_ROM_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_ROM_UTILIsKey(){
				    return false;
				}
				public Integer DH_ROM_UTILLength(){
				    return null;
				}
				public Integer DH_ROM_UTILPrecision(){
				    return null;
				}
				public String DH_ROM_UTILDefault(){
				
					return null;
				
				}
				public String DH_ROM_UTILComment(){
				
				    return "";
				
				}
				public String DH_ROM_UTILPattern(){
				
					return "";
				
				}
				public String DH_ROM_UTILOriginalDbColumnName(){
				
					return "DH_ROM_UTIL";
				
				}

				
			    public Integer TMP_UTIL_ROM;

				public Integer getTMP_UTIL_ROM () {
					return this.TMP_UTIL_ROM;
				}

				public Boolean TMP_UTIL_ROMIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ROMIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ROMLength(){
				    return null;
				}
				public Integer TMP_UTIL_ROMPrecision(){
				    return null;
				}
				public String TMP_UTIL_ROMDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ROMComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ROMPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ROMOriginalDbColumnName(){
				
					return "TMP_UTIL_ROM";
				
				}

				
			    public Integer TMP_UTIL_TOT;

				public Integer getTMP_UTIL_TOT () {
					return this.TMP_UTIL_TOT;
				}

				public Boolean TMP_UTIL_TOTIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_TOTIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_TOTLength(){
				    return null;
				}
				public Integer TMP_UTIL_TOTPrecision(){
				    return null;
				}
				public String TMP_UTIL_TOTDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_TOTComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_TOTPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_TOTOriginalDbColumnName(){
				
					return "TMP_UTIL_TOT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",LIB_AUT="+LIB_AUT);
		sb.append(",DH_CRI="+DH_CRI);
		sb.append(",DH_IMP="+DH_IMP);
		sb.append(",TMP_IMP="+String.valueOf(TMP_IMP));
		sb.append(",DH_IMP_UTIL="+DH_IMP_UTIL);
		sb.append(",DH_LIB_UTIL="+DH_LIB_UTIL);
		sb.append(",TMP_UTIL_LIB="+String.valueOf(TMP_UTIL_LIB));
		sb.append(",DH_OND_UTIL="+DH_OND_UTIL);
		sb.append(",TMP_UTIL_OND="+String.valueOf(TMP_UTIL_OND));
		sb.append(",DH_SEP_UTIL="+DH_SEP_UTIL);
		sb.append(",TMP_UTIL_SEP="+String.valueOf(TMP_UTIL_SEP));
		sb.append(",DH_FAT_UTIL="+DH_FAT_UTIL);
		sb.append(",TMP_UTIL_FAT="+String.valueOf(TMP_UTIL_FAT));
		sb.append(",DH_ROM_UTIL="+DH_ROM_UTIL);
		sb.append(",TMP_UTIL_ROM="+String.valueOf(TMP_UTIL_ROM));
		sb.append(",TMP_UTIL_TOT="+String.valueOf(TMP_UTIL_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_gr_media_tempo_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n    FGO_NUMPOK, \n    FGO_NUMDOC, \n    FGO_NUMFAT, \n    FGO_CODVEN,\n    LIB_AUT,\n    DH_CRI,\n    DH_IMP,"
+"\n    TIME_TO_SEC(TIMEDIFF(DH_IMP, DH_CRI)) TMP_IMP,\n    DH_IMP_UTIL,\n    DH_LIB_UTIL,\n    IF(DH_IMP_UTIL > DH_LIB_UTI"
+"L, 0, TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH_LIB_UTIL, DH_IMP_UTIL), INTERVAL DATEDIFF(DH_LIB_UTIL, DH_IMP_UTIL) * 14 + (WEEK("
+"DH_LIB_UTIL)-WEEK(DH_IMP_UTIL)) * 20 HOUR))) AS TMP_UTIL_LIB,\n    DH_OND_UTIL,\n    TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH_ON"
+"D_UTIL, DH_LIB_UTIL), INTERVAL DATEDIFF(DH_OND_UTIL, DH_LIB_UTIL) * 14 + (WEEK(DH_OND_UTIL)-WEEK(DH_LIB_UTIL)) * 20 HOUR"
+")) AS TMP_UTIL_OND,\n    DH_SEP_UTIL,\n    TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH_SEP_UTIL, DH_LIB_UTIL), INTERVAL DATEDIFF(DH"
+"_SEP_UTIL, DH_LIB_UTIL) * 14 + (WEEK(DH_SEP_UTIL)-WEEK(DH_LIB_UTIL)) * 20 HOUR)) AS TMP_UTIL_SEP,\n    DH_FAT_UTIL,\n   "
+"   TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH_FAT_UTIL, IFNULL(DH_SEP_UTIL, DH_LIB_UTIL)), INTERVAL DATEDIFF(DH_FAT_UTIL, IFNULL(D"
+"H_SEP_UTIL, DH_LIB_UTIL)) * 14 + (WEEK(DH_FAT_UTIL)-WEEK(IFNULL(DH_SEP_UTIL, DH_LIB_UTIL))) * 20 HOUR)) AS TMP_UTIL_FAT,"
+"\n    DH_ROM_UTIL,\n      TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH_ROM_UTIL, DH_FAT_UTIL), INTERVAL DATEDIFF(DH_ROM_UTIL, DH_FAT"
+"_UTIL) * 14 + (WEEK(DH_ROM_UTIL)-WEEK(DH_FAT_UTIL)) * 20 HOUR)) AS TMP_UTIL_ROM,\n      TIME_TO_SEC(DATE_SUB(TIMEDIFF(DH"
+"_ROM_UTIL, DH_IMP_UTIL), INTERVAL DATEDIFF(DH_ROM_UTIL, DH_IMP_UTIL) * 14 + (WEEK(DH_ROM_UTIL)-WEEK(DH_IMP_UTIL)) * 20 H"
+"OUR)) AS TMP_UTIL_TOT\nFROM (\n    SELECT\n        LIB_AUT,\n        FGO_NUMPOK,\n        FGO_CODVEN, \n        FGO_NUMD"
+"OC,\n        FGO_NUMFAT,\n        DH_CRI,\n        DH_IMP,\n        /*ALTERANDO PARA A SEGUNDA SUBSEQUENTE CASO A DATA E"
+"STEJA NUM FDS*/\n        IF(DAYOFWEEK(DH_IMP) = '1', CONCAT(DATE_ADD(DATE(DH_IMP), INTERVAL 1 DAY), ' ', '08:00:00'), IF"
+"(DAYOFWEEK(DH_IMP) = '7', CONCAT(DATE_ADD(DATE(DH_IMP), INTERVAL 2 DAY), ' ', '08:00:00'), IF(DATE_FORMAT(DH_IMP, '%H') "
+">= 18, CONCAT(DATE(DH_IMP), ' ', '18:00:00'), IF(DATE_FORMAT(DH_IMP, '%H') < 8, CONCAT(DATE(DH_IMP), ' ', '08:00:00'), D"
+"H_IMP)))) DH_IMP_UTIL,\n        -- DH_LIB,\n        IF(DAYOFWEEK(DH_LIB) = '1', CONCAT(DATE_ADD(DATE(DH_LIB), INTERVAL 1"
+" DAY), ' ', '08:00:00'), IF(DAYOFWEEK(DH_LIB) = '7', CONCAT(DATE_ADD(DATE(DH_LIB), INTERVAL 2 DAY), ' ', '08:00:00'), IF"
+"(DATE_FORMAT(DH_LIB, '%H') >= 18, CONCAT(DATE(DH_LIB), ' ', '18:00:00'), IF(DATE_FORMAT(DH_LIB, '%H') < 8, CONCAT(DATE(D"
+"H_LIB), ' ', '08:00:00'), DH_LIB)))) DH_LIB_UTIL,\n        -- DH_OND\n        IF(DAYOFWEEK(DH_OND) = '1', CONCAT(DATE_AD"
+"D(DATE(DH_OND), INTERVAL 1 DAY), ' ', '08:00:00'), IF(DAYOFWEEK(DH_OND) = '7', CONCAT(DATE_ADD(DATE(DH_OND), INTERVAL 2 "
+"DAY), ' ', '08:00:00'), IF(DATE_FORMAT(DH_OND, '%H') >= 18, CONCAT(DATE(DH_OND), ' ', '18:00:00'), IF(DATE_FORMAT(DH_OND"
+", '%H') < 8, CONCAT(DATE(DH_OND), ' ', '08:00:00'), DH_OND)))) DH_OND_UTIL,\n        -- DH_SEP,\n        IF(DAYOFWEEK(DH"
+"_SEP) = '1', CONCAT(DATE_ADD(DATE(DH_SEP), INTERVAL 1 DAY), ' ', '08:00:00'), IF(DAYOFWEEK(DH_SEP) = '7', CONCAT(DATE_AD"
+"D(DATE(DH_SEP), INTERVAL 2 DAY), ' ', '08:00:00'), IF(DATE_FORMAT(DH_SEP, '%H') >= 18, CONCAT(DATE(DH_SEP), ' ', '18:00:"
+"00'), IF(DATE_FORMAT(DH_SEP, '%H') < 8, CONCAT(DATE(DH_SEP), ' ', '08:00:00'), DH_SEP)))) DH_SEP_UTIL,\n        -- DH_FA"
+"T, \n        IF(DAYOFWEEK(DH_FAT) = '1', CONCAT(DATE_ADD(DATE(DH_FAT), INTERVAL 1 DAY), ' ', '08:00:00'), IF(DAYOFWEEK(D"
+"H_FAT) = '7', CONCAT(DATE_ADD(DATE(DH_FAT), INTERVAL 2 DAY), ' ', '08:00:00'), IF(DATE_FORMAT(DH_FAT, '%H') >= 18, CONCA"
+"T(DATE(DH_FAT), ' ', '18:00:00'), IF(DATE_FORMAT(DH_FAT, '%H') < 8, CONCAT(DATE(DH_FAT), ' ', '08:00:00'), DH_FAT)))) DH"
+"_FAT_UTIL,\n        -- DH_ROM, \n        IF(DAYOFWEEK(DH_ROM) = '1', CONCAT(DATE_ADD(DATE(DH_ROM), INTERVAL 1 DAY), ' ',"
+" '08:00:00'), IF(DAYOFWEEK(DH_ROM) = '7', CONCAT(DATE_ADD(DATE(DH_ROM), INTERVAL 2 DAY), ' ', '08:00:00'), IF(DATE_FORMA"
+"T(DH_ROM, '%H') >= 18, CONCAT(DATE(DH_ROM), ' ', '18:00:00'), IF(DATE_FORMAT(DH_ROM, '%H') < 8, CONCAT(DATE(DH_ROM), ' '"
+", '08:00:00'), DH_ROM)))) DH_ROM_UTIL\n    FROM(\n        SELECT FG.FGO_NUMPOK, FGO_CODVEN, FG.FGO_NUMDOC, FG.FGO_NUMFAT"
+", \n        /*LISTANDO AS DATAS NECESSÁRIAS*/\n        IF(FG.FGO_CODVEN = FG.FGO_OPELIB, 'S', 'N') LIB_AUT,\n        CON"
+"VERT(EG.FGO_DH_IMP, CHAR) DH_IMP, \n        CONCAT(FG.FGO_DTAENT, ' ', FG.FGO_HORENT) DH_CRI,  \n        CONCAT(FG.FGO_D"
+"TALIB, ' ', FG.FGO_HORLIB) DH_LIB, \n        CONCAT(EG.FGO_DTIMSE, ' ', EG.FGO_HRIMSE) DH_OND,\n        CONCAT(EG.FGO_DT"
+"BXSE, ' ', EG.FGO_HRBXSE) DH_SEP, \n        CONCAT(MG.GER_DTAENT, ' ', MG.GER_HORENT) DH_FAT, \n        CONCAT(MG.GER_DT"
+"AROM, ' ', MG.GER_HORROM) DH_ROM\n        FROM FATGOR FG\n        INNER JOIN CADOPE CO ON FG.FGO_CODVEN = CO.OPE_CODOPE "
+"\n        INNER JOIN EXTGOR EG ON EG.FGO_SEQFGO = FG.AUTOINCREM\n        INNER JOIN MOVGER AS MG ON\n            FG.FGO_"
+"NUMFAT = MG.GER_NUMDOC                \n            AND FG.FGO_TIPFAT = MG.GER_ESPDOC\n            AND FG.FGO_CODEMP = M"
+"G.GER_CODEMP\n        WHERE EG.FGO_DH_IMP >= SUBDATE(CURDATE(), 10)\n--        AND MG.GER_DTAROM <= CURDATE()\n        A"
+"ND FGO_CODEMP = '001'\n        AND CO.OPE_CODDEP = '014'\n        AND MG.GER_DTAROM IS NOT NULL\n    ) TB\n) TB2;\n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.FGO_NUMPOK = null;
							} else {
	                         		
        	row1.FGO_NUMPOK = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.FGO_NUMDOC = null;
							} else {
	                         		
        	row1.FGO_NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.FGO_NUMFAT = null;
							} else {
	                         		
        	row1.FGO_NUMFAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.FGO_CODVEN = null;
							} else {
	                         		
        	row1.FGO_CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.LIB_AUT = null;
							} else {
	                         		
        	row1.LIB_AUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.DH_CRI = null;
							} else {
	                         		
        	row1.DH_CRI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.DH_IMP = null;
							} else {
	                         		
        	row1.DH_IMP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.TMP_IMP = null;
							} else {
		                          
            row1.TMP_IMP = rs_tDBInput_2.getInt(8);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_IMP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.DH_IMP_UTIL = null;
							} else {
	                         		
        	row1.DH_IMP_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.DH_LIB_UTIL = null;
							} else {
	                         		
        	row1.DH_LIB_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.TMP_UTIL_LIB = null;
							} else {
		                          
            row1.TMP_UTIL_LIB = rs_tDBInput_2.getInt(11);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_LIB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.DH_OND_UTIL = null;
							} else {
	                         		
        	row1.DH_OND_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.TMP_UTIL_OND = null;
							} else {
		                          
            row1.TMP_UTIL_OND = rs_tDBInput_2.getInt(13);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_OND = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.DH_SEP_UTIL = null;
							} else {
	                         		
        	row1.DH_SEP_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.TMP_UTIL_SEP = null;
							} else {
		                          
            row1.TMP_UTIL_SEP = rs_tDBInput_2.getInt(15);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_SEP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.DH_FAT_UTIL = null;
							} else {
	                         		
        	row1.DH_FAT_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row1.TMP_UTIL_FAT = null;
							} else {
		                          
            row1.TMP_UTIL_FAT = rs_tDBInput_2.getInt(17);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_FAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row1.DH_ROM_UTIL = null;
							} else {
	                         		
        	row1.DH_ROM_UTIL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row1.TMP_UTIL_ROM = null;
							} else {
		                          
            row1.TMP_UTIL_ROM = rs_tDBInput_2.getInt(19);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_ROM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row1.TMP_UTIL_TOT = null;
							} else {
		                          
            row1.TMP_UTIL_TOT = rs_tDBInput_2.getInt(20);
            if(rs_tDBInput_2.wasNull()){
                    row1.TMP_UTIL_TOT = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.FGO_NUMPOK = row1.FGO_NUMPOK ;
out1_tmp.FGO_NUMDOC = row1.FGO_NUMDOC ;
out1_tmp.FGO_NUMFAT = row1.FGO_NUMFAT ;
out1_tmp.FGO_CODVEN = row1.FGO_CODVEN ;
out1_tmp.LIB_AUT = row1.LIB_AUT ;
out1_tmp.DH_CRI = row1.DH_CRI ;
out1_tmp.DH_IMP = row1.DH_IMP ;
out1_tmp.TMP_IMP = row1.TMP_IMP ;
out1_tmp.DH_IMP_UTIL = row1.DH_IMP_UTIL ;
out1_tmp.DH_LIB_UTIL = row1.DH_LIB_UTIL ;
out1_tmp.TMP_UTIL_LIB = row1.TMP_UTIL_LIB ;
out1_tmp.DH_OND_UTIL = row1.DH_OND_UTIL ;
out1_tmp.TMP_UTIL_OND = row1.TMP_UTIL_OND ;
out1_tmp.DH_SEP_UTIL = row1.DH_SEP_UTIL ;
out1_tmp.TMP_UTIL_SEP = row1.TMP_UTIL_SEP ;
out1_tmp.DH_FAT_UTIL = row1.DH_FAT_UTIL ;
out1_tmp.TMP_UTIL_FAT = row1.TMP_UTIL_FAT ;
out1_tmp.DH_ROM_UTIL = row1.DH_ROM_UTIL ;
out1_tmp.TMP_UTIL_ROM = row1.TMP_UTIL_ROM ;
out1_tmp.TMP_UTIL_TOT = row1.TMP_UTIL_TOT ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



    
		out1Struct oneRow_tHashOutput_2 = new out1Struct();
				
					oneRow_tHashOutput_2.FGO_NUMPOK = out1.FGO_NUMPOK;
					oneRow_tHashOutput_2.FGO_NUMDOC = out1.FGO_NUMDOC;
					oneRow_tHashOutput_2.FGO_NUMFAT = out1.FGO_NUMFAT;
					oneRow_tHashOutput_2.FGO_CODVEN = out1.FGO_CODVEN;
					oneRow_tHashOutput_2.LIB_AUT = out1.LIB_AUT;
					oneRow_tHashOutput_2.DH_CRI = out1.DH_CRI;
					oneRow_tHashOutput_2.DH_IMP = out1.DH_IMP;
					oneRow_tHashOutput_2.TMP_IMP = out1.TMP_IMP;
					oneRow_tHashOutput_2.DH_IMP_UTIL = out1.DH_IMP_UTIL;
					oneRow_tHashOutput_2.DH_LIB_UTIL = out1.DH_LIB_UTIL;
					oneRow_tHashOutput_2.TMP_UTIL_LIB = out1.TMP_UTIL_LIB;
					oneRow_tHashOutput_2.DH_OND_UTIL = out1.DH_OND_UTIL;
					oneRow_tHashOutput_2.TMP_UTIL_OND = out1.TMP_UTIL_OND;
					oneRow_tHashOutput_2.DH_SEP_UTIL = out1.DH_SEP_UTIL;
					oneRow_tHashOutput_2.TMP_UTIL_SEP = out1.TMP_UTIL_SEP;
					oneRow_tHashOutput_2.DH_FAT_UTIL = out1.DH_FAT_UTIL;
					oneRow_tHashOutput_2.TMP_UTIL_FAT = out1.TMP_UTIL_FAT;
					oneRow_tHashOutput_2.DH_ROM_UTIL = out1.DH_ROM_UTIL;
					oneRow_tHashOutput_2.TMP_UTIL_ROM = out1.TMP_UTIL_ROM;
					oneRow_tHashOutput_2.TMP_UTIL_TOT = out1.TMP_UTIL_TOT;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 40;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 12;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 12;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String LIB_AUT;

				public String getLIB_AUT () {
					return this.LIB_AUT;
				}

				public Boolean LIB_AUTIsNullable(){
				    return true;
				}
				public Boolean LIB_AUTIsKey(){
				    return false;
				}
				public Integer LIB_AUTLength(){
				    return null;
				}
				public Integer LIB_AUTPrecision(){
				    return null;
				}
				public String LIB_AUTDefault(){
				
					return null;
				
				}
				public String LIB_AUTComment(){
				
				    return "";
				
				}
				public String LIB_AUTPattern(){
				
					return "";
				
				}
				public String LIB_AUTOriginalDbColumnName(){
				
					return "LIB_AUT";
				
				}

				
			    public String DH_CRI;

				public String getDH_CRI () {
					return this.DH_CRI;
				}

				public Boolean DH_CRIIsNullable(){
				    return true;
				}
				public Boolean DH_CRIIsKey(){
				    return false;
				}
				public Integer DH_CRILength(){
				    return null;
				}
				public Integer DH_CRIPrecision(){
				    return null;
				}
				public String DH_CRIDefault(){
				
					return null;
				
				}
				public String DH_CRIComment(){
				
				    return "";
				
				}
				public String DH_CRIPattern(){
				
					return "";
				
				}
				public String DH_CRIOriginalDbColumnName(){
				
					return "DH_CRI";
				
				}

				
			    public String DH_IMP;

				public String getDH_IMP () {
					return this.DH_IMP;
				}

				public Boolean DH_IMPIsNullable(){
				    return true;
				}
				public Boolean DH_IMPIsKey(){
				    return false;
				}
				public Integer DH_IMPLength(){
				    return null;
				}
				public Integer DH_IMPPrecision(){
				    return null;
				}
				public String DH_IMPDefault(){
				
					return null;
				
				}
				public String DH_IMPComment(){
				
				    return "";
				
				}
				public String DH_IMPPattern(){
				
					return "";
				
				}
				public String DH_IMPOriginalDbColumnName(){
				
					return "DH_IMP";
				
				}

				
			    public Integer TMP_IMP;

				public Integer getTMP_IMP () {
					return this.TMP_IMP;
				}

				public Boolean TMP_IMPIsNullable(){
				    return true;
				}
				public Boolean TMP_IMPIsKey(){
				    return false;
				}
				public Integer TMP_IMPLength(){
				    return null;
				}
				public Integer TMP_IMPPrecision(){
				    return null;
				}
				public String TMP_IMPDefault(){
				
					return null;
				
				}
				public String TMP_IMPComment(){
				
				    return "";
				
				}
				public String TMP_IMPPattern(){
				
					return "";
				
				}
				public String TMP_IMPOriginalDbColumnName(){
				
					return "TMP_IMP";
				
				}

				
			    public String DH_IMP_UTIL;

				public String getDH_IMP_UTIL () {
					return this.DH_IMP_UTIL;
				}

				public Boolean DH_IMP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_IMP_UTILIsKey(){
				    return false;
				}
				public Integer DH_IMP_UTILLength(){
				    return null;
				}
				public Integer DH_IMP_UTILPrecision(){
				    return null;
				}
				public String DH_IMP_UTILDefault(){
				
					return null;
				
				}
				public String DH_IMP_UTILComment(){
				
				    return "";
				
				}
				public String DH_IMP_UTILPattern(){
				
					return "";
				
				}
				public String DH_IMP_UTILOriginalDbColumnName(){
				
					return "DH_IMP_UTIL";
				
				}

				
			    public String DH_LIB_UTIL;

				public String getDH_LIB_UTIL () {
					return this.DH_LIB_UTIL;
				}

				public Boolean DH_LIB_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_LIB_UTILIsKey(){
				    return false;
				}
				public Integer DH_LIB_UTILLength(){
				    return null;
				}
				public Integer DH_LIB_UTILPrecision(){
				    return null;
				}
				public String DH_LIB_UTILDefault(){
				
					return null;
				
				}
				public String DH_LIB_UTILComment(){
				
				    return "";
				
				}
				public String DH_LIB_UTILPattern(){
				
					return "";
				
				}
				public String DH_LIB_UTILOriginalDbColumnName(){
				
					return "DH_LIB_UTIL";
				
				}

				
			    public Integer TMP_UTIL_LIB;

				public Integer getTMP_UTIL_LIB () {
					return this.TMP_UTIL_LIB;
				}

				public Boolean TMP_UTIL_LIBIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_LIBIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_LIBLength(){
				    return null;
				}
				public Integer TMP_UTIL_LIBPrecision(){
				    return null;
				}
				public String TMP_UTIL_LIBDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_LIBComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_LIBPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_LIBOriginalDbColumnName(){
				
					return "TMP_UTIL_LIB";
				
				}

				
			    public String DH_OND_UTIL;

				public String getDH_OND_UTIL () {
					return this.DH_OND_UTIL;
				}

				public Boolean DH_OND_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_OND_UTILIsKey(){
				    return false;
				}
				public Integer DH_OND_UTILLength(){
				    return null;
				}
				public Integer DH_OND_UTILPrecision(){
				    return null;
				}
				public String DH_OND_UTILDefault(){
				
					return null;
				
				}
				public String DH_OND_UTILComment(){
				
				    return "";
				
				}
				public String DH_OND_UTILPattern(){
				
					return "";
				
				}
				public String DH_OND_UTILOriginalDbColumnName(){
				
					return "DH_OND_UTIL";
				
				}

				
			    public Integer TMP_UTIL_OND;

				public Integer getTMP_UTIL_OND () {
					return this.TMP_UTIL_OND;
				}

				public Boolean TMP_UTIL_ONDIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ONDIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ONDLength(){
				    return null;
				}
				public Integer TMP_UTIL_ONDPrecision(){
				    return null;
				}
				public String TMP_UTIL_ONDDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ONDComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ONDPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ONDOriginalDbColumnName(){
				
					return "TMP_UTIL_OND";
				
				}

				
			    public String DH_SEP_UTIL;

				public String getDH_SEP_UTIL () {
					return this.DH_SEP_UTIL;
				}

				public Boolean DH_SEP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_SEP_UTILIsKey(){
				    return false;
				}
				public Integer DH_SEP_UTILLength(){
				    return null;
				}
				public Integer DH_SEP_UTILPrecision(){
				    return null;
				}
				public String DH_SEP_UTILDefault(){
				
					return null;
				
				}
				public String DH_SEP_UTILComment(){
				
				    return "";
				
				}
				public String DH_SEP_UTILPattern(){
				
					return "";
				
				}
				public String DH_SEP_UTILOriginalDbColumnName(){
				
					return "DH_SEP_UTIL";
				
				}

				
			    public Integer TMP_UTIL_SEP;

				public Integer getTMP_UTIL_SEP () {
					return this.TMP_UTIL_SEP;
				}

				public Boolean TMP_UTIL_SEPIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_SEPIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_SEPLength(){
				    return null;
				}
				public Integer TMP_UTIL_SEPPrecision(){
				    return null;
				}
				public String TMP_UTIL_SEPDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_SEPComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_SEPPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_SEPOriginalDbColumnName(){
				
					return "TMP_UTIL_SEP";
				
				}

				
			    public String DH_FAT_UTIL;

				public String getDH_FAT_UTIL () {
					return this.DH_FAT_UTIL;
				}

				public Boolean DH_FAT_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_FAT_UTILIsKey(){
				    return false;
				}
				public Integer DH_FAT_UTILLength(){
				    return null;
				}
				public Integer DH_FAT_UTILPrecision(){
				    return null;
				}
				public String DH_FAT_UTILDefault(){
				
					return null;
				
				}
				public String DH_FAT_UTILComment(){
				
				    return "";
				
				}
				public String DH_FAT_UTILPattern(){
				
					return "";
				
				}
				public String DH_FAT_UTILOriginalDbColumnName(){
				
					return "DH_FAT_UTIL";
				
				}

				
			    public Integer TMP_UTIL_FAT;

				public Integer getTMP_UTIL_FAT () {
					return this.TMP_UTIL_FAT;
				}

				public Boolean TMP_UTIL_FATIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_FATIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_FATLength(){
				    return null;
				}
				public Integer TMP_UTIL_FATPrecision(){
				    return null;
				}
				public String TMP_UTIL_FATDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_FATComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_FATPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_FATOriginalDbColumnName(){
				
					return "TMP_UTIL_FAT";
				
				}

				
			    public String DH_ROM_UTIL;

				public String getDH_ROM_UTIL () {
					return this.DH_ROM_UTIL;
				}

				public Boolean DH_ROM_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_ROM_UTILIsKey(){
				    return false;
				}
				public Integer DH_ROM_UTILLength(){
				    return null;
				}
				public Integer DH_ROM_UTILPrecision(){
				    return null;
				}
				public String DH_ROM_UTILDefault(){
				
					return null;
				
				}
				public String DH_ROM_UTILComment(){
				
				    return "";
				
				}
				public String DH_ROM_UTILPattern(){
				
					return "";
				
				}
				public String DH_ROM_UTILOriginalDbColumnName(){
				
					return "DH_ROM_UTIL";
				
				}

				
			    public Integer TMP_UTIL_ROM;

				public Integer getTMP_UTIL_ROM () {
					return this.TMP_UTIL_ROM;
				}

				public Boolean TMP_UTIL_ROMIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ROMIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ROMLength(){
				    return null;
				}
				public Integer TMP_UTIL_ROMPrecision(){
				    return null;
				}
				public String TMP_UTIL_ROMDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ROMComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ROMPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ROMOriginalDbColumnName(){
				
					return "TMP_UTIL_ROM";
				
				}

				
			    public Integer TMP_UTIL_TOT;

				public Integer getTMP_UTIL_TOT () {
					return this.TMP_UTIL_TOT;
				}

				public Boolean TMP_UTIL_TOTIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_TOTIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_TOTLength(){
				    return null;
				}
				public Integer TMP_UTIL_TOTPrecision(){
				    return null;
				}
				public String TMP_UTIL_TOTDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_TOTComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_TOTPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_TOTOriginalDbColumnName(){
				
					return "TMP_UTIL_TOT";
				
				}

				
			    public java.util.Date DT_ULT_ATU;

				public java.util.Date getDT_ULT_ATU () {
					return this.DT_ULT_ATU;
				}

				public Boolean DT_ULT_ATUIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_ATUIsKey(){
				    return false;
				}
				public Integer DT_ULT_ATULength(){
				    return null;
				}
				public Integer DT_ULT_ATUPrecision(){
				    return null;
				}
				public String DT_ULT_ATUDefault(){
				
					return null;
				
				}
				public String DT_ULT_ATUComment(){
				
				    return "";
				
				}
				public String DT_ULT_ATUPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULT_ATUOriginalDbColumnName(){
				
					return "DT_ULT_ATU";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FGO_NUMPOK == null) ? 0 : this.FGO_NUMPOK.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.FGO_NUMPOK == null) {
							if (other.FGO_NUMPOK != null)
								return false;
						
						} else if (!this.FGO_NUMPOK.equals(other.FGO_NUMPOK))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            other.FGO_NUMDOC = this.FGO_NUMDOC;
	            other.FGO_NUMFAT = this.FGO_NUMFAT;
	            other.FGO_CODVEN = this.FGO_CODVEN;
	            other.LIB_AUT = this.LIB_AUT;
	            other.DH_CRI = this.DH_CRI;
	            other.DH_IMP = this.DH_IMP;
	            other.TMP_IMP = this.TMP_IMP;
	            other.DH_IMP_UTIL = this.DH_IMP_UTIL;
	            other.DH_LIB_UTIL = this.DH_LIB_UTIL;
	            other.TMP_UTIL_LIB = this.TMP_UTIL_LIB;
	            other.DH_OND_UTIL = this.DH_OND_UTIL;
	            other.TMP_UTIL_OND = this.TMP_UTIL_OND;
	            other.DH_SEP_UTIL = this.DH_SEP_UTIL;
	            other.TMP_UTIL_SEP = this.TMP_UTIL_SEP;
	            other.DH_FAT_UTIL = this.DH_FAT_UTIL;
	            other.TMP_UTIL_FAT = this.TMP_UTIL_FAT;
	            other.DH_ROM_UTIL = this.DH_ROM_UTIL;
	            other.TMP_UTIL_ROM = this.TMP_UTIL_ROM;
	            other.TMP_UTIL_TOT = this.TMP_UTIL_TOT;
	            other.DT_ULT_ATU = this.DT_ULT_ATU;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.FGO_NUMPOK = this.FGO_NUMPOK;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
					this.DT_ULT_ATU = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
					this.DT_ULT_ATU = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_ATU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_ATU,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",LIB_AUT="+LIB_AUT);
		sb.append(",DH_CRI="+DH_CRI);
		sb.append(",DH_IMP="+DH_IMP);
		sb.append(",TMP_IMP="+String.valueOf(TMP_IMP));
		sb.append(",DH_IMP_UTIL="+DH_IMP_UTIL);
		sb.append(",DH_LIB_UTIL="+DH_LIB_UTIL);
		sb.append(",TMP_UTIL_LIB="+String.valueOf(TMP_UTIL_LIB));
		sb.append(",DH_OND_UTIL="+DH_OND_UTIL);
		sb.append(",TMP_UTIL_OND="+String.valueOf(TMP_UTIL_OND));
		sb.append(",DH_SEP_UTIL="+DH_SEP_UTIL);
		sb.append(",TMP_UTIL_SEP="+String.valueOf(TMP_UTIL_SEP));
		sb.append(",DH_FAT_UTIL="+DH_FAT_UTIL);
		sb.append(",TMP_UTIL_FAT="+String.valueOf(TMP_UTIL_FAT));
		sb.append(",DH_ROM_UTIL="+DH_ROM_UTIL);
		sb.append(",TMP_UTIL_ROM="+String.valueOf(TMP_UTIL_ROM));
		sb.append(",TMP_UTIL_TOT="+String.valueOf(TMP_UTIL_TOT));
		sb.append(",DT_ULT_ATU="+String.valueOf(DT_ULT_ATU));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FGO_NUMPOK, other.FGO_NUMPOK);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String FGO_NUMPOK;

				public String getFGO_NUMPOK () {
					return this.FGO_NUMPOK;
				}

				public Boolean FGO_NUMPOKIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMPOKIsKey(){
				    return true;
				}
				public Integer FGO_NUMPOKLength(){
				    return 40;
				}
				public Integer FGO_NUMPOKPrecision(){
				    return null;
				}
				public String FGO_NUMPOKDefault(){
				
					return null;
				
				}
				public String FGO_NUMPOKComment(){
				
				    return "";
				
				}
				public String FGO_NUMPOKPattern(){
				
					return "";
				
				}
				public String FGO_NUMPOKOriginalDbColumnName(){
				
					return "FGO_NUMPOK";
				
				}

				
			    public String FGO_NUMDOC;

				public String getFGO_NUMDOC () {
					return this.FGO_NUMDOC;
				}

				public Boolean FGO_NUMDOCIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMDOCIsKey(){
				    return false;
				}
				public Integer FGO_NUMDOCLength(){
				    return 12;
				}
				public Integer FGO_NUMDOCPrecision(){
				    return null;
				}
				public String FGO_NUMDOCDefault(){
				
					return null;
				
				}
				public String FGO_NUMDOCComment(){
				
				    return "";
				
				}
				public String FGO_NUMDOCPattern(){
				
					return "";
				
				}
				public String FGO_NUMDOCOriginalDbColumnName(){
				
					return "FGO_NUMDOC";
				
				}

				
			    public String FGO_NUMFAT;

				public String getFGO_NUMFAT () {
					return this.FGO_NUMFAT;
				}

				public Boolean FGO_NUMFATIsNullable(){
				    return true;
				}
				public Boolean FGO_NUMFATIsKey(){
				    return false;
				}
				public Integer FGO_NUMFATLength(){
				    return 12;
				}
				public Integer FGO_NUMFATPrecision(){
				    return null;
				}
				public String FGO_NUMFATDefault(){
				
					return null;
				
				}
				public String FGO_NUMFATComment(){
				
				    return "";
				
				}
				public String FGO_NUMFATPattern(){
				
					return "";
				
				}
				public String FGO_NUMFATOriginalDbColumnName(){
				
					return "FGO_NUMFAT";
				
				}

				
			    public String FGO_CODVEN;

				public String getFGO_CODVEN () {
					return this.FGO_CODVEN;
				}

				public Boolean FGO_CODVENIsNullable(){
				    return true;
				}
				public Boolean FGO_CODVENIsKey(){
				    return false;
				}
				public Integer FGO_CODVENLength(){
				    return null;
				}
				public Integer FGO_CODVENPrecision(){
				    return null;
				}
				public String FGO_CODVENDefault(){
				
					return null;
				
				}
				public String FGO_CODVENComment(){
				
				    return "";
				
				}
				public String FGO_CODVENPattern(){
				
					return "";
				
				}
				public String FGO_CODVENOriginalDbColumnName(){
				
					return "FGO_CODVEN";
				
				}

				
			    public String LIB_AUT;

				public String getLIB_AUT () {
					return this.LIB_AUT;
				}

				public Boolean LIB_AUTIsNullable(){
				    return true;
				}
				public Boolean LIB_AUTIsKey(){
				    return false;
				}
				public Integer LIB_AUTLength(){
				    return null;
				}
				public Integer LIB_AUTPrecision(){
				    return null;
				}
				public String LIB_AUTDefault(){
				
					return null;
				
				}
				public String LIB_AUTComment(){
				
				    return "";
				
				}
				public String LIB_AUTPattern(){
				
					return "";
				
				}
				public String LIB_AUTOriginalDbColumnName(){
				
					return "LIB_AUT";
				
				}

				
			    public String DH_CRI;

				public String getDH_CRI () {
					return this.DH_CRI;
				}

				public Boolean DH_CRIIsNullable(){
				    return true;
				}
				public Boolean DH_CRIIsKey(){
				    return false;
				}
				public Integer DH_CRILength(){
				    return null;
				}
				public Integer DH_CRIPrecision(){
				    return null;
				}
				public String DH_CRIDefault(){
				
					return null;
				
				}
				public String DH_CRIComment(){
				
				    return "";
				
				}
				public String DH_CRIPattern(){
				
					return "";
				
				}
				public String DH_CRIOriginalDbColumnName(){
				
					return "DH_CRI";
				
				}

				
			    public String DH_IMP;

				public String getDH_IMP () {
					return this.DH_IMP;
				}

				public Boolean DH_IMPIsNullable(){
				    return true;
				}
				public Boolean DH_IMPIsKey(){
				    return false;
				}
				public Integer DH_IMPLength(){
				    return null;
				}
				public Integer DH_IMPPrecision(){
				    return null;
				}
				public String DH_IMPDefault(){
				
					return null;
				
				}
				public String DH_IMPComment(){
				
				    return "";
				
				}
				public String DH_IMPPattern(){
				
					return "";
				
				}
				public String DH_IMPOriginalDbColumnName(){
				
					return "DH_IMP";
				
				}

				
			    public Integer TMP_IMP;

				public Integer getTMP_IMP () {
					return this.TMP_IMP;
				}

				public Boolean TMP_IMPIsNullable(){
				    return true;
				}
				public Boolean TMP_IMPIsKey(){
				    return false;
				}
				public Integer TMP_IMPLength(){
				    return null;
				}
				public Integer TMP_IMPPrecision(){
				    return null;
				}
				public String TMP_IMPDefault(){
				
					return null;
				
				}
				public String TMP_IMPComment(){
				
				    return "";
				
				}
				public String TMP_IMPPattern(){
				
					return "";
				
				}
				public String TMP_IMPOriginalDbColumnName(){
				
					return "TMP_IMP";
				
				}

				
			    public String DH_IMP_UTIL;

				public String getDH_IMP_UTIL () {
					return this.DH_IMP_UTIL;
				}

				public Boolean DH_IMP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_IMP_UTILIsKey(){
				    return false;
				}
				public Integer DH_IMP_UTILLength(){
				    return null;
				}
				public Integer DH_IMP_UTILPrecision(){
				    return null;
				}
				public String DH_IMP_UTILDefault(){
				
					return null;
				
				}
				public String DH_IMP_UTILComment(){
				
				    return "";
				
				}
				public String DH_IMP_UTILPattern(){
				
					return "";
				
				}
				public String DH_IMP_UTILOriginalDbColumnName(){
				
					return "DH_IMP_UTIL";
				
				}

				
			    public String DH_LIB_UTIL;

				public String getDH_LIB_UTIL () {
					return this.DH_LIB_UTIL;
				}

				public Boolean DH_LIB_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_LIB_UTILIsKey(){
				    return false;
				}
				public Integer DH_LIB_UTILLength(){
				    return null;
				}
				public Integer DH_LIB_UTILPrecision(){
				    return null;
				}
				public String DH_LIB_UTILDefault(){
				
					return null;
				
				}
				public String DH_LIB_UTILComment(){
				
				    return "";
				
				}
				public String DH_LIB_UTILPattern(){
				
					return "";
				
				}
				public String DH_LIB_UTILOriginalDbColumnName(){
				
					return "DH_LIB_UTIL";
				
				}

				
			    public Integer TMP_UTIL_LIB;

				public Integer getTMP_UTIL_LIB () {
					return this.TMP_UTIL_LIB;
				}

				public Boolean TMP_UTIL_LIBIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_LIBIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_LIBLength(){
				    return null;
				}
				public Integer TMP_UTIL_LIBPrecision(){
				    return null;
				}
				public String TMP_UTIL_LIBDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_LIBComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_LIBPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_LIBOriginalDbColumnName(){
				
					return "TMP_UTIL_LIB";
				
				}

				
			    public String DH_OND_UTIL;

				public String getDH_OND_UTIL () {
					return this.DH_OND_UTIL;
				}

				public Boolean DH_OND_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_OND_UTILIsKey(){
				    return false;
				}
				public Integer DH_OND_UTILLength(){
				    return null;
				}
				public Integer DH_OND_UTILPrecision(){
				    return null;
				}
				public String DH_OND_UTILDefault(){
				
					return null;
				
				}
				public String DH_OND_UTILComment(){
				
				    return "";
				
				}
				public String DH_OND_UTILPattern(){
				
					return "";
				
				}
				public String DH_OND_UTILOriginalDbColumnName(){
				
					return "DH_OND_UTIL";
				
				}

				
			    public Integer TMP_UTIL_OND;

				public Integer getTMP_UTIL_OND () {
					return this.TMP_UTIL_OND;
				}

				public Boolean TMP_UTIL_ONDIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ONDIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ONDLength(){
				    return null;
				}
				public Integer TMP_UTIL_ONDPrecision(){
				    return null;
				}
				public String TMP_UTIL_ONDDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ONDComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ONDPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ONDOriginalDbColumnName(){
				
					return "TMP_UTIL_OND";
				
				}

				
			    public String DH_SEP_UTIL;

				public String getDH_SEP_UTIL () {
					return this.DH_SEP_UTIL;
				}

				public Boolean DH_SEP_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_SEP_UTILIsKey(){
				    return false;
				}
				public Integer DH_SEP_UTILLength(){
				    return null;
				}
				public Integer DH_SEP_UTILPrecision(){
				    return null;
				}
				public String DH_SEP_UTILDefault(){
				
					return null;
				
				}
				public String DH_SEP_UTILComment(){
				
				    return "";
				
				}
				public String DH_SEP_UTILPattern(){
				
					return "";
				
				}
				public String DH_SEP_UTILOriginalDbColumnName(){
				
					return "DH_SEP_UTIL";
				
				}

				
			    public Integer TMP_UTIL_SEP;

				public Integer getTMP_UTIL_SEP () {
					return this.TMP_UTIL_SEP;
				}

				public Boolean TMP_UTIL_SEPIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_SEPIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_SEPLength(){
				    return null;
				}
				public Integer TMP_UTIL_SEPPrecision(){
				    return null;
				}
				public String TMP_UTIL_SEPDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_SEPComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_SEPPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_SEPOriginalDbColumnName(){
				
					return "TMP_UTIL_SEP";
				
				}

				
			    public String DH_FAT_UTIL;

				public String getDH_FAT_UTIL () {
					return this.DH_FAT_UTIL;
				}

				public Boolean DH_FAT_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_FAT_UTILIsKey(){
				    return false;
				}
				public Integer DH_FAT_UTILLength(){
				    return null;
				}
				public Integer DH_FAT_UTILPrecision(){
				    return null;
				}
				public String DH_FAT_UTILDefault(){
				
					return null;
				
				}
				public String DH_FAT_UTILComment(){
				
				    return "";
				
				}
				public String DH_FAT_UTILPattern(){
				
					return "";
				
				}
				public String DH_FAT_UTILOriginalDbColumnName(){
				
					return "DH_FAT_UTIL";
				
				}

				
			    public Integer TMP_UTIL_FAT;

				public Integer getTMP_UTIL_FAT () {
					return this.TMP_UTIL_FAT;
				}

				public Boolean TMP_UTIL_FATIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_FATIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_FATLength(){
				    return null;
				}
				public Integer TMP_UTIL_FATPrecision(){
				    return null;
				}
				public String TMP_UTIL_FATDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_FATComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_FATPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_FATOriginalDbColumnName(){
				
					return "TMP_UTIL_FAT";
				
				}

				
			    public String DH_ROM_UTIL;

				public String getDH_ROM_UTIL () {
					return this.DH_ROM_UTIL;
				}

				public Boolean DH_ROM_UTILIsNullable(){
				    return true;
				}
				public Boolean DH_ROM_UTILIsKey(){
				    return false;
				}
				public Integer DH_ROM_UTILLength(){
				    return null;
				}
				public Integer DH_ROM_UTILPrecision(){
				    return null;
				}
				public String DH_ROM_UTILDefault(){
				
					return null;
				
				}
				public String DH_ROM_UTILComment(){
				
				    return "";
				
				}
				public String DH_ROM_UTILPattern(){
				
					return "";
				
				}
				public String DH_ROM_UTILOriginalDbColumnName(){
				
					return "DH_ROM_UTIL";
				
				}

				
			    public Integer TMP_UTIL_ROM;

				public Integer getTMP_UTIL_ROM () {
					return this.TMP_UTIL_ROM;
				}

				public Boolean TMP_UTIL_ROMIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_ROMIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_ROMLength(){
				    return null;
				}
				public Integer TMP_UTIL_ROMPrecision(){
				    return null;
				}
				public String TMP_UTIL_ROMDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_ROMComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_ROMPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_ROMOriginalDbColumnName(){
				
					return "TMP_UTIL_ROM";
				
				}

				
			    public Integer TMP_UTIL_TOT;

				public Integer getTMP_UTIL_TOT () {
					return this.TMP_UTIL_TOT;
				}

				public Boolean TMP_UTIL_TOTIsNullable(){
				    return true;
				}
				public Boolean TMP_UTIL_TOTIsKey(){
				    return false;
				}
				public Integer TMP_UTIL_TOTLength(){
				    return null;
				}
				public Integer TMP_UTIL_TOTPrecision(){
				    return null;
				}
				public String TMP_UTIL_TOTDefault(){
				
					return null;
				
				}
				public String TMP_UTIL_TOTComment(){
				
				    return "";
				
				}
				public String TMP_UTIL_TOTPattern(){
				
					return "";
				
				}
				public String TMP_UTIL_TOTOriginalDbColumnName(){
				
					return "TMP_UTIL_TOT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.FGO_NUMPOK = readString(dis);
					
					this.FGO_NUMDOC = readString(dis);
					
					this.FGO_NUMFAT = readString(dis);
					
					this.FGO_CODVEN = readString(dis);
					
					this.LIB_AUT = readString(dis);
					
					this.DH_CRI = readString(dis);
					
					this.DH_IMP = readString(dis);
					
						this.TMP_IMP = readInteger(dis);
					
					this.DH_IMP_UTIL = readString(dis);
					
					this.DH_LIB_UTIL = readString(dis);
					
						this.TMP_UTIL_LIB = readInteger(dis);
					
					this.DH_OND_UTIL = readString(dis);
					
						this.TMP_UTIL_OND = readInteger(dis);
					
					this.DH_SEP_UTIL = readString(dis);
					
						this.TMP_UTIL_SEP = readInteger(dis);
					
					this.DH_FAT_UTIL = readString(dis);
					
						this.TMP_UTIL_FAT = readInteger(dis);
					
					this.DH_ROM_UTIL = readString(dis);
					
						this.TMP_UTIL_ROM = readInteger(dis);
					
						this.TMP_UTIL_TOT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FGO_NUMPOK,dos);
					
					// String
				
						writeString(this.FGO_NUMDOC,dos);
					
					// String
				
						writeString(this.FGO_NUMFAT,dos);
					
					// String
				
						writeString(this.FGO_CODVEN,dos);
					
					// String
				
						writeString(this.LIB_AUT,dos);
					
					// String
				
						writeString(this.DH_CRI,dos);
					
					// String
				
						writeString(this.DH_IMP,dos);
					
					// Integer
				
						writeInteger(this.TMP_IMP,dos);
					
					// String
				
						writeString(this.DH_IMP_UTIL,dos);
					
					// String
				
						writeString(this.DH_LIB_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_LIB,dos);
					
					// String
				
						writeString(this.DH_OND_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_OND,dos);
					
					// String
				
						writeString(this.DH_SEP_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_SEP,dos);
					
					// String
				
						writeString(this.DH_FAT_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_FAT,dos);
					
					// String
				
						writeString(this.DH_ROM_UTIL,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_ROM,dos);
					
					// Integer
				
						writeInteger(this.TMP_UTIL_TOT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FGO_NUMPOK="+FGO_NUMPOK);
		sb.append(",FGO_NUMDOC="+FGO_NUMDOC);
		sb.append(",FGO_NUMFAT="+FGO_NUMFAT);
		sb.append(",FGO_CODVEN="+FGO_CODVEN);
		sb.append(",LIB_AUT="+LIB_AUT);
		sb.append(",DH_CRI="+DH_CRI);
		sb.append(",DH_IMP="+DH_IMP);
		sb.append(",TMP_IMP="+String.valueOf(TMP_IMP));
		sb.append(",DH_IMP_UTIL="+DH_IMP_UTIL);
		sb.append(",DH_LIB_UTIL="+DH_LIB_UTIL);
		sb.append(",TMP_UTIL_LIB="+String.valueOf(TMP_UTIL_LIB));
		sb.append(",DH_OND_UTIL="+DH_OND_UTIL);
		sb.append(",TMP_UTIL_OND="+String.valueOf(TMP_UTIL_OND));
		sb.append(",DH_SEP_UTIL="+DH_SEP_UTIL);
		sb.append(",TMP_UTIL_SEP="+String.valueOf(TMP_UTIL_SEP));
		sb.append(",DH_FAT_UTIL="+DH_FAT_UTIL);
		sb.append(",TMP_UTIL_FAT="+String.valueOf(TMP_UTIL_FAT));
		sb.append(",DH_ROM_UTIL="+DH_ROM_UTIL);
		sb.append(",TMP_UTIL_ROM="+String.valueOf(TMP_UTIL_ROM));
		sb.append(",TMP_UTIL_TOT="+String.valueOf(TMP_UTIL_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("gr_media_tempo").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("gr_media_tempo").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 21 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"fgo_numpok\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"fgo_numpok\",\"fgo_numdoc\",\"fgo_numfat\",\"fgo_codven\",\"lib_aut\",\"dh_cri\",\"dh_imp\",\"tmp_imp\",\"dh_imp_util\",\"dh_lib_util\",\"tmp_util_lib\",\"dh_ond_util\",\"tmp_util_ond\",\"dh_sep_util\",\"tmp_util_sep\",\"dh_fat_util\",\"tmp_util_fat\",\"dh_rom_util\",\"tmp_util_rom\",\"tmp_util_tot\",\"dt_ult_atu\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"fgo_numdoc\" = ?,\"fgo_numfat\" = ?,\"fgo_codven\" = ?,\"lib_aut\" = ?,\"dh_cri\" = ?,\"dh_imp\" = ?,\"tmp_imp\" = ?,\"dh_imp_util\" = ?,\"dh_lib_util\" = ?,\"tmp_util_lib\" = ?,\"dh_ond_util\" = ?,\"tmp_util_ond\" = ?,\"dh_sep_util\" = ?,\"tmp_util_sep\" = ?,\"dh_fat_util\" = ?,\"tmp_util_fat\" = ?,\"dh_rom_util\" = ?,\"tmp_util_rom\" = ?,\"tmp_util_tot\" = ?,\"dt_ult_atu\" = ? WHERE \"fgo_numpok\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_gr_media_tempo_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out1Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    out1Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row2.FGO_NUMPOK = next_tHashInput_2.FGO_NUMPOK;
	row2.FGO_NUMDOC = next_tHashInput_2.FGO_NUMDOC;
	row2.FGO_NUMFAT = next_tHashInput_2.FGO_NUMFAT;
	row2.FGO_CODVEN = next_tHashInput_2.FGO_CODVEN;
	row2.LIB_AUT = next_tHashInput_2.LIB_AUT;
	row2.DH_CRI = next_tHashInput_2.DH_CRI;
	row2.DH_IMP = next_tHashInput_2.DH_IMP;
	row2.TMP_IMP = next_tHashInput_2.TMP_IMP;
	row2.DH_IMP_UTIL = next_tHashInput_2.DH_IMP_UTIL;
	row2.DH_LIB_UTIL = next_tHashInput_2.DH_LIB_UTIL;
	row2.TMP_UTIL_LIB = next_tHashInput_2.TMP_UTIL_LIB;
	row2.DH_OND_UTIL = next_tHashInput_2.DH_OND_UTIL;
	row2.TMP_UTIL_OND = next_tHashInput_2.TMP_UTIL_OND;
	row2.DH_SEP_UTIL = next_tHashInput_2.DH_SEP_UTIL;
	row2.TMP_UTIL_SEP = next_tHashInput_2.TMP_UTIL_SEP;
	row2.DH_FAT_UTIL = next_tHashInput_2.DH_FAT_UTIL;
	row2.TMP_UTIL_FAT = next_tHashInput_2.TMP_UTIL_FAT;
	row2.DH_ROM_UTIL = next_tHashInput_2.DH_ROM_UTIL;
	row2.TMP_UTIL_ROM = next_tHashInput_2.TMP_UTIL_ROM;
	row2.TMP_UTIL_TOT = next_tHashInput_2.TMP_UTIL_TOT;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.FGO_NUMPOK = row2.FGO_NUMPOK ;
out2_tmp.FGO_NUMDOC = row2.FGO_NUMDOC ;
out2_tmp.FGO_NUMFAT = row2.FGO_NUMFAT ;
out2_tmp.FGO_CODVEN = row2.FGO_CODVEN ;
out2_tmp.LIB_AUT = row2.LIB_AUT ;
out2_tmp.DH_CRI = row2.DH_CRI ;
out2_tmp.DH_IMP = row2.DH_IMP ;
out2_tmp.TMP_IMP = row2.TMP_IMP ;
out2_tmp.DH_IMP_UTIL = row2.DH_IMP_UTIL ;
out2_tmp.DH_LIB_UTIL = row2.DH_LIB_UTIL ;
out2_tmp.TMP_UTIL_LIB = row2.TMP_UTIL_LIB ;
out2_tmp.DH_OND_UTIL = row2.DH_OND_UTIL ;
out2_tmp.TMP_UTIL_OND = row2.TMP_UTIL_OND ;
out2_tmp.DH_SEP_UTIL = row2.DH_SEP_UTIL ;
out2_tmp.TMP_UTIL_SEP = row2.TMP_UTIL_SEP ;
out2_tmp.DH_FAT_UTIL = row2.DH_FAT_UTIL ;
out2_tmp.TMP_UTIL_FAT = row2.TMP_UTIL_FAT ;
out2_tmp.DH_ROM_UTIL = row2.DH_ROM_UTIL ;
out2_tmp.TMP_UTIL_ROM = row2.TMP_UTIL_ROM ;
out2_tmp.TMP_UTIL_TOT = row2.TMP_UTIL_TOT ;
out2_tmp.DT_ULT_ATU = null;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(out2.FGO_NUMPOK == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, out2.FGO_NUMPOK);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(out2.FGO_NUMDOC == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(1, out2.FGO_NUMDOC);
}

                        if(out2.FGO_NUMFAT == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, out2.FGO_NUMFAT);
}

                        if(out2.FGO_CODVEN == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, out2.FGO_CODVEN);
}

                        if(out2.LIB_AUT == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, out2.LIB_AUT);
}

                        if(out2.DH_CRI == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, out2.DH_CRI);
}

                        if(out2.DH_IMP == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, out2.DH_IMP);
}

                        if(out2.TMP_IMP == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(7, out2.TMP_IMP);
}

                        if(out2.DH_IMP_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(8, out2.DH_IMP_UTIL);
}

                        if(out2.DH_LIB_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, out2.DH_LIB_UTIL);
}

                        if(out2.TMP_UTIL_LIB == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(10, out2.TMP_UTIL_LIB);
}

                        if(out2.DH_OND_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, out2.DH_OND_UTIL);
}

                        if(out2.TMP_UTIL_OND == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(12, out2.TMP_UTIL_OND);
}

                        if(out2.DH_SEP_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(13, out2.DH_SEP_UTIL);
}

                        if(out2.TMP_UTIL_SEP == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(14, out2.TMP_UTIL_SEP);
}

                        if(out2.DH_FAT_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(15, out2.DH_FAT_UTIL);
}

                        if(out2.TMP_UTIL_FAT == null) {
pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(16, out2.TMP_UTIL_FAT);
}

                        if(out2.DH_ROM_UTIL == null) {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(17, out2.DH_ROM_UTIL);
}

                        if(out2.TMP_UTIL_ROM == null) {
pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(18, out2.TMP_UTIL_ROM);
}

                        if(out2.TMP_UTIL_TOT == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(19, out2.TMP_UTIL_TOT);
}

                        if(out2.DT_ULT_ATU != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(20, new java.sql.Timestamp(out2.DT_ULT_ATU.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(out2.FGO_NUMPOK == null) {
pstmtUpdate_tDBOutput_2.setNull(21 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(21 + count_tDBOutput_2, out2.FGO_NUMPOK);
}

                try {
					
                    int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
                    updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(out2.FGO_NUMPOK == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(1, out2.FGO_NUMPOK);
}

                        if(out2.FGO_NUMDOC == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, out2.FGO_NUMDOC);
}

                        if(out2.FGO_NUMFAT == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, out2.FGO_NUMFAT);
}

                        if(out2.FGO_CODVEN == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, out2.FGO_CODVEN);
}

                        if(out2.LIB_AUT == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, out2.LIB_AUT);
}

                        if(out2.DH_CRI == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, out2.DH_CRI);
}

                        if(out2.DH_IMP == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(7, out2.DH_IMP);
}

                        if(out2.TMP_IMP == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(8, out2.TMP_IMP);
}

                        if(out2.DH_IMP_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(9, out2.DH_IMP_UTIL);
}

                        if(out2.DH_LIB_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, out2.DH_LIB_UTIL);
}

                        if(out2.TMP_UTIL_LIB == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(11, out2.TMP_UTIL_LIB);
}

                        if(out2.DH_OND_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, out2.DH_OND_UTIL);
}

                        if(out2.TMP_UTIL_OND == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(13, out2.TMP_UTIL_OND);
}

                        if(out2.DH_SEP_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(14, out2.DH_SEP_UTIL);
}

                        if(out2.TMP_UTIL_SEP == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(15, out2.TMP_UTIL_SEP);
}

                        if(out2.DH_FAT_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(16, out2.DH_FAT_UTIL);
}

                        if(out2.TMP_UTIL_FAT == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(17, out2.TMP_UTIL_FAT);
}

                        if(out2.DH_ROM_UTIL == null) {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(18, out2.DH_ROM_UTIL);
}

                        if(out2.TMP_UTIL_ROM == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(19, out2.TMP_UTIL_ROM);
}

                        if(out2.TMP_UTIL_TOT == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(20, out2.TMP_UTIL_TOT);
}

                        if(out2.DT_ULT_ATU != null) {
pstmtInsert_tDBOutput_2.setTimestamp(21, new java.sql.Timestamp(out2.DT_ULT_ATU.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.TIMESTAMP);
}

                try {
					
                    int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                    insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_media_tempo_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_gr_media_tempo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_gr_media_tempo) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_gr_media_tempo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_gr_media_tempo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final gr_media_tempo gr_media_tempoClass = new gr_media_tempo();

        int exitCode = gr_media_tempoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = gr_media_tempo.class.getClassLoader().getResourceAsStream("palacio_ferramentas/gr_media_tempo_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = gr_media_tempo.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("aspas", "id_String");
                        if(context.getStringValue("aspas") == null) {
                            context.aspas = null;
                        } else {
                            context.aspas=(String) context.getProperty("aspas");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("aspas")) {
                context.aspas = (String) parentContextMap.get("aspas");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : gr_media_tempo");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     320551 characters generated by Talend Open Studio for Big Data 
 *     on the 17 de julho de 2024 12:47:19 BRT
 ************************************************************************************************/