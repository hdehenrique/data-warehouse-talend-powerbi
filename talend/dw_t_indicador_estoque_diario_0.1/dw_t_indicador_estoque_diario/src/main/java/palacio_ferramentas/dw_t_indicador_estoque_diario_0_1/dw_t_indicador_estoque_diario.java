// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_indicador_estoque_diario_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_2
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_4
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_5
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


@SuppressWarnings("unused")

/**
 * Job: dw_t_indicador_estoque_diario Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_indicador_estoque_diario implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(ontem != null){
				
					this.setProperty("ontem", ontem.toString());
				
			}
			
			if(hoje != null){
				
					this.setProperty("hoje", hoje.toString());
				
			}
			
			if(dias_antes != null){
				
					this.setProperty("dias_antes", dias_antes.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String ontem;
public String getOntem(){
	return this.ontem;
}
public String hoje;
public String getHoje(){
	return this.hoje;
}
public Integer dias_antes;
public Integer getDias_antes(){
	return this.dias_antes;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_indicador_estoque_diario";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_indicador_estoque_diario.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_indicador_estoque_diario.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_2Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Ontem_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD); 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Erro na Conexão com o Autcom");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Erro na Conexão com o Autcom");
	globalMap.put("tDie_1_DIE_MESSAGES", "Erro na Conexão com o Autcom");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(2);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(2));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(2);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


System.out.println("Finalizada com sucesso a conexao com AutCom");

Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("yyyyMMdd_HHmmss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


context.data_execucao = data;
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tRowGenerator_2Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return true;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.nm_programa = this.nm_programa;
	            other.data_inicio_execucao = this.data_inicio_execucao;
	            other.data_termino_execucao = this.data_termino_execucao;
	            other.mensagem = this.mensagem;
	            other.uuid = this.uuid;
	            other.versao = this.versao;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd\"yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return true;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insert_logStruct other = (insert_logStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insert_logStruct other) {

		other.nm_programa = this.nm_programa;
	            other.data_inicio_execucao = this.data_inicio_execucao;
	            other.data_termino_execucao = this.data_termino_execucao;
	            other.mensagem = this.mensagem;
	            other.uuid = this.uuid;
	            other.versao = this.versao;
	            
	}

	public void copyKeysDataTo(insert_logStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
insert_logStruct insert_log = new insert_logStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_indicador_estoque_diario_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_2", false);
		start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_2";
	
	
		int tos_count_tRowGenerator_2 = 0;
		


int nb_line_tRowGenerator_2 = 0;
int nb_max_row_tRowGenerator_2 = 1;


class tRowGenerator_2Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();
	
	for (int itRowGenerator_2=0; itRowGenerator_2<nb_max_row_tRowGenerator_2 ;itRowGenerator_2++) {
		row2.datainicio = randtRowGenerator_2.getRandomdatainicio();
		nb_line_tRowGenerator_2++;
		

 



/**
 * [tRowGenerator_2 begin ] stop
 */
	
	/**
	 * [tRowGenerator_2 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 


	tos_count_tRowGenerator_2++;

/**
 * [tRowGenerator_2 main ] stop
 */
	
	/**
	 * [tRowGenerator_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row2.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row4 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row4 = new row4Struct();
                                row4.nm_programa = insert_log.nm_programa;
                                row4.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row4.data_termino_execucao = insert_log.data_termino_execucao;
                                row4.mensagem = insert_log.mensagem;
                                row4.uuid = insert_log.uuid;
                                row4.versao = insert_log.versao;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.nm_programa = row4.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row4.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row4.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row4.mensagem;
					oneRow_tHashOutput_1.uuid = row4.uuid;
					oneRow_tHashOutput_1.versao = row4.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_2 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

}
globalMap.put("tRowGenerator_2_NB_LINE",nb_line_tRowGenerator_2);

 

ok_Hash.put("tRowGenerator_2", true);
end_Hash.put("tRowGenerator_2", System.currentTimeMillis());




/**
 * [tRowGenerator_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_2 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";
	
	

 



/**
 * [tRowGenerator_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public String ontem;

				public String getOntem () {
					return this.ontem;
				}

				public Boolean ontemIsNullable(){
				    return true;
				}
				public Boolean ontemIsKey(){
				    return false;
				}
				public Integer ontemLength(){
				    return null;
				}
				public Integer ontemPrecision(){
				    return null;
				}
				public String ontemDefault(){
				
					return null;
				
				}
				public String ontemComment(){
				
				    return "";
				
				}
				public String ontemPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ontemOriginalDbColumnName(){
				
					return "ontem";
				
				}

				
			    public String hoje;

				public String getHoje () {
					return this.hoje;
				}

				public Boolean hojeIsNullable(){
				    return true;
				}
				public Boolean hojeIsKey(){
				    return false;
				}
				public Integer hojeLength(){
				    return null;
				}
				public Integer hojePrecision(){
				    return null;
				}
				public String hojeDefault(){
				
					return null;
				
				}
				public String hojeComment(){
				
				    return "";
				
				}
				public String hojePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String hojeOriginalDbColumnName(){
				
					return "hoje";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readString(dis);
					
					this.hoje = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readString(dis);
					
					this.hoje = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ontem,dos);
					
					// String
				
						writeString(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ontem,dos);
					
					// String
				
						writeString(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ontem="+ontem);
		sb.append(",hoje="+hoje);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public String ontem;

				public String getOntem () {
					return this.ontem;
				}

				public Boolean ontemIsNullable(){
				    return true;
				}
				public Boolean ontemIsKey(){
				    return false;
				}
				public Integer ontemLength(){
				    return null;
				}
				public Integer ontemPrecision(){
				    return null;
				}
				public String ontemDefault(){
				
					return null;
				
				}
				public String ontemComment(){
				
				    return "";
				
				}
				public String ontemPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ontemOriginalDbColumnName(){
				
					return "ontem";
				
				}

				
			    public String hoje;

				public String getHoje () {
					return this.hoje;
				}

				public Boolean hojeIsNullable(){
				    return true;
				}
				public Boolean hojeIsKey(){
				    return false;
				}
				public Integer hojeLength(){
				    return null;
				}
				public Integer hojePrecision(){
				    return null;
				}
				public String hojeDefault(){
				
					return null;
				
				}
				public String hojeComment(){
				
				    return "";
				
				}
				public String hojePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String hojeOriginalDbColumnName(){
				
					return "hoje";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readString(dis);
					
					this.hoje = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readString(dis);
					
					this.hoje = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ontem,dos);
					
					// String
				
						writeString(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ontem,dos);
					
					// String
				
						writeString(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ontem="+ontem);
		sb.append(",hoje="+hoje);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date ontem;

				public java.util.Date getOntem () {
					return this.ontem;
				}

				public Boolean ontemIsNullable(){
				    return true;
				}
				public Boolean ontemIsKey(){
				    return false;
				}
				public Integer ontemLength(){
				    return null;
				}
				public Integer ontemPrecision(){
				    return null;
				}
				public String ontemDefault(){
				
					return null;
				
				}
				public String ontemComment(){
				
				    return "";
				
				}
				public String ontemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String ontemOriginalDbColumnName(){
				
					return "ontem";
				
				}

				
			    public java.util.Date hoje;

				public java.util.Date getHoje () {
					return this.hoje;
				}

				public Boolean hojeIsNullable(){
				    return true;
				}
				public Boolean hojeIsKey(){
				    return false;
				}
				public Integer hojeLength(){
				    return null;
				}
				public Integer hojePrecision(){
				    return null;
				}
				public String hojeDefault(){
				
					return null;
				
				}
				public String hojeComment(){
				
				    return "";
				
				}
				public String hojePattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String hojeOriginalDbColumnName(){
				
					return "hoje";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readDate(dis);
					
					this.hoje = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.ontem = readDate(dis);
					
					this.hoje = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.ontem,dos);
					
					// java.util.Date
				
						writeDate(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.ontem,dos);
					
					// java.util.Date
				
						writeDate(this.hoje,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ontem="+String.valueOf(ontem));
		sb.append(",hoje="+String.valueOf(hoje));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
row17Struct row17 = new row17Struct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tConvertType_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_3", false);
		start_Hash.put("tConvertType_3", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tConvertType_3 = 0;
		
	int nb_line_tConvertType_3 = 0;  
 



/**
 * [tConvertType_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select current_date -1 ontem, current_date  hoje";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row15.ontem = null;
							} else {
										
			row15.ontem = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 1);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row15.hoje = null;
							} else {
										
			row15.hoje = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_3 main ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


  row17 = new row17Struct();
  boolean bHasError_tConvertType_3 = false;             
          try {
              row17.ontem=TypeConvert.Date2String(row15.ontem, "yyyy-MM-dd");
        	            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row17.hoje=TypeConvert.Date2String(row15.hoje, "yyyy-MM-dd");
        	            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_3) {row17 = null;}

  nb_line_tConvertType_3 ++ ;

 


	tos_count_tConvertType_3++;

/**
 * [tConvertType_3 main ] stop
 */
	
	/**
	 * [tConvertType_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

    //Code generated according to input schema and output schema
row16.ontem = row17.ontem;
row16.hoje = row17.hoje;

context.ontem = row17.ontem;
context.hoje = row17.hoje;

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row16.ontem != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row16.ontem)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row16.hoje != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row16.hoje)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tConvertType_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tConvertType_3 end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
      globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tConvertType_3", true);
end_Hash.put("tConvertType_3", System.currentTimeMillis());




/**
 * [tConvertType_3 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tConvertType_3 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public Integer vl_parametro;

				public Integer getVl_parametro () {
					return this.vl_parametro;
				}

				public Boolean vl_parametroIsNullable(){
				    return true;
				}
				public Boolean vl_parametroIsKey(){
				    return false;
				}
				public Integer vl_parametroLength(){
				    return null;
				}
				public Integer vl_parametroPrecision(){
				    return null;
				}
				public String vl_parametroDefault(){
				
					return null;
				
				}
				public String vl_parametroComment(){
				
				    return "";
				
				}
				public String vl_parametroPattern(){
				
					return "";
				
				}
				public String vl_parametroOriginalDbColumnName(){
				
					return "vl_parametro";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
						this.vl_parametro = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
						this.vl_parametro = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.vl_parametro,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.vl_parametro,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vl_parametro="+String.valueOf(vl_parametro));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public Integer vl_parametro;

				public Integer getVl_parametro () {
					return this.vl_parametro;
				}

				public Boolean vl_parametroIsNullable(){
				    return true;
				}
				public Boolean vl_parametroIsKey(){
				    return false;
				}
				public Integer vl_parametroLength(){
				    return null;
				}
				public Integer vl_parametroPrecision(){
				    return null;
				}
				public String vl_parametroDefault(){
				
					return null;
				
				}
				public String vl_parametroComment(){
				
				    return "";
				
				}
				public String vl_parametroPattern(){
				
					return "";
				
				}
				public String vl_parametroOriginalDbColumnName(){
				
					return "vl_parametro";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
						this.vl_parametro = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
						this.vl_parametro = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.vl_parametro,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.vl_parametro,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vl_parametro="+String.valueOf(vl_parametro));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row19Struct row19 = new row19Struct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select vl_parametro\n  from dw_t_parametros\n where cd_parametro = 5";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row12.vl_parametro = null;
							} else {
		                          
            row12.vl_parametro = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row12.vl_parametro = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

    //Code generated according to input schema and output schema
row19.vl_parametro = row12.vl_parametro;

context.dias_antes = row12.vl_parametro;
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row19.vl_parametro != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row19.vl_parametro)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

	try {
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Erro na Conexão com o Dw");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Erro na Conexão com o Dw");
	globalMap.put("tDie_2_DIE_MESSAGES", "Erro na Conexão com o Dw");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
    	errorCode = new Integer(1);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(1));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_2_DIE_CODE", errorCode);

    
	

	
	
	System.exit(1);

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String SALDO_DISPONIVEL;

				public String getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.SALDO_DISPONIVEL = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.SALDO_DISPONIVEL = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+SALDO_DISPONIVEL);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String SALDO_DISPONIVEL;

				public String getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.SALDO_DISPONIVEL = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.SALDO_DISPONIVEL = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+SALDO_DISPONIVEL);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_FISICO;

				public Integer getSALDO_FISICO () {
					return this.SALDO_FISICO;
				}

				public Boolean SALDO_FISICOIsNullable(){
				    return true;
				}
				public Boolean SALDO_FISICOIsKey(){
				    return false;
				}
				public Integer SALDO_FISICOLength(){
				    return null;
				}
				public Integer SALDO_FISICOPrecision(){
				    return null;
				}
				public String SALDO_FISICODefault(){
				
					return null;
				
				}
				public String SALDO_FISICOComment(){
				
				    return "";
				
				}
				public String SALDO_FISICOPattern(){
				
					return "";
				
				}
				public String SALDO_FISICOOriginalDbColumnName(){
				
					return "SALDO_FISICO";
				
				}

				
			    public Integer SALDO_RESERVADO;

				public Integer getSALDO_RESERVADO () {
					return this.SALDO_RESERVADO;
				}

				public Boolean SALDO_RESERVADOIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESERVADOIsKey(){
				    return false;
				}
				public Integer SALDO_RESERVADOLength(){
				    return null;
				}
				public Integer SALDO_RESERVADOPrecision(){
				    return null;
				}
				public String SALDO_RESERVADODefault(){
				
					return null;
				
				}
				public String SALDO_RESERVADOComment(){
				
				    return "";
				
				}
				public String SALDO_RESERVADOPattern(){
				
					return "";
				
				}
				public String SALDO_RESERVADOOriginalDbColumnName(){
				
					return "SALDO_RESERVADO";
				
				}

				
			    public Integer RESERVADO_EXTERNO;

				public Integer getRESERVADO_EXTERNO () {
					return this.RESERVADO_EXTERNO;
				}

				public Boolean RESERVADO_EXTERNOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNOIsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNOLength(){
				    return null;
				}
				public Integer RESERVADO_EXTERNOPrecision(){
				    return null;
				}
				public String RESERVADO_EXTERNODefault(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNOComment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNOPattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNOOriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal PRECO_TABELA1;

				public BigDecimal getPRECO_TABELA1 () {
					return this.PRECO_TABELA1;
				}

				public Boolean PRECO_TABELA1IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA1IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA1Length(){
				    return 12;
				}
				public Integer PRECO_TABELA1Precision(){
				    return 4;
				}
				public String PRECO_TABELA1Default(){
				
					return null;
				
				}
				public String PRECO_TABELA1Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA1Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA1OriginalDbColumnName(){
				
					return "PRECO_TABELA1";
				
				}

				
			    public BigDecimal PRECO_TABELA2;

				public BigDecimal getPRECO_TABELA2 () {
					return this.PRECO_TABELA2;
				}

				public Boolean PRECO_TABELA2IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA2IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA2Length(){
				    return 12;
				}
				public Integer PRECO_TABELA2Precision(){
				    return 4;
				}
				public String PRECO_TABELA2Default(){
				
					return null;
				
				}
				public String PRECO_TABELA2Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA2Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA2OriginalDbColumnName(){
				
					return "PRECO_TABELA2";
				
				}

				
			    public BigDecimal PRECO_TABELA3;

				public BigDecimal getPRECO_TABELA3 () {
					return this.PRECO_TABELA3;
				}

				public Boolean PRECO_TABELA3IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA3IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA3Length(){
				    return 12;
				}
				public Integer PRECO_TABELA3Precision(){
				    return 4;
				}
				public String PRECO_TABELA3Default(){
				
					return null;
				
				}
				public String PRECO_TABELA3Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA3Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA3OriginalDbColumnName(){
				
					return "PRECO_TABELA3";
				
				}

				
			    public BigDecimal PRECO_TABELA4;

				public BigDecimal getPRECO_TABELA4 () {
					return this.PRECO_TABELA4;
				}

				public Boolean PRECO_TABELA4IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA4IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA4Length(){
				    return 12;
				}
				public Integer PRECO_TABELA4Precision(){
				    return 4;
				}
				public String PRECO_TABELA4Default(){
				
					return null;
				
				}
				public String PRECO_TABELA4Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA4Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA4OriginalDbColumnName(){
				
					return "PRECO_TABELA4";
				
				}

				
			    public BigDecimal PRECO_TABELA5;

				public BigDecimal getPRECO_TABELA5 () {
					return this.PRECO_TABELA5;
				}

				public Boolean PRECO_TABELA5IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA5IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA5Length(){
				    return 12;
				}
				public Integer PRECO_TABELA5Precision(){
				    return 4;
				}
				public String PRECO_TABELA5Default(){
				
					return null;
				
				}
				public String PRECO_TABELA5Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA5Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA5OriginalDbColumnName(){
				
					return "PRECO_TABELA5";
				
				}

				
			    public BigDecimal PRECO_TABELA6;

				public BigDecimal getPRECO_TABELA6 () {
					return this.PRECO_TABELA6;
				}

				public Boolean PRECO_TABELA6IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA6IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA6Length(){
				    return 12;
				}
				public Integer PRECO_TABELA6Precision(){
				    return 4;
				}
				public String PRECO_TABELA6Default(){
				
					return null;
				
				}
				public String PRECO_TABELA6Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA6Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA6OriginalDbColumnName(){
				
					return "PRECO_TABELA6";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String ATIVO_VENDA;

				public String getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public String ATIVO_COMPRA;

				public String getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				
			    public Integer SEM_SALDO;

				public Integer getSEM_SALDO () {
					return this.SEM_SALDO;
				}

				public Boolean SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean SEM_SALDOIsKey(){
				    return false;
				}
				public Integer SEM_SALDOLength(){
				    return null;
				}
				public Integer SEM_SALDOPrecision(){
				    return null;
				}
				public String SEM_SALDODefault(){
				
					return null;
				
				}
				public String SEM_SALDOComment(){
				
				    return "";
				
				}
				public String SEM_SALDOPattern(){
				
					return "";
				
				}
				public String SEM_SALDOOriginalDbColumnName(){
				
					return "SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.SALDO_FISICO = this.SALDO_FISICO;
	            other.SALDO_RESERVADO = this.SALDO_RESERVADO;
	            other.RESERVADO_EXTERNO = this.RESERVADO_EXTERNO;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.PRECO_TABELA1 = this.PRECO_TABELA1;
	            other.PRECO_TABELA2 = this.PRECO_TABELA2;
	            other.PRECO_TABELA3 = this.PRECO_TABELA3;
	            other.PRECO_TABELA4 = this.PRECO_TABELA4;
	            other.PRECO_TABELA5 = this.PRECO_TABELA5;
	            other.PRECO_TABELA6 = this.PRECO_TABELA6;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            other.SEM_SALDO = this.SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_FISICO="+String.valueOf(SALDO_FISICO));
		sb.append(",SALDO_RESERVADO="+String.valueOf(SALDO_RESERVADO));
		sb.append(",RESERVADO_EXTERNO="+String.valueOf(RESERVADO_EXTERNO));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",PRECO_TABELA1="+String.valueOf(PRECO_TABELA1));
		sb.append(",PRECO_TABELA2="+String.valueOf(PRECO_TABELA2));
		sb.append(",PRECO_TABELA3="+String.valueOf(PRECO_TABELA3));
		sb.append(",PRECO_TABELA4="+String.valueOf(PRECO_TABELA4));
		sb.append(",PRECO_TABELA5="+String.valueOf(PRECO_TABELA5));
		sb.append(",PRECO_TABELA6="+String.valueOf(PRECO_TABELA6));
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",ATIVO_VENDA="+ATIVO_VENDA);
		sb.append(",ATIVO_COMPRA="+ATIVO_COMPRA);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
		sb.append(",SEM_SALDO="+String.valueOf(SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class todosStruct implements routines.system.IPersistableRow<todosStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_FISICO;

				public Integer getSALDO_FISICO () {
					return this.SALDO_FISICO;
				}

				public Boolean SALDO_FISICOIsNullable(){
				    return true;
				}
				public Boolean SALDO_FISICOIsKey(){
				    return false;
				}
				public Integer SALDO_FISICOLength(){
				    return null;
				}
				public Integer SALDO_FISICOPrecision(){
				    return null;
				}
				public String SALDO_FISICODefault(){
				
					return null;
				
				}
				public String SALDO_FISICOComment(){
				
				    return "";
				
				}
				public String SALDO_FISICOPattern(){
				
					return "";
				
				}
				public String SALDO_FISICOOriginalDbColumnName(){
				
					return "SALDO_FISICO";
				
				}

				
			    public Integer SALDO_RESERVADO;

				public Integer getSALDO_RESERVADO () {
					return this.SALDO_RESERVADO;
				}

				public Boolean SALDO_RESERVADOIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESERVADOIsKey(){
				    return false;
				}
				public Integer SALDO_RESERVADOLength(){
				    return null;
				}
				public Integer SALDO_RESERVADOPrecision(){
				    return null;
				}
				public String SALDO_RESERVADODefault(){
				
					return null;
				
				}
				public String SALDO_RESERVADOComment(){
				
				    return "";
				
				}
				public String SALDO_RESERVADOPattern(){
				
					return "";
				
				}
				public String SALDO_RESERVADOOriginalDbColumnName(){
				
					return "SALDO_RESERVADO";
				
				}

				
			    public Integer RESERVADO_EXTERNO;

				public Integer getRESERVADO_EXTERNO () {
					return this.RESERVADO_EXTERNO;
				}

				public Boolean RESERVADO_EXTERNOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNOIsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNOLength(){
				    return null;
				}
				public Integer RESERVADO_EXTERNOPrecision(){
				    return null;
				}
				public String RESERVADO_EXTERNODefault(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNOComment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNOPattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNOOriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal PRECO_TABELA1;

				public BigDecimal getPRECO_TABELA1 () {
					return this.PRECO_TABELA1;
				}

				public Boolean PRECO_TABELA1IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA1IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA1Length(){
				    return 12;
				}
				public Integer PRECO_TABELA1Precision(){
				    return 4;
				}
				public String PRECO_TABELA1Default(){
				
					return null;
				
				}
				public String PRECO_TABELA1Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA1Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA1OriginalDbColumnName(){
				
					return "PRECO_TABELA1";
				
				}

				
			    public BigDecimal PRECO_TABELA2;

				public BigDecimal getPRECO_TABELA2 () {
					return this.PRECO_TABELA2;
				}

				public Boolean PRECO_TABELA2IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA2IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA2Length(){
				    return 12;
				}
				public Integer PRECO_TABELA2Precision(){
				    return 4;
				}
				public String PRECO_TABELA2Default(){
				
					return null;
				
				}
				public String PRECO_TABELA2Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA2Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA2OriginalDbColumnName(){
				
					return "PRECO_TABELA2";
				
				}

				
			    public BigDecimal PRECO_TABELA3;

				public BigDecimal getPRECO_TABELA3 () {
					return this.PRECO_TABELA3;
				}

				public Boolean PRECO_TABELA3IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA3IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA3Length(){
				    return 12;
				}
				public Integer PRECO_TABELA3Precision(){
				    return 4;
				}
				public String PRECO_TABELA3Default(){
				
					return null;
				
				}
				public String PRECO_TABELA3Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA3Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA3OriginalDbColumnName(){
				
					return "PRECO_TABELA3";
				
				}

				
			    public BigDecimal PRECO_TABELA4;

				public BigDecimal getPRECO_TABELA4 () {
					return this.PRECO_TABELA4;
				}

				public Boolean PRECO_TABELA4IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA4IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA4Length(){
				    return 12;
				}
				public Integer PRECO_TABELA4Precision(){
				    return 4;
				}
				public String PRECO_TABELA4Default(){
				
					return null;
				
				}
				public String PRECO_TABELA4Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA4Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA4OriginalDbColumnName(){
				
					return "PRECO_TABELA4";
				
				}

				
			    public BigDecimal PRECO_TABELA5;

				public BigDecimal getPRECO_TABELA5 () {
					return this.PRECO_TABELA5;
				}

				public Boolean PRECO_TABELA5IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA5IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA5Length(){
				    return 12;
				}
				public Integer PRECO_TABELA5Precision(){
				    return 4;
				}
				public String PRECO_TABELA5Default(){
				
					return null;
				
				}
				public String PRECO_TABELA5Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA5Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA5OriginalDbColumnName(){
				
					return "PRECO_TABELA5";
				
				}

				
			    public BigDecimal PRECO_TABELA6;

				public BigDecimal getPRECO_TABELA6 () {
					return this.PRECO_TABELA6;
				}

				public Boolean PRECO_TABELA6IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA6IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA6Length(){
				    return 12;
				}
				public Integer PRECO_TABELA6Precision(){
				    return 4;
				}
				public String PRECO_TABELA6Default(){
				
					return null;
				
				}
				public String PRECO_TABELA6Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA6Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA6OriginalDbColumnName(){
				
					return "PRECO_TABELA6";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String ATIVO_VENDA;

				public String getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public String ATIVO_COMPRA;

				public String getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				
			    public Integer SEM_SALDO;

				public Integer getSEM_SALDO () {
					return this.SEM_SALDO;
				}

				public Boolean SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean SEM_SALDOIsKey(){
				    return false;
				}
				public Integer SEM_SALDOLength(){
				    return null;
				}
				public Integer SEM_SALDOPrecision(){
				    return null;
				}
				public String SEM_SALDODefault(){
				
					return null;
				
				}
				public String SEM_SALDOComment(){
				
				    return "";
				
				}
				public String SEM_SALDOPattern(){
				
					return "";
				
				}
				public String SEM_SALDOOriginalDbColumnName(){
				
					return "SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final todosStruct other = (todosStruct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(todosStruct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.SALDO_FISICO = this.SALDO_FISICO;
	            other.SALDO_RESERVADO = this.SALDO_RESERVADO;
	            other.RESERVADO_EXTERNO = this.RESERVADO_EXTERNO;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.PRECO_TABELA1 = this.PRECO_TABELA1;
	            other.PRECO_TABELA2 = this.PRECO_TABELA2;
	            other.PRECO_TABELA3 = this.PRECO_TABELA3;
	            other.PRECO_TABELA4 = this.PRECO_TABELA4;
	            other.PRECO_TABELA5 = this.PRECO_TABELA5;
	            other.PRECO_TABELA6 = this.PRECO_TABELA6;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            other.SEM_SALDO = this.SEM_SALDO;
	            
	}

	public void copyKeysDataTo(todosStruct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_FISICO="+String.valueOf(SALDO_FISICO));
		sb.append(",SALDO_RESERVADO="+String.valueOf(SALDO_RESERVADO));
		sb.append(",RESERVADO_EXTERNO="+String.valueOf(RESERVADO_EXTERNO));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",PRECO_TABELA1="+String.valueOf(PRECO_TABELA1));
		sb.append(",PRECO_TABELA2="+String.valueOf(PRECO_TABELA2));
		sb.append(",PRECO_TABELA3="+String.valueOf(PRECO_TABELA3));
		sb.append(",PRECO_TABELA4="+String.valueOf(PRECO_TABELA4));
		sb.append(",PRECO_TABELA5="+String.valueOf(PRECO_TABELA5));
		sb.append(",PRECO_TABELA6="+String.valueOf(PRECO_TABELA6));
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",ATIVO_VENDA="+ATIVO_VENDA);
		sb.append(",ATIVO_COMPRA="+ATIVO_COMPRA);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
		sb.append(",SEM_SALDO="+String.valueOf(SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(todosStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sem_saldoStruct implements routines.system.IPersistableRow<sem_saldoStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sem_saldoStruct other = (sem_saldoStruct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sem_saldoStruct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(sem_saldoStruct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sem_saldoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_FISICO;

				public Integer getSALDO_FISICO () {
					return this.SALDO_FISICO;
				}

				public Boolean SALDO_FISICOIsNullable(){
				    return true;
				}
				public Boolean SALDO_FISICOIsKey(){
				    return false;
				}
				public Integer SALDO_FISICOLength(){
				    return null;
				}
				public Integer SALDO_FISICOPrecision(){
				    return null;
				}
				public String SALDO_FISICODefault(){
				
					return null;
				
				}
				public String SALDO_FISICOComment(){
				
				    return "";
				
				}
				public String SALDO_FISICOPattern(){
				
					return "";
				
				}
				public String SALDO_FISICOOriginalDbColumnName(){
				
					return "SALDO_FISICO";
				
				}

				
			    public Integer SALDO_RESERVADO;

				public Integer getSALDO_RESERVADO () {
					return this.SALDO_RESERVADO;
				}

				public Boolean SALDO_RESERVADOIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESERVADOIsKey(){
				    return false;
				}
				public Integer SALDO_RESERVADOLength(){
				    return null;
				}
				public Integer SALDO_RESERVADOPrecision(){
				    return null;
				}
				public String SALDO_RESERVADODefault(){
				
					return null;
				
				}
				public String SALDO_RESERVADOComment(){
				
				    return "";
				
				}
				public String SALDO_RESERVADOPattern(){
				
					return "";
				
				}
				public String SALDO_RESERVADOOriginalDbColumnName(){
				
					return "SALDO_RESERVADO";
				
				}

				
			    public Integer RESERVADO_EXTERNO;

				public Integer getRESERVADO_EXTERNO () {
					return this.RESERVADO_EXTERNO;
				}

				public Boolean RESERVADO_EXTERNOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNOIsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNOLength(){
				    return null;
				}
				public Integer RESERVADO_EXTERNOPrecision(){
				    return null;
				}
				public String RESERVADO_EXTERNODefault(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNOComment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNOPattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNOOriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal PRECO_TABELA1;

				public BigDecimal getPRECO_TABELA1 () {
					return this.PRECO_TABELA1;
				}

				public Boolean PRECO_TABELA1IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA1IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA1Length(){
				    return 12;
				}
				public Integer PRECO_TABELA1Precision(){
				    return 4;
				}
				public String PRECO_TABELA1Default(){
				
					return null;
				
				}
				public String PRECO_TABELA1Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA1Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA1OriginalDbColumnName(){
				
					return "PRECO_TABELA1";
				
				}

				
			    public BigDecimal PRECO_TABELA2;

				public BigDecimal getPRECO_TABELA2 () {
					return this.PRECO_TABELA2;
				}

				public Boolean PRECO_TABELA2IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA2IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA2Length(){
				    return 12;
				}
				public Integer PRECO_TABELA2Precision(){
				    return 4;
				}
				public String PRECO_TABELA2Default(){
				
					return null;
				
				}
				public String PRECO_TABELA2Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA2Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA2OriginalDbColumnName(){
				
					return "PRECO_TABELA2";
				
				}

				
			    public BigDecimal PRECO_TABELA3;

				public BigDecimal getPRECO_TABELA3 () {
					return this.PRECO_TABELA3;
				}

				public Boolean PRECO_TABELA3IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA3IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA3Length(){
				    return 12;
				}
				public Integer PRECO_TABELA3Precision(){
				    return 4;
				}
				public String PRECO_TABELA3Default(){
				
					return null;
				
				}
				public String PRECO_TABELA3Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA3Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA3OriginalDbColumnName(){
				
					return "PRECO_TABELA3";
				
				}

				
			    public BigDecimal PRECO_TABELA4;

				public BigDecimal getPRECO_TABELA4 () {
					return this.PRECO_TABELA4;
				}

				public Boolean PRECO_TABELA4IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA4IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA4Length(){
				    return 12;
				}
				public Integer PRECO_TABELA4Precision(){
				    return 4;
				}
				public String PRECO_TABELA4Default(){
				
					return null;
				
				}
				public String PRECO_TABELA4Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA4Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA4OriginalDbColumnName(){
				
					return "PRECO_TABELA4";
				
				}

				
			    public BigDecimal PRECO_TABELA5;

				public BigDecimal getPRECO_TABELA5 () {
					return this.PRECO_TABELA5;
				}

				public Boolean PRECO_TABELA5IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA5IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA5Length(){
				    return 12;
				}
				public Integer PRECO_TABELA5Precision(){
				    return 4;
				}
				public String PRECO_TABELA5Default(){
				
					return null;
				
				}
				public String PRECO_TABELA5Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA5Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA5OriginalDbColumnName(){
				
					return "PRECO_TABELA5";
				
				}

				
			    public BigDecimal PRECO_TABELA6;

				public BigDecimal getPRECO_TABELA6 () {
					return this.PRECO_TABELA6;
				}

				public Boolean PRECO_TABELA6IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA6IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA6Length(){
				    return 12;
				}
				public Integer PRECO_TABELA6Precision(){
				    return 4;
				}
				public String PRECO_TABELA6Default(){
				
					return null;
				
				}
				public String PRECO_TABELA6Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA6Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA6OriginalDbColumnName(){
				
					return "PRECO_TABELA6";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String ATIVO_VENDA;

				public String getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public String ATIVO_COMPRA;

				public String getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Integer SEM_SALDO;

				public Integer getSEM_SALDO () {
					return this.SEM_SALDO;
				}

				public Boolean SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean SEM_SALDOIsKey(){
				    return false;
				}
				public Integer SEM_SALDOLength(){
				    return null;
				}
				public Integer SEM_SALDOPrecision(){
				    return null;
				}
				public String SEM_SALDODefault(){
				
					return null;
				
				}
				public String SEM_SALDOComment(){
				
				    return "";
				
				}
				public String SEM_SALDOPattern(){
				
					return "";
				
				}
				public String SEM_SALDOOriginalDbColumnName(){
				
					return "SEM_SALDO";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_FISICO="+String.valueOf(SALDO_FISICO));
		sb.append(",SALDO_RESERVADO="+String.valueOf(SALDO_RESERVADO));
		sb.append(",RESERVADO_EXTERNO="+String.valueOf(RESERVADO_EXTERNO));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",PRECO_TABELA1="+String.valueOf(PRECO_TABELA1));
		sb.append(",PRECO_TABELA2="+String.valueOf(PRECO_TABELA2));
		sb.append(",PRECO_TABELA3="+String.valueOf(PRECO_TABELA3));
		sb.append(",PRECO_TABELA4="+String.valueOf(PRECO_TABELA4));
		sb.append(",PRECO_TABELA5="+String.valueOf(PRECO_TABELA5));
		sb.append(",PRECO_TABELA6="+String.valueOf(PRECO_TABELA6));
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",ATIVO_VENDA="+ATIVO_VENDA);
		sb.append(",ATIVO_COMPRA="+ATIVO_COMPRA);
		sb.append(",SEM_SALDO="+String.valueOf(SEM_SALDO));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_FISICO;

				public Integer getSALDO_FISICO () {
					return this.SALDO_FISICO;
				}

				public Boolean SALDO_FISICOIsNullable(){
				    return true;
				}
				public Boolean SALDO_FISICOIsKey(){
				    return false;
				}
				public Integer SALDO_FISICOLength(){
				    return null;
				}
				public Integer SALDO_FISICOPrecision(){
				    return null;
				}
				public String SALDO_FISICODefault(){
				
					return null;
				
				}
				public String SALDO_FISICOComment(){
				
				    return "";
				
				}
				public String SALDO_FISICOPattern(){
				
					return "";
				
				}
				public String SALDO_FISICOOriginalDbColumnName(){
				
					return "SALDO_FISICO";
				
				}

				
			    public Integer SALDO_RESERVADO;

				public Integer getSALDO_RESERVADO () {
					return this.SALDO_RESERVADO;
				}

				public Boolean SALDO_RESERVADOIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESERVADOIsKey(){
				    return false;
				}
				public Integer SALDO_RESERVADOLength(){
				    return null;
				}
				public Integer SALDO_RESERVADOPrecision(){
				    return null;
				}
				public String SALDO_RESERVADODefault(){
				
					return null;
				
				}
				public String SALDO_RESERVADOComment(){
				
				    return "";
				
				}
				public String SALDO_RESERVADOPattern(){
				
					return "";
				
				}
				public String SALDO_RESERVADOOriginalDbColumnName(){
				
					return "SALDO_RESERVADO";
				
				}

				
			    public Integer RESERVADO_EXTERNO;

				public Integer getRESERVADO_EXTERNO () {
					return this.RESERVADO_EXTERNO;
				}

				public Boolean RESERVADO_EXTERNOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNOIsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNOLength(){
				    return null;
				}
				public Integer RESERVADO_EXTERNOPrecision(){
				    return null;
				}
				public String RESERVADO_EXTERNODefault(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNOComment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNOPattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNOOriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer RESERVADO_ENDERECAMENTO;

				public Integer getRESERVADO_ENDERECAMENTO () {
					return this.RESERVADO_ENDERECAMENTO;
				}

				public Boolean RESERVADO_ENDERECAMENTOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_ENDERECAMENTOIsKey(){
				    return false;
				}
				public Integer RESERVADO_ENDERECAMENTOLength(){
				    return null;
				}
				public Integer RESERVADO_ENDERECAMENTOPrecision(){
				    return null;
				}
				public String RESERVADO_ENDERECAMENTODefault(){
				
					return null;
				
				}
				public String RESERVADO_ENDERECAMENTOComment(){
				
				    return "";
				
				}
				public String RESERVADO_ENDERECAMENTOPattern(){
				
					return "";
				
				}
				public String RESERVADO_ENDERECAMENTOOriginalDbColumnName(){
				
					return "RESERVADO_ENDERECAMENTO";
				
				}

				
			    public Integer RESERVADO_GARANTIA;

				public Integer getRESERVADO_GARANTIA () {
					return this.RESERVADO_GARANTIA;
				}

				public Boolean RESERVADO_GARANTIAIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_GARANTIAIsKey(){
				    return false;
				}
				public Integer RESERVADO_GARANTIALength(){
				    return null;
				}
				public Integer RESERVADO_GARANTIAPrecision(){
				    return null;
				}
				public String RESERVADO_GARANTIADefault(){
				
					return null;
				
				}
				public String RESERVADO_GARANTIAComment(){
				
				    return "";
				
				}
				public String RESERVADO_GARANTIAPattern(){
				
					return "";
				
				}
				public String RESERVADO_GARANTIAOriginalDbColumnName(){
				
					return "RESERVADO_GARANTIA";
				
				}

				
			    public Integer RESERVADO_EXTERNO_1;

				public Integer getRESERVADO_EXTERNO_1 () {
					return this.RESERVADO_EXTERNO_1;
				}

				public Boolean RESERVADO_EXTERNO_1IsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNO_1IsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNO_1Length(){
				    return null;
				}
				public Integer RESERVADO_EXTERNO_1Precision(){
				    return null;
				}
				public String RESERVADO_EXTERNO_1Default(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNO_1Comment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNO_1Pattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNO_1OriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public BigDecimal PRECO_TABELA1;

				public BigDecimal getPRECO_TABELA1 () {
					return this.PRECO_TABELA1;
				}

				public Boolean PRECO_TABELA1IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA1IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA1Length(){
				    return 12;
				}
				public Integer PRECO_TABELA1Precision(){
				    return 4;
				}
				public String PRECO_TABELA1Default(){
				
					return null;
				
				}
				public String PRECO_TABELA1Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA1Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA1OriginalDbColumnName(){
				
					return "PRECO_TABELA1";
				
				}

				
			    public BigDecimal PRECO_TABELA2;

				public BigDecimal getPRECO_TABELA2 () {
					return this.PRECO_TABELA2;
				}

				public Boolean PRECO_TABELA2IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA2IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA2Length(){
				    return 12;
				}
				public Integer PRECO_TABELA2Precision(){
				    return 4;
				}
				public String PRECO_TABELA2Default(){
				
					return null;
				
				}
				public String PRECO_TABELA2Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA2Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA2OriginalDbColumnName(){
				
					return "PRECO_TABELA2";
				
				}

				
			    public BigDecimal PRECO_TABELA3;

				public BigDecimal getPRECO_TABELA3 () {
					return this.PRECO_TABELA3;
				}

				public Boolean PRECO_TABELA3IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA3IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA3Length(){
				    return 12;
				}
				public Integer PRECO_TABELA3Precision(){
				    return 4;
				}
				public String PRECO_TABELA3Default(){
				
					return null;
				
				}
				public String PRECO_TABELA3Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA3Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA3OriginalDbColumnName(){
				
					return "PRECO_TABELA3";
				
				}

				
			    public BigDecimal PRECO_TABELA4;

				public BigDecimal getPRECO_TABELA4 () {
					return this.PRECO_TABELA4;
				}

				public Boolean PRECO_TABELA4IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA4IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA4Length(){
				    return 12;
				}
				public Integer PRECO_TABELA4Precision(){
				    return 4;
				}
				public String PRECO_TABELA4Default(){
				
					return null;
				
				}
				public String PRECO_TABELA4Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA4Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA4OriginalDbColumnName(){
				
					return "PRECO_TABELA4";
				
				}

				
			    public BigDecimal PRECO_TABELA5;

				public BigDecimal getPRECO_TABELA5 () {
					return this.PRECO_TABELA5;
				}

				public Boolean PRECO_TABELA5IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA5IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA5Length(){
				    return 12;
				}
				public Integer PRECO_TABELA5Precision(){
				    return 4;
				}
				public String PRECO_TABELA5Default(){
				
					return null;
				
				}
				public String PRECO_TABELA5Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA5Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA5OriginalDbColumnName(){
				
					return "PRECO_TABELA5";
				
				}

				
			    public BigDecimal PRECO_TABELA6;

				public BigDecimal getPRECO_TABELA6 () {
					return this.PRECO_TABELA6;
				}

				public Boolean PRECO_TABELA6IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA6IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA6Length(){
				    return 12;
				}
				public Integer PRECO_TABELA6Precision(){
				    return 4;
				}
				public String PRECO_TABELA6Default(){
				
					return null;
				
				}
				public String PRECO_TABELA6Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA6Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA6OriginalDbColumnName(){
				
					return "PRECO_TABELA6";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String ATIVO_VENDA;

				public String getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public String ATIVO_COMPRA;

				public String getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Integer SEM_SALDO;

				public Integer getSEM_SALDO () {
					return this.SEM_SALDO;
				}

				public Boolean SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean SEM_SALDOIsKey(){
				    return false;
				}
				public Integer SEM_SALDOLength(){
				    return null;
				}
				public Integer SEM_SALDOPrecision(){
				    return null;
				}
				public String SEM_SALDODefault(){
				
					return null;
				
				}
				public String SEM_SALDOComment(){
				
				    return "";
				
				}
				public String SEM_SALDOPattern(){
				
					return "";
				
				}
				public String SEM_SALDOOriginalDbColumnName(){
				
					return "SEM_SALDO";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct other = (copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.SALDO_FISICO = this.SALDO_FISICO;
	            other.SALDO_RESERVADO = this.SALDO_RESERVADO;
	            other.RESERVADO_EXTERNO = this.RESERVADO_EXTERNO;
	            other.RESERVADO_ENDERECAMENTO = this.RESERVADO_ENDERECAMENTO;
	            other.RESERVADO_GARANTIA = this.RESERVADO_GARANTIA;
	            other.RESERVADO_EXTERNO_1 = this.RESERVADO_EXTERNO_1;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.PRECO_TABELA1 = this.PRECO_TABELA1;
	            other.PRECO_TABELA2 = this.PRECO_TABELA2;
	            other.PRECO_TABELA3 = this.PRECO_TABELA3;
	            other.PRECO_TABELA4 = this.PRECO_TABELA4;
	            other.PRECO_TABELA5 = this.PRECO_TABELA5;
	            other.PRECO_TABELA6 = this.PRECO_TABELA6;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.SEM_SALDO = this.SEM_SALDO;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.RESERVADO_ENDERECAMENTO = readInteger(dis);
					
						this.RESERVADO_GARANTIA = readInteger(dis);
					
						this.RESERVADO_EXTERNO_1 = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.SALDO_RESERVADO = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.RESERVADO_ENDERECAMENTO = readInteger(dis);
					
						this.RESERVADO_GARANTIA = readInteger(dis);
					
						this.RESERVADO_EXTERNO_1 = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.SEM_SALDO = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ENDERECAMENTO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_GARANTIA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO_1,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_RESERVADO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ENDERECAMENTO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_GARANTIA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO_1,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.SEM_SALDO,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_FISICO="+String.valueOf(SALDO_FISICO));
		sb.append(",SALDO_RESERVADO="+String.valueOf(SALDO_RESERVADO));
		sb.append(",RESERVADO_EXTERNO="+String.valueOf(RESERVADO_EXTERNO));
		sb.append(",RESERVADO_ENDERECAMENTO="+String.valueOf(RESERVADO_ENDERECAMENTO));
		sb.append(",RESERVADO_GARANTIA="+String.valueOf(RESERVADO_GARANTIA));
		sb.append(",RESERVADO_EXTERNO_1="+String.valueOf(RESERVADO_EXTERNO_1));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",PRECO_TABELA1="+String.valueOf(PRECO_TABELA1));
		sb.append(",PRECO_TABELA2="+String.valueOf(PRECO_TABELA2));
		sb.append(",PRECO_TABELA3="+String.valueOf(PRECO_TABELA3));
		sb.append(",PRECO_TABELA4="+String.valueOf(PRECO_TABELA4));
		sb.append(",PRECO_TABELA5="+String.valueOf(PRECO_TABELA5));
		sb.append(",PRECO_TABELA6="+String.valueOf(PRECO_TABELA6));
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",ATIVO_VENDA="+ATIVO_VENDA);
		sb.append(",ATIVO_COMPRA="+ATIVO_COMPRA);
		sb.append(",SEM_SALDO="+String.valueOf(SEM_SALDO));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date dia;

				public java.util.Date getDia () {
					return this.dia;
				}

				public Boolean diaIsNullable(){
				    return true;
				}
				public Boolean diaIsKey(){
				    return true;
				}
				public Integer diaLength(){
				    return null;
				}
				public Integer diaPrecision(){
				    return null;
				}
				public String diaDefault(){
				
					return null;
				
				}
				public String diaComment(){
				
				    return "";
				
				}
				public String diaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String diaOriginalDbColumnName(){
				
					return "dia";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_FISICO;

				public Integer getSALDO_FISICO () {
					return this.SALDO_FISICO;
				}

				public Boolean SALDO_FISICOIsNullable(){
				    return true;
				}
				public Boolean SALDO_FISICOIsKey(){
				    return false;
				}
				public Integer SALDO_FISICOLength(){
				    return null;
				}
				public Integer SALDO_FISICOPrecision(){
				    return null;
				}
				public String SALDO_FISICODefault(){
				
					return null;
				
				}
				public String SALDO_FISICOComment(){
				
				    return "";
				
				}
				public String SALDO_FISICOPattern(){
				
					return "";
				
				}
				public String SALDO_FISICOOriginalDbColumnName(){
				
					return "SALDO_FISICO";
				
				}

				
			    public Integer RESERVADO_ORDEM_PRODUCAO;

				public Integer getRESERVADO_ORDEM_PRODUCAO () {
					return this.RESERVADO_ORDEM_PRODUCAO;
				}

				public Boolean RESERVADO_ORDEM_PRODUCAOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_ORDEM_PRODUCAOIsKey(){
				    return false;
				}
				public Integer RESERVADO_ORDEM_PRODUCAOLength(){
				    return null;
				}
				public Integer RESERVADO_ORDEM_PRODUCAOPrecision(){
				    return null;
				}
				public String RESERVADO_ORDEM_PRODUCAODefault(){
				
					return null;
				
				}
				public String RESERVADO_ORDEM_PRODUCAOComment(){
				
				    return "";
				
				}
				public String RESERVADO_ORDEM_PRODUCAOPattern(){
				
					return "";
				
				}
				public String RESERVADO_ORDEM_PRODUCAOOriginalDbColumnName(){
				
					return "RESERVADO_ORDEM_PRODUCAO";
				
				}

				
			    public Integer RESERVADO_PEDIDO_VENDA;

				public Integer getRESERVADO_PEDIDO_VENDA () {
					return this.RESERVADO_PEDIDO_VENDA;
				}

				public Boolean RESERVADO_PEDIDO_VENDAIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_PEDIDO_VENDAIsKey(){
				    return false;
				}
				public Integer RESERVADO_PEDIDO_VENDALength(){
				    return null;
				}
				public Integer RESERVADO_PEDIDO_VENDAPrecision(){
				    return null;
				}
				public String RESERVADO_PEDIDO_VENDADefault(){
				
					return null;
				
				}
				public String RESERVADO_PEDIDO_VENDAComment(){
				
				    return "";
				
				}
				public String RESERVADO_PEDIDO_VENDAPattern(){
				
					return "";
				
				}
				public String RESERVADO_PEDIDO_VENDAOriginalDbColumnName(){
				
					return "RESERVADO_PEDIDO_VENDA";
				
				}

				
			    public Integer RESERVADO_ENDERECAMENTO;

				public Integer getRESERVADO_ENDERECAMENTO () {
					return this.RESERVADO_ENDERECAMENTO;
				}

				public Boolean RESERVADO_ENDERECAMENTOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_ENDERECAMENTOIsKey(){
				    return false;
				}
				public Integer RESERVADO_ENDERECAMENTOLength(){
				    return null;
				}
				public Integer RESERVADO_ENDERECAMENTOPrecision(){
				    return null;
				}
				public String RESERVADO_ENDERECAMENTODefault(){
				
					return null;
				
				}
				public String RESERVADO_ENDERECAMENTOComment(){
				
				    return "";
				
				}
				public String RESERVADO_ENDERECAMENTOPattern(){
				
					return "";
				
				}
				public String RESERVADO_ENDERECAMENTOOriginalDbColumnName(){
				
					return "RESERVADO_ENDERECAMENTO";
				
				}

				
			    public Integer RESERVADO_GARANTIA;

				public Integer getRESERVADO_GARANTIA () {
					return this.RESERVADO_GARANTIA;
				}

				public Boolean RESERVADO_GARANTIAIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_GARANTIAIsKey(){
				    return false;
				}
				public Integer RESERVADO_GARANTIALength(){
				    return null;
				}
				public Integer RESERVADO_GARANTIAPrecision(){
				    return null;
				}
				public String RESERVADO_GARANTIADefault(){
				
					return null;
				
				}
				public String RESERVADO_GARANTIAComment(){
				
				    return "";
				
				}
				public String RESERVADO_GARANTIAPattern(){
				
					return "";
				
				}
				public String RESERVADO_GARANTIAOriginalDbColumnName(){
				
					return "RESERVADO_GARANTIA";
				
				}

				
			    public Integer RESERVADO_EXTERNO;

				public Integer getRESERVADO_EXTERNO () {
					return this.RESERVADO_EXTERNO;
				}

				public Boolean RESERVADO_EXTERNOIsNullable(){
				    return true;
				}
				public Boolean RESERVADO_EXTERNOIsKey(){
				    return false;
				}
				public Integer RESERVADO_EXTERNOLength(){
				    return null;
				}
				public Integer RESERVADO_EXTERNOPrecision(){
				    return null;
				}
				public String RESERVADO_EXTERNODefault(){
				
					return null;
				
				}
				public String RESERVADO_EXTERNOComment(){
				
				    return "";
				
				}
				public String RESERVADO_EXTERNOPattern(){
				
					return "";
				
				}
				public String RESERVADO_EXTERNOOriginalDbColumnName(){
				
					return "RESERVADO_EXTERNO";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return 12;
				}
				public Integer VL_CUSTOPrecision(){
				    return 4;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public BigDecimal PRECO_TABELA1;

				public BigDecimal getPRECO_TABELA1 () {
					return this.PRECO_TABELA1;
				}

				public Boolean PRECO_TABELA1IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA1IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA1Length(){
				    return 12;
				}
				public Integer PRECO_TABELA1Precision(){
				    return 4;
				}
				public String PRECO_TABELA1Default(){
				
					return null;
				
				}
				public String PRECO_TABELA1Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA1Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA1OriginalDbColumnName(){
				
					return "PRECO_TABELA1";
				
				}

				
			    public BigDecimal PRECO_TABELA2;

				public BigDecimal getPRECO_TABELA2 () {
					return this.PRECO_TABELA2;
				}

				public Boolean PRECO_TABELA2IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA2IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA2Length(){
				    return 12;
				}
				public Integer PRECO_TABELA2Precision(){
				    return 4;
				}
				public String PRECO_TABELA2Default(){
				
					return null;
				
				}
				public String PRECO_TABELA2Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA2Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA2OriginalDbColumnName(){
				
					return "PRECO_TABELA2";
				
				}

				
			    public BigDecimal PRECO_TABELA3;

				public BigDecimal getPRECO_TABELA3 () {
					return this.PRECO_TABELA3;
				}

				public Boolean PRECO_TABELA3IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA3IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA3Length(){
				    return 12;
				}
				public Integer PRECO_TABELA3Precision(){
				    return 4;
				}
				public String PRECO_TABELA3Default(){
				
					return null;
				
				}
				public String PRECO_TABELA3Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA3Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA3OriginalDbColumnName(){
				
					return "PRECO_TABELA3";
				
				}

				
			    public BigDecimal PRECO_TABELA4;

				public BigDecimal getPRECO_TABELA4 () {
					return this.PRECO_TABELA4;
				}

				public Boolean PRECO_TABELA4IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA4IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA4Length(){
				    return 12;
				}
				public Integer PRECO_TABELA4Precision(){
				    return 4;
				}
				public String PRECO_TABELA4Default(){
				
					return null;
				
				}
				public String PRECO_TABELA4Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA4Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA4OriginalDbColumnName(){
				
					return "PRECO_TABELA4";
				
				}

				
			    public BigDecimal PRECO_TABELA5;

				public BigDecimal getPRECO_TABELA5 () {
					return this.PRECO_TABELA5;
				}

				public Boolean PRECO_TABELA5IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA5IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA5Length(){
				    return 12;
				}
				public Integer PRECO_TABELA5Precision(){
				    return 4;
				}
				public String PRECO_TABELA5Default(){
				
					return null;
				
				}
				public String PRECO_TABELA5Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA5Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA5OriginalDbColumnName(){
				
					return "PRECO_TABELA5";
				
				}

				
			    public BigDecimal PRECO_TABELA6;

				public BigDecimal getPRECO_TABELA6 () {
					return this.PRECO_TABELA6;
				}

				public Boolean PRECO_TABELA6IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA6IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA6Length(){
				    return 12;
				}
				public Integer PRECO_TABELA6Precision(){
				    return 4;
				}
				public String PRECO_TABELA6Default(){
				
					return null;
				
				}
				public String PRECO_TABELA6Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA6Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA6OriginalDbColumnName(){
				
					return "PRECO_TABELA6";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public String ATIVO_VENDA;

				public String getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public String ATIVO_COMPRA;

				public String getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.dia = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.RESERVADO_ORDEM_PRODUCAO = readInteger(dis);
					
						this.RESERVADO_PEDIDO_VENDA = readInteger(dis);
					
						this.RESERVADO_ENDERECAMENTO = readInteger(dis);
					
						this.RESERVADO_GARANTIA = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.dia = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_FISICO = readInteger(dis);
					
						this.RESERVADO_ORDEM_PRODUCAO = readInteger(dis);
					
						this.RESERVADO_PEDIDO_VENDA = readInteger(dis);
					
						this.RESERVADO_ENDERECAMENTO = readInteger(dis);
					
						this.RESERVADO_GARANTIA = readInteger(dis);
					
						this.RESERVADO_EXTERNO = readInteger(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA1 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA2 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA3 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA4 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA5 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA6 = (BigDecimal) dis.readObject();
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
					this.ATIVO_VENDA = readString(dis);
					
					this.ATIVO_COMPRA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.dia,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ORDEM_PRODUCAO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_PEDIDO_VENDA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ENDERECAMENTO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_GARANTIA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.dia,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_FISICO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ORDEM_PRODUCAO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_PEDIDO_VENDA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_ENDERECAMENTO,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_GARANTIA,dos);
					
					// Integer
				
						writeInteger(this.RESERVADO_EXTERNO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA5);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA6);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// String
				
						writeString(this.ATIVO_VENDA,dos);
					
					// String
				
						writeString(this.ATIVO_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dia="+String.valueOf(dia));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_FISICO="+String.valueOf(SALDO_FISICO));
		sb.append(",RESERVADO_ORDEM_PRODUCAO="+String.valueOf(RESERVADO_ORDEM_PRODUCAO));
		sb.append(",RESERVADO_PEDIDO_VENDA="+String.valueOf(RESERVADO_PEDIDO_VENDA));
		sb.append(",RESERVADO_ENDERECAMENTO="+String.valueOf(RESERVADO_ENDERECAMENTO));
		sb.append(",RESERVADO_GARANTIA="+String.valueOf(RESERVADO_GARANTIA));
		sb.append(",RESERVADO_EXTERNO="+String.valueOf(RESERVADO_EXTERNO));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",PRECO_TABELA1="+String.valueOf(PRECO_TABELA1));
		sb.append(",PRECO_TABELA2="+String.valueOf(PRECO_TABELA2));
		sb.append(",PRECO_TABELA3="+String.valueOf(PRECO_TABELA3));
		sb.append(",PRECO_TABELA4="+String.valueOf(PRECO_TABELA4));
		sb.append(",PRECO_TABELA5="+String.valueOf(PRECO_TABELA5));
		sb.append(",PRECO_TABELA6="+String.valueOf(PRECO_TABELA6));
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",ATIVO_VENDA="+ATIVO_VENDA);
		sb.append(",ATIVO_COMPRA="+ATIVO_COMPRA);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct();
row36Struct row36 = new row36Struct();
todosStruct todos = new todosStruct();
todosStruct row8 = todos;
sem_saldoStruct sem_saldo = new sem_saldoStruct();
row10Struct row10 = new row10Struct();
row9Struct row9 = new row9Struct();
row11Struct row11 = new row11Struct();








	
	/**
	 * [tDBOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_17", false);
		start_Hash.put("tDBOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tDBOutput_17 = 0;
		





String dbschema_tDBOutput_17 = null;
	dbschema_tDBOutput_17 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_17 = null;
if(dbschema_tDBOutput_17 == null || dbschema_tDBOutput_17.trim().length() == 0) {
	tableName_tDBOutput_17 = ("dw_t_indicador_estoque_diario").toLowerCase();
} else {
	tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\"" + ("dw_t_indicador_estoque_diario").toLowerCase();
}


int nb_line_tDBOutput_17 = 0;
int nb_line_update_tDBOutput_17 = 0;
int nb_line_inserted_tDBOutput_17 = 0;
int nb_line_deleted_tDBOutput_17 = 0;
int nb_line_rejected_tDBOutput_17 = 0;

int deletedCount_tDBOutput_17=0;
int updatedCount_tDBOutput_17=0;
int insertedCount_tDBOutput_17=0;
int rowsToCommitCount_tDBOutput_17=0;
int rejectedCount_tDBOutput_17=0;

boolean whetherReject_tDBOutput_17 = false;

java.sql.Connection conn_tDBOutput_17 = null;
String dbUser_tDBOutput_17 = null;

	conn_tDBOutput_17 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_17 = 100000;
   int batchSizeCounter_tDBOutput_17=0;

int count_tDBOutput_17=0;
        java.lang.StringBuilder sb_tDBOutput_17 = new java.lang.StringBuilder();
        sb_tDBOutput_17.append("INSERT INTO \"").append(tableName_tDBOutput_17).append("\" (\"dia\",\"cd_produto\",\"cd_empresa\",\"saldo_fisico\",\"saldo_reservado\",\"reservado_externo\",\"saldo_disponivel\",\"preco_tabela1\",\"preco_tabela2\",\"preco_tabela3\",\"preco_tabela4\",\"preco_tabela5\",\"preco_tabela6\",\"preco_tabela7\",\"ativo_venda\",\"ativo_compra\",\"dias_sem_saldo\",\"sem_saldo\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_17 = sb_tDBOutput_17.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17.prepareStatement(insert_tDBOutput_17);
	    resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);
	    

 



/**
 * [tDBOutput_17 begin ] stop
 */



	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"todos");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<todosStruct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_dw_t_indicador_estoque_diario_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<todosStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */







	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_indicador_estoque_diario_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sem_saldo");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
todosStruct todos_tmp = new todosStruct();
sem_saldoStruct sem_saldo_tmp = new sem_saldoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT '"+context.hoje+"' dia,\n       I.ITE_CODITE CD_PRODUTO,\n       G.ITE_CODEMP CD_EMPRESA,\n       G.ITE_SALDOS SALDO_FISICO,\n       ITE"
+"_QTPD_P RESERVADO_ORDEM_PRODUCAO,\n       (ITE_QTPD_V+ITE_QTPD_F) RESERVADO_PEDIDO_VENDA,\n       ITE_QTPD_E RESERVADO_E"
+"NDERECAMENTO,\n       ITE_SALREG RESERVADO_GARANTIA,\n       ITE_SALEXT RESERVADO_EXTERNO,\n       (IFNULL(G.ITE_SALDOS,"
+"'0') - IFNULL(ITE_QTPD_P,'0') - IFNULL(ITE_QTPD_V,'0') - IFNULL(ITE_QTPD_F,'0') - IFNULL(ITE_SALREG,'0') - IFNULL(ITE_SA"
+"LEXT,'0')) SALDO_DISPONIVEL,\n       ROUND(G.ITE_PRECUS,4) VL_CUSTO,\n       ROUND(G.ITE_PREVE1,4) PRECO_TABELA1,\n     "
+"  ROUND(G.ITE_PREVE2,4) AS PRECO_TABELA2,\n       ROUND(G.ITE_PREVE3,4) AS PRECO_TABELA3,\n       ROUND(G.ITE_PREVE4,4) "
+"AS PRECO_TABELA4,\n       ROUND(G.ITE_PREVE5,4) AS PRECO_TABELA5,\n       ROUND(G.ITE_PREVE6,4) AS PRECO_TABELA6,\n     "
+"  ROUND(G.ITE_PREVE7,4) AS PRECO_TABELA7,\n       ITE_ITEATI ATIVO_VENDA,\n       ITE_ATICOM  ATIVO_COMPRA,\n      CASE "
+"WHEN (IFNULL(G.ITE_SALDOS,'0') - IFNULL(ITE_QTPD_P,'0') - IFNULL(ITE_QTPD_V,'0') - IFNULL(ITE_QTPD_F,'0') - IFNULL(ITE_S"
+"ALREG,'0') - IFNULL(ITE_SALEXT,'0')) > 0 THEN 0\n                     ELSE -1\n                      END AS DIAS_SEM_SAL"
+"DO\n  FROM CADITE I,\n       ITEGER G\n WHERE G.ITE_CODITE = I.ITE_CODITE\n   AND ITE_ITEATI = 'S'";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row31.dia = null;
							} else {
										
				if(rs_tDBInput_2.getString(1) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(1);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row31.dia = rs_tDBInput_2.getTimestamp(1);
					} else {
						row31.dia = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row31.dia =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row31.CD_PRODUTO = null;
							} else {
	                         		
        	row31.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row31.CD_EMPRESA = null;
							} else {
	                         		
        	row31.CD_EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row31.SALDO_FISICO = null;
							} else {
		                          
            row31.SALDO_FISICO = rs_tDBInput_2.getInt(4);
            if(rs_tDBInput_2.wasNull()){
                    row31.SALDO_FISICO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row31.RESERVADO_ORDEM_PRODUCAO = null;
							} else {
		                          
            row31.RESERVADO_ORDEM_PRODUCAO = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    row31.RESERVADO_ORDEM_PRODUCAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row31.RESERVADO_PEDIDO_VENDA = null;
							} else {
		                          
            row31.RESERVADO_PEDIDO_VENDA = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    row31.RESERVADO_PEDIDO_VENDA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row31.RESERVADO_ENDERECAMENTO = null;
							} else {
		                          
            row31.RESERVADO_ENDERECAMENTO = rs_tDBInput_2.getInt(7);
            if(rs_tDBInput_2.wasNull()){
                    row31.RESERVADO_ENDERECAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row31.RESERVADO_GARANTIA = null;
							} else {
		                          
            row31.RESERVADO_GARANTIA = rs_tDBInput_2.getInt(8);
            if(rs_tDBInput_2.wasNull()){
                    row31.RESERVADO_GARANTIA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row31.RESERVADO_EXTERNO = null;
							} else {
		                          
            row31.RESERVADO_EXTERNO = rs_tDBInput_2.getInt(9);
            if(rs_tDBInput_2.wasNull()){
                    row31.RESERVADO_EXTERNO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row31.SALDO_DISPONIVEL = null;
							} else {
		                          
            row31.SALDO_DISPONIVEL = rs_tDBInput_2.getInt(10);
            if(rs_tDBInput_2.wasNull()){
                    row31.SALDO_DISPONIVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row31.VL_CUSTO = null;
							} else {
		                          
            row31.VL_CUSTO = rs_tDBInput_2.getBigDecimal(11);
            if(rs_tDBInput_2.wasNull()){
                    row31.VL_CUSTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row31.PRECO_TABELA1 = null;
							} else {
		                          
            row31.PRECO_TABELA1 = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row31.PRECO_TABELA2 = null;
							} else {
		                          
            row31.PRECO_TABELA2 = rs_tDBInput_2.getBigDecimal(13);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row31.PRECO_TABELA3 = null;
							} else {
		                          
            row31.PRECO_TABELA3 = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA3 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row31.PRECO_TABELA4 = null;
							} else {
		                          
            row31.PRECO_TABELA4 = rs_tDBInput_2.getBigDecimal(15);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA4 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row31.PRECO_TABELA5 = null;
							} else {
		                          
            row31.PRECO_TABELA5 = rs_tDBInput_2.getBigDecimal(16);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA5 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row31.PRECO_TABELA6 = null;
							} else {
		                          
            row31.PRECO_TABELA6 = rs_tDBInput_2.getBigDecimal(17);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA6 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row31.PRECO_TABELA7 = null;
							} else {
		                          
            row31.PRECO_TABELA7 = rs_tDBInput_2.getBigDecimal(18);
            if(rs_tDBInput_2.wasNull()){
                    row31.PRECO_TABELA7 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row31.ATIVO_VENDA = null;
							} else {
	                         		
        	row31.ATIVO_VENDA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row31.ATIVO_COMPRA = null;
							} else {
	                         		
        	row31.ATIVO_COMPRA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row31.DIAS_SEM_SALDO = null;
							} else {
		                          
            row31.DIAS_SEM_SALDO = rs_tDBInput_2.getInt(21);
            if(rs_tDBInput_2.wasNull()){
                    row31.DIAS_SEM_SALDO = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_17 = false;
		boolean mainRowRejected_tMap_17 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.DIA = row31.dia ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.CD_PRODUTO = row31.CD_PRODUTO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.CD_EMPRESA = row31.CD_EMPRESA ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.SALDO_FISICO = row31.SALDO_FISICO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.SALDO_RESERVADO = row31.RESERVADO_ORDEM_PRODUCAO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.RESERVADO_EXTERNO = row31.RESERVADO_PEDIDO_VENDA ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.RESERVADO_ENDERECAMENTO = row31.RESERVADO_ENDERECAMENTO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.RESERVADO_GARANTIA = row31.RESERVADO_GARANTIA ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.RESERVADO_EXTERNO_1 = row31.RESERVADO_EXTERNO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.SALDO_DISPONIVEL = 
row31.SALDO_DISPONIVEL != null ? row31.SALDO_DISPONIVEL : 0;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.VL_CUSTO = row31.VL_CUSTO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA1 = row31.PRECO_TABELA1 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA2 = row31.PRECO_TABELA2 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA3 = row31.PRECO_TABELA3 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA4 = row31.PRECO_TABELA4 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA5 = row31.PRECO_TABELA5 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA6 = row31.PRECO_TABELA6 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.PRECO_TABELA7 = row31.PRECO_TABELA7 ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.ATIVO_VENDA = row31.ATIVO_VENDA ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.ATIVO_COMPRA = row31.ATIVO_COMPRA ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.SEM_SALDO = null;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp.DIAS_SEM_SALDO = row31.DIAS_SEM_SALDO ;
copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0"
						
						);
					}
					

    //Code generate according to input schema and output schema
row36.DIA = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.DIA;
row36.CD_PRODUTO = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.CD_PRODUTO;
row36.CD_EMPRESA = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.CD_EMPRESA;
row36.SALDO_FISICO = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.SALDO_FISICO;
row36.SALDO_RESERVADO = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.SALDO_RESERVADO;
row36.RESERVADO_EXTERNO = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.RESERVADO_EXTERNO;
row36.SALDO_DISPONIVEL = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.SALDO_DISPONIVEL;
row36.PRECO_TABELA1 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA1;
row36.PRECO_TABELA2 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA2;
row36.PRECO_TABELA3 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA3;
row36.PRECO_TABELA4 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA4;
row36.PRECO_TABELA5 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA5;
row36.PRECO_TABELA6 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA6;
row36.PRECO_TABELA7 = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.PRECO_TABELA7;
row36.ATIVO_VENDA = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.ATIVO_VENDA;
row36.ATIVO_COMPRA = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.ATIVO_COMPRA;

if (copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.SALDO_DISPONIVEL > 0) {
row36.SEM_SALDO = 1;
} else {
row36.SEM_SALDO = 0;
}

row36.DIAS_SEM_SALDO = copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0.DIAS_SEM_SALDO;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

todos = null;
sem_saldo = null;


// # Output table : 'todos'
todos_tmp.DIA = row36.DIA;
todos_tmp.CD_PRODUTO = row36.CD_PRODUTO;
todos_tmp.CD_EMPRESA = row36.CD_EMPRESA;
todos_tmp.SALDO_FISICO = row36.SALDO_FISICO;
todos_tmp.SALDO_RESERVADO = row36.SALDO_RESERVADO;
todos_tmp.RESERVADO_EXTERNO = row36.RESERVADO_EXTERNO;
todos_tmp.SALDO_DISPONIVEL = row36.SALDO_DISPONIVEL;
todos_tmp.PRECO_TABELA1 = row36.PRECO_TABELA1;
todos_tmp.PRECO_TABELA2 = row36.PRECO_TABELA2;
todos_tmp.PRECO_TABELA3 = row36.PRECO_TABELA3;
todos_tmp.PRECO_TABELA4 = row36.PRECO_TABELA4;
todos_tmp.PRECO_TABELA5 = row36.PRECO_TABELA5;
todos_tmp.PRECO_TABELA6 = row36.PRECO_TABELA6;
todos_tmp.PRECO_TABELA7 = row36.PRECO_TABELA7;
todos_tmp.ATIVO_VENDA = row36.ATIVO_VENDA;
todos_tmp.ATIVO_COMPRA = row36.ATIVO_COMPRA;
todos_tmp.DIAS_SEM_SALDO = row36.DIAS_SEM_SALDO;
todos_tmp.SEM_SALDO = row36.SEM_SALDO;
todos = todos_tmp;

// # Output table : 'sem_saldo'
// # Filter conditions 
if( 

row36.DIAS_SEM_SALDO < 0

 ) {
sem_saldo_tmp.DIA = row36.DIA;
sem_saldo_tmp.CD_PRODUTO = row36.CD_PRODUTO;
sem_saldo_tmp.CD_EMPRESA = row36.CD_EMPRESA;
sem_saldo_tmp.PRECO_TABELA7 = row36.PRECO_TABELA7 ;
sem_saldo_tmp.SALDO_DISPONIVEL = row36.SALDO_DISPONIVEL;
sem_saldo_tmp.DIAS_SEM_SALDO = row36.DIAS_SEM_SALDO ;
sem_saldo = sem_saldo_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "todos"
if(todos != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"todos"
						
						);
					}
					



    
		todosStruct oneRow_tHashOutput_6 = new todosStruct();
				
					oneRow_tHashOutput_6.DIA = todos.DIA;
					oneRow_tHashOutput_6.CD_PRODUTO = todos.CD_PRODUTO;
					oneRow_tHashOutput_6.CD_EMPRESA = todos.CD_EMPRESA;
					oneRow_tHashOutput_6.SALDO_FISICO = todos.SALDO_FISICO;
					oneRow_tHashOutput_6.SALDO_RESERVADO = todos.SALDO_RESERVADO;
					oneRow_tHashOutput_6.RESERVADO_EXTERNO = todos.RESERVADO_EXTERNO;
					oneRow_tHashOutput_6.SALDO_DISPONIVEL = todos.SALDO_DISPONIVEL;
					oneRow_tHashOutput_6.PRECO_TABELA1 = todos.PRECO_TABELA1;
					oneRow_tHashOutput_6.PRECO_TABELA2 = todos.PRECO_TABELA2;
					oneRow_tHashOutput_6.PRECO_TABELA3 = todos.PRECO_TABELA3;
					oneRow_tHashOutput_6.PRECO_TABELA4 = todos.PRECO_TABELA4;
					oneRow_tHashOutput_6.PRECO_TABELA5 = todos.PRECO_TABELA5;
					oneRow_tHashOutput_6.PRECO_TABELA6 = todos.PRECO_TABELA6;
					oneRow_tHashOutput_6.PRECO_TABELA7 = todos.PRECO_TABELA7;
					oneRow_tHashOutput_6.ATIVO_VENDA = todos.ATIVO_VENDA;
					oneRow_tHashOutput_6.ATIVO_COMPRA = todos.ATIVO_COMPRA;
					oneRow_tHashOutput_6.DIAS_SEM_SALDO = todos.DIAS_SEM_SALDO;
					oneRow_tHashOutput_6.SEM_SALDO = todos.SEM_SALDO;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 
     row8 = todos;


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_17 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



        whetherReject_tDBOutput_17 = false;
                    if(row8.DIA != null) {
pstmt_tDBOutput_17.setTimestamp(1, new java.sql.Timestamp(row8.DIA.getTime()));
} else {
pstmt_tDBOutput_17.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(row8.CD_PRODUTO == null) {
pstmt_tDBOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(2, row8.CD_PRODUTO);
}

                    if(row8.CD_EMPRESA == null) {
pstmt_tDBOutput_17.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(3, row8.CD_EMPRESA);
}

                    if(row8.SALDO_FISICO == null) {
pstmt_tDBOutput_17.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(4, row8.SALDO_FISICO);
}

                    if(row8.SALDO_RESERVADO == null) {
pstmt_tDBOutput_17.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(5, row8.SALDO_RESERVADO);
}

                    if(row8.RESERVADO_EXTERNO == null) {
pstmt_tDBOutput_17.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(6, row8.RESERVADO_EXTERNO);
}

                    if(row8.SALDO_DISPONIVEL == null) {
pstmt_tDBOutput_17.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(7, row8.SALDO_DISPONIVEL);
}

                    pstmt_tDBOutput_17.setBigDecimal(8, row8.PRECO_TABELA1);

                    pstmt_tDBOutput_17.setBigDecimal(9, row8.PRECO_TABELA2);

                    pstmt_tDBOutput_17.setBigDecimal(10, row8.PRECO_TABELA3);

                    pstmt_tDBOutput_17.setBigDecimal(11, row8.PRECO_TABELA4);

                    pstmt_tDBOutput_17.setBigDecimal(12, row8.PRECO_TABELA5);

                    pstmt_tDBOutput_17.setBigDecimal(13, row8.PRECO_TABELA6);

                    pstmt_tDBOutput_17.setBigDecimal(14, row8.PRECO_TABELA7);

                    if(row8.ATIVO_VENDA == null) {
pstmt_tDBOutput_17.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(15, row8.ATIVO_VENDA);
}

                    if(row8.ATIVO_COMPRA == null) {
pstmt_tDBOutput_17.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(16, row8.ATIVO_COMPRA);
}

                    if(row8.DIAS_SEM_SALDO == null) {
pstmt_tDBOutput_17.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(17, row8.DIAS_SEM_SALDO);
}

                    if(row8.SEM_SALDO == null) {
pstmt_tDBOutput_17.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setInt(18, row8.SEM_SALDO);
}

			
    		pstmt_tDBOutput_17.addBatch();
    		nb_line_tDBOutput_17++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_17++;
    		  
    			if ((batchSize_tDBOutput_17 > 0) && (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
                try {
						int countSum_tDBOutput_17 = 0;
						    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
				    	rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
            	    	batchSizeCounter_tDBOutput_17 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_17){
globalMap.put("tDBOutput_17_ERROR_MESSAGE",e_tDBOutput_17.getMessage());
				    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
				    	String errormessage_tDBOutput_17;
						if (ne_tDBOutput_17 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
							errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
						}else{
							errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
						}
				    	
				    	int countSum_tDBOutput_17 = 0;
						for(int countEach_tDBOutput_17: e_tDBOutput_17.getUpdateCounts()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
						rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
						
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
				    	System.err.println(errormessage_tDBOutput_17);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_17++;

/**
 * [tDBOutput_17 main ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";
	
	

 



/**
 * [tDBOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";
	
	

 



/**
 * [tDBOutput_17 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "todos"




// Start of branch "sem_saldo"
if(sem_saldo != null) { 



	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sem_saldo"
						
						);
					}
					


  row10 = new row10Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row10.DIA=TypeConvert.Date2Date(sem_saldo.DIA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row10.CD_PRODUTO=TypeConvert.String2String(sem_saldo.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row10.CD_EMPRESA=TypeConvert.String2String(sem_saldo.CD_EMPRESA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row10.PRECO_TABELA7=TypeConvert.BigDecimal2BigDecimal(sem_saldo.PRECO_TABELA7);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row10.SALDO_DISPONIVEL=TypeConvert.Integer2String(sem_saldo.SALDO_DISPONIVEL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row10.DIAS_SEM_SALDO=TypeConvert.Integer2Integer(sem_saldo.DIAS_SEM_SALDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row10 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

    //Code generated according to input schema and output schema
row9.DIA = row10.DIA;
row9.CD_PRODUTO = row10.CD_PRODUTO;
row9.CD_EMPRESA = row10.CD_EMPRESA;
row9.PRECO_TABELA7 = row10.PRECO_TABELA7;
row9.SALDO_DISPONIVEL = row10.SALDO_DISPONIVEL.replaceAll("-1", "1");
row9.DIAS_SEM_SALDO = row10.DIAS_SEM_SALDO;




    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


  row11 = new row11Struct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              row11.DIA=TypeConvert.Date2Date(row9.DIA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row11.CD_PRODUTO=TypeConvert.String2String(row9.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row11.CD_EMPRESA=TypeConvert.String2String(row9.CD_EMPRESA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row11.PRECO_TABELA7=TypeConvert.BigDecimal2BigDecimal(row9.PRECO_TABELA7);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row11.SALDO_DISPONIVEL=TypeConvert.String2Integer(row9.SALDO_DISPONIVEL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row11.DIAS_SEM_SALDO=TypeConvert.Integer2BigDecimal(row9.DIAS_SEM_SALDO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {row11 = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_2 = new row11Struct();
				
					oneRow_tHashOutput_2.DIA = row11.DIA;
					oneRow_tHashOutput_2.CD_PRODUTO = row11.CD_PRODUTO;
					oneRow_tHashOutput_2.CD_EMPRESA = row11.CD_EMPRESA;
					oneRow_tHashOutput_2.PRECO_TABELA7 = row11.PRECO_TABELA7;
					oneRow_tHashOutput_2.SALDO_DISPONIVEL = row11.SALDO_DISPONIVEL;
					oneRow_tHashOutput_2.DIAS_SEM_SALDO = row11.DIAS_SEM_SALDO;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */

} // End of branch "sem_saldo"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfInsert_0_0");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"todos");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */

	
	/**
	 * [tDBOutput_17 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";
	
	



	    try {
				int countSum_tDBOutput_17 = 0;
				if (pstmt_tDBOutput_17 != null && batchSizeCounter_tDBOutput_17 > 0) {
						
					for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}
					rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
						
				}
		    	
		    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_17){
globalMap.put("tDBOutput_17_ERROR_MESSAGE",e_tDBOutput_17.getMessage());
	    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
	    	String errormessage_tDBOutput_17;
			if (ne_tDBOutput_17 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
				errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
			}else{
				errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
			}
	    	
	    	int countSum_tDBOutput_17 = 0;
			for(int countEach_tDBOutput_17: e_tDBOutput_17.getUpdateCounts()) {
				countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
			}
			rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
			
	    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
	    	
	    	System.err.println(errormessage_tDBOutput_17);
	    	
		}
	    
        if(pstmt_tDBOutput_17 != null) {
        		
            pstmt_tDBOutput_17.close();
            resourceMap.remove("pstmt_tDBOutput_17");
        }
    resourceMap.put("statementClosed_tDBOutput_17", true);

	nb_line_deleted_tDBOutput_17=nb_line_deleted_tDBOutput_17+ deletedCount_tDBOutput_17;
	nb_line_update_tDBOutput_17=nb_line_update_tDBOutput_17 + updatedCount_tDBOutput_17;
	nb_line_inserted_tDBOutput_17=nb_line_inserted_tDBOutput_17 + insertedCount_tDBOutput_17;
	nb_line_rejected_tDBOutput_17=nb_line_rejected_tDBOutput_17 + rejectedCount_tDBOutput_17;
	
        globalMap.put("tDBOutput_17_NB_LINE",nb_line_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_UPDATED",nb_line_update_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_DELETED",nb_line_deleted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_17);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tDBOutput_17", true);
end_Hash.put("tDBOutput_17", System.currentTimeMillis());




/**
 * [tDBOutput_17 end ] stop
 */







	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sem_saldo");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */





















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
                if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_17")) != null) {
                    pstmtToClose_tDBOutput_17.close();
                }
    }
 



/**
 * [tDBOutput_17 finally ] stop
 */







	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado Processo de Gravacao na tabela diaria: "+data);
System.out.println("********************************************************");
System.out.println("Iniciado o processo de busca de saldo do dia Anterior: "+data);

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_dw_t_indicador_estoque_diario_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";
	
	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				conn_tDBInput_15 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT DISTINCT CD_PRODUTO,\n                    CD_EMPRESA,\n                    DIAS_SEM_SALDO\n     FROM dw_t_indica"
+"dor_estoque_diario\n WHERE DIA = '"+context.ontem+"'";
		    

		    globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);

		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row37.CD_PRODUTO = null;
							} else {
	                         		
        	row37.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row37.CD_EMPRESA = null;
							} else {
	                         		
        	row37.CD_EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_15, 2, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row37.DIAS_SEM_SALDO = null;
							} else {
		                          
            row37.DIAS_SEM_SALDO = rs_tDBInput_15.getInt(3);
            if(rs_tDBInput_15.wasNull()){
                    row37.DIAS_SEM_SALDO = null;
            }
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					



    
		row37Struct oneRow_tHashOutput_3 = new row37Struct();
				
					oneRow_tHashOutput_3.CD_PRODUTO = row37.CD_PRODUTO;
					oneRow_tHashOutput_3.CD_EMPRESA = row37.CD_EMPRESA;
					oneRow_tHashOutput_3.DIAS_SEM_SALDO = row37.DIAS_SEM_SALDO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row43Struct other = (row43Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row43Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(row43Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saida1Struct implements routines.system.IPersistableRow<saida1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saida1Struct other = (saida1Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saida1Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(saida1Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_SALDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saida1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SemSaldoStruct implements routines.system.IPersistableRow<SemSaldoStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SemSaldoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_3Struct implements routines.system.IPersistableRow<after_tHashInput_3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_3Struct other = (after_tHashInput_3Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_3Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(after_tHashInput_3Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_4Process(globalMap);

		SemSaldoStruct SemSaldo = new SemSaldoStruct();
saida1Struct saida1 = new saida1Struct();
row43Struct row43 = new row43Struct();






	
	/**
	 * [tDBOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_21", false);
		start_Hash.put("tDBOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tDBOutput_21 = 0;
		





String dbschema_tDBOutput_21 = null;
	dbschema_tDBOutput_21 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_21 = null;
if(dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
	tableName_tDBOutput_21 = ("dw_t_indicador_estoque_diario").toLowerCase();
} else {
	tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("dw_t_indicador_estoque_diario").toLowerCase();
}

        int updateKeyCount_tDBOutput_21 = 3;
        if(updateKeyCount_tDBOutput_21 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_21 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_21 = 0;
int nb_line_update_tDBOutput_21 = 0;
int nb_line_inserted_tDBOutput_21 = 0;
int nb_line_deleted_tDBOutput_21 = 0;
int nb_line_rejected_tDBOutput_21 = 0;

int deletedCount_tDBOutput_21=0;
int updatedCount_tDBOutput_21=0;
int insertedCount_tDBOutput_21=0;
int rowsToCommitCount_tDBOutput_21=0;
int rejectedCount_tDBOutput_21=0;

boolean whetherReject_tDBOutput_21 = false;

java.sql.Connection conn_tDBOutput_21 = null;
String dbUser_tDBOutput_21 = null;

	conn_tDBOutput_21 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_21 = 100000;
   int batchSizeCounter_tDBOutput_21=0;

int count_tDBOutput_21=0;
	    String update_tDBOutput_21 = "UPDATE \"" + tableName_tDBOutput_21 + "\" SET \"saldo_disponivel\" = ?,\"dias_sem_saldo\" = ? WHERE \"dia\" = ? AND \"cd_produto\" = ? AND \"cd_empresa\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(update_tDBOutput_21);
	    resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);
	    

 



/**
 * [tDBOutput_21 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida1");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SemSaldo");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<OntemStruct> tHash_Lookup_Ontem = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<OntemStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<OntemStruct>) 
					globalMap.get( "tHash_Lookup_Ontem" ))
					;					
					
	

OntemStruct OntemHashKey = new OntemStruct();
OntemStruct OntemDefault = new OntemStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
saida1Struct saida1_tmp = new saida1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row11Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	SemSaldo.DIA = next_tHashInput_3.DIA;
	SemSaldo.CD_PRODUTO = next_tHashInput_3.CD_PRODUTO;
	SemSaldo.CD_EMPRESA = next_tHashInput_3.CD_EMPRESA;
	SemSaldo.PRECO_TABELA7 = next_tHashInput_3.PRECO_TABELA7;
	SemSaldo.SALDO_DISPONIVEL = next_tHashInput_3.SALDO_DISPONIVEL;
	SemSaldo.DIAS_SEM_SALDO = next_tHashInput_3.DIAS_SEM_SALDO;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SemSaldo"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
						OntemStruct Ontem = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_21 = false;
		boolean mainRowRejected_tMap_21 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Ontem" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopOntem = false;
       		  	    	
       		  	    	
 							OntemStruct OntemObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_21 = false;
								
                        		    		    OntemHashKey.CD_PRODUTO = SemSaldo.CD_PRODUTO ;
                        		    		
                        		    		    OntemHashKey.CD_EMPRESA = SemSaldo.CD_EMPRESA ;
                        		    		

								
		                        	OntemHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Ontem.lookup( OntemHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Ontem != null && tHash_Lookup_Ontem.getCount(OntemHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Ontem' and it contains more one result from keys :  Ontem.CD_PRODUTO = '" + OntemHashKey.CD_PRODUTO + "', Ontem.CD_EMPRESA = '" + OntemHashKey.CD_EMPRESA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	OntemStruct fromLookup_Ontem = null;
							Ontem = OntemDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Ontem !=null && tHash_Lookup_Ontem.hasNext()) { // G 099
								
							
								
								fromLookup_Ontem = tHash_Lookup_Ontem.next();

							
							
								} // G 099
							
							

							if(fromLookup_Ontem != null) {
								Ontem = fromLookup_Ontem;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

saida1 = null;


// # Output table : 'saida1'
saida1_tmp.DIA = SemSaldo.DIA ;
saida1_tmp.CD_PRODUTO = SemSaldo.CD_PRODUTO ;
saida1_tmp.CD_EMPRESA = SemSaldo.CD_EMPRESA ;
saida1_tmp.SALDO_DISPONIVEL = SemSaldo.SALDO_DISPONIVEL ;
saida1_tmp.DIAS_SEM_SALDO = (Ontem.DIAS_SEM_SALDO != null ? Ontem.DIAS_SEM_SALDO : 0) ;
saida1 = saida1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "saida1"
if(saida1 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"saida1"
						
						);
					}
					

    //Code generate according to input schema and output schema
row43.DIA = saida1.DIA;
row43.CD_PRODUTO = saida1.CD_PRODUTO;
row43.CD_EMPRESA = saida1.CD_EMPRESA;
row43.SALDO_DISPONIVEL = saida1.SALDO_DISPONIVEL;
//row43.DIAS_SEM_SALDO = saida1.DIAS_SEM_SALDO + 1;


if (saida1.DIAS_SEM_SALDO >= 0) {
row43.DIAS_SEM_SALDO = saida1.DIAS_SEM_SALDO+ 1;
} else{
row43.DIAS_SEM_SALDO = 0;
}
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_21 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					



        whetherReject_tDBOutput_21 = false;
                    if(row43.SALDO_DISPONIVEL == null) {
pstmt_tDBOutput_21.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_21.setInt(1, row43.SALDO_DISPONIVEL);
}

                    if(row43.DIAS_SEM_SALDO == null) {
pstmt_tDBOutput_21.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_21.setInt(2, row43.DIAS_SEM_SALDO);
}

                    if(row43.DIA != null) {
pstmt_tDBOutput_21.setTimestamp(3 + count_tDBOutput_21, new java.sql.Timestamp(row43.DIA.getTime()));
} else {
pstmt_tDBOutput_21.setNull(3 + count_tDBOutput_21, java.sql.Types.TIMESTAMP);
}


                    if(row43.CD_PRODUTO == null) {
pstmt_tDBOutput_21.setNull(4 + count_tDBOutput_21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(4 + count_tDBOutput_21, row43.CD_PRODUTO);
}


                    if(row43.CD_EMPRESA == null) {
pstmt_tDBOutput_21.setNull(5 + count_tDBOutput_21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(5 + count_tDBOutput_21, row43.CD_EMPRESA);
}


    		pstmt_tDBOutput_21.addBatch();
    		nb_line_tDBOutput_21++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_21++;
    		  
    			if ((batchSize_tDBOutput_21 > 0) && (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
                try {
						int countSum_tDBOutput_21 = 0;
						    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
				    	rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
				    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
            	    	batchSizeCounter_tDBOutput_21 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_21){
globalMap.put("tDBOutput_21_ERROR_MESSAGE",e_tDBOutput_21.getMessage());
				    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
				    	String errormessage_tDBOutput_21;
						if (ne_tDBOutput_21 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
							errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
						}else{
							errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
						}
				    	
				    	int countSum_tDBOutput_21 = 0;
						for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
						rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
						
				    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
				    	System.err.println(errormessage_tDBOutput_21);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_21++;

/**
 * [tDBOutput_21 main ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";
	
	

 



/**
 * [tDBOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";
	
	

 



/**
 * [tDBOutput_21 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "saida1"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Ontem != null) {
						tHash_Lookup_Ontem.endGet();
					}
					globalMap.remove( "tHash_Lookup_Ontem" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SemSaldo");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tDBOutput_21 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";
	
	



	    try {
				int countSum_tDBOutput_21 = 0;
				if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {
						
					for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
					rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
						
				}
		    	
		    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_21){
globalMap.put("tDBOutput_21_ERROR_MESSAGE",e_tDBOutput_21.getMessage());
	    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
	    	String errormessage_tDBOutput_21;
			if (ne_tDBOutput_21 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
				errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
			}else{
				errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
			}
	    	
	    	int countSum_tDBOutput_21 = 0;
			for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
				countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
			}
			rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
			
	    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
	    	
	    	System.err.println(errormessage_tDBOutput_21);
	    	
		}
	    
        if(pstmt_tDBOutput_21 != null) {
        		
            pstmt_tDBOutput_21.close();
            resourceMap.remove("pstmt_tDBOutput_21");
        }
    resourceMap.put("statementClosed_tDBOutput_21", true);

	nb_line_deleted_tDBOutput_21=nb_line_deleted_tDBOutput_21+ deletedCount_tDBOutput_21;
	nb_line_update_tDBOutput_21=nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
	nb_line_inserted_tDBOutput_21=nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
	nb_line_rejected_tDBOutput_21=nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;
	
        globalMap.put("tDBOutput_21_NB_LINE",nb_line_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_UPDATED",nb_line_update_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_DELETED",nb_line_deleted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tDBOutput_21", true);
end_Hash.put("tDBOutput_21", System.currentTimeMillis());




/**
 * [tDBOutput_21 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_21"
					     			globalMap.remove("tHash_Lookup_Ontem"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
                if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_21")) != null) {
                    pstmtToClose_tDBOutput_21.close();
                }
    }
 



/**
 * [tDBOutput_21 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado o processo de Atualizacao dos dias sem saldo: "+data);
System.out.println("********************************************************");
System.out.println("Iniciado o processo de Atualizacao de margem de perda: "+data);

 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class gravacaoStruct implements routines.system.IPersistableRow<gravacaoStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal previsao_perda;

				public BigDecimal getPrevisao_perda () {
					return this.previsao_perda;
				}

				public Boolean previsao_perdaIsNullable(){
				    return true;
				}
				public Boolean previsao_perdaIsKey(){
				    return false;
				}
				public Integer previsao_perdaLength(){
				    return 5;
				}
				public Integer previsao_perdaPrecision(){
				    return 4;
				}
				public String previsao_perdaDefault(){
				
					return null;
				
				}
				public String previsao_perdaComment(){
				
				    return "";
				
				}
				public String previsao_perdaPattern(){
				
					return "";
				
				}
				public String previsao_perdaOriginalDbColumnName(){
				
					return "previsao_perda";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final gravacaoStruct other = (gravacaoStruct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(gravacaoStruct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.previsao_perda = this.previsao_perda;
	            
	}

	public void copyKeysDataTo(gravacaoStruct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.previsao_perda = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.previsao_perda = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.previsao_perda);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.previsao_perda);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",previsao_perda="+String.valueOf(previsao_perda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(gravacaoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 5;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return 5;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return 4;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 5;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal previsao_perda;

				public BigDecimal getPrevisao_perda () {
					return this.previsao_perda;
				}

				public Boolean previsao_perdaIsNullable(){
				    return true;
				}
				public Boolean previsao_perdaIsKey(){
				    return false;
				}
				public Integer previsao_perdaLength(){
				    return 5;
				}
				public Integer previsao_perdaPrecision(){
				    return 4;
				}
				public String previsao_perdaDefault(){
				
					return null;
				
				}
				public String previsao_perdaComment(){
				
				    return "";
				
				}
				public String previsao_perdaPattern(){
				
					return "";
				
				}
				public String previsao_perdaOriginalDbColumnName(){
				
					return "previsao_perda";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.previsao_perda = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.previsao_perda = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.previsao_perda);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.previsao_perda);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",previsao_perda="+String.valueOf(previsao_perda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ValidacaoStruct implements routines.system.IPersistableRow<ValidacaoStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return 3;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 5;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return 5;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return 4;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 5;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ValidacaoStruct other = (ValidacaoStruct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ValidacaoStruct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            other.qtd_item = this.qtd_item;
	            
	}

	public void copyKeysDataTo(ValidacaoStruct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
		sb.append(",qtd_item="+String.valueOf(qtd_item));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ValidacaoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_5Struct implements routines.system.IPersistableRow<after_tHashInput_5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DIA;

				public java.util.Date getDIA () {
					return this.DIA;
				}

				public Boolean DIAIsNullable(){
				    return true;
				}
				public Boolean DIAIsKey(){
				    return true;
				}
				public Integer DIALength(){
				    return null;
				}
				public Integer DIAPrecision(){
				    return null;
				}
				public String DIADefault(){
				
					return null;
				
				}
				public String DIAComment(){
				
				    return "";
				
				}
				public String DIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIAOriginalDbColumnName(){
				
					return "DIA";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public BigDecimal PRECO_TABELA7;

				public BigDecimal getPRECO_TABELA7 () {
					return this.PRECO_TABELA7;
				}

				public Boolean PRECO_TABELA7IsNullable(){
				    return true;
				}
				public Boolean PRECO_TABELA7IsKey(){
				    return false;
				}
				public Integer PRECO_TABELA7Length(){
				    return 12;
				}
				public Integer PRECO_TABELA7Precision(){
				    return 4;
				}
				public String PRECO_TABELA7Default(){
				
					return null;
				
				}
				public String PRECO_TABELA7Comment(){
				
				    return "";
				
				}
				public String PRECO_TABELA7Pattern(){
				
					return "";
				
				}
				public String PRECO_TABELA7OriginalDbColumnName(){
				
					return "PRECO_TABELA7";
				
				}

				
			    public Integer SALDO_DISPONIVEL;

				public Integer getSALDO_DISPONIVEL () {
					return this.SALDO_DISPONIVEL;
				}

				public Boolean SALDO_DISPONIVELIsNullable(){
				    return true;
				}
				public Boolean SALDO_DISPONIVELIsKey(){
				    return false;
				}
				public Integer SALDO_DISPONIVELLength(){
				    return null;
				}
				public Integer SALDO_DISPONIVELPrecision(){
				    return null;
				}
				public String SALDO_DISPONIVELDefault(){
				
					return null;
				
				}
				public String SALDO_DISPONIVELComment(){
				
				    return "";
				
				}
				public String SALDO_DISPONIVELPattern(){
				
					return "";
				
				}
				public String SALDO_DISPONIVELOriginalDbColumnName(){
				
					return "SALDO_DISPONIVEL";
				
				}

				
			    public BigDecimal DIAS_SEM_SALDO;

				public BigDecimal getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DIA == null) ? 0 : this.DIA.hashCode());
					
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_5Struct other = (after_tHashInput_5Struct) obj;
		
						if (this.DIA == null) {
							if (other.DIA != null)
								return false;
						
						} else if (!this.DIA.equals(other.DIA))
						
							return false;
					
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_5Struct other) {

		other.DIA = this.DIA;
	            other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.PRECO_TABELA7 = this.PRECO_TABELA7;
	            other.SALDO_DISPONIVEL = this.SALDO_DISPONIVEL;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(after_tHashInput_5Struct other) {

		other.DIA = this.DIA;
	            	other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.DIA = readDate(dis);
					
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.PRECO_TABELA7 = (BigDecimal) dis.readObject();
					
						this.SALDO_DISPONIVEL = readInteger(dis);
					
						this.DIAS_SEM_SALDO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DIA,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECO_TABELA7);
					
					// Integer
				
						writeInteger(this.SALDO_DISPONIVEL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_SEM_SALDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DIA="+String.valueOf(DIA));
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",PRECO_TABELA7="+String.valueOf(PRECO_TABELA7));
		sb.append(",SALDO_DISPONIVEL="+String.valueOf(SALDO_DISPONIVEL));
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DIA, other.DIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);

		row1Struct row1 = new row1Struct();
ValidacaoStruct Validacao = new ValidacaoStruct();
row14Struct row14 = new row14Struct();
gravacaoStruct gravacao = new gravacaoStruct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"gravacao");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_t_indicador_estoque_diario").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_t_indicador_estoque_diario").toLowerCase();
}

        int updateKeyCount_tDBOutput_1 = 3;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 100000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"previsao_perda\" = ? WHERE \"dia\" = ? AND \"cd_produto\" = ? AND \"cd_empresa\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
gravacaoStruct gravacao_tmp = new gravacaoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Validacao");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
ValidacaoStruct Validacao_tmp = new ValidacaoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row11Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row1.DIA = next_tHashInput_5.DIA;
	row1.CD_PRODUTO = next_tHashInput_5.CD_PRODUTO;
	row1.CD_EMPRESA = next_tHashInput_5.CD_EMPRESA;
	row1.PRECO_TABELA7 = next_tHashInput_5.PRECO_TABELA7;
	row1.SALDO_DISPONIVEL = next_tHashInput_5.SALDO_DISPONIVEL;
	row1.DIAS_SEM_SALDO = next_tHashInput_5.DIAS_SEM_SALDO;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.CD_PRODUTO = row1.CD_PRODUTO ;
                        		    		
                        		    		    row13HashKey.CD_EMPRESA = row1.CD_EMPRESA ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow13 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow13 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row13'
									
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								
								if(!forceLooprow13) { // G 46
								
							
								 
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow13 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Validacao = null;


// # Output table : 'Validacao'
Validacao_tmp.DIA = row1.DIA ;
Validacao_tmp.CD_PRODUTO = row1.CD_PRODUTO ;
Validacao_tmp.CD_EMPRESA = row1.CD_EMPRESA ;
Validacao_tmp.PRECO_TABELA7 = row1.PRECO_TABELA7 ;
Validacao_tmp.DIAS_SEM_SALDO = row1.DIAS_SEM_SALDO ;
Validacao_tmp.qtd_item = (row13.qtd_item != null ? row13.qtd_item : new BigDecimal(0.0)) ;
Validacao = Validacao_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Validacao"
if(Validacao != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Validacao"
						
						);
					}
					

    //Code generated according to input schema and output schema
row14.DIA = Validacao.DIA;
row14.CD_PRODUTO = Validacao.CD_PRODUTO;
row14.CD_EMPRESA = Validacao.CD_EMPRESA;
row14.PRECO_TABELA7 = Validacao.PRECO_TABELA7;
row14.DIAS_SEM_SALDO = Validacao.DIAS_SEM_SALDO;
row14.qtd_item = Validacao.qtd_item;
row14.previsao_perda = ((Validacao.qtd_item.multiply(Validacao.PRECO_TABELA7)).multiply(Validacao.DIAS_SEM_SALDO));
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

gravacao = null;


// # Output table : 'gravacao'
gravacao_tmp.DIA = row14.DIA;
gravacao_tmp.CD_PRODUTO = row14.CD_PRODUTO;
gravacao_tmp.CD_EMPRESA = row14.CD_EMPRESA;
gravacao_tmp.previsao_perda = (row14.previsao_perda != null ? row14.previsao_perda : new BigDecimal(0)) ;
gravacao = gravacao_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "gravacao"
if(gravacao != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"gravacao"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setBigDecimal(1, gravacao.previsao_perda);

                    if(gravacao.DIA != null) {
pstmt_tDBOutput_1.setTimestamp(2 + count_tDBOutput_1, new java.sql.Timestamp(gravacao.DIA.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2 + count_tDBOutput_1, java.sql.Types.TIMESTAMP);
}


                    if(gravacao.CD_PRODUTO == null) {
pstmt_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3 + count_tDBOutput_1, gravacao.CD_PRODUTO);
}


                    if(gravacao.CD_EMPRESA == null) {
pstmt_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4 + count_tDBOutput_1, gravacao.CD_EMPRESA);
}


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "gravacao"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "Validacao"



	
		} // close loop of lookup 'row13' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Validacao");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"gravacao");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado o processo de Atualizacao de margem de perda: "+data);
System.out.println("********************************************************");

 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return true;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_logStruct other = (update_logStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_logStruct other) {

		other.nm_programa = this.nm_programa;
	            other.data_inicio_execucao = this.data_inicio_execucao;
	            other.data_termino_execucao = this.data_termino_execucao;
	            other.mensagem = this.mensagem;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(update_logStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return true;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 010000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row4Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5.nm_programa = next_tHashInput_1.nm_programa;
	row5.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row5.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row5.mensagem = next_tHashInput_1.mensagem;
	row5.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row5.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row5.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class OntemStruct implements routines.system.IPersistableComparableLookupRow<OntemStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer DIAS_SEM_SALDO;

				public Integer getDIAS_SEM_SALDO () {
					return this.DIAS_SEM_SALDO;
				}

				public Boolean DIAS_SEM_SALDOIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_SALDOIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_SALDOLength(){
				    return null;
				}
				public Integer DIAS_SEM_SALDOPrecision(){
				    return null;
				}
				public String DIAS_SEM_SALDODefault(){
				
					return null;
				
				}
				public String DIAS_SEM_SALDOComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_SALDOPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_SALDOOriginalDbColumnName(){
				
					return "DIAS_SEM_SALDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OntemStruct other = (OntemStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OntemStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.DIAS_SEM_SALDO = this.DIAS_SEM_SALDO;
	            
	}

	public void copyKeysDataTo(OntemStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DIAS_SEM_SALDO = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DIAS_SEM_SALDO = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.DIAS_SEM_SALDO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.DIAS_SEM_SALDO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",DIAS_SEM_SALDO="+String.valueOf(DIAS_SEM_SALDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OntemStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		OntemStruct Ontem = new OntemStruct();




	
	/**
	 * [tAdvancedHash_Ontem begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Ontem", false);
		start_Hash.put("tAdvancedHash_Ontem", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Ontem";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Ontem");
					}
				
		int tos_count_tAdvancedHash_Ontem = 0;
		

			   		// connection name:Ontem
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_3) outputs:(Ontem,Ontem) | target node:tAdvancedHash_Ontem - inputs:(Ontem) outputs:()
			   		// linked node: tMap_21 - inputs:(SemSaldo,Ontem) outputs:(saida1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Ontem = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<OntemStruct> tHash_Lookup_Ontem =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<OntemStruct>getLookup(matchingModeEnum_Ontem);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Ontem", tHash_Lookup_Ontem);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Ontem begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row37Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row37Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	Ontem.CD_PRODUTO = next_tHashInput_4.CD_PRODUTO;
	Ontem.CD_EMPRESA = next_tHashInput_4.CD_EMPRESA;
	Ontem.DIAS_SEM_SALDO = next_tHashInput_4.DIAS_SEM_SALDO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Ontem main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Ontem";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Ontem"
						
						);
					}
					


			   
			   

					OntemStruct Ontem_HashRow = new OntemStruct();
		   	   	   
				
				Ontem_HashRow.CD_PRODUTO = Ontem.CD_PRODUTO;
				
				Ontem_HashRow.CD_EMPRESA = Ontem.CD_EMPRESA;
				
				Ontem_HashRow.DIAS_SEM_SALDO = Ontem.DIAS_SEM_SALDO;
				
			tHash_Lookup_Ontem.put(Ontem_HashRow);
			
            




 


	tos_count_tAdvancedHash_Ontem++;

/**
 * [tAdvancedHash_Ontem main ] stop
 */
	
	/**
	 * [tAdvancedHash_Ontem process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Ontem";
	
	

 



/**
 * [tAdvancedHash_Ontem process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Ontem process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Ontem";
	
	

 



/**
 * [tAdvancedHash_Ontem process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Ontem end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Ontem";
	
	

tHash_Lookup_Ontem.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Ontem");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Ontem", true);
end_Hash.put("tAdvancedHash_Ontem", System.currentTimeMillis());




/**
 * [tAdvancedHash_Ontem end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Ontem finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Ontem";
	
	

 



/**
 * [tAdvancedHash_Ontem finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 5;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.qtd_item = this.qtd_item;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.qtd_item = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.qtd_item = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.qtd_item);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.qtd_item);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_6 - inputs:(after_tHashInput_5) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row1,row13) outputs:(Validacao)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row3Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row13.CD_PRODUTO = next_tHashInput_6.CD_PRODUTO;
	row13.qtd_item = next_tHashInput_6.qtd_item;
	row13.CD_EMPRESA = next_tHashInput_6.CD_EMPRESA;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.CD_PRODUTO = row13.CD_PRODUTO;
				
				row13_HashRow.qtd_item = row13.qtd_item;
				
				row13_HashRow.CD_EMPRESA = row13.CD_EMPRESA;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_indicador_estoque_diario_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 5;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return true;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.qtd_item = this.qtd_item;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_indicador_estoque_diario) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_dw_t_indicador_estoque_diario_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nSELECT VF.COD_ITEM CD_PRODUTO,\n       SUM(VF.QTD_ITEM)/("+context.dias_antes+") QTD_ITEM,\n       VF.EMPRESA CD_EMPRESA\n  FROM VW_FATURAMENTO VF\n WHERE VF.DATA >= DATE_SUB(CURRENT_DATE(), INTERVA"
+"L ("+context.dias_antes+") DAY)\n     AND NOT EXISTS (SELECT 1 FROM MOVDET M WHERE M.DET_CODCLI = VF.COD_CLIENTE AND M.DET_NUMDOC = VF.NUMERO_NO"
+"TA_FISCAL AND DET_DOCDEV IS NOT NULL)\n GROUP BY VF.COD_ITEM, VF.EMPRESA\n\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.CD_PRODUTO = null;
							} else {
	                         		
        	row3.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.qtd_item = null;
							} else {
		                          
            row3.qtd_item = rs_tDBInput_3.getBigDecimal(2);
            if(rs_tDBInput_3.wasNull()){
                    row3.qtd_item = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.CD_EMPRESA = null;
							} else {
	                         		
        	row3.CD_EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_4 = new row3Struct();
				
					oneRow_tHashOutput_4.CD_PRODUTO = row3.CD_PRODUTO;
					oneRow_tHashOutput_4.qtd_item = row3.qtd_item;
					oneRow_tHashOutput_4.CD_EMPRESA = row3.CD_EMPRESA;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_indicador_estoque_diario dw_t_indicador_estoque_diarioClass = new dw_t_indicador_estoque_diario();

        int exitCode = dw_t_indicador_estoque_diarioClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_indicador_estoque_diario.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_indicador_estoque_diario_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_indicador_estoque_diario.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("ontem", "id_String");
                        if(context.getStringValue("ontem") == null) {
                            context.ontem = null;
                        } else {
                            context.ontem=(String) context.getProperty("ontem");
                        }
                        context.setContextType("hoje", "id_String");
                        if(context.getStringValue("hoje") == null) {
                            context.hoje = null;
                        } else {
                            context.hoje=(String) context.getProperty("hoje");
                        }
                        context.setContextType("dias_antes", "id_Integer");
                        if(context.getStringValue("dias_antes") == null) {
                            context.dias_antes = null;
                        } else {
                            try{
                                context.dias_antes=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dias_antes"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dias_antes", e.getMessage()));
                                context.dias_antes=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("ontem")) {
                context.ontem = (String) parentContextMap.get("ontem");
            }if (parentContextMap.containsKey("hoje")) {
                context.hoje = (String) parentContextMap.get("hoje");
            }if (parentContextMap.containsKey("dias_antes")) {
                context.dias_antes = (Integer) parentContextMap.get("dias_antes");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_indicador_estoque_diario");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     786925 characters generated by Talend Open Studio for Big Data 
 *     on the 25 de abril de 2025 18:03:14 BRT
 ************************************************************************************************/