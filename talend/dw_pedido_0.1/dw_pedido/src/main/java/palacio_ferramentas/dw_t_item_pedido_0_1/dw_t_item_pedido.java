// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_item_pedido_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dw_t_item_pedido Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_item_pedido implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_item_pedido";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_item_pedido.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_item_pedido.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
insert_logStruct insert_log = new insert_logStruct();
row2Struct row2 = new row2Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_item_pedido_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
        java.lang.StringBuilder sb_tDBOutput_3 = new java.lang.StringBuilder();
        sb_tDBOutput_3.append("INSERT INTO \"").append(tableName_tDBOutput_3).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_3 = sb_tDBOutput_3.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row1.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row1.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row2 = null;
        whetherReject_tDBOutput_3 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_3) {
                            row2 = new row2Struct();
                                row2.nm_programa = insert_log.nm_programa;
                                row2.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row2.data_termino_execucao = insert_log.data_termino_execucao;
                                row2.mensagem = insert_log.mensagem;
                                row2.uuid = insert_log.uuid;
                                row2.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.nm_programa = row2.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row2.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row2.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row2.mensagem;
					oneRow_tHashOutput_1.uuid = row2.uuid;
					oneRow_tHashOutput_1.versao = row2.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMPRESA_ORIGEM;

				public String getCD_EMPRESA_ORIGEM () {
					return this.CD_EMPRESA_ORIGEM;
				}

				public Boolean CD_EMPRESA_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMPRESA_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMPRESA_ORIGEM";
				
				}

				
			    public String CD_EMPRESA_FATURADO;

				public String getCD_EMPRESA_FATURADO () {
					return this.CD_EMPRESA_FATURADO;
				}

				public Boolean CD_EMPRESA_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMPRESA_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_FATURADOOriginalDbColumnName(){
				
					return "CD_EMPRESA_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout1Struct other = (copyOfout1Struct) obj;
		
						if (this.SEQUENCE == null) {
							if (other.SEQUENCE != null)
								return false;
						
						} else if (!this.SEQUENCE.equals(other.SEQUENCE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout1Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            other.CD_EMPRESA_ORIGEM = this.CD_EMPRESA_ORIGEM;
	            other.CD_EMPRESA_FATURADO = this.CD_EMPRESA_FATURADO;
	            other.PEDIDO_AUTCOM = this.PEDIDO_AUTCOM;
	            other.ESPECIE_AUTCOM = this.ESPECIE_AUTCOM;
	            other.TIPO_NOTA = this.TIPO_NOTA;
	            other.DESC_PEDIDO_ORIGEM = this.DESC_PEDIDO_ORIGEM;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DC_ITEM = this.DC_ITEM;
	            other.CD_COMBO = this.CD_COMBO;
	            other.QTD_ITEM = this.QTD_ITEM;
	            other.VL_UNITARIO = this.VL_UNITARIO;
	            other.TOTAL_CUSTO = this.TOTAL_CUSTO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DATA_SEPARACAO = this.DATA_SEPARACAO;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            
	}

	public void copyKeysDataTo(copyOfout1Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMPRESA_ORIGEM="+CD_EMPRESA_ORIGEM);
		sb.append(",CD_EMPRESA_FATURADO="+CD_EMPRESA_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEQUENCE, other.SEQUENCE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMPRESA_ORIGEM;

				public String getCD_EMPRESA_ORIGEM () {
					return this.CD_EMPRESA_ORIGEM;
				}

				public Boolean CD_EMPRESA_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMPRESA_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMPRESA_ORIGEM";
				
				}

				
			    public String CD_EMPRESA_FATURADO;

				public String getCD_EMPRESA_FATURADO () {
					return this.CD_EMPRESA_FATURADO;
				}

				public Boolean CD_EMPRESA_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMPRESA_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_FATURADOOriginalDbColumnName(){
				
					return "CD_EMPRESA_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMPRESA_ORIGEM="+CD_EMPRESA_ORIGEM);
		sb.append(",CD_EMPRESA_FATURADO="+CD_EMPRESA_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMPRESA_ORIGEM;

				public String getCD_EMPRESA_ORIGEM () {
					return this.CD_EMPRESA_ORIGEM;
				}

				public Boolean CD_EMPRESA_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMPRESA_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMPRESA_ORIGEM";
				
				}

				
			    public String CD_EMPRESA_FATURADO;

				public String getCD_EMPRESA_FATURADO () {
					return this.CD_EMPRESA_FATURADO;
				}

				public Boolean CD_EMPRESA_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMPRESA_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_FATURADOOriginalDbColumnName(){
				
					return "CD_EMPRESA_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.SEQUENCE == null) {
							if (other.SEQUENCE != null)
								return false;
						
						} else if (!this.SEQUENCE.equals(other.SEQUENCE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            other.CD_EMPRESA_ORIGEM = this.CD_EMPRESA_ORIGEM;
	            other.CD_EMPRESA_FATURADO = this.CD_EMPRESA_FATURADO;
	            other.PEDIDO_AUTCOM = this.PEDIDO_AUTCOM;
	            other.ESPECIE_AUTCOM = this.ESPECIE_AUTCOM;
	            other.TIPO_NOTA = this.TIPO_NOTA;
	            other.DESC_PEDIDO_ORIGEM = this.DESC_PEDIDO_ORIGEM;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DC_ITEM = this.DC_ITEM;
	            other.CD_COMBO = this.CD_COMBO;
	            other.QTD_ITEM = this.QTD_ITEM;
	            other.VL_UNITARIO = this.VL_UNITARIO;
	            other.TOTAL_CUSTO = this.TOTAL_CUSTO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DATA_SEPARACAO = this.DATA_SEPARACAO;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMPRESA_ORIGEM="+CD_EMPRESA_ORIGEM);
		sb.append(",CD_EMPRESA_FATURADO="+CD_EMPRESA_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEQUENCE, other.SEQUENCE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row3Struct row3 = new row3Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_item_pedido_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String SEQUENCE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.SEQUENCE == null) {
										if (other.SEQUENCE != null) 
											return false;
								
									} else if (!this.SEQUENCE.equals(other.SEQUENCE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nSELECT\nFD.AUTOINCREM as SEQUENCE,\nFG.FGO_CODEMP CD_EMPRESA_ORIGEM,\nFG.FGO_EMPFAT CD_EMPRESA_FATURADO,\nFG.FGO_NUMD"
+"OC PEDIDO_AUTCOM,\nFG.FGO_ESPDOC ESPECIE_AUTCOM,\nFG.FGO_TIPFAT TIPO_NOTA,\nFGO_NUMPOK DESC_PEDIDO_ORIGEM,\nFD.FDO_CODIT"
+"E CD_ITEM,\nFD.FDO_DESCRI DC_ITEM,\nED.FDO_ITEEST CD_COMBO,\nFD.FDO_QTDITE QTD_ITEM,\nFD.FDO_UNITAR VL_UNITARIO,\nFD.FDO"
+"_TOTCUS TOTAL_CUSTO,\nCONCAT(FG.FGO_DTAENT,' ',FG.FGO_HORENT) DT_PEDIDO,\nCONCAT(ED.FDO_DTBXSE, ' ', ED.FDO_HRBXSE) DATA"
+"_SEPARACAO,\nFG.FGO_CODVEN CD_VENDEDOR\nFROM FATGOR FG\nINNER JOIN EXTGOR EG ON FG.AUTOINCREM = EG.FGO_SEQFGO\nINNER JOI"
+"N FATDOR FD ON FG.AUTOINCREM = FD.FDO_SEQGER\nINNER JOIN EXTDOR ED ON FD.AUTOINCREM = ED.FDO_SEQFDO\nWHERE FG.FGO_DTAENT"
+" >= SUBDATE(CURDATE(), 1)\nUNION ALL\nSELECT\nFD.AUTOINCREM as SEQUENCE,\nFG.FGO_CODEMP CD_EMPRESA_ORIGEM,\nFG.FGO_EMPFA"
+"T CD_EMPRESA_FATURADO,\nFG.FGO_NUMDOC PEDIDO_AUTCOM,\nFG.FGO_ESPDOC ESPECIE_AUTCOM,\nFG.FGO_TIPFAT TIPO_NOTA,\nFGO_NUMPO"
+"K DESC_PEDIDO_ORIGEM,\nFD.FDO_CODITE CD_ITEM,\nFD.FDO_DESCRI DC_ITEM,\nED.FDO_ITEEST CD_COMBO,\nFD.FDO_QTDITE QTD_ITEM,"
+"\nFD.FDO_UNITAR VL_UNITARIO,\nFD.FDO_TOTCUS TOTAL_CUSTO,\nCONCAT(FG.FGO_DTAENT,' ',FG.FGO_HORENT) DT_PEDIDO,\nCONCAT(ED.F"
+"DO_DTBXSE, ' ', ED.FDO_HRBXSE) DATA_SEPARACAO,\nFG.FGO_CODVEN CD_VENDEDOR\nFROM DEL_FATGOR FG\nINNER JOIN DEL_EXTGOR EG "
+"ON FG.AUTOINCREM = EG.FGO_SEQFGO\nINNER JOIN DEL_FATDOR FD ON FG.AUTOINCREM = FD.FDO_SEQGER\nINNER JOIN DEL_EXTDOR ED ON"
+" FD.AUTOINCREM = ED.FDO_SEQFDO\nWHERE FG.FGO_DTAENT >= SUBDATE(CURDATE(), 1);\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.SEQUENCE = null;
							} else {
	                         		
        	row4.SEQUENCE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.CD_EMPRESA_ORIGEM = null;
							} else {
	                         		
        	row4.CD_EMPRESA_ORIGEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.CD_EMPRESA_FATURADO = null;
							} else {
	                         		
        	row4.CD_EMPRESA_FATURADO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.PEDIDO_AUTCOM = null;
							} else {
	                         		
        	row4.PEDIDO_AUTCOM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row4.ESPECIE_AUTCOM = null;
							} else {
	                         		
        	row4.ESPECIE_AUTCOM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row4.TIPO_NOTA = null;
							} else {
	                         		
        	row4.TIPO_NOTA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row4.DESC_PEDIDO_ORIGEM = null;
							} else {
	                         		
        	row4.DESC_PEDIDO_ORIGEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row4.CD_ITEM = null;
							} else {
	                         		
        	row4.CD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row4.DC_ITEM = null;
							} else {
	                         		
        	row4.DC_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row4.CD_COMBO = null;
							} else {
	                         		
        	row4.CD_COMBO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row4.QTD_ITEM = null;
							} else {
	                         		
            row4.QTD_ITEM = rs_tDBInput_1.getDouble(11);
            if(rs_tDBInput_1.wasNull()){
                    row4.QTD_ITEM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row4.VL_UNITARIO = null;
							} else {
		                          
            row4.VL_UNITARIO = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    row4.VL_UNITARIO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row4.TOTAL_CUSTO = null;
							} else {
		                          
            row4.TOTAL_CUSTO = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row4.TOTAL_CUSTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row4.DT_PEDIDO = null;
							} else {
										
				if(rs_tDBInput_1.getString(14) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row4.DT_PEDIDO = rs_tDBInput_1.getTimestamp(14);
					} else {
						row4.DT_PEDIDO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row4.DT_PEDIDO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row4.DATA_SEPARACAO = null;
							} else {
										
				if(rs_tDBInput_1.getString(15) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row4.DATA_SEPARACAO = rs_tDBInput_1.getTimestamp(15);
					} else {
						row4.DATA_SEPARACAO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row4.DATA_SEPARACAO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row4.CD_VENDEDOR = null;
							} else {
	                         		
        	row4.CD_VENDEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
row3 = null;			
if(row4.SEQUENCE == null){
	finder_tUniqRow_2.SEQUENCE = null;
}else{
	finder_tUniqRow_2.SEQUENCE = row4.SEQUENCE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(row4.SEQUENCE == null){
	new_tUniqRow_2.SEQUENCE = null;
}else{
	new_tUniqRow_2.SEQUENCE = row4.SEQUENCE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3.SEQUENCE = row4.SEQUENCE;			row3.CD_EMPRESA_ORIGEM = row4.CD_EMPRESA_ORIGEM;			row3.CD_EMPRESA_FATURADO = row4.CD_EMPRESA_FATURADO;			row3.PEDIDO_AUTCOM = row4.PEDIDO_AUTCOM;			row3.ESPECIE_AUTCOM = row4.ESPECIE_AUTCOM;			row3.TIPO_NOTA = row4.TIPO_NOTA;			row3.DESC_PEDIDO_ORIGEM = row4.DESC_PEDIDO_ORIGEM;			row3.CD_ITEM = row4.CD_ITEM;			row3.DC_ITEM = row4.DC_ITEM;			row3.CD_COMBO = row4.CD_COMBO;			row3.QTD_ITEM = row4.QTD_ITEM;			row3.VL_UNITARIO = row4.VL_UNITARIO;			row3.TOTAL_CUSTO = row4.TOTAL_CUSTO;			row3.DT_PEDIDO = row4.DT_PEDIDO;			row3.DATA_SEPARACAO = row4.DATA_SEPARACAO;			row3.CD_VENDEDOR = row4.CD_VENDEDOR;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.SEQUENCE = row3.SEQUENCE ;
copyOfout1_tmp.CD_EMPRESA_ORIGEM = row3.CD_EMPRESA_ORIGEM ;
copyOfout1_tmp.CD_EMPRESA_FATURADO = row3.CD_EMPRESA_FATURADO ;
copyOfout1_tmp.PEDIDO_AUTCOM = row3.PEDIDO_AUTCOM ;
copyOfout1_tmp.ESPECIE_AUTCOM = row3.ESPECIE_AUTCOM ;
copyOfout1_tmp.TIPO_NOTA = row3.TIPO_NOTA ;
copyOfout1_tmp.DESC_PEDIDO_ORIGEM = row3.DESC_PEDIDO_ORIGEM ;
copyOfout1_tmp.CD_ITEM = row3.CD_ITEM ;
copyOfout1_tmp.DC_ITEM = row3.DC_ITEM ;
copyOfout1_tmp.CD_COMBO = row3.CD_COMBO ;
copyOfout1_tmp.QTD_ITEM = row3.QTD_ITEM ;
copyOfout1_tmp.VL_UNITARIO = row3.VL_UNITARIO ;
copyOfout1_tmp.TOTAL_CUSTO = row3.TOTAL_CUSTO ;
copyOfout1_tmp.DT_PEDIDO = row3.DT_PEDIDO ;
copyOfout1_tmp.DATA_SEPARACAO = row3.DATA_SEPARACAO ;
copyOfout1_tmp.CD_VENDEDOR = row3.CD_VENDEDOR ;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					



    
		copyOfout1Struct oneRow_tHashOutput_2 = new copyOfout1Struct();
				
					oneRow_tHashOutput_2.SEQUENCE = copyOfout1.SEQUENCE;
					oneRow_tHashOutput_2.CD_EMPRESA_ORIGEM = copyOfout1.CD_EMPRESA_ORIGEM;
					oneRow_tHashOutput_2.CD_EMPRESA_FATURADO = copyOfout1.CD_EMPRESA_FATURADO;
					oneRow_tHashOutput_2.PEDIDO_AUTCOM = copyOfout1.PEDIDO_AUTCOM;
					oneRow_tHashOutput_2.ESPECIE_AUTCOM = copyOfout1.ESPECIE_AUTCOM;
					oneRow_tHashOutput_2.TIPO_NOTA = copyOfout1.TIPO_NOTA;
					oneRow_tHashOutput_2.DESC_PEDIDO_ORIGEM = copyOfout1.DESC_PEDIDO_ORIGEM;
					oneRow_tHashOutput_2.CD_ITEM = copyOfout1.CD_ITEM;
					oneRow_tHashOutput_2.DC_ITEM = copyOfout1.DC_ITEM;
					oneRow_tHashOutput_2.CD_COMBO = copyOfout1.CD_COMBO;
					oneRow_tHashOutput_2.QTD_ITEM = copyOfout1.QTD_ITEM;
					oneRow_tHashOutput_2.VL_UNITARIO = copyOfout1.VL_UNITARIO;
					oneRow_tHashOutput_2.TOTAL_CUSTO = copyOfout1.TOTAL_CUSTO;
					oneRow_tHashOutput_2.DT_PEDIDO = copyOfout1.DT_PEDIDO;
					oneRow_tHashOutput_2.DATA_SEPARACAO = copyOfout1.DATA_SEPARACAO;
					oneRow_tHashOutput_2.CD_VENDEDOR = copyOfout1.CD_VENDEDOR;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String cd_emp_origem;

				public String getCd_emp_origem () {
					return this.cd_emp_origem;
				}

				public Boolean cd_emp_origemIsNullable(){
				    return true;
				}
				public Boolean cd_emp_origemIsKey(){
				    return true;
				}
				public Integer cd_emp_origemLength(){
				    return null;
				}
				public Integer cd_emp_origemPrecision(){
				    return null;
				}
				public String cd_emp_origemDefault(){
				
					return null;
				
				}
				public String cd_emp_origemComment(){
				
				    return "";
				
				}
				public String cd_emp_origemPattern(){
				
					return "";
				
				}
				public String cd_emp_origemOriginalDbColumnName(){
				
					return "cd_emp_origem";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
					
						result = prime * result + ((this.cd_emp_origem == null) ? 0 : this.cd_emp_origem.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insertStruct other = (insertStruct) obj;
		
						if (this.SEQUENCE == null) {
							if (other.SEQUENCE != null)
								return false;
						
						} else if (!this.SEQUENCE.equals(other.SEQUENCE))
						
							return false;
					
						if (this.cd_emp_origem == null) {
							if (other.cd_emp_origem != null)
								return false;
						
						} else if (!this.cd_emp_origem.equals(other.cd_emp_origem))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insertStruct other) {

		other.SEQUENCE = this.SEQUENCE;
	            other.cd_emp_origem = this.cd_emp_origem;
	            
	}

	public void copyKeysDataTo(insertStruct other) {

		other.SEQUENCE = this.SEQUENCE;
	            	other.cd_emp_origem = this.cd_emp_origem;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.cd_emp_origem = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.cd_emp_origem = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.cd_emp_origem,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.cd_emp_origem,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",cd_emp_origem="+cd_emp_origem);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEQUENCE, other.SEQUENCE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_emp_origem, other.cd_emp_origem);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMPRESA_ORIGEM;

				public String getCD_EMPRESA_ORIGEM () {
					return this.CD_EMPRESA_ORIGEM;
				}

				public Boolean CD_EMPRESA_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMPRESA_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMPRESA_ORIGEM";
				
				}

				
			    public String CD_EMPRESA_FATURADO;

				public String getCD_EMPRESA_FATURADO () {
					return this.CD_EMPRESA_FATURADO;
				}

				public Boolean CD_EMPRESA_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMPRESA_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_FATURADOOriginalDbColumnName(){
				
					return "CD_EMPRESA_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMPRESA_ORIGEM="+CD_EMPRESA_ORIGEM);
		sb.append(",CD_EMPRESA_FATURADO="+CD_EMPRESA_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
insertStruct insert = new insertStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_t_item_pedido").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_t_item_pedido").toLowerCase();
}

        int deleteKeyCount_tDBOutput_1 = 2;
        if(deleteKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 1000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String delete_tDBOutput_1 = "DELETE FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"sequence\" = ? AND \"cd_emp_origem\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(delete_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout1Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    copyOfout1Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row5.SEQUENCE = next_tHashInput_2.SEQUENCE;
	row5.CD_EMPRESA_ORIGEM = next_tHashInput_2.CD_EMPRESA_ORIGEM;
	row5.CD_EMPRESA_FATURADO = next_tHashInput_2.CD_EMPRESA_FATURADO;
	row5.PEDIDO_AUTCOM = next_tHashInput_2.PEDIDO_AUTCOM;
	row5.ESPECIE_AUTCOM = next_tHashInput_2.ESPECIE_AUTCOM;
	row5.TIPO_NOTA = next_tHashInput_2.TIPO_NOTA;
	row5.DESC_PEDIDO_ORIGEM = next_tHashInput_2.DESC_PEDIDO_ORIGEM;
	row5.CD_ITEM = next_tHashInput_2.CD_ITEM;
	row5.DC_ITEM = next_tHashInput_2.DC_ITEM;
	row5.CD_COMBO = next_tHashInput_2.CD_COMBO;
	row5.QTD_ITEM = next_tHashInput_2.QTD_ITEM;
	row5.VL_UNITARIO = next_tHashInput_2.VL_UNITARIO;
	row5.TOTAL_CUSTO = next_tHashInput_2.TOTAL_CUSTO;
	row5.DT_PEDIDO = next_tHashInput_2.DT_PEDIDO;
	row5.DATA_SEPARACAO = next_tHashInput_2.DATA_SEPARACAO;
	row5.CD_VENDEDOR = next_tHashInput_2.CD_VENDEDOR;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.SEQUENCE = row5.SEQUENCE;
insert_tmp.cd_emp_origem = row5.CD_EMPRESA_ORIGEM ;
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
					
                    if(insert.SEQUENCE == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert.SEQUENCE);
}

					
                    if(insert.cd_emp_origem == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, insert.cd_emp_origem);
}

    		pstmt_tDBOutput_1.addBatch();
			nb_line_tDBOutput_1++;
			  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMP_ORIGEM;

				public String getCD_EMP_ORIGEM () {
					return this.CD_EMP_ORIGEM;
				}

				public Boolean CD_EMP_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMP_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMP_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMP_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMP_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMP_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMP_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMP_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMP_ORIGEM";
				
				}

				
			    public String CD_EMP_FATURADO;

				public String getCD_EMP_FATURADO () {
					return this.CD_EMP_FATURADO;
				}

				public Boolean CD_EMP_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMP_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMP_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMP_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMP_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMP_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMP_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMP_FATURADOOriginalDbColumnName(){
				
					return "CD_EMP_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.SEQUENCE == null) {
							if (other.SEQUENCE != null)
								return false;
						
						} else if (!this.SEQUENCE.equals(other.SEQUENCE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            other.CD_EMP_ORIGEM = this.CD_EMP_ORIGEM;
	            other.CD_EMP_FATURADO = this.CD_EMP_FATURADO;
	            other.PEDIDO_AUTCOM = this.PEDIDO_AUTCOM;
	            other.ESPECIE_AUTCOM = this.ESPECIE_AUTCOM;
	            other.TIPO_NOTA = this.TIPO_NOTA;
	            other.DESC_PEDIDO_ORIGEM = this.DESC_PEDIDO_ORIGEM;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DC_ITEM = this.DC_ITEM;
	            other.CD_COMBO = this.CD_COMBO;
	            other.QTD_ITEM = this.QTD_ITEM;
	            other.VL_UNITARIO = this.VL_UNITARIO;
	            other.TOTAL_CUSTO = this.TOTAL_CUSTO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DATA_SEPARACAO = this.DATA_SEPARACAO;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.SEQUENCE = this.SEQUENCE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMP_ORIGEM = readString(dis);
					
					this.CD_EMP_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMP_ORIGEM = readString(dis);
					
					this.CD_EMP_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMP_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMP_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMP_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMP_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMP_ORIGEM="+CD_EMP_ORIGEM);
		sb.append(",CD_EMP_FATURADO="+CD_EMP_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEQUENCE, other.SEQUENCE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfinsertStruct implements routines.system.IPersistableRow<copyOfinsertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMP_ORIGEM;

				public String getCD_EMP_ORIGEM () {
					return this.CD_EMP_ORIGEM;
				}

				public Boolean CD_EMP_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMP_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMP_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMP_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMP_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMP_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMP_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMP_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMP_ORIGEM";
				
				}

				
			    public String CD_EMP_FATURADO;

				public String getCD_EMP_FATURADO () {
					return this.CD_EMP_FATURADO;
				}

				public Boolean CD_EMP_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMP_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMP_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMP_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMP_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMP_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMP_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMP_FATURADOOriginalDbColumnName(){
				
					return "CD_EMP_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfinsertStruct other = (copyOfinsertStruct) obj;
		
						if (this.SEQUENCE == null) {
							if (other.SEQUENCE != null)
								return false;
						
						} else if (!this.SEQUENCE.equals(other.SEQUENCE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfinsertStruct other) {

		other.SEQUENCE = this.SEQUENCE;
	            other.CD_EMP_ORIGEM = this.CD_EMP_ORIGEM;
	            other.CD_EMP_FATURADO = this.CD_EMP_FATURADO;
	            other.PEDIDO_AUTCOM = this.PEDIDO_AUTCOM;
	            other.ESPECIE_AUTCOM = this.ESPECIE_AUTCOM;
	            other.TIPO_NOTA = this.TIPO_NOTA;
	            other.DESC_PEDIDO_ORIGEM = this.DESC_PEDIDO_ORIGEM;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DC_ITEM = this.DC_ITEM;
	            other.CD_COMBO = this.CD_COMBO;
	            other.QTD_ITEM = this.QTD_ITEM;
	            other.VL_UNITARIO = this.VL_UNITARIO;
	            other.TOTAL_CUSTO = this.TOTAL_CUSTO;
	            other.DT_PEDIDO = this.DT_PEDIDO;
	            other.DATA_SEPARACAO = this.DATA_SEPARACAO;
	            other.CD_VENDEDOR = this.CD_VENDEDOR;
	            
	}

	public void copyKeysDataTo(copyOfinsertStruct other) {

		other.SEQUENCE = this.SEQUENCE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMP_ORIGEM = readString(dis);
					
					this.CD_EMP_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMP_ORIGEM = readString(dis);
					
					this.CD_EMP_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMP_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMP_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMP_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMP_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMP_ORIGEM="+CD_EMP_ORIGEM);
		sb.append(",CD_EMP_FATURADO="+CD_EMP_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfinsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEQUENCE, other.SEQUENCE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String SEQUENCE;

				public String getSEQUENCE () {
					return this.SEQUENCE;
				}

				public Boolean SEQUENCEIsNullable(){
				    return true;
				}
				public Boolean SEQUENCEIsKey(){
				    return true;
				}
				public Integer SEQUENCELength(){
				    return 20;
				}
				public Integer SEQUENCEPrecision(){
				    return null;
				}
				public String SEQUENCEDefault(){
				
					return null;
				
				}
				public String SEQUENCEComment(){
				
				    return "";
				
				}
				public String SEQUENCEPattern(){
				
					return "";
				
				}
				public String SEQUENCEOriginalDbColumnName(){
				
					return "SEQUENCE";
				
				}

				
			    public String CD_EMPRESA_ORIGEM;

				public String getCD_EMPRESA_ORIGEM () {
					return this.CD_EMPRESA_ORIGEM;
				}

				public Boolean CD_EMPRESA_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_ORIGEMIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_ORIGEMLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_ORIGEMPrecision(){
				    return null;
				}
				public String CD_EMPRESA_ORIGEMDefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_ORIGEMComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_ORIGEMPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_ORIGEMOriginalDbColumnName(){
				
					return "CD_EMPRESA_ORIGEM";
				
				}

				
			    public String CD_EMPRESA_FATURADO;

				public String getCD_EMPRESA_FATURADO () {
					return this.CD_EMPRESA_FATURADO;
				}

				public Boolean CD_EMPRESA_FATURADOIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESA_FATURADOIsKey(){
				    return false;
				}
				public Integer CD_EMPRESA_FATURADOLength(){
				    return 3;
				}
				public Integer CD_EMPRESA_FATURADOPrecision(){
				    return null;
				}
				public String CD_EMPRESA_FATURADODefault(){
				
					return null;
				
				}
				public String CD_EMPRESA_FATURADOComment(){
				
				    return "";
				
				}
				public String CD_EMPRESA_FATURADOPattern(){
				
					return "";
				
				}
				public String CD_EMPRESA_FATURADOOriginalDbColumnName(){
				
					return "CD_EMPRESA_FATURADO";
				
				}

				
			    public String PEDIDO_AUTCOM;

				public String getPEDIDO_AUTCOM () {
					return this.PEDIDO_AUTCOM;
				}

				public Boolean PEDIDO_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean PEDIDO_AUTCOMIsKey(){
				    return false;
				}
				public Integer PEDIDO_AUTCOMLength(){
				    return 12;
				}
				public Integer PEDIDO_AUTCOMPrecision(){
				    return null;
				}
				public String PEDIDO_AUTCOMDefault(){
				
					return null;
				
				}
				public String PEDIDO_AUTCOMComment(){
				
				    return "";
				
				}
				public String PEDIDO_AUTCOMPattern(){
				
					return "";
				
				}
				public String PEDIDO_AUTCOMOriginalDbColumnName(){
				
					return "PEDIDO_AUTCOM";
				
				}

				
			    public String ESPECIE_AUTCOM;

				public String getESPECIE_AUTCOM () {
					return this.ESPECIE_AUTCOM;
				}

				public Boolean ESPECIE_AUTCOMIsNullable(){
				    return true;
				}
				public Boolean ESPECIE_AUTCOMIsKey(){
				    return false;
				}
				public Integer ESPECIE_AUTCOMLength(){
				    return 2;
				}
				public Integer ESPECIE_AUTCOMPrecision(){
				    return null;
				}
				public String ESPECIE_AUTCOMDefault(){
				
					return null;
				
				}
				public String ESPECIE_AUTCOMComment(){
				
				    return "";
				
				}
				public String ESPECIE_AUTCOMPattern(){
				
					return "";
				
				}
				public String ESPECIE_AUTCOMOriginalDbColumnName(){
				
					return "ESPECIE_AUTCOM";
				
				}

				
			    public String TIPO_NOTA;

				public String getTIPO_NOTA () {
					return this.TIPO_NOTA;
				}

				public Boolean TIPO_NOTAIsNullable(){
				    return true;
				}
				public Boolean TIPO_NOTAIsKey(){
				    return false;
				}
				public Integer TIPO_NOTALength(){
				    return 2;
				}
				public Integer TIPO_NOTAPrecision(){
				    return null;
				}
				public String TIPO_NOTADefault(){
				
					return null;
				
				}
				public String TIPO_NOTAComment(){
				
				    return "";
				
				}
				public String TIPO_NOTAPattern(){
				
					return "";
				
				}
				public String TIPO_NOTAOriginalDbColumnName(){
				
					return "TIPO_NOTA";
				
				}

				
			    public String DESC_PEDIDO_ORIGEM;

				public String getDESC_PEDIDO_ORIGEM () {
					return this.DESC_PEDIDO_ORIGEM;
				}

				public Boolean DESC_PEDIDO_ORIGEMIsNullable(){
				    return true;
				}
				public Boolean DESC_PEDIDO_ORIGEMIsKey(){
				    return false;
				}
				public Integer DESC_PEDIDO_ORIGEMLength(){
				    return 40;
				}
				public Integer DESC_PEDIDO_ORIGEMPrecision(){
				    return null;
				}
				public String DESC_PEDIDO_ORIGEMDefault(){
				
					return null;
				
				}
				public String DESC_PEDIDO_ORIGEMComment(){
				
				    return "";
				
				}
				public String DESC_PEDIDO_ORIGEMPattern(){
				
					return "";
				
				}
				public String DESC_PEDIDO_ORIGEMOriginalDbColumnName(){
				
					return "DESC_PEDIDO_ORIGEM";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 5;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DC_ITEM;

				public String getDC_ITEM () {
					return this.DC_ITEM;
				}

				public Boolean DC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DC_ITEMIsKey(){
				    return false;
				}
				public Integer DC_ITEMLength(){
				    return 200;
				}
				public Integer DC_ITEMPrecision(){
				    return null;
				}
				public String DC_ITEMDefault(){
				
					return null;
				
				}
				public String DC_ITEMComment(){
				
				    return "";
				
				}
				public String DC_ITEMPattern(){
				
					return "";
				
				}
				public String DC_ITEMOriginalDbColumnName(){
				
					return "DC_ITEM";
				
				}

				
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 5;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public Double QTD_ITEM;

				public Double getQTD_ITEM () {
					return this.QTD_ITEM;
				}

				public Boolean QTD_ITEMIsNullable(){
				    return true;
				}
				public Boolean QTD_ITEMIsKey(){
				    return false;
				}
				public Integer QTD_ITEMLength(){
				    return null;
				}
				public Integer QTD_ITEMPrecision(){
				    return null;
				}
				public String QTD_ITEMDefault(){
				
					return null;
				
				}
				public String QTD_ITEMComment(){
				
				    return "";
				
				}
				public String QTD_ITEMPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String QTD_ITEMOriginalDbColumnName(){
				
					return "QTD_ITEM";
				
				}

				
			    public BigDecimal VL_UNITARIO;

				public BigDecimal getVL_UNITARIO () {
					return this.VL_UNITARIO;
				}

				public Boolean VL_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VL_UNITARIOIsKey(){
				    return false;
				}
				public Integer VL_UNITARIOLength(){
				    return 12;
				}
				public Integer VL_UNITARIOPrecision(){
				    return 2;
				}
				public String VL_UNITARIODefault(){
				
					return null;
				
				}
				public String VL_UNITARIOComment(){
				
				    return "";
				
				}
				public String VL_UNITARIOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String VL_UNITARIOOriginalDbColumnName(){
				
					return "VL_UNITARIO";
				
				}

				
			    public BigDecimal TOTAL_CUSTO;

				public BigDecimal getTOTAL_CUSTO () {
					return this.TOTAL_CUSTO;
				}

				public Boolean TOTAL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean TOTAL_CUSTOIsKey(){
				    return false;
				}
				public Integer TOTAL_CUSTOLength(){
				    return 12;
				}
				public Integer TOTAL_CUSTOPrecision(){
				    return 2;
				}
				public String TOTAL_CUSTODefault(){
				
					return null;
				
				}
				public String TOTAL_CUSTOComment(){
				
				    return "";
				
				}
				public String TOTAL_CUSTOPattern(){
				
					return "";
				
				}
				public String TOTAL_CUSTOOriginalDbColumnName(){
				
					return "TOTAL_CUSTO";
				
				}

				
			    public java.util.Date DT_PEDIDO;

				public java.util.Date getDT_PEDIDO () {
					return this.DT_PEDIDO;
				}

				public Boolean DT_PEDIDOIsNullable(){
				    return true;
				}
				public Boolean DT_PEDIDOIsKey(){
				    return false;
				}
				public Integer DT_PEDIDOLength(){
				    return null;
				}
				public Integer DT_PEDIDOPrecision(){
				    return null;
				}
				public String DT_PEDIDODefault(){
				
					return null;
				
				}
				public String DT_PEDIDOComment(){
				
				    return "";
				
				}
				public String DT_PEDIDOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_PEDIDOOriginalDbColumnName(){
				
					return "DT_PEDIDO";
				
				}

				
			    public java.util.Date DATA_SEPARACAO;

				public java.util.Date getDATA_SEPARACAO () {
					return this.DATA_SEPARACAO;
				}

				public Boolean DATA_SEPARACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_SEPARACAOIsKey(){
				    return false;
				}
				public Integer DATA_SEPARACAOLength(){
				    return null;
				}
				public Integer DATA_SEPARACAOPrecision(){
				    return null;
				}
				public String DATA_SEPARACAODefault(){
				
					return null;
				
				}
				public String DATA_SEPARACAOComment(){
				
				    return "";
				
				}
				public String DATA_SEPARACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_SEPARACAOOriginalDbColumnName(){
				
					return "DATA_SEPARACAO";
				
				}

				
			    public String CD_VENDEDOR;

				public String getCD_VENDEDOR () {
					return this.CD_VENDEDOR;
				}

				public Boolean CD_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CD_VENDEDORIsKey(){
				    return false;
				}
				public Integer CD_VENDEDORLength(){
				    return 5;
				}
				public Integer CD_VENDEDORPrecision(){
				    return null;
				}
				public String CD_VENDEDORDefault(){
				
					return null;
				
				}
				public String CD_VENDEDORComment(){
				
				    return "";
				
				}
				public String CD_VENDEDORPattern(){
				
					return "";
				
				}
				public String CD_VENDEDOROriginalDbColumnName(){
				
					return "CD_VENDEDOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.SEQUENCE = readString(dis);
					
					this.CD_EMPRESA_ORIGEM = readString(dis);
					
					this.CD_EMPRESA_FATURADO = readString(dis);
					
					this.PEDIDO_AUTCOM = readString(dis);
					
					this.ESPECIE_AUTCOM = readString(dis);
					
					this.TIPO_NOTA = readString(dis);
					
					this.DESC_PEDIDO_ORIGEM = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DC_ITEM = readString(dis);
					
					this.CD_COMBO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTD_ITEM = null;
           				} else {
           			    	this.QTD_ITEM = dis.readDouble();
           				}
					
						this.VL_UNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUSTO = (BigDecimal) dis.readObject();
					
					this.DT_PEDIDO = readDate(dis);
					
					this.DATA_SEPARACAO = readDate(dis);
					
					this.CD_VENDEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SEQUENCE,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_EMPRESA_FATURADO,dos);
					
					// String
				
						writeString(this.PEDIDO_AUTCOM,dos);
					
					// String
				
						writeString(this.ESPECIE_AUTCOM,dos);
					
					// String
				
						writeString(this.TIPO_NOTA,dos);
					
					// String
				
						writeString(this.DESC_PEDIDO_ORIGEM,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DC_ITEM,dos);
					
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// Double
				
						if(this.QTD_ITEM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTD_ITEM);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL_CUSTO);
					
					// java.util.Date
				
						writeDate(this.DT_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_SEPARACAO,dos);
					
					// String
				
						writeString(this.CD_VENDEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEQUENCE="+SEQUENCE);
		sb.append(",CD_EMPRESA_ORIGEM="+CD_EMPRESA_ORIGEM);
		sb.append(",CD_EMPRESA_FATURADO="+CD_EMPRESA_FATURADO);
		sb.append(",PEDIDO_AUTCOM="+PEDIDO_AUTCOM);
		sb.append(",ESPECIE_AUTCOM="+ESPECIE_AUTCOM);
		sb.append(",TIPO_NOTA="+TIPO_NOTA);
		sb.append(",DESC_PEDIDO_ORIGEM="+DESC_PEDIDO_ORIGEM);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DC_ITEM="+DC_ITEM);
		sb.append(",CD_COMBO="+CD_COMBO);
		sb.append(",QTD_ITEM="+String.valueOf(QTD_ITEM));
		sb.append(",VL_UNITARIO="+String.valueOf(VL_UNITARIO));
		sb.append(",TOTAL_CUSTO="+String.valueOf(TOTAL_CUSTO));
		sb.append(",DT_PEDIDO="+String.valueOf(DT_PEDIDO));
		sb.append(",DATA_SEPARACAO="+String.valueOf(DATA_SEPARACAO));
		sb.append(",CD_VENDEDOR="+CD_VENDEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
copyOfinsertStruct copyOfinsert = new copyOfinsertStruct();
row8Struct row8 = new row8Struct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_t_item_pedido").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_t_item_pedido").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_2 = 1000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"sequence\",\"cd_emp_origem\",\"cd_emp_faturado\",\"pedido_autcom\",\"especie_autcom\",\"tipo_nota\",\"desc_pedido_origem\",\"cd_item\",\"dc_item\",\"cd_combo\",\"qtd_item\",\"vl_unitario\",\"total_custo\",\"dt_pedido\",\"data_separacao\",\"cd_vendedor\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfinsert");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String SEQUENCE;
					String CD_EMP_ORIGEM;
					String CD_EMP_FATURADO;
					String PEDIDO_AUTCOM;
					String ESPECIE_AUTCOM;
					String TIPO_NOTA;
					String DESC_PEDIDO_ORIGEM;
					String CD_ITEM;
					String DC_ITEM;
					String CD_COMBO;
					Double QTD_ITEM;
					BigDecimal VL_UNITARIO;
					BigDecimal TOTAL_CUSTO;
					java.util.Date DT_PEDIDO;
					java.util.Date DATA_SEPARACAO;
					String CD_VENDEDOR;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.SEQUENCE == null) ? 0 : this.SEQUENCE.hashCode());
								
								result = prime * result + ((this.CD_EMP_ORIGEM == null) ? 0 : this.CD_EMP_ORIGEM.hashCode());
								
								result = prime * result + ((this.CD_EMP_FATURADO == null) ? 0 : this.CD_EMP_FATURADO.hashCode());
								
								result = prime * result + ((this.PEDIDO_AUTCOM == null) ? 0 : this.PEDIDO_AUTCOM.hashCode());
								
								result = prime * result + ((this.ESPECIE_AUTCOM == null) ? 0 : this.ESPECIE_AUTCOM.hashCode());
								
								result = prime * result + ((this.TIPO_NOTA == null) ? 0 : this.TIPO_NOTA.hashCode());
								
								result = prime * result + ((this.DESC_PEDIDO_ORIGEM == null) ? 0 : this.DESC_PEDIDO_ORIGEM.hashCode());
								
								result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
								
								result = prime * result + ((this.DC_ITEM == null) ? 0 : this.DC_ITEM.hashCode());
								
								result = prime * result + ((this.CD_COMBO == null) ? 0 : this.CD_COMBO.hashCode());
								
								result = prime * result + ((this.QTD_ITEM == null) ? 0 : this.QTD_ITEM.hashCode());
								
								result = prime * result + ((this.VL_UNITARIO == null) ? 0 : this.VL_UNITARIO.hashCode());
								
								result = prime * result + ((this.TOTAL_CUSTO == null) ? 0 : this.TOTAL_CUSTO.hashCode());
								
								result = prime * result + ((this.DT_PEDIDO == null) ? 0 : this.DT_PEDIDO.hashCode());
								
								result = prime * result + ((this.DATA_SEPARACAO == null) ? 0 : this.DATA_SEPARACAO.hashCode());
								
								result = prime * result + ((this.CD_VENDEDOR == null) ? 0 : this.CD_VENDEDOR.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.SEQUENCE == null) {
										if (other.SEQUENCE != null) 
											return false;
								
									} else if (!this.SEQUENCE.equals(other.SEQUENCE))
								 
										return false;
								
									if (this.CD_EMP_ORIGEM == null) {
										if (other.CD_EMP_ORIGEM != null) 
											return false;
								
									} else if (!this.CD_EMP_ORIGEM.equals(other.CD_EMP_ORIGEM))
								 
										return false;
								
									if (this.CD_EMP_FATURADO == null) {
										if (other.CD_EMP_FATURADO != null) 
											return false;
								
									} else if (!this.CD_EMP_FATURADO.equals(other.CD_EMP_FATURADO))
								 
										return false;
								
									if (this.PEDIDO_AUTCOM == null) {
										if (other.PEDIDO_AUTCOM != null) 
											return false;
								
									} else if (!this.PEDIDO_AUTCOM.equals(other.PEDIDO_AUTCOM))
								 
										return false;
								
									if (this.ESPECIE_AUTCOM == null) {
										if (other.ESPECIE_AUTCOM != null) 
											return false;
								
									} else if (!this.ESPECIE_AUTCOM.equals(other.ESPECIE_AUTCOM))
								 
										return false;
								
									if (this.TIPO_NOTA == null) {
										if (other.TIPO_NOTA != null) 
											return false;
								
									} else if (!this.TIPO_NOTA.equals(other.TIPO_NOTA))
								 
										return false;
								
									if (this.DESC_PEDIDO_ORIGEM == null) {
										if (other.DESC_PEDIDO_ORIGEM != null) 
											return false;
								
									} else if (!this.DESC_PEDIDO_ORIGEM.equals(other.DESC_PEDIDO_ORIGEM))
								 
										return false;
								
									if (this.CD_ITEM == null) {
										if (other.CD_ITEM != null) 
											return false;
								
									} else if (!this.CD_ITEM.equals(other.CD_ITEM))
								 
										return false;
								
									if (this.DC_ITEM == null) {
										if (other.DC_ITEM != null) 
											return false;
								
									} else if (!this.DC_ITEM.equals(other.DC_ITEM))
								 
										return false;
								
									if (this.CD_COMBO == null) {
										if (other.CD_COMBO != null) 
											return false;
								
									} else if (!this.CD_COMBO.equals(other.CD_COMBO))
								 
										return false;
								
									if (this.QTD_ITEM == null) {
										if (other.QTD_ITEM != null) 
											return false;
								
									} else if (!this.QTD_ITEM.equals(other.QTD_ITEM))
								 
										return false;
								
									if (this.VL_UNITARIO == null) {
										if (other.VL_UNITARIO != null) 
											return false;
								
									} else if (!this.VL_UNITARIO.equals(other.VL_UNITARIO))
								 
										return false;
								
									if (this.TOTAL_CUSTO == null) {
										if (other.TOTAL_CUSTO != null) 
											return false;
								
									} else if (!this.TOTAL_CUSTO.equals(other.TOTAL_CUSTO))
								 
										return false;
								
									if (this.DT_PEDIDO == null) {
										if (other.DT_PEDIDO != null) 
											return false;
								
									} else if (!this.DT_PEDIDO.equals(other.DT_PEDIDO))
								 
										return false;
								
									if (this.DATA_SEPARACAO == null) {
										if (other.DATA_SEPARACAO != null) 
											return false;
								
									} else if (!this.DATA_SEPARACAO.equals(other.DATA_SEPARACAO))
								 
										return false;
								
									if (this.CD_VENDEDOR == null) {
										if (other.CD_VENDEDOR != null) 
											return false;
								
									} else if (!this.CD_VENDEDOR.equals(other.CD_VENDEDOR))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfinsertStruct copyOfinsert_tmp = new copyOfinsertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout1Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    copyOfout1Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row7.SEQUENCE = next_tHashInput_3.SEQUENCE;
	row7.CD_EMPRESA_ORIGEM = next_tHashInput_3.CD_EMPRESA_ORIGEM;
	row7.CD_EMPRESA_FATURADO = next_tHashInput_3.CD_EMPRESA_FATURADO;
	row7.PEDIDO_AUTCOM = next_tHashInput_3.PEDIDO_AUTCOM;
	row7.ESPECIE_AUTCOM = next_tHashInput_3.ESPECIE_AUTCOM;
	row7.TIPO_NOTA = next_tHashInput_3.TIPO_NOTA;
	row7.DESC_PEDIDO_ORIGEM = next_tHashInput_3.DESC_PEDIDO_ORIGEM;
	row7.CD_ITEM = next_tHashInput_3.CD_ITEM;
	row7.DC_ITEM = next_tHashInput_3.DC_ITEM;
	row7.CD_COMBO = next_tHashInput_3.CD_COMBO;
	row7.QTD_ITEM = next_tHashInput_3.QTD_ITEM;
	row7.VL_UNITARIO = next_tHashInput_3.VL_UNITARIO;
	row7.TOTAL_CUSTO = next_tHashInput_3.TOTAL_CUSTO;
	row7.DT_PEDIDO = next_tHashInput_3.DT_PEDIDO;
	row7.DATA_SEPARACAO = next_tHashInput_3.DATA_SEPARACAO;
	row7.CD_VENDEDOR = next_tHashInput_3.CD_VENDEDOR;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfinsert = null;


// # Output table : 'copyOfinsert'
copyOfinsert_tmp.SEQUENCE = row7.SEQUENCE;
copyOfinsert_tmp.CD_EMP_ORIGEM = row7.CD_EMPRESA_ORIGEM;
copyOfinsert_tmp.CD_EMP_FATURADO = row7.CD_EMPRESA_FATURADO;
copyOfinsert_tmp.PEDIDO_AUTCOM = row7.PEDIDO_AUTCOM;
copyOfinsert_tmp.ESPECIE_AUTCOM = row7.ESPECIE_AUTCOM;
copyOfinsert_tmp.TIPO_NOTA = row7.TIPO_NOTA;
copyOfinsert_tmp.DESC_PEDIDO_ORIGEM = row7.DESC_PEDIDO_ORIGEM;
copyOfinsert_tmp.CD_ITEM = row7.CD_ITEM;
copyOfinsert_tmp.DC_ITEM = row7.DC_ITEM;
copyOfinsert_tmp.CD_COMBO = row7.CD_COMBO;
copyOfinsert_tmp.QTD_ITEM = row7.QTD_ITEM;
copyOfinsert_tmp.VL_UNITARIO = row7.VL_UNITARIO;
copyOfinsert_tmp.TOTAL_CUSTO = row7.TOTAL_CUSTO;
copyOfinsert_tmp.DT_PEDIDO = row7.DT_PEDIDO;
copyOfinsert_tmp.DATA_SEPARACAO = row7.DATA_SEPARACAO;
copyOfinsert_tmp.CD_VENDEDOR = row7.CD_VENDEDOR;
copyOfinsert = copyOfinsert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfinsert"
if(copyOfinsert != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfinsert"
						
						);
					}
					
row8 = null;			
if(copyOfinsert.SEQUENCE == null){
	finder_tUniqRow_1.SEQUENCE = null;
}else{
	finder_tUniqRow_1.SEQUENCE = copyOfinsert.SEQUENCE.toLowerCase();
}
if(copyOfinsert.CD_EMP_ORIGEM == null){
	finder_tUniqRow_1.CD_EMP_ORIGEM = null;
}else{
	finder_tUniqRow_1.CD_EMP_ORIGEM = copyOfinsert.CD_EMP_ORIGEM.toLowerCase();
}
if(copyOfinsert.CD_EMP_FATURADO == null){
	finder_tUniqRow_1.CD_EMP_FATURADO = null;
}else{
	finder_tUniqRow_1.CD_EMP_FATURADO = copyOfinsert.CD_EMP_FATURADO.toLowerCase();
}
if(copyOfinsert.PEDIDO_AUTCOM == null){
	finder_tUniqRow_1.PEDIDO_AUTCOM = null;
}else{
	finder_tUniqRow_1.PEDIDO_AUTCOM = copyOfinsert.PEDIDO_AUTCOM.toLowerCase();
}
if(copyOfinsert.ESPECIE_AUTCOM == null){
	finder_tUniqRow_1.ESPECIE_AUTCOM = null;
}else{
	finder_tUniqRow_1.ESPECIE_AUTCOM = copyOfinsert.ESPECIE_AUTCOM.toLowerCase();
}
if(copyOfinsert.TIPO_NOTA == null){
	finder_tUniqRow_1.TIPO_NOTA = null;
}else{
	finder_tUniqRow_1.TIPO_NOTA = copyOfinsert.TIPO_NOTA.toLowerCase();
}
if(copyOfinsert.DESC_PEDIDO_ORIGEM == null){
	finder_tUniqRow_1.DESC_PEDIDO_ORIGEM = null;
}else{
	finder_tUniqRow_1.DESC_PEDIDO_ORIGEM = copyOfinsert.DESC_PEDIDO_ORIGEM.toLowerCase();
}
if(copyOfinsert.CD_ITEM == null){
	finder_tUniqRow_1.CD_ITEM = null;
}else{
	finder_tUniqRow_1.CD_ITEM = copyOfinsert.CD_ITEM.toLowerCase();
}
if(copyOfinsert.DC_ITEM == null){
	finder_tUniqRow_1.DC_ITEM = null;
}else{
	finder_tUniqRow_1.DC_ITEM = copyOfinsert.DC_ITEM.toLowerCase();
}
if(copyOfinsert.CD_COMBO == null){
	finder_tUniqRow_1.CD_COMBO = null;
}else{
	finder_tUniqRow_1.CD_COMBO = copyOfinsert.CD_COMBO.toLowerCase();
}
finder_tUniqRow_1.QTD_ITEM = copyOfinsert.QTD_ITEM;
finder_tUniqRow_1.VL_UNITARIO = copyOfinsert.VL_UNITARIO;
finder_tUniqRow_1.TOTAL_CUSTO = copyOfinsert.TOTAL_CUSTO;
finder_tUniqRow_1.DT_PEDIDO = copyOfinsert.DT_PEDIDO;
finder_tUniqRow_1.DATA_SEPARACAO = copyOfinsert.DATA_SEPARACAO;
if(copyOfinsert.CD_VENDEDOR == null){
	finder_tUniqRow_1.CD_VENDEDOR = null;
}else{
	finder_tUniqRow_1.CD_VENDEDOR = copyOfinsert.CD_VENDEDOR.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(copyOfinsert.SEQUENCE == null){
	new_tUniqRow_1.SEQUENCE = null;
}else{
	new_tUniqRow_1.SEQUENCE = copyOfinsert.SEQUENCE.toLowerCase();
}
if(copyOfinsert.CD_EMP_ORIGEM == null){
	new_tUniqRow_1.CD_EMP_ORIGEM = null;
}else{
	new_tUniqRow_1.CD_EMP_ORIGEM = copyOfinsert.CD_EMP_ORIGEM.toLowerCase();
}
if(copyOfinsert.CD_EMP_FATURADO == null){
	new_tUniqRow_1.CD_EMP_FATURADO = null;
}else{
	new_tUniqRow_1.CD_EMP_FATURADO = copyOfinsert.CD_EMP_FATURADO.toLowerCase();
}
if(copyOfinsert.PEDIDO_AUTCOM == null){
	new_tUniqRow_1.PEDIDO_AUTCOM = null;
}else{
	new_tUniqRow_1.PEDIDO_AUTCOM = copyOfinsert.PEDIDO_AUTCOM.toLowerCase();
}
if(copyOfinsert.ESPECIE_AUTCOM == null){
	new_tUniqRow_1.ESPECIE_AUTCOM = null;
}else{
	new_tUniqRow_1.ESPECIE_AUTCOM = copyOfinsert.ESPECIE_AUTCOM.toLowerCase();
}
if(copyOfinsert.TIPO_NOTA == null){
	new_tUniqRow_1.TIPO_NOTA = null;
}else{
	new_tUniqRow_1.TIPO_NOTA = copyOfinsert.TIPO_NOTA.toLowerCase();
}
if(copyOfinsert.DESC_PEDIDO_ORIGEM == null){
	new_tUniqRow_1.DESC_PEDIDO_ORIGEM = null;
}else{
	new_tUniqRow_1.DESC_PEDIDO_ORIGEM = copyOfinsert.DESC_PEDIDO_ORIGEM.toLowerCase();
}
if(copyOfinsert.CD_ITEM == null){
	new_tUniqRow_1.CD_ITEM = null;
}else{
	new_tUniqRow_1.CD_ITEM = copyOfinsert.CD_ITEM.toLowerCase();
}
if(copyOfinsert.DC_ITEM == null){
	new_tUniqRow_1.DC_ITEM = null;
}else{
	new_tUniqRow_1.DC_ITEM = copyOfinsert.DC_ITEM.toLowerCase();
}
if(copyOfinsert.CD_COMBO == null){
	new_tUniqRow_1.CD_COMBO = null;
}else{
	new_tUniqRow_1.CD_COMBO = copyOfinsert.CD_COMBO.toLowerCase();
}
new_tUniqRow_1.QTD_ITEM = copyOfinsert.QTD_ITEM;
new_tUniqRow_1.VL_UNITARIO = copyOfinsert.VL_UNITARIO;
new_tUniqRow_1.TOTAL_CUSTO = copyOfinsert.TOTAL_CUSTO;
new_tUniqRow_1.DT_PEDIDO = copyOfinsert.DT_PEDIDO;
new_tUniqRow_1.DATA_SEPARACAO = copyOfinsert.DATA_SEPARACAO;
if(copyOfinsert.CD_VENDEDOR == null){
	new_tUniqRow_1.CD_VENDEDOR = null;
}else{
	new_tUniqRow_1.CD_VENDEDOR = copyOfinsert.CD_VENDEDOR.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.SEQUENCE = copyOfinsert.SEQUENCE;			row8.CD_EMP_ORIGEM = copyOfinsert.CD_EMP_ORIGEM;			row8.CD_EMP_FATURADO = copyOfinsert.CD_EMP_FATURADO;			row8.PEDIDO_AUTCOM = copyOfinsert.PEDIDO_AUTCOM;			row8.ESPECIE_AUTCOM = copyOfinsert.ESPECIE_AUTCOM;			row8.TIPO_NOTA = copyOfinsert.TIPO_NOTA;			row8.DESC_PEDIDO_ORIGEM = copyOfinsert.DESC_PEDIDO_ORIGEM;			row8.CD_ITEM = copyOfinsert.CD_ITEM;			row8.DC_ITEM = copyOfinsert.DC_ITEM;			row8.CD_COMBO = copyOfinsert.CD_COMBO;			row8.QTD_ITEM = copyOfinsert.QTD_ITEM;			row8.VL_UNITARIO = copyOfinsert.VL_UNITARIO;			row8.TOTAL_CUSTO = copyOfinsert.TOTAL_CUSTO;			row8.DT_PEDIDO = copyOfinsert.DT_PEDIDO;			row8.DATA_SEPARACAO = copyOfinsert.DATA_SEPARACAO;			row8.CD_VENDEDOR = copyOfinsert.CD_VENDEDOR;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(row8.SEQUENCE == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row8.SEQUENCE);
}

                    if(row8.CD_EMP_ORIGEM == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row8.CD_EMP_ORIGEM);
}

                    if(row8.CD_EMP_FATURADO == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, row8.CD_EMP_FATURADO);
}

                    if(row8.PEDIDO_AUTCOM == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, row8.PEDIDO_AUTCOM);
}

                    if(row8.ESPECIE_AUTCOM == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row8.ESPECIE_AUTCOM);
}

                    if(row8.TIPO_NOTA == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row8.TIPO_NOTA);
}

                    if(row8.DESC_PEDIDO_ORIGEM == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, row8.DESC_PEDIDO_ORIGEM);
}

                    if(row8.CD_ITEM == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, row8.CD_ITEM);
}

                    if(row8.DC_ITEM == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, row8.DC_ITEM);
}

                    if(row8.CD_COMBO == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, row8.CD_COMBO);
}

                    if(row8.QTD_ITEM == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_2.setDouble(11, row8.QTD_ITEM);
}

                    pstmt_tDBOutput_2.setBigDecimal(12, row8.VL_UNITARIO);

                    pstmt_tDBOutput_2.setBigDecimal(13, row8.TOTAL_CUSTO);

                    if(row8.DT_PEDIDO != null) {
pstmt_tDBOutput_2.setTimestamp(14, new java.sql.Timestamp(row8.DT_PEDIDO.getTime()));
} else {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(row8.DATA_SEPARACAO != null) {
pstmt_tDBOutput_2.setTimestamp(15, new java.sql.Timestamp(row8.DATA_SEPARACAO.getTime()));
} else {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.TIMESTAMP);
}

                    if(row8.CD_VENDEDOR == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, row8.CD_VENDEDOR);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "copyOfinsert"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfinsert");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
	int count_tDBRow_1 = 0;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

query_tDBRow_1 = "\nupdate dw_t_item_pedido set desc_pedido_origem = null where desc_pedido_origem = '' and  dt_pedido >= current_date -1"
+";\ncommit;\nupdate dw_t_item_pedido set tipo_nota = null where tipo_nota = '' and  dt_pedido >= current_date -1;\ncommit"
+";\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
				stmt_tDBRow_1.execute(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

	globalMap.put("tDBRow_1_NB_LINE", count_tDBRow_1);
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_item_pedido, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_item_pedido) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row2Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_4.setNull(5 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5 + count_tDBOutput_4, update_log.uuid);
}


            try {
                nb_line_tDBOutput_4++;
				
                int processedCount_tDBOutput_4 = pstmt_tDBOutput_4.executeUpdate();
                updatedCount_tDBOutput_4 += processedCount_tDBOutput_4;
                rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_4 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_item_pedido_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_item_pedido dw_t_item_pedidoClass = new dw_t_item_pedido();

        int exitCode = dw_t_item_pedidoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_item_pedido.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_item_pedido_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_item_pedido.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_item_pedido");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     419046 characters generated by Talend Open Studio for Big Data 
 *     on the 28 de março de 2025 22:55:06 BRT
 ************************************************************************************************/