// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.vw_custo_efetivo_mg_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: vw_custo_efetivo_mg Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class vw_custo_efetivo_mg implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(dias != null){
				
					this.setProperty("dias", dias.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public Integer dias;
public Integer getDias(){
	return this.dias;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "vw_custo_efetivo_mg";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				vw_custo_efetivo_mg.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(vw_custo_efetivo_mg.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = context.JDBC_PARAMETERS;
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class map3Struct implements routines.system.IPersistableRow<map3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}

				public Boolean yearIsNullable(){
				    return true;
				}
				public Boolean yearIsKey(){
				    return false;
				}
				public Integer yearLength(){
				    return null;
				}
				public Integer yearPrecision(){
				    return null;
				}
				public String yearDefault(){
				
					return null;
				
				}
				public String yearComment(){
				
				    return "";
				
				}
				public String yearPattern(){
				
					return "";
				
				}
				public String yearOriginalDbColumnName(){
				
					return "year";
				
				}

				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}

				public Boolean monthIsNullable(){
				    return true;
				}
				public Boolean monthIsKey(){
				    return false;
				}
				public Integer monthLength(){
				    return null;
				}
				public Integer monthPrecision(){
				    return null;
				}
				public String monthDefault(){
				
					return null;
				
				}
				public String monthComment(){
				
				    return "";
				
				}
				public String monthPattern(){
				
					return "";
				
				}
				public String monthOriginalDbColumnName(){
				
					return "month";
				
				}

				
			    public java.util.Date parameter;

				public java.util.Date getParameter () {
					return this.parameter;
				}

				public Boolean parameterIsNullable(){
				    return true;
				}
				public Boolean parameterIsKey(){
				    return false;
				}
				public Integer parameterLength(){
				    return null;
				}
				public Integer parameterPrecision(){
				    return null;
				}
				public String parameterDefault(){
				
					return null;
				
				}
				public String parameterComment(){
				
				    return "";
				
				}
				public String parameterPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String parameterOriginalDbColumnName(){
				
					return "parameter";
				
				}

				
			    public java.util.Date start_job;

				public java.util.Date getStart_job () {
					return this.start_job;
				}

				public Boolean start_jobIsNullable(){
				    return true;
				}
				public Boolean start_jobIsKey(){
				    return false;
				}
				public Integer start_jobLength(){
				    return null;
				}
				public Integer start_jobPrecision(){
				    return null;
				}
				public String start_jobDefault(){
				
					return null;
				
				}
				public String start_jobComment(){
				
				    return "";
				
				}
				public String start_jobPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String start_jobOriginalDbColumnName(){
				
					return "start_job";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
					this.parameter = readDate(dis);
					
					this.start_job = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
					this.parameter = readDate(dis);
					
					this.start_job = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// java.util.Date
				
						writeDate(this.parameter,dos);
					
					// java.util.Date
				
						writeDate(this.start_job,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// java.util.Date
				
						writeDate(this.parameter,dos);
					
					// java.util.Date
				
						writeDate(this.start_job,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",parameter="+String.valueOf(parameter));
		sb.append(",start_job="+String.valueOf(start_job));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				
			    public java.util.Date PARAMETRO;

				public java.util.Date getPARAMETRO () {
					return this.PARAMETRO;
				}

				public Boolean PARAMETROIsNullable(){
				    return true;
				}
				public Boolean PARAMETROIsKey(){
				    return false;
				}
				public Integer PARAMETROLength(){
				    return null;
				}
				public Integer PARAMETROPrecision(){
				    return null;
				}
				public String PARAMETRODefault(){
				
					return null;
				
				}
				public String PARAMETROComment(){
				
				    return "";
				
				}
				public String PARAMETROPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String PARAMETROOriginalDbColumnName(){
				
					return "PARAMETRO";
				
				}

				
			    public java.util.Date DATA_START;

				public java.util.Date getDATA_START () {
					return this.DATA_START;
				}

				public Boolean DATA_STARTIsNullable(){
				    return true;
				}
				public Boolean DATA_STARTIsKey(){
				    return false;
				}
				public Integer DATA_STARTLength(){
				    return null;
				}
				public Integer DATA_STARTPrecision(){
				    return null;
				}
				public String DATA_STARTDefault(){
				
					return null;
				
				}
				public String DATA_STARTComment(){
				
				    return "";
				
				}
				public String DATA_STARTPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_STARTOriginalDbColumnName(){
				
					return "DATA_START";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",PARAMETRO="+String.valueOf(PARAMETRO));
		sb.append(",DATA_START="+String.valueOf(DATA_START));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				
			    public java.util.Date PARAMETRO;

				public java.util.Date getPARAMETRO () {
					return this.PARAMETRO;
				}

				public Boolean PARAMETROIsNullable(){
				    return true;
				}
				public Boolean PARAMETROIsKey(){
				    return false;
				}
				public Integer PARAMETROLength(){
				    return null;
				}
				public Integer PARAMETROPrecision(){
				    return null;
				}
				public String PARAMETRODefault(){
				
					return null;
				
				}
				public String PARAMETROComment(){
				
				    return "";
				
				}
				public String PARAMETROPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String PARAMETROOriginalDbColumnName(){
				
					return "PARAMETRO";
				
				}

				
			    public java.util.Date DATA_START;

				public java.util.Date getDATA_START () {
					return this.DATA_START;
				}

				public Boolean DATA_STARTIsNullable(){
				    return true;
				}
				public Boolean DATA_STARTIsKey(){
				    return false;
				}
				public Integer DATA_STARTLength(){
				    return null;
				}
				public Integer DATA_STARTPrecision(){
				    return null;
				}
				public String DATA_STARTDefault(){
				
					return null;
				
				}
				public String DATA_STARTComment(){
				
				    return "";
				
				}
				public String DATA_STARTPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_STARTOriginalDbColumnName(){
				
					return "DATA_START";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",PARAMETRO="+String.valueOf(PARAMETRO));
		sb.append(",DATA_START="+String.valueOf(DATA_START));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row8Struct row11 = row8;
map3Struct map3 = new map3Struct();






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map3");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[4];

        public void addRow(String[] row) {

            for (int i = 0; i < 4; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 3 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("<b>__execution_parameters__</b><br>");
        util_tLogRow_1.addRow(new String[]{"year","month","parameter","start_job",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
map3Struct map3_tmp = new map3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_vw_custo_efetivo_mg_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nSELECT YEAR(CURRENT_DATE()) ANO, (MONTH(CURRENT_DATE()) ) MES, SUBDATE(CURDATE(), 1)PARAMETRO, NOW() AS DATA_START\n"
+"\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row8.ANO = null;
							} else {
		                          
            row8.ANO = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row8.ANO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row8.MES = null;
							} else {
		                          
            row8.MES = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row8.MES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row8.PARAMETRO = null;
							} else {
										
				if(rs_tDBInput_1.getString(3) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row8.PARAMETRO = rs_tDBInput_1.getTimestamp(3);
					} else {
						row8.PARAMETRO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row8.PARAMETRO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row8.DATA_START = null;
							} else {
										
				if(rs_tDBInput_1.getString(4) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row8.DATA_START = rs_tDBInput_1.getTimestamp(4);
					} else {
						row8.DATA_START = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row8.DATA_START =  null;
				}
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_1 = new row8Struct();
				
					oneRow_tHashOutput_1.ANO = row8.ANO;
					oneRow_tHashOutput_1.MES = row8.MES;
					oneRow_tHashOutput_1.PARAMETRO = row8.PARAMETRO;
					oneRow_tHashOutput_1.DATA_START = row8.DATA_START;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 
     row11 = row8;


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

map3 = null;


// # Output table : 'map3'
map3_tmp.year = row11.ANO;
map3_tmp.month = row11.MES;
map3_tmp.parameter = row11.PARAMETRO ;
map3_tmp.start_job = row11.DATA_START;
map3 = map3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "map3"
if(map3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"map3"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[4];
   				
	    		if(map3.year != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(map3.year)			
					          ;	
							
	    		} //			
    			   				
	    		if(map3.month != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(map3.month)			
					          ;	
							
	    		} //			
    			   				
	    		if(map3.parameter != null) { //              
                 row_tLogRow_1[2]=    						
								FormatterUtils.format_Date(map3.parameter, "yyyy-MM-dd")
					          ;	
							
	    		} //			
    			   				
	    		if(map3.start_job != null) { //              
                 row_tLogRow_1[3]=    						
								FormatterUtils.format_Date(map3.start_job, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "map3"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map3");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_vw_custo_efetivo_mg_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_2 = new row5Struct();
				
					oneRow_tHashOutput_2.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_2.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_2.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_2.mensagem = row5.mensagem;
					oneRow_tHashOutput_2.uuid = row5.uuid;
					oneRow_tHashOutput_2.versao = row5.versao;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


System.out.println("*************************************************");
System.out.println("Iniciando select na VW_CUSTO_EFETIVO D-1 do AUTCOM");
System.out.println("Iniciado em: "+TalendDate.getCurrentDate());

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String NUMDOC;

				public String getNUMDOC () {
					return this.NUMDOC;
				}

				public Boolean NUMDOCIsNullable(){
				    return true;
				}
				public Boolean NUMDOCIsKey(){
				    return false;
				}
				public Integer NUMDOCLength(){
				    return 23;
				}
				public Integer NUMDOCPrecision(){
				    return 0;
				}
				public String NUMDOCDefault(){
				
					return null;
				
				}
				public String NUMDOCComment(){
				
				    return "";
				
				}
				public String NUMDOCPattern(){
				
					return "";
				
				}
				public String NUMDOCOriginalDbColumnName(){
				
					return "NUMDOC";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String CODVEN;

				public String getCODVEN () {
					return this.CODVEN;
				}

				public Boolean CODVENIsNullable(){
				    return false;
				}
				public Boolean CODVENIsKey(){
				    return false;
				}
				public Integer CODVENLength(){
				    return 3;
				}
				public Integer CODVENPrecision(){
				    return 0;
				}
				public String CODVENDefault(){
				
					return null;
				
				}
				public String CODVENComment(){
				
				    return "";
				
				}
				public String CODVENPattern(){
				
					return "";
				
				}
				public String CODVENOriginalDbColumnName(){
				
					return "CODVEN";
				
				}

				
			    public BigDecimal VLRTNF;

				public BigDecimal getVLRTNF () {
					return this.VLRTNF;
				}

				public Boolean VLRTNFIsNullable(){
				    return true;
				}
				public Boolean VLRTNFIsKey(){
				    return false;
				}
				public Integer VLRTNFLength(){
				    return 12;
				}
				public Integer VLRTNFPrecision(){
				    return 2;
				}
				public String VLRTNFDefault(){
				
					return null;
				
				}
				public String VLRTNFComment(){
				
				    return "";
				
				}
				public String VLRTNFPattern(){
				
					return "";
				
				}
				public String VLRTNFOriginalDbColumnName(){
				
					return "VLRTNF";
				
				}

				
			    public java.util.Date DTASAI;

				public java.util.Date getDTASAI () {
					return this.DTASAI;
				}

				public Boolean DTASAIIsNullable(){
				    return true;
				}
				public Boolean DTASAIIsKey(){
				    return false;
				}
				public Integer DTASAILength(){
				    return 10;
				}
				public Integer DTASAIPrecision(){
				    return 0;
				}
				public String DTASAIDefault(){
				
					return null;
				
				}
				public String DTASAIComment(){
				
				    return "";
				
				}
				public String DTASAIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTASAIOriginalDbColumnName(){
				
					return "DTASAI";
				
				}

				
			    public String CODITE;

				public String getCODITE () {
					return this.CODITE;
				}

				public Boolean CODITEIsNullable(){
				    return true;
				}
				public Boolean CODITEIsKey(){
				    return false;
				}
				public Integer CODITELength(){
				    return 106;
				}
				public Integer CODITEPrecision(){
				    return 0;
				}
				public String CODITEDefault(){
				
					return null;
				
				}
				public String CODITEComment(){
				
				    return "";
				
				}
				public String CODITEPattern(){
				
					return "";
				
				}
				public String CODITEOriginalDbColumnName(){
				
					return "CODITE";
				
				}

				
			    public String CODMAR;

				public String getCODMAR () {
					return this.CODMAR;
				}

				public Boolean CODMARIsNullable(){
				    return true;
				}
				public Boolean CODMARIsKey(){
				    return false;
				}
				public Integer CODMARLength(){
				    return 37;
				}
				public Integer CODMARPrecision(){
				    return 0;
				}
				public String CODMARDefault(){
				
					return null;
				
				}
				public String CODMARComment(){
				
				    return "";
				
				}
				public String CODMARPattern(){
				
					return "";
				
				}
				public String CODMAROriginalDbColumnName(){
				
					return "CODMAR";
				
				}

				
			    public String DESCRI;

				public String getDESCRI () {
					return this.DESCRI;
				}

				public Boolean DESCRIIsNullable(){
				    return true;
				}
				public Boolean DESCRIIsKey(){
				    return false;
				}
				public Integer DESCRILength(){
				    return 100;
				}
				public Integer DESCRIPrecision(){
				    return 0;
				}
				public String DESCRIDefault(){
				
					return null;
				
				}
				public String DESCRIComment(){
				
				    return "";
				
				}
				public String DESCRIPattern(){
				
					return "";
				
				}
				public String DESCRIOriginalDbColumnName(){
				
					return "DESCRI";
				
				}

				
			    public BigDecimal QTDSAI;

				public BigDecimal getQTDSAI () {
					return this.QTDSAI;
				}

				public Boolean QTDSAIIsNullable(){
				    return true;
				}
				public Boolean QTDSAIIsKey(){
				    return false;
				}
				public Integer QTDSAILength(){
				    return 34;
				}
				public Integer QTDSAIPrecision(){
				    return 4;
				}
				public String QTDSAIDefault(){
				
					return null;
				
				}
				public String QTDSAIComment(){
				
				    return "";
				
				}
				public String QTDSAIPattern(){
				
					return "";
				
				}
				public String QTDSAIOriginalDbColumnName(){
				
					return "QTDSAI";
				
				}

				
			    public BigDecimal UNISAI;

				public BigDecimal getUNISAI () {
					return this.UNISAI;
				}

				public Boolean UNISAIIsNullable(){
				    return true;
				}
				public Boolean UNISAIIsKey(){
				    return false;
				}
				public Integer UNISAILength(){
				    return 12;
				}
				public Integer UNISAIPrecision(){
				    return 4;
				}
				public String UNISAIDefault(){
				
					return null;
				
				}
				public String UNISAIComment(){
				
				    return "";
				
				}
				public String UNISAIPattern(){
				
					return "";
				
				}
				public String UNISAIOriginalDbColumnName(){
				
					return "UNISAI";
				
				}

				
			    public BigDecimal TOTSAI;

				public BigDecimal getTOTSAI () {
					return this.TOTSAI;
				}

				public Boolean TOTSAIIsNullable(){
				    return true;
				}
				public Boolean TOTSAIIsKey(){
				    return false;
				}
				public Integer TOTSAILength(){
				    return 34;
				}
				public Integer TOTSAIPrecision(){
				    return 2;
				}
				public String TOTSAIDefault(){
				
					return null;
				
				}
				public String TOTSAIComment(){
				
				    return "";
				
				}
				public String TOTSAIPattern(){
				
					return "";
				
				}
				public String TOTSAIOriginalDbColumnName(){
				
					return "TOTSAI";
				
				}

				
			    public BigDecimal ICMSAI;

				public BigDecimal getICMSAI () {
					return this.ICMSAI;
				}

				public Boolean ICMSAIIsNullable(){
				    return true;
				}
				public Boolean ICMSAIIsKey(){
				    return false;
				}
				public Integer ICMSAILength(){
				    return 34;
				}
				public Integer ICMSAIPrecision(){
				    return 2;
				}
				public String ICMSAIDefault(){
				
					return null;
				
				}
				public String ICMSAIComment(){
				
				    return "";
				
				}
				public String ICMSAIPattern(){
				
					return "";
				
				}
				public String ICMSAIOriginalDbColumnName(){
				
					return "ICMSAI";
				
				}

				
			    public BigDecimal FCPSAI;

				public BigDecimal getFCPSAI () {
					return this.FCPSAI;
				}

				public Boolean FCPSAIIsNullable(){
				    return true;
				}
				public Boolean FCPSAIIsKey(){
				    return false;
				}
				public Integer FCPSAILength(){
				    return 37;
				}
				public Integer FCPSAIPrecision(){
				    return 2;
				}
				public String FCPSAIDefault(){
				
					return null;
				
				}
				public String FCPSAIComment(){
				
				    return "";
				
				}
				public String FCPSAIPattern(){
				
					return "";
				
				}
				public String FCPSAIOriginalDbColumnName(){
				
					return "FCPSAI";
				
				}

				
			    public BigDecimal RETSAI;

				public BigDecimal getRETSAI () {
					return this.RETSAI;
				}

				public Boolean RETSAIIsNullable(){
				    return true;
				}
				public Boolean RETSAIIsKey(){
				    return false;
				}
				public Integer RETSAILength(){
				    return 35;
				}
				public Integer RETSAIPrecision(){
				    return 2;
				}
				public String RETSAIDefault(){
				
					return null;
				
				}
				public String RETSAIComment(){
				
				    return "";
				
				}
				public String RETSAIPattern(){
				
					return "";
				
				}
				public String RETSAIOriginalDbColumnName(){
				
					return "RETSAI";
				
				}

				
			    public BigDecimal TOTFRE;

				public BigDecimal getTOTFRE () {
					return this.TOTFRE;
				}

				public Boolean TOTFREIsNullable(){
				    return false;
				}
				public Boolean TOTFREIsKey(){
				    return false;
				}
				public Integer TOTFRELength(){
				    return 12;
				}
				public Integer TOTFREPrecision(){
				    return 2;
				}
				public String TOTFREDefault(){
				
					return "0.00";
				
				}
				public String TOTFREComment(){
				
				    return "";
				
				}
				public String TOTFREPattern(){
				
					return "";
				
				}
				public String TOTFREOriginalDbColumnName(){
				
					return "TOTFRE";
				
				}

				
			    public BigDecimal P_CSAI;

				public BigDecimal getP_CSAI () {
					return this.P_CSAI;
				}

				public Boolean P_CSAIIsNullable(){
				    return true;
				}
				public Boolean P_CSAIIsKey(){
				    return false;
				}
				public Integer P_CSAILength(){
				    return 35;
				}
				public Integer P_CSAIPrecision(){
				    return 2;
				}
				public String P_CSAIDefault(){
				
					return null;
				
				}
				public String P_CSAIComment(){
				
				    return "";
				
				}
				public String P_CSAIPattern(){
				
					return "";
				
				}
				public String P_CSAIOriginalDbColumnName(){
				
					return "P_CSAI";
				
				}

				
			    public BigDecimal DIFSAI;

				public BigDecimal getDIFSAI () {
					return this.DIFSAI;
				}

				public Boolean DIFSAIIsNullable(){
				    return true;
				}
				public Boolean DIFSAIIsKey(){
				    return false;
				}
				public Integer DIFSAILength(){
				    return 38;
				}
				public Integer DIFSAIPrecision(){
				    return 2;
				}
				public String DIFSAIDefault(){
				
					return null;
				
				}
				public String DIFSAIComment(){
				
				    return "";
				
				}
				public String DIFSAIPattern(){
				
					return "";
				
				}
				public String DIFSAIOriginalDbColumnName(){
				
					return "DIFSAI";
				
				}

				
			    public BigDecimal LIQSAI2;

				public BigDecimal getLIQSAI2 () {
					return this.LIQSAI2;
				}

				public Boolean LIQSAI2IsNullable(){
				    return true;
				}
				public Boolean LIQSAI2IsKey(){
				    return false;
				}
				public Integer LIQSAI2Length(){
				    return 40;
				}
				public Integer LIQSAI2Precision(){
				    return 2;
				}
				public String LIQSAI2Default(){
				
					return null;
				
				}
				public String LIQSAI2Comment(){
				
				    return "";
				
				}
				public String LIQSAI2Pattern(){
				
					return "";
				
				}
				public String LIQSAI2OriginalDbColumnName(){
				
					return "LIQSAI2";
				
				}

				
			    public BigDecimal LIQSAI;

				public BigDecimal getLIQSAI () {
					return this.LIQSAI;
				}

				public Boolean LIQSAIIsNullable(){
				    return true;
				}
				public Boolean LIQSAIIsKey(){
				    return false;
				}
				public Integer LIQSAILength(){
				    return 41;
				}
				public Integer LIQSAIPrecision(){
				    return 2;
				}
				public String LIQSAIDefault(){
				
					return null;
				
				}
				public String LIQSAIComment(){
				
				    return "";
				
				}
				public String LIQSAIPattern(){
				
					return "";
				
				}
				public String LIQSAIOriginalDbColumnName(){
				
					return "LIQSAI";
				
				}

				
			    public String NUMENT;

				public String getNUMENT () {
					return this.NUMENT;
				}

				public Boolean NUMENTIsNullable(){
				    return true;
				}
				public Boolean NUMENTIsKey(){
				    return false;
				}
				public Integer NUMENTLength(){
				    return 50;
				}
				public Integer NUMENTPrecision(){
				    return 0;
				}
				public String NUMENTDefault(){
				
					return null;
				
				}
				public String NUMENTComment(){
				
				    return "";
				
				}
				public String NUMENTPattern(){
				
					return "";
				
				}
				public String NUMENTOriginalDbColumnName(){
				
					return "NUMENT";
				
				}

				
			    public java.util.Date DTAENT;

				public java.util.Date getDTAENT () {
					return this.DTAENT;
				}

				public Boolean DTAENTIsNullable(){
				    return true;
				}
				public Boolean DTAENTIsKey(){
				    return false;
				}
				public Integer DTAENTLength(){
				    return 10;
				}
				public Integer DTAENTPrecision(){
				    return 0;
				}
				public String DTAENTDefault(){
				
					return null;
				
				}
				public String DTAENTComment(){
				
				    return "";
				
				}
				public String DTAENTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTAENTOriginalDbColumnName(){
				
					return "DTAENT";
				
				}

				
			    public BigDecimal QTDENT;

				public BigDecimal getQTDENT () {
					return this.QTDENT;
				}

				public Boolean QTDENTIsNullable(){
				    return true;
				}
				public Boolean QTDENTIsKey(){
				    return false;
				}
				public Integer QTDENTLength(){
				    return 12;
				}
				public Integer QTDENTPrecision(){
				    return 4;
				}
				public String QTDENTDefault(){
				
					return null;
				
				}
				public String QTDENTComment(){
				
				    return "";
				
				}
				public String QTDENTPattern(){
				
					return "";
				
				}
				public String QTDENTOriginalDbColumnName(){
				
					return "QTDENT";
				
				}

				
			    public String CSTENT;

				public String getCSTENT () {
					return this.CSTENT;
				}

				public Boolean CSTENTIsNullable(){
				    return true;
				}
				public Boolean CSTENTIsKey(){
				    return false;
				}
				public Integer CSTENTLength(){
				    return 3;
				}
				public Integer CSTENTPrecision(){
				    return 0;
				}
				public String CSTENTDefault(){
				
					return null;
				
				}
				public String CSTENTComment(){
				
				    return "";
				
				}
				public String CSTENTPattern(){
				
					return "";
				
				}
				public String CSTENTOriginalDbColumnName(){
				
					return "CSTENT";
				
				}

				
			    public BigDecimal TOTENT;

				public BigDecimal getTOTENT () {
					return this.TOTENT;
				}

				public Boolean TOTENTIsNullable(){
				    return true;
				}
				public Boolean TOTENTIsKey(){
				    return false;
				}
				public Integer TOTENTLength(){
				    return 46;
				}
				public Integer TOTENTPrecision(){
				    return 8;
				}
				public String TOTENTDefault(){
				
					return null;
				
				}
				public String TOTENTComment(){
				
				    return "";
				
				}
				public String TOTENTPattern(){
				
					return "";
				
				}
				public String TOTENTOriginalDbColumnName(){
				
					return "TOTENT";
				
				}

				
			    public BigDecimal ICMENT;

				public BigDecimal getICMENT () {
					return this.ICMENT;
				}

				public Boolean ICMENTIsNullable(){
				    return true;
				}
				public Boolean ICMENTIsKey(){
				    return false;
				}
				public Integer ICMENTLength(){
				    return 54;
				}
				public Integer ICMENTPrecision(){
				    return 10;
				}
				public String ICMENTDefault(){
				
					return null;
				
				}
				public String ICMENTComment(){
				
				    return "";
				
				}
				public String ICMENTPattern(){
				
					return "";
				
				}
				public String ICMENTOriginalDbColumnName(){
				
					return "ICMENT";
				
				}

				
			    public BigDecimal RETENT;

				public BigDecimal getRETENT () {
					return this.RETENT;
				}

				public Boolean RETENTIsNullable(){
				    return true;
				}
				public Boolean RETENTIsKey(){
				    return false;
				}
				public Integer RETENTLength(){
				    return 54;
				}
				public Integer RETENTPrecision(){
				    return 10;
				}
				public String RETENTDefault(){
				
					return null;
				
				}
				public String RETENTComment(){
				
				    return "";
				
				}
				public String RETENTPattern(){
				
					return "";
				
				}
				public String RETENTOriginalDbColumnName(){
				
					return "RETENT";
				
				}

				
			    public BigDecimal IPIENT;

				public BigDecimal getIPIENT () {
					return this.IPIENT;
				}

				public Boolean IPIENTIsNullable(){
				    return true;
				}
				public Boolean IPIENTIsKey(){
				    return false;
				}
				public Integer IPIENTLength(){
				    return 54;
				}
				public Integer IPIENTPrecision(){
				    return 10;
				}
				public String IPIENTDefault(){
				
					return null;
				
				}
				public String IPIENTComment(){
				
				    return "";
				
				}
				public String IPIENTPattern(){
				
					return "";
				
				}
				public String IPIENTOriginalDbColumnName(){
				
					return "IPIENT";
				
				}

				
			    public BigDecimal P_CENT;

				public BigDecimal getP_CENT () {
					return this.P_CENT;
				}

				public Boolean P_CENTIsNullable(){
				    return true;
				}
				public Boolean P_CENTIsKey(){
				    return false;
				}
				public Integer P_CENTLength(){
				    return 55;
				}
				public Integer P_CENTPrecision(){
				    return 10;
				}
				public String P_CENTDefault(){
				
					return null;
				
				}
				public String P_CENTComment(){
				
				    return "";
				
				}
				public String P_CENTPattern(){
				
					return "";
				
				}
				public String P_CENTOriginalDbColumnName(){
				
					return "P_CENT";
				
				}

				
			    public BigDecimal LIQENT;

				public BigDecimal getLIQENT () {
					return this.LIQENT;
				}

				public Boolean LIQENTIsNullable(){
				    return true;
				}
				public Boolean LIQENTIsKey(){
				    return false;
				}
				public Integer LIQENTLength(){
				    return 57;
				}
				public Integer LIQENTPrecision(){
				    return 10;
				}
				public String LIQENTDefault(){
				
					return null;
				
				}
				public String LIQENTComment(){
				
				    return "";
				
				}
				public String LIQENTPattern(){
				
					return "";
				
				}
				public String LIQENTOriginalDbColumnName(){
				
					return "LIQENT";
				
				}

				
			    public BigDecimal VAL_ST;

				public BigDecimal getVAL_ST () {
					return this.VAL_ST;
				}

				public Boolean VAL_STIsNullable(){
				    return false;
				}
				public Boolean VAL_STIsKey(){
				    return false;
				}
				public Integer VAL_STLength(){
				    return 12;
				}
				public Integer VAL_STPrecision(){
				    return 2;
				}
				public String VAL_STDefault(){
				
					return "0.00";
				
				}
				public String VAL_STComment(){
				
				    return "";
				
				}
				public String VAL_STPattern(){
				
					return "";
				
				}
				public String VAL_STOriginalDbColumnName(){
				
					return "VAL_ST";
				
				}

				
			    public BigDecimal VAL_OP;

				public BigDecimal getVAL_OP () {
					return this.VAL_OP;
				}

				public Boolean VAL_OPIsNullable(){
				    return false;
				}
				public Boolean VAL_OPIsKey(){
				    return false;
				}
				public Integer VAL_OPLength(){
				    return 12;
				}
				public Integer VAL_OPPrecision(){
				    return 2;
				}
				public String VAL_OPDefault(){
				
					return "0.00";
				
				}
				public String VAL_OPComment(){
				
				    return "";
				
				}
				public String VAL_OPPattern(){
				
					return "";
				
				}
				public String VAL_OPOriginalDbColumnName(){
				
					return "VAL_OP";
				
				}

				
			    public String VALORES;

				public String getVALORES () {
					return this.VALORES;
				}

				public Boolean VALORESIsNullable(){
				    return true;
				}
				public Boolean VALORESIsKey(){
				    return false;
				}
				public Integer VALORESLength(){
				    return 100;
				}
				public Integer VALORESPrecision(){
				    return 0;
				}
				public String VALORESDefault(){
				
					return null;
				
				}
				public String VALORESComment(){
				
				    return "";
				
				}
				public String VALORESPattern(){
				
					return "";
				
				}
				public String VALORESOriginalDbColumnName(){
				
					return "VALORES";
				
				}

				
			    public BigDecimal VALCOM;

				public BigDecimal getVALCOM () {
					return this.VALCOM;
				}

				public Boolean VALCOMIsNullable(){
				    return true;
				}
				public Boolean VALCOMIsKey(){
				    return false;
				}
				public Integer VALCOMLength(){
				    return 39;
				}
				public Integer VALCOMPrecision(){
				    return 6;
				}
				public String VALCOMDefault(){
				
					return null;
				
				}
				public String VALCOMComment(){
				
				    return "";
				
				}
				public String VALCOMPattern(){
				
					return "";
				
				}
				public String VALCOMOriginalDbColumnName(){
				
					return "VALCOM";
				
				}

				
			    public BigDecimal ICMEN2;

				public BigDecimal getICMEN2 () {
					return this.ICMEN2;
				}

				public Boolean ICMEN2IsNullable(){
				    return false;
				}
				public Boolean ICMEN2IsKey(){
				    return false;
				}
				public Integer ICMEN2Length(){
				    return 20;
				}
				public Integer ICMEN2Precision(){
				    return 6;
				}
				public String ICMEN2Default(){
				
					return "0.000000";
				
				}
				public String ICMEN2Comment(){
				
				    return "";
				
				}
				public String ICMEN2Pattern(){
				
					return "";
				
				}
				public String ICMEN2OriginalDbColumnName(){
				
					return "ICMEN2";
				
				}

				
			    public BigDecimal RESSAR;

				public BigDecimal getRESSAR () {
					return this.RESSAR;
				}

				public Boolean RESSARIsNullable(){
				    return false;
				}
				public Boolean RESSARIsKey(){
				    return false;
				}
				public Integer RESSARLength(){
				    return 20;
				}
				public Integer RESSARPrecision(){
				    return 6;
				}
				public String RESSARDefault(){
				
					return "0.000000";
				
				}
				public String RESSARComment(){
				
				    return "";
				
				}
				public String RESSARPattern(){
				
					return "";
				
				}
				public String RESSAROriginalDbColumnName(){
				
					return "RESSAR";
				
				}

				
			    public BigDecimal MAROPE;

				public BigDecimal getMAROPE () {
					return this.MAROPE;
				}

				public Boolean MAROPEIsNullable(){
				    return true;
				}
				public Boolean MAROPEIsKey(){
				    return false;
				}
				public Integer MAROPELength(){
				    return 61;
				}
				public Integer MAROPEPrecision(){
				    return 10;
				}
				public String MAROPEDefault(){
				
					return null;
				
				}
				public String MAROPEComment(){
				
				    return "";
				
				}
				public String MAROPEPattern(){
				
					return "";
				
				}
				public String MAROPEOriginalDbColumnName(){
				
					return "MAROPE";
				
				}

				
			    public BigDecimal PERMAR;

				public BigDecimal getPERMAR () {
					return this.PERMAR;
				}

				public Boolean PERMARIsNullable(){
				    return true;
				}
				public Boolean PERMARIsKey(){
				    return false;
				}
				public Integer PERMARLength(){
				    return 65;
				}
				public Integer PERMARPrecision(){
				    return 14;
				}
				public String PERMARDefault(){
				
					return null;
				
				}
				public String PERMARComment(){
				
				    return "";
				
				}
				public String PERMARPattern(){
				
					return "";
				
				}
				public String PERMAROriginalDbColumnName(){
				
					return "PERMAR";
				
				}

				
			    public String CSTCOM;

				public String getCSTCOM () {
					return this.CSTCOM;
				}

				public Boolean CSTCOMIsNullable(){
				    return true;
				}
				public Boolean CSTCOMIsKey(){
				    return false;
				}
				public Integer CSTCOMLength(){
				    return 5;
				}
				public Integer CSTCOMPrecision(){
				    return 0;
				}
				public String CSTCOMDefault(){
				
					return null;
				
				}
				public String CSTCOMComment(){
				
				    return "";
				
				}
				public String CSTCOMPattern(){
				
					return "";
				
				}
				public String CSTCOMOriginalDbColumnName(){
				
					return "CSTCOM";
				
				}

				
			    public String CST1;

				public String getCST1 () {
					return this.CST1;
				}

				public Boolean CST1IsNullable(){
				    return false;
				}
				public Boolean CST1IsKey(){
				    return false;
				}
				public Integer CST1Length(){
				    return 95;
				}
				public Integer CST1Precision(){
				    return 0;
				}
				public String CST1Default(){
				
					return null;
				
				}
				public String CST1Comment(){
				
				    return "";
				
				}
				public String CST1Pattern(){
				
					return "";
				
				}
				public String CST1OriginalDbColumnName(){
				
					return "CST1";
				
				}

				
			    public String CST2;

				public String getCST2 () {
					return this.CST2;
				}

				public Boolean CST2IsNullable(){
				    return false;
				}
				public Boolean CST2IsKey(){
				    return false;
				}
				public Integer CST2Length(){
				    return 59;
				}
				public Integer CST2Precision(){
				    return 0;
				}
				public String CST2Default(){
				
					return null;
				
				}
				public String CST2Comment(){
				
				    return "";
				
				}
				public String CST2Pattern(){
				
					return "";
				
				}
				public String CST2OriginalDbColumnName(){
				
					return "CST2";
				
				}

				
			    public BigDecimal RESSA2;

				public BigDecimal getRESSA2 () {
					return this.RESSA2;
				}

				public Boolean RESSA2IsNullable(){
				    return true;
				}
				public Boolean RESSA2IsKey(){
				    return false;
				}
				public Integer RESSA2Length(){
				    return 13;
				}
				public Integer RESSA2Precision(){
				    return 2;
				}
				public String RESSA2Default(){
				
					return null;
				
				}
				public String RESSA2Comment(){
				
				    return "";
				
				}
				public String RESSA2Pattern(){
				
					return "";
				
				}
				public String RESSA2OriginalDbColumnName(){
				
					return "RESSA2";
				
				}

				
			    public BigDecimal IPISAI;

				public BigDecimal getIPISAI () {
					return this.IPISAI;
				}

				public Boolean IPISAIIsNullable(){
				    return true;
				}
				public Boolean IPISAIIsKey(){
				    return false;
				}
				public Integer IPISAILength(){
				    return 12;
				}
				public Integer IPISAIPrecision(){
				    return 2;
				}
				public String IPISAIDefault(){
				
					return null;
				
				}
				public String IPISAIComment(){
				
				    return "";
				
				}
				public String IPISAIPattern(){
				
					return "";
				
				}
				public String IPISAIOriginalDbColumnName(){
				
					return "IPISAI";
				
				}

				
			    public BigDecimal VLRVII;

				public BigDecimal getVLRVII () {
					return this.VLRVII;
				}

				public Boolean VLRVIIIsNullable(){
				    return true;
				}
				public Boolean VLRVIIIsKey(){
				    return false;
				}
				public Integer VLRVIILength(){
				    return 54;
				}
				public Integer VLRVIIPrecision(){
				    return 10;
				}
				public String VLRVIIDefault(){
				
					return null;
				
				}
				public String VLRVIIComment(){
				
				    return "";
				
				}
				public String VLRVIIPattern(){
				
					return "";
				
				}
				public String VLRVIIOriginalDbColumnName(){
				
					return "VLRVII";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRVII);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRVII);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMDOC="+NUMDOC);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",CODVEN="+CODVEN);
		sb.append(",VLRTNF="+String.valueOf(VLRTNF));
		sb.append(",DTASAI="+String.valueOf(DTASAI));
		sb.append(",CODITE="+CODITE);
		sb.append(",CODMAR="+CODMAR);
		sb.append(",DESCRI="+DESCRI);
		sb.append(",QTDSAI="+String.valueOf(QTDSAI));
		sb.append(",UNISAI="+String.valueOf(UNISAI));
		sb.append(",TOTSAI="+String.valueOf(TOTSAI));
		sb.append(",ICMSAI="+String.valueOf(ICMSAI));
		sb.append(",FCPSAI="+String.valueOf(FCPSAI));
		sb.append(",RETSAI="+String.valueOf(RETSAI));
		sb.append(",TOTFRE="+String.valueOf(TOTFRE));
		sb.append(",P_CSAI="+String.valueOf(P_CSAI));
		sb.append(",DIFSAI="+String.valueOf(DIFSAI));
		sb.append(",LIQSAI2="+String.valueOf(LIQSAI2));
		sb.append(",LIQSAI="+String.valueOf(LIQSAI));
		sb.append(",NUMENT="+NUMENT);
		sb.append(",DTAENT="+String.valueOf(DTAENT));
		sb.append(",QTDENT="+String.valueOf(QTDENT));
		sb.append(",CSTENT="+CSTENT);
		sb.append(",TOTENT="+String.valueOf(TOTENT));
		sb.append(",ICMENT="+String.valueOf(ICMENT));
		sb.append(",RETENT="+String.valueOf(RETENT));
		sb.append(",IPIENT="+String.valueOf(IPIENT));
		sb.append(",P_CENT="+String.valueOf(P_CENT));
		sb.append(",LIQENT="+String.valueOf(LIQENT));
		sb.append(",VAL_ST="+String.valueOf(VAL_ST));
		sb.append(",VAL_OP="+String.valueOf(VAL_OP));
		sb.append(",VALORES="+VALORES);
		sb.append(",VALCOM="+String.valueOf(VALCOM));
		sb.append(",ICMEN2="+String.valueOf(ICMEN2));
		sb.append(",RESSAR="+String.valueOf(RESSAR));
		sb.append(",MAROPE="+String.valueOf(MAROPE));
		sb.append(",PERMAR="+String.valueOf(PERMAR));
		sb.append(",CSTCOM="+CSTCOM);
		sb.append(",CST1="+CST1);
		sb.append(",CST2="+CST2);
		sb.append(",RESSA2="+String.valueOf(RESSA2));
		sb.append(",IPISAI="+String.valueOf(IPISAI));
		sb.append(",VLRVII="+String.valueOf(VLRVII));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}

				public Boolean ANOIsNullable(){
				    return true;
				}
				public Boolean ANOIsKey(){
				    return false;
				}
				public Integer ANOLength(){
				    return null;
				}
				public Integer ANOPrecision(){
				    return null;
				}
				public String ANODefault(){
				
					return null;
				
				}
				public String ANOComment(){
				
				    return "";
				
				}
				public String ANOPattern(){
				
					return "";
				
				}
				public String ANOOriginalDbColumnName(){
				
					return "ANO";
				
				}

				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}

				public Boolean MESIsNullable(){
				    return true;
				}
				public Boolean MESIsKey(){
				    return false;
				}
				public Integer MESLength(){
				    return null;
				}
				public Integer MESPrecision(){
				    return null;
				}
				public String MESDefault(){
				
					return null;
				
				}
				public String MESComment(){
				
				    return "";
				
				}
				public String MESPattern(){
				
					return "";
				
				}
				public String MESOriginalDbColumnName(){
				
					return "MES";
				
				}

				
			    public java.util.Date PARAMETRO;

				public java.util.Date getPARAMETRO () {
					return this.PARAMETRO;
				}

				public Boolean PARAMETROIsNullable(){
				    return true;
				}
				public Boolean PARAMETROIsKey(){
				    return false;
				}
				public Integer PARAMETROLength(){
				    return null;
				}
				public Integer PARAMETROPrecision(){
				    return null;
				}
				public String PARAMETRODefault(){
				
					return null;
				
				}
				public String PARAMETROComment(){
				
				    return "";
				
				}
				public String PARAMETROPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String PARAMETROOriginalDbColumnName(){
				
					return "PARAMETRO";
				
				}

				
			    public java.util.Date DATA_START;

				public java.util.Date getDATA_START () {
					return this.DATA_START;
				}

				public Boolean DATA_STARTIsNullable(){
				    return true;
				}
				public Boolean DATA_STARTIsKey(){
				    return false;
				}
				public Integer DATA_STARTLength(){
				    return null;
				}
				public Integer DATA_STARTPrecision(){
				    return null;
				}
				public String DATA_STARTDefault(){
				
					return null;
				
				}
				public String DATA_STARTComment(){
				
				    return "";
				
				}
				public String DATA_STARTPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_STARTOriginalDbColumnName(){
				
					return "DATA_START";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
						this.ANO = readInteger(dis);
					
						this.MES = readInteger(dis);
					
					this.PARAMETRO = readDate(dis);
					
					this.DATA_START = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ANO,dos);
					
					// Integer
				
						writeInteger(this.MES,dos);
					
					// java.util.Date
				
						writeDate(this.PARAMETRO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_START,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",PARAMETRO="+String.valueOf(PARAMETRO));
		sb.append(",DATA_START="+String.valueOf(DATA_START));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row16Struct row16 = new row16Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tDBInput_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row8Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row9.ANO = next_tHashInput_1.ANO;
	row9.MES = next_tHashInput_1.MES;
	row9.PARAMETRO = next_tHashInput_1.PARAMETRO;
	row9.DATA_START = next_tHashInput_1.DATA_START;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


    	            
            globalMap.put("row9.ANO", row9.ANO);
    	            
            globalMap.put("row9.MES", row9.MES);
    	            
            globalMap.put("row9.PARAMETRO", row9.PARAMETRO);
    	            
            globalMap.put("row9.DATA_START", row9.DATA_START);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tDBInput_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tDBInput_5);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_vw_custo_efetivo_mg_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "\nSELECT\nNUMDOC	,\nESTADO	,\nCODVEN	,\nVLRTNF	,\nDTASAI	,\nCODITE	,\nCODMAR	,\nDESCRI	,\nQTDSAI	,\nUNISAI	,\nTOTSAI	,"
+"\nICMSAI	,\nFCPSAI	,\nRETSAI	,\nTOTFRE	,\nP_CSAI	,\nDIFSAI	,\nLIQSAI2	,\nLIQSAI	,\nNUMENT	,\nDTAENT	,\nQTDENT	,\nCSTENT	,"
+"\nTOTENT	,\nICMENT	,\nRETENT	,\nIPIENT	,\nP_CENT	,\nLIQENT	,\nVAL_ST	,\nVAL_OP	,\nVALORES	,\nVALCOM	,\nICMEN2	,\nRESSAR	"
+",\nMAROPE	,\nPERMAR	,\nCSTCOM	,\nCST1	,\nCST2	,\nRESSA2	,\nIPISAI	,\nVLRVII	\nFROM VW_CUSTO_EFETIVO_MG\n WHERE DTASAI >="
+" DATE_SUB(CURDATE(), INTERVAL 2 DAY);\n";
		    

		    globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);

		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row16.NUMDOC = null;
							} else {
	                         		
        	row16.NUMDOC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row16.ESTADO = null;
							} else {
	                         		
        	row16.ESTADO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row16.CODVEN = null;
							} else {
	                         		
        	row16.CODVEN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row16.VLRTNF = null;
							} else {
		                          
            row16.VLRTNF = rs_tDBInput_5.getBigDecimal(4);
            if(rs_tDBInput_5.wasNull()){
                    row16.VLRTNF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row16.DTASAI = null;
							} else {
										
				if(rs_tDBInput_5.getString(5) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row16.DTASAI = rs_tDBInput_5.getTimestamp(5);
					} else {
						row16.DTASAI = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row16.DTASAI =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row16.CODITE = null;
							} else {
	                         		
        	row16.CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row16.CODMAR = null;
							} else {
	                         		
        	row16.CODMAR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row16.DESCRI = null;
							} else {
	                         		
        	row16.DESCRI = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row16.QTDSAI = null;
							} else {
		                          
            row16.QTDSAI = rs_tDBInput_5.getBigDecimal(9);
            if(rs_tDBInput_5.wasNull()){
                    row16.QTDSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row16.UNISAI = null;
							} else {
		                          
            row16.UNISAI = rs_tDBInput_5.getBigDecimal(10);
            if(rs_tDBInput_5.wasNull()){
                    row16.UNISAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row16.TOTSAI = null;
							} else {
		                          
            row16.TOTSAI = rs_tDBInput_5.getBigDecimal(11);
            if(rs_tDBInput_5.wasNull()){
                    row16.TOTSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row16.ICMSAI = null;
							} else {
		                          
            row16.ICMSAI = rs_tDBInput_5.getBigDecimal(12);
            if(rs_tDBInput_5.wasNull()){
                    row16.ICMSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row16.FCPSAI = null;
							} else {
		                          
            row16.FCPSAI = rs_tDBInput_5.getBigDecimal(13);
            if(rs_tDBInput_5.wasNull()){
                    row16.FCPSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row16.RETSAI = null;
							} else {
		                          
            row16.RETSAI = rs_tDBInput_5.getBigDecimal(14);
            if(rs_tDBInput_5.wasNull()){
                    row16.RETSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row16.TOTFRE = null;
							} else {
		                          
            row16.TOTFRE = rs_tDBInput_5.getBigDecimal(15);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row16.P_CSAI = null;
							} else {
		                          
            row16.P_CSAI = rs_tDBInput_5.getBigDecimal(16);
            if(rs_tDBInput_5.wasNull()){
                    row16.P_CSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row16.DIFSAI = null;
							} else {
		                          
            row16.DIFSAI = rs_tDBInput_5.getBigDecimal(17);
            if(rs_tDBInput_5.wasNull()){
                    row16.DIFSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row16.LIQSAI2 = null;
							} else {
		                          
            row16.LIQSAI2 = rs_tDBInput_5.getBigDecimal(18);
            if(rs_tDBInput_5.wasNull()){
                    row16.LIQSAI2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row16.LIQSAI = null;
							} else {
		                          
            row16.LIQSAI = rs_tDBInput_5.getBigDecimal(19);
            if(rs_tDBInput_5.wasNull()){
                    row16.LIQSAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row16.NUMENT = null;
							} else {
	                         		
        	row16.NUMENT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 20, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row16.DTAENT = null;
							} else {
										
				if(rs_tDBInput_5.getString(21) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(21);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row16.DTAENT = rs_tDBInput_5.getTimestamp(21);
					} else {
						row16.DTAENT = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row16.DTAENT =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row16.QTDENT = null;
							} else {
		                          
            row16.QTDENT = rs_tDBInput_5.getBigDecimal(22);
            if(rs_tDBInput_5.wasNull()){
                    row16.QTDENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row16.CSTENT = null;
							} else {
	                         		
        	row16.CSTENT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row16.TOTENT = null;
							} else {
		                          
            row16.TOTENT = rs_tDBInput_5.getBigDecimal(24);
            if(rs_tDBInput_5.wasNull()){
                    row16.TOTENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row16.ICMENT = null;
							} else {
		                          
            row16.ICMENT = rs_tDBInput_5.getBigDecimal(25);
            if(rs_tDBInput_5.wasNull()){
                    row16.ICMENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row16.RETENT = null;
							} else {
		                          
            row16.RETENT = rs_tDBInput_5.getBigDecimal(26);
            if(rs_tDBInput_5.wasNull()){
                    row16.RETENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row16.IPIENT = null;
							} else {
		                          
            row16.IPIENT = rs_tDBInput_5.getBigDecimal(27);
            if(rs_tDBInput_5.wasNull()){
                    row16.IPIENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row16.P_CENT = null;
							} else {
		                          
            row16.P_CENT = rs_tDBInput_5.getBigDecimal(28);
            if(rs_tDBInput_5.wasNull()){
                    row16.P_CENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row16.LIQENT = null;
							} else {
		                          
            row16.LIQENT = rs_tDBInput_5.getBigDecimal(29);
            if(rs_tDBInput_5.wasNull()){
                    row16.LIQENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row16.VAL_ST = null;
							} else {
		                          
            row16.VAL_ST = rs_tDBInput_5.getBigDecimal(30);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row16.VAL_OP = null;
							} else {
		                          
            row16.VAL_OP = rs_tDBInput_5.getBigDecimal(31);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row16.VALORES = null;
							} else {
	                         		
        	row16.VALORES = routines.system.JDBCUtil.getString(rs_tDBInput_5, 32, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row16.VALCOM = null;
							} else {
		                          
            row16.VALCOM = rs_tDBInput_5.getBigDecimal(33);
            if(rs_tDBInput_5.wasNull()){
                    row16.VALCOM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row16.ICMEN2 = null;
							} else {
		                          
            row16.ICMEN2 = rs_tDBInput_5.getBigDecimal(34);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row16.RESSAR = null;
							} else {
		                          
            row16.RESSAR = rs_tDBInput_5.getBigDecimal(35);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row16.MAROPE = null;
							} else {
		                          
            row16.MAROPE = rs_tDBInput_5.getBigDecimal(36);
            if(rs_tDBInput_5.wasNull()){
                    row16.MAROPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row16.PERMAR = null;
							} else {
		                          
            row16.PERMAR = rs_tDBInput_5.getBigDecimal(37);
            if(rs_tDBInput_5.wasNull()){
                    row16.PERMAR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row16.CSTCOM = null;
							} else {
	                         		
        	row16.CSTCOM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 38, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row16.CST1 = null;
							} else {
	                         		
        	row16.CST1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 39, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row16.CST2 = null;
							} else {
	                         		
        	row16.CST2 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 40, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row16.RESSA2 = null;
							} else {
		                          
            row16.RESSA2 = rs_tDBInput_5.getBigDecimal(41);
            if(rs_tDBInput_5.wasNull()){
                    row16.RESSA2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row16.IPISAI = null;
							} else {
		                          
            row16.IPISAI = rs_tDBInput_5.getBigDecimal(42);
            if(rs_tDBInput_5.wasNull()){
                    row16.IPISAI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row16.VLRVII = null;
							} else {
		                          
            row16.VLRVII = rs_tDBInput_5.getBigDecimal(43);
            if(rs_tDBInput_5.wasNull()){
                    row16.VLRVII = null;
            }
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_6 = new row16Struct();
				
					oneRow_tHashOutput_6.NUMDOC = row16.NUMDOC;
					oneRow_tHashOutput_6.ESTADO = row16.ESTADO;
					oneRow_tHashOutput_6.CODVEN = row16.CODVEN;
					oneRow_tHashOutput_6.VLRTNF = row16.VLRTNF;
					oneRow_tHashOutput_6.DTASAI = row16.DTASAI;
					oneRow_tHashOutput_6.CODITE = row16.CODITE;
					oneRow_tHashOutput_6.CODMAR = row16.CODMAR;
					oneRow_tHashOutput_6.DESCRI = row16.DESCRI;
					oneRow_tHashOutput_6.QTDSAI = row16.QTDSAI;
					oneRow_tHashOutput_6.UNISAI = row16.UNISAI;
					oneRow_tHashOutput_6.TOTSAI = row16.TOTSAI;
					oneRow_tHashOutput_6.ICMSAI = row16.ICMSAI;
					oneRow_tHashOutput_6.FCPSAI = row16.FCPSAI;
					oneRow_tHashOutput_6.RETSAI = row16.RETSAI;
					oneRow_tHashOutput_6.TOTFRE = row16.TOTFRE;
					oneRow_tHashOutput_6.P_CSAI = row16.P_CSAI;
					oneRow_tHashOutput_6.DIFSAI = row16.DIFSAI;
					oneRow_tHashOutput_6.LIQSAI2 = row16.LIQSAI2;
					oneRow_tHashOutput_6.LIQSAI = row16.LIQSAI;
					oneRow_tHashOutput_6.NUMENT = row16.NUMENT;
					oneRow_tHashOutput_6.DTAENT = row16.DTAENT;
					oneRow_tHashOutput_6.QTDENT = row16.QTDENT;
					oneRow_tHashOutput_6.CSTENT = row16.CSTENT;
					oneRow_tHashOutput_6.TOTENT = row16.TOTENT;
					oneRow_tHashOutput_6.ICMENT = row16.ICMENT;
					oneRow_tHashOutput_6.RETENT = row16.RETENT;
					oneRow_tHashOutput_6.IPIENT = row16.IPIENT;
					oneRow_tHashOutput_6.P_CENT = row16.P_CENT;
					oneRow_tHashOutput_6.LIQENT = row16.LIQENT;
					oneRow_tHashOutput_6.VAL_ST = row16.VAL_ST;
					oneRow_tHashOutput_6.VAL_OP = row16.VAL_OP;
					oneRow_tHashOutput_6.VALORES = row16.VALORES;
					oneRow_tHashOutput_6.VALCOM = row16.VALCOM;
					oneRow_tHashOutput_6.ICMEN2 = row16.ICMEN2;
					oneRow_tHashOutput_6.RESSAR = row16.RESSAR;
					oneRow_tHashOutput_6.MAROPE = row16.MAROPE;
					oneRow_tHashOutput_6.PERMAR = row16.PERMAR;
					oneRow_tHashOutput_6.CSTCOM = row16.CSTCOM;
					oneRow_tHashOutput_6.CST1 = row16.CST1;
					oneRow_tHashOutput_6.CST2 = row16.CST2;
					oneRow_tHashOutput_6.RESSA2 = row16.RESSA2;
					oneRow_tHashOutput_6.IPISAI = row16.IPISAI;
					oneRow_tHashOutput_6.VLRVII = row16.VLRVII;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tDBInput_5);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMDOC;

				public String getNUMDOC () {
					return this.NUMDOC;
				}

				public Boolean NUMDOCIsNullable(){
				    return true;
				}
				public Boolean NUMDOCIsKey(){
				    return true;
				}
				public Integer NUMDOCLength(){
				    return 23;
				}
				public Integer NUMDOCPrecision(){
				    return 0;
				}
				public String NUMDOCDefault(){
				
					return null;
				
				}
				public String NUMDOCComment(){
				
				    return "";
				
				}
				public String NUMDOCPattern(){
				
					return "";
				
				}
				public String NUMDOCOriginalDbColumnName(){
				
					return "NUMDOC";
				
				}

				
			    public String NUMPED;

				public String getNUMPED () {
					return this.NUMPED;
				}

				public Boolean NUMPEDIsNullable(){
				    return true;
				}
				public Boolean NUMPEDIsKey(){
				    return false;
				}
				public Integer NUMPEDLength(){
				    return 12;
				}
				public Integer NUMPEDPrecision(){
				    return 0;
				}
				public String NUMPEDDefault(){
				
					return null;
				
				}
				public String NUMPEDComment(){
				
				    return "";
				
				}
				public String NUMPEDPattern(){
				
					return "";
				
				}
				public String NUMPEDOriginalDbColumnName(){
				
					return "NUMPED";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String CODVEN;

				public String getCODVEN () {
					return this.CODVEN;
				}

				public Boolean CODVENIsNullable(){
				    return false;
				}
				public Boolean CODVENIsKey(){
				    return false;
				}
				public Integer CODVENLength(){
				    return 3;
				}
				public Integer CODVENPrecision(){
				    return 0;
				}
				public String CODVENDefault(){
				
					return null;
				
				}
				public String CODVENComment(){
				
				    return "";
				
				}
				public String CODVENPattern(){
				
					return "";
				
				}
				public String CODVENOriginalDbColumnName(){
				
					return "CODVEN";
				
				}

				
			    public BigDecimal VLRTNF;

				public BigDecimal getVLRTNF () {
					return this.VLRTNF;
				}

				public Boolean VLRTNFIsNullable(){
				    return true;
				}
				public Boolean VLRTNFIsKey(){
				    return false;
				}
				public Integer VLRTNFLength(){
				    return 12;
				}
				public Integer VLRTNFPrecision(){
				    return 2;
				}
				public String VLRTNFDefault(){
				
					return null;
				
				}
				public String VLRTNFComment(){
				
				    return "";
				
				}
				public String VLRTNFPattern(){
				
					return "";
				
				}
				public String VLRTNFOriginalDbColumnName(){
				
					return "VLRTNF";
				
				}

				
			    public java.util.Date DTASAI;

				public java.util.Date getDTASAI () {
					return this.DTASAI;
				}

				public Boolean DTASAIIsNullable(){
				    return true;
				}
				public Boolean DTASAIIsKey(){
				    return false;
				}
				public Integer DTASAILength(){
				    return 10;
				}
				public Integer DTASAIPrecision(){
				    return 0;
				}
				public String DTASAIDefault(){
				
					return null;
				
				}
				public String DTASAIComment(){
				
				    return "";
				
				}
				public String DTASAIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTASAIOriginalDbColumnName(){
				
					return "DTASAI";
				
				}

				
			    public String CODITE;

				public String getCODITE () {
					return this.CODITE;
				}

				public Boolean CODITEIsNullable(){
				    return true;
				}
				public Boolean CODITEIsKey(){
				    return true;
				}
				public Integer CODITELength(){
				    return 150;
				}
				public Integer CODITEPrecision(){
				    return 0;
				}
				public String CODITEDefault(){
				
					return null;
				
				}
				public String CODITEComment(){
				
				    return "";
				
				}
				public String CODITEPattern(){
				
					return "";
				
				}
				public String CODITEOriginalDbColumnName(){
				
					return "CODITE";
				
				}

				
			    public String CODMAR;

				public String getCODMAR () {
					return this.CODMAR;
				}

				public Boolean CODMARIsNullable(){
				    return true;
				}
				public Boolean CODMARIsKey(){
				    return false;
				}
				public Integer CODMARLength(){
				    return 37;
				}
				public Integer CODMARPrecision(){
				    return 0;
				}
				public String CODMARDefault(){
				
					return null;
				
				}
				public String CODMARComment(){
				
				    return "";
				
				}
				public String CODMARPattern(){
				
					return "";
				
				}
				public String CODMAROriginalDbColumnName(){
				
					return "CODMAR";
				
				}

				
			    public String DESCRI;

				public String getDESCRI () {
					return this.DESCRI;
				}

				public Boolean DESCRIIsNullable(){
				    return true;
				}
				public Boolean DESCRIIsKey(){
				    return false;
				}
				public Integer DESCRILength(){
				    return 150;
				}
				public Integer DESCRIPrecision(){
				    return 0;
				}
				public String DESCRIDefault(){
				
					return null;
				
				}
				public String DESCRIComment(){
				
				    return "";
				
				}
				public String DESCRIPattern(){
				
					return "";
				
				}
				public String DESCRIOriginalDbColumnName(){
				
					return "DESCRI";
				
				}

				
			    public BigDecimal QTDSAI;

				public BigDecimal getQTDSAI () {
					return this.QTDSAI;
				}

				public Boolean QTDSAIIsNullable(){
				    return true;
				}
				public Boolean QTDSAIIsKey(){
				    return false;
				}
				public Integer QTDSAILength(){
				    return 34;
				}
				public Integer QTDSAIPrecision(){
				    return 4;
				}
				public String QTDSAIDefault(){
				
					return null;
				
				}
				public String QTDSAIComment(){
				
				    return "";
				
				}
				public String QTDSAIPattern(){
				
					return "";
				
				}
				public String QTDSAIOriginalDbColumnName(){
				
					return "QTDSAI";
				
				}

				
			    public BigDecimal UNISAI;

				public BigDecimal getUNISAI () {
					return this.UNISAI;
				}

				public Boolean UNISAIIsNullable(){
				    return true;
				}
				public Boolean UNISAIIsKey(){
				    return false;
				}
				public Integer UNISAILength(){
				    return 12;
				}
				public Integer UNISAIPrecision(){
				    return 4;
				}
				public String UNISAIDefault(){
				
					return null;
				
				}
				public String UNISAIComment(){
				
				    return "";
				
				}
				public String UNISAIPattern(){
				
					return "";
				
				}
				public String UNISAIOriginalDbColumnName(){
				
					return "UNISAI";
				
				}

				
			    public BigDecimal TOTSAI;

				public BigDecimal getTOTSAI () {
					return this.TOTSAI;
				}

				public Boolean TOTSAIIsNullable(){
				    return true;
				}
				public Boolean TOTSAIIsKey(){
				    return false;
				}
				public Integer TOTSAILength(){
				    return 34;
				}
				public Integer TOTSAIPrecision(){
				    return 2;
				}
				public String TOTSAIDefault(){
				
					return null;
				
				}
				public String TOTSAIComment(){
				
				    return "";
				
				}
				public String TOTSAIPattern(){
				
					return "";
				
				}
				public String TOTSAIOriginalDbColumnName(){
				
					return "TOTSAI";
				
				}

				
			    public BigDecimal ICMSAI;

				public BigDecimal getICMSAI () {
					return this.ICMSAI;
				}

				public Boolean ICMSAIIsNullable(){
				    return true;
				}
				public Boolean ICMSAIIsKey(){
				    return false;
				}
				public Integer ICMSAILength(){
				    return 34;
				}
				public Integer ICMSAIPrecision(){
				    return 2;
				}
				public String ICMSAIDefault(){
				
					return null;
				
				}
				public String ICMSAIComment(){
				
				    return "";
				
				}
				public String ICMSAIPattern(){
				
					return "";
				
				}
				public String ICMSAIOriginalDbColumnName(){
				
					return "ICMSAI";
				
				}

				
			    public BigDecimal FCPSAI;

				public BigDecimal getFCPSAI () {
					return this.FCPSAI;
				}

				public Boolean FCPSAIIsNullable(){
				    return true;
				}
				public Boolean FCPSAIIsKey(){
				    return false;
				}
				public Integer FCPSAILength(){
				    return 37;
				}
				public Integer FCPSAIPrecision(){
				    return 2;
				}
				public String FCPSAIDefault(){
				
					return null;
				
				}
				public String FCPSAIComment(){
				
				    return "";
				
				}
				public String FCPSAIPattern(){
				
					return "";
				
				}
				public String FCPSAIOriginalDbColumnName(){
				
					return "FCPSAI";
				
				}

				
			    public BigDecimal RETSAI;

				public BigDecimal getRETSAI () {
					return this.RETSAI;
				}

				public Boolean RETSAIIsNullable(){
				    return true;
				}
				public Boolean RETSAIIsKey(){
				    return false;
				}
				public Integer RETSAILength(){
				    return 35;
				}
				public Integer RETSAIPrecision(){
				    return 2;
				}
				public String RETSAIDefault(){
				
					return null;
				
				}
				public String RETSAIComment(){
				
				    return "";
				
				}
				public String RETSAIPattern(){
				
					return "";
				
				}
				public String RETSAIOriginalDbColumnName(){
				
					return "RETSAI";
				
				}

				
			    public BigDecimal TOTFRE;

				public BigDecimal getTOTFRE () {
					return this.TOTFRE;
				}

				public Boolean TOTFREIsNullable(){
				    return false;
				}
				public Boolean TOTFREIsKey(){
				    return false;
				}
				public Integer TOTFRELength(){
				    return 12;
				}
				public Integer TOTFREPrecision(){
				    return 2;
				}
				public String TOTFREDefault(){
				
					return "0.00";
				
				}
				public String TOTFREComment(){
				
				    return "";
				
				}
				public String TOTFREPattern(){
				
					return "";
				
				}
				public String TOTFREOriginalDbColumnName(){
				
					return "TOTFRE";
				
				}

				
			    public BigDecimal P_CSAI;

				public BigDecimal getP_CSAI () {
					return this.P_CSAI;
				}

				public Boolean P_CSAIIsNullable(){
				    return true;
				}
				public Boolean P_CSAIIsKey(){
				    return false;
				}
				public Integer P_CSAILength(){
				    return 35;
				}
				public Integer P_CSAIPrecision(){
				    return 2;
				}
				public String P_CSAIDefault(){
				
					return null;
				
				}
				public String P_CSAIComment(){
				
				    return "";
				
				}
				public String P_CSAIPattern(){
				
					return "";
				
				}
				public String P_CSAIOriginalDbColumnName(){
				
					return "P_CSAI";
				
				}

				
			    public BigDecimal DIFSAI;

				public BigDecimal getDIFSAI () {
					return this.DIFSAI;
				}

				public Boolean DIFSAIIsNullable(){
				    return true;
				}
				public Boolean DIFSAIIsKey(){
				    return false;
				}
				public Integer DIFSAILength(){
				    return 38;
				}
				public Integer DIFSAIPrecision(){
				    return 2;
				}
				public String DIFSAIDefault(){
				
					return null;
				
				}
				public String DIFSAIComment(){
				
				    return "";
				
				}
				public String DIFSAIPattern(){
				
					return "";
				
				}
				public String DIFSAIOriginalDbColumnName(){
				
					return "DIFSAI";
				
				}

				
			    public BigDecimal LIQSAI2;

				public BigDecimal getLIQSAI2 () {
					return this.LIQSAI2;
				}

				public Boolean LIQSAI2IsNullable(){
				    return true;
				}
				public Boolean LIQSAI2IsKey(){
				    return false;
				}
				public Integer LIQSAI2Length(){
				    return 40;
				}
				public Integer LIQSAI2Precision(){
				    return 2;
				}
				public String LIQSAI2Default(){
				
					return null;
				
				}
				public String LIQSAI2Comment(){
				
				    return "";
				
				}
				public String LIQSAI2Pattern(){
				
					return "";
				
				}
				public String LIQSAI2OriginalDbColumnName(){
				
					return "LIQSAI2";
				
				}

				
			    public String TESTE;

				public String getTESTE () {
					return this.TESTE;
				}

				public Boolean TESTEIsNullable(){
				    return true;
				}
				public Boolean TESTEIsKey(){
				    return false;
				}
				public Integer TESTELength(){
				    return 200;
				}
				public Integer TESTEPrecision(){
				    return 0;
				}
				public String TESTEDefault(){
				
					return null;
				
				}
				public String TESTEComment(){
				
				    return "";
				
				}
				public String TESTEPattern(){
				
					return "";
				
				}
				public String TESTEOriginalDbColumnName(){
				
					return "TESTE";
				
				}

				
			    public BigDecimal LIQSAI;

				public BigDecimal getLIQSAI () {
					return this.LIQSAI;
				}

				public Boolean LIQSAIIsNullable(){
				    return true;
				}
				public Boolean LIQSAIIsKey(){
				    return false;
				}
				public Integer LIQSAILength(){
				    return 41;
				}
				public Integer LIQSAIPrecision(){
				    return 2;
				}
				public String LIQSAIDefault(){
				
					return null;
				
				}
				public String LIQSAIComment(){
				
				    return "";
				
				}
				public String LIQSAIPattern(){
				
					return "";
				
				}
				public String LIQSAIOriginalDbColumnName(){
				
					return "LIQSAI";
				
				}

				
			    public String NUMENT;

				public String getNUMENT () {
					return this.NUMENT;
				}

				public Boolean NUMENTIsNullable(){
				    return true;
				}
				public Boolean NUMENTIsKey(){
				    return false;
				}
				public Integer NUMENTLength(){
				    return 50;
				}
				public Integer NUMENTPrecision(){
				    return 0;
				}
				public String NUMENTDefault(){
				
					return null;
				
				}
				public String NUMENTComment(){
				
				    return "";
				
				}
				public String NUMENTPattern(){
				
					return "";
				
				}
				public String NUMENTOriginalDbColumnName(){
				
					return "NUMENT";
				
				}

				
			    public java.util.Date DTAENT;

				public java.util.Date getDTAENT () {
					return this.DTAENT;
				}

				public Boolean DTAENTIsNullable(){
				    return true;
				}
				public Boolean DTAENTIsKey(){
				    return false;
				}
				public Integer DTAENTLength(){
				    return 10;
				}
				public Integer DTAENTPrecision(){
				    return 0;
				}
				public String DTAENTDefault(){
				
					return null;
				
				}
				public String DTAENTComment(){
				
				    return "";
				
				}
				public String DTAENTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTAENTOriginalDbColumnName(){
				
					return "DTAENT";
				
				}

				
			    public BigDecimal QTDENT;

				public BigDecimal getQTDENT () {
					return this.QTDENT;
				}

				public Boolean QTDENTIsNullable(){
				    return true;
				}
				public Boolean QTDENTIsKey(){
				    return false;
				}
				public Integer QTDENTLength(){
				    return 12;
				}
				public Integer QTDENTPrecision(){
				    return 4;
				}
				public String QTDENTDefault(){
				
					return null;
				
				}
				public String QTDENTComment(){
				
				    return "";
				
				}
				public String QTDENTPattern(){
				
					return "";
				
				}
				public String QTDENTOriginalDbColumnName(){
				
					return "QTDENT";
				
				}

				
			    public String CSTENT;

				public String getCSTENT () {
					return this.CSTENT;
				}

				public Boolean CSTENTIsNullable(){
				    return true;
				}
				public Boolean CSTENTIsKey(){
				    return false;
				}
				public Integer CSTENTLength(){
				    return 5;
				}
				public Integer CSTENTPrecision(){
				    return 0;
				}
				public String CSTENTDefault(){
				
					return null;
				
				}
				public String CSTENTComment(){
				
				    return "";
				
				}
				public String CSTENTPattern(){
				
					return "";
				
				}
				public String CSTENTOriginalDbColumnName(){
				
					return "CSTENT";
				
				}

				
			    public BigDecimal TOTENT;

				public BigDecimal getTOTENT () {
					return this.TOTENT;
				}

				public Boolean TOTENTIsNullable(){
				    return true;
				}
				public Boolean TOTENTIsKey(){
				    return false;
				}
				public Integer TOTENTLength(){
				    return 46;
				}
				public Integer TOTENTPrecision(){
				    return 8;
				}
				public String TOTENTDefault(){
				
					return null;
				
				}
				public String TOTENTComment(){
				
				    return "";
				
				}
				public String TOTENTPattern(){
				
					return "";
				
				}
				public String TOTENTOriginalDbColumnName(){
				
					return "TOTENT";
				
				}

				
			    public BigDecimal ICMENT;

				public BigDecimal getICMENT () {
					return this.ICMENT;
				}

				public Boolean ICMENTIsNullable(){
				    return true;
				}
				public Boolean ICMENTIsKey(){
				    return false;
				}
				public Integer ICMENTLength(){
				    return 54;
				}
				public Integer ICMENTPrecision(){
				    return 10;
				}
				public String ICMENTDefault(){
				
					return null;
				
				}
				public String ICMENTComment(){
				
				    return "";
				
				}
				public String ICMENTPattern(){
				
					return "";
				
				}
				public String ICMENTOriginalDbColumnName(){
				
					return "ICMENT";
				
				}

				
			    public BigDecimal RETENT;

				public BigDecimal getRETENT () {
					return this.RETENT;
				}

				public Boolean RETENTIsNullable(){
				    return true;
				}
				public Boolean RETENTIsKey(){
				    return false;
				}
				public Integer RETENTLength(){
				    return 54;
				}
				public Integer RETENTPrecision(){
				    return 10;
				}
				public String RETENTDefault(){
				
					return null;
				
				}
				public String RETENTComment(){
				
				    return "";
				
				}
				public String RETENTPattern(){
				
					return "";
				
				}
				public String RETENTOriginalDbColumnName(){
				
					return "RETENT";
				
				}

				
			    public BigDecimal IPIENT;

				public BigDecimal getIPIENT () {
					return this.IPIENT;
				}

				public Boolean IPIENTIsNullable(){
				    return true;
				}
				public Boolean IPIENTIsKey(){
				    return false;
				}
				public Integer IPIENTLength(){
				    return 54;
				}
				public Integer IPIENTPrecision(){
				    return 10;
				}
				public String IPIENTDefault(){
				
					return null;
				
				}
				public String IPIENTComment(){
				
				    return "";
				
				}
				public String IPIENTPattern(){
				
					return "";
				
				}
				public String IPIENTOriginalDbColumnName(){
				
					return "IPIENT";
				
				}

				
			    public BigDecimal P_CENT;

				public BigDecimal getP_CENT () {
					return this.P_CENT;
				}

				public Boolean P_CENTIsNullable(){
				    return true;
				}
				public Boolean P_CENTIsKey(){
				    return false;
				}
				public Integer P_CENTLength(){
				    return 55;
				}
				public Integer P_CENTPrecision(){
				    return 10;
				}
				public String P_CENTDefault(){
				
					return null;
				
				}
				public String P_CENTComment(){
				
				    return "";
				
				}
				public String P_CENTPattern(){
				
					return "";
				
				}
				public String P_CENTOriginalDbColumnName(){
				
					return "P_CENT";
				
				}

				
			    public BigDecimal LIQENT;

				public BigDecimal getLIQENT () {
					return this.LIQENT;
				}

				public Boolean LIQENTIsNullable(){
				    return true;
				}
				public Boolean LIQENTIsKey(){
				    return false;
				}
				public Integer LIQENTLength(){
				    return 57;
				}
				public Integer LIQENTPrecision(){
				    return 10;
				}
				public String LIQENTDefault(){
				
					return null;
				
				}
				public String LIQENTComment(){
				
				    return "";
				
				}
				public String LIQENTPattern(){
				
					return "";
				
				}
				public String LIQENTOriginalDbColumnName(){
				
					return "LIQENT";
				
				}

				
			    public BigDecimal VAL_ST;

				public BigDecimal getVAL_ST () {
					return this.VAL_ST;
				}

				public Boolean VAL_STIsNullable(){
				    return false;
				}
				public Boolean VAL_STIsKey(){
				    return false;
				}
				public Integer VAL_STLength(){
				    return 12;
				}
				public Integer VAL_STPrecision(){
				    return 2;
				}
				public String VAL_STDefault(){
				
					return "0.00";
				
				}
				public String VAL_STComment(){
				
				    return "";
				
				}
				public String VAL_STPattern(){
				
					return "";
				
				}
				public String VAL_STOriginalDbColumnName(){
				
					return "VAL_ST";
				
				}

				
			    public BigDecimal VAL_OP;

				public BigDecimal getVAL_OP () {
					return this.VAL_OP;
				}

				public Boolean VAL_OPIsNullable(){
				    return false;
				}
				public Boolean VAL_OPIsKey(){
				    return false;
				}
				public Integer VAL_OPLength(){
				    return 12;
				}
				public Integer VAL_OPPrecision(){
				    return 2;
				}
				public String VAL_OPDefault(){
				
					return "0.00";
				
				}
				public String VAL_OPComment(){
				
				    return "";
				
				}
				public String VAL_OPPattern(){
				
					return "";
				
				}
				public String VAL_OPOriginalDbColumnName(){
				
					return "VAL_OP";
				
				}

				
			    public String VALORES;

				public String getVALORES () {
					return this.VALORES;
				}

				public Boolean VALORESIsNullable(){
				    return true;
				}
				public Boolean VALORESIsKey(){
				    return false;
				}
				public Integer VALORESLength(){
				    return 75;
				}
				public Integer VALORESPrecision(){
				    return 0;
				}
				public String VALORESDefault(){
				
					return null;
				
				}
				public String VALORESComment(){
				
				    return "";
				
				}
				public String VALORESPattern(){
				
					return "";
				
				}
				public String VALORESOriginalDbColumnName(){
				
					return "VALORES";
				
				}

				
			    public BigDecimal VALCOM;

				public BigDecimal getVALCOM () {
					return this.VALCOM;
				}

				public Boolean VALCOMIsNullable(){
				    return true;
				}
				public Boolean VALCOMIsKey(){
				    return false;
				}
				public Integer VALCOMLength(){
				    return 39;
				}
				public Integer VALCOMPrecision(){
				    return 6;
				}
				public String VALCOMDefault(){
				
					return null;
				
				}
				public String VALCOMComment(){
				
				    return "";
				
				}
				public String VALCOMPattern(){
				
					return "";
				
				}
				public String VALCOMOriginalDbColumnName(){
				
					return "VALCOM";
				
				}

				
			    public BigDecimal ICMEN2;

				public BigDecimal getICMEN2 () {
					return this.ICMEN2;
				}

				public Boolean ICMEN2IsNullable(){
				    return false;
				}
				public Boolean ICMEN2IsKey(){
				    return false;
				}
				public Integer ICMEN2Length(){
				    return 20;
				}
				public Integer ICMEN2Precision(){
				    return 6;
				}
				public String ICMEN2Default(){
				
					return "0.000000";
				
				}
				public String ICMEN2Comment(){
				
				    return "";
				
				}
				public String ICMEN2Pattern(){
				
					return "";
				
				}
				public String ICMEN2OriginalDbColumnName(){
				
					return "ICMEN2";
				
				}

				
			    public BigDecimal RESSAR;

				public BigDecimal getRESSAR () {
					return this.RESSAR;
				}

				public Boolean RESSARIsNullable(){
				    return false;
				}
				public Boolean RESSARIsKey(){
				    return false;
				}
				public Integer RESSARLength(){
				    return 20;
				}
				public Integer RESSARPrecision(){
				    return 6;
				}
				public String RESSARDefault(){
				
					return "0.000000";
				
				}
				public String RESSARComment(){
				
				    return "";
				
				}
				public String RESSARPattern(){
				
					return "";
				
				}
				public String RESSAROriginalDbColumnName(){
				
					return "RESSAR";
				
				}

				
			    public BigDecimal MAROPE;

				public BigDecimal getMAROPE () {
					return this.MAROPE;
				}

				public Boolean MAROPEIsNullable(){
				    return true;
				}
				public Boolean MAROPEIsKey(){
				    return false;
				}
				public Integer MAROPELength(){
				    return 61;
				}
				public Integer MAROPEPrecision(){
				    return 10;
				}
				public String MAROPEDefault(){
				
					return null;
				
				}
				public String MAROPEComment(){
				
				    return "";
				
				}
				public String MAROPEPattern(){
				
					return "";
				
				}
				public String MAROPEOriginalDbColumnName(){
				
					return "MAROPE";
				
				}

				
			    public BigDecimal PERMAR;

				public BigDecimal getPERMAR () {
					return this.PERMAR;
				}

				public Boolean PERMARIsNullable(){
				    return true;
				}
				public Boolean PERMARIsKey(){
				    return false;
				}
				public Integer PERMARLength(){
				    return 65;
				}
				public Integer PERMARPrecision(){
				    return 14;
				}
				public String PERMARDefault(){
				
					return null;
				
				}
				public String PERMARComment(){
				
				    return "";
				
				}
				public String PERMARPattern(){
				
					return "";
				
				}
				public String PERMAROriginalDbColumnName(){
				
					return "PERMAR";
				
				}

				
			    public String CSTCOM;

				public String getCSTCOM () {
					return this.CSTCOM;
				}

				public Boolean CSTCOMIsNullable(){
				    return true;
				}
				public Boolean CSTCOMIsKey(){
				    return false;
				}
				public Integer CSTCOMLength(){
				    return 5;
				}
				public Integer CSTCOMPrecision(){
				    return 0;
				}
				public String CSTCOMDefault(){
				
					return null;
				
				}
				public String CSTCOMComment(){
				
				    return "";
				
				}
				public String CSTCOMPattern(){
				
					return "";
				
				}
				public String CSTCOMOriginalDbColumnName(){
				
					return "CSTCOM";
				
				}

				
			    public String CST1;

				public String getCST1 () {
					return this.CST1;
				}

				public Boolean CST1IsNullable(){
				    return false;
				}
				public Boolean CST1IsKey(){
				    return false;
				}
				public Integer CST1Length(){
				    return 120;
				}
				public Integer CST1Precision(){
				    return 0;
				}
				public String CST1Default(){
				
					return null;
				
				}
				public String CST1Comment(){
				
				    return "";
				
				}
				public String CST1Pattern(){
				
					return "";
				
				}
				public String CST1OriginalDbColumnName(){
				
					return "CST1";
				
				}

				
			    public String CST2;

				public String getCST2 () {
					return this.CST2;
				}

				public Boolean CST2IsNullable(){
				    return false;
				}
				public Boolean CST2IsKey(){
				    return false;
				}
				public Integer CST2Length(){
				    return 120;
				}
				public Integer CST2Precision(){
				    return 0;
				}
				public String CST2Default(){
				
					return null;
				
				}
				public String CST2Comment(){
				
				    return "";
				
				}
				public String CST2Pattern(){
				
					return "";
				
				}
				public String CST2OriginalDbColumnName(){
				
					return "CST2";
				
				}

				
			    public BigDecimal MAROPE_MG;

				public BigDecimal getMAROPE_MG () {
					return this.MAROPE_MG;
				}

				public Boolean MAROPE_MGIsNullable(){
				    return true;
				}
				public Boolean MAROPE_MGIsKey(){
				    return false;
				}
				public Integer MAROPE_MGLength(){
				    return 50;
				}
				public Integer MAROPE_MGPrecision(){
				    return 6;
				}
				public String MAROPE_MGDefault(){
				
					return null;
				
				}
				public String MAROPE_MGComment(){
				
				    return "";
				
				}
				public String MAROPE_MGPattern(){
				
					return "";
				
				}
				public String MAROPE_MGOriginalDbColumnName(){
				
					return "MAROPE_MG";
				
				}

				
			    public BigDecimal PERMAR_MG;

				public BigDecimal getPERMAR_MG () {
					return this.PERMAR_MG;
				}

				public Boolean PERMAR_MGIsNullable(){
				    return true;
				}
				public Boolean PERMAR_MGIsKey(){
				    return false;
				}
				public Integer PERMAR_MGLength(){
				    return 59;
				}
				public Integer PERMAR_MGPrecision(){
				    return 10;
				}
				public String PERMAR_MGDefault(){
				
					return null;
				
				}
				public String PERMAR_MGComment(){
				
				    return "";
				
				}
				public String PERMAR_MGPattern(){
				
					return "";
				
				}
				public String PERMAR_MGOriginalDbColumnName(){
				
					return "PERMAR_MG";
				
				}

				
			    public BigDecimal RESSA2;

				public BigDecimal getRESSA2 () {
					return this.RESSA2;
				}

				public Boolean RESSA2IsNullable(){
				    return true;
				}
				public Boolean RESSA2IsKey(){
				    return false;
				}
				public Integer RESSA2Length(){
				    return 13;
				}
				public Integer RESSA2Precision(){
				    return 2;
				}
				public String RESSA2Default(){
				
					return null;
				
				}
				public String RESSA2Comment(){
				
				    return "";
				
				}
				public String RESSA2Pattern(){
				
					return "";
				
				}
				public String RESSA2OriginalDbColumnName(){
				
					return "RESSA2";
				
				}

				
			    public BigDecimal IPISAI;

				public BigDecimal getIPISAI () {
					return this.IPISAI;
				}

				public Boolean IPISAIIsNullable(){
				    return true;
				}
				public Boolean IPISAIIsKey(){
				    return false;
				}
				public Integer IPISAILength(){
				    return 12;
				}
				public Integer IPISAIPrecision(){
				    return 2;
				}
				public String IPISAIDefault(){
				
					return null;
				
				}
				public String IPISAIComment(){
				
				    return "";
				
				}
				public String IPISAIPattern(){
				
					return "";
				
				}
				public String IPISAIOriginalDbColumnName(){
				
					return "IPISAI";
				
				}

				
			    public BigDecimal VLRVII;

				public BigDecimal getVLRVII () {
					return this.VLRVII;
				}

				public Boolean VLRVIIIsNullable(){
				    return true;
				}
				public Boolean VLRVIIIsKey(){
				    return false;
				}
				public Integer VLRVIILength(){
				    return 54;
				}
				public Integer VLRVIIPrecision(){
				    return 10;
				}
				public String VLRVIIDefault(){
				
					return null;
				
				}
				public String VLRVIIComment(){
				
				    return "";
				
				}
				public String VLRVIIPattern(){
				
					return "";
				
				}
				public String VLRVIIOriginalDbColumnName(){
				
					return "VLRVII";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return null;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer Name_exp_43;

				public Integer getName_exp_43 () {
					return this.Name_exp_43;
				}

				public Boolean Name_exp_43IsNullable(){
				    return true;
				}
				public Boolean Name_exp_43IsKey(){
				    return false;
				}
				public Integer Name_exp_43Length(){
				    return null;
				}
				public Integer Name_exp_43Precision(){
				    return null;
				}
				public String Name_exp_43Default(){
				
					return null;
				
				}
				public String Name_exp_43Comment(){
				
				    return "";
				
				}
				public String Name_exp_43Pattern(){
				
					return "";
				
				}
				public String Name_exp_43OriginalDbColumnName(){
				
					return "Name_exp_43";
				
				}

				
			    public Integer Name_exp_44;

				public Integer getName_exp_44 () {
					return this.Name_exp_44;
				}

				public Boolean Name_exp_44IsNullable(){
				    return true;
				}
				public Boolean Name_exp_44IsKey(){
				    return false;
				}
				public Integer Name_exp_44Length(){
				    return null;
				}
				public Integer Name_exp_44Precision(){
				    return null;
				}
				public String Name_exp_44Default(){
				
					return null;
				
				}
				public String Name_exp_44Comment(){
				
				    return "";
				
				}
				public String Name_exp_44Pattern(){
				
					return "";
				
				}
				public String Name_exp_44OriginalDbColumnName(){
				
					return "Name_exp_44";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMDOC == null) ? 0 : this.NUMDOC.hashCode());
					
						result = prime * result + ((this.CODITE == null) ? 0 : this.CODITE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.NUMDOC == null) {
							if (other.NUMDOC != null)
								return false;
						
						} else if (!this.NUMDOC.equals(other.NUMDOC))
						
							return false;
					
						if (this.CODITE == null) {
							if (other.CODITE != null)
								return false;
						
						} else if (!this.CODITE.equals(other.CODITE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.NUMDOC = this.NUMDOC;
	            other.NUMPED = this.NUMPED;
	            other.ESTADO = this.ESTADO;
	            other.CODVEN = this.CODVEN;
	            other.VLRTNF = this.VLRTNF;
	            other.DTASAI = this.DTASAI;
	            other.CODITE = this.CODITE;
	            other.CODMAR = this.CODMAR;
	            other.DESCRI = this.DESCRI;
	            other.QTDSAI = this.QTDSAI;
	            other.UNISAI = this.UNISAI;
	            other.TOTSAI = this.TOTSAI;
	            other.ICMSAI = this.ICMSAI;
	            other.FCPSAI = this.FCPSAI;
	            other.RETSAI = this.RETSAI;
	            other.TOTFRE = this.TOTFRE;
	            other.P_CSAI = this.P_CSAI;
	            other.DIFSAI = this.DIFSAI;
	            other.LIQSAI2 = this.LIQSAI2;
	            other.TESTE = this.TESTE;
	            other.LIQSAI = this.LIQSAI;
	            other.NUMENT = this.NUMENT;
	            other.DTAENT = this.DTAENT;
	            other.QTDENT = this.QTDENT;
	            other.CSTENT = this.CSTENT;
	            other.TOTENT = this.TOTENT;
	            other.ICMENT = this.ICMENT;
	            other.RETENT = this.RETENT;
	            other.IPIENT = this.IPIENT;
	            other.P_CENT = this.P_CENT;
	            other.LIQENT = this.LIQENT;
	            other.VAL_ST = this.VAL_ST;
	            other.VAL_OP = this.VAL_OP;
	            other.VALORES = this.VALORES;
	            other.VALCOM = this.VALCOM;
	            other.ICMEN2 = this.ICMEN2;
	            other.RESSAR = this.RESSAR;
	            other.MAROPE = this.MAROPE;
	            other.PERMAR = this.PERMAR;
	            other.CSTCOM = this.CSTCOM;
	            other.CST1 = this.CST1;
	            other.CST2 = this.CST2;
	            other.MAROPE_MG = this.MAROPE_MG;
	            other.PERMAR_MG = this.PERMAR_MG;
	            other.RESSA2 = this.RESSA2;
	            other.IPISAI = this.IPISAI;
	            other.VLRVII = this.VLRVII;
	            other.CODIGO_PRODUTO = this.CODIGO_PRODUTO;
	            other.Name_exp_43 = this.Name_exp_43;
	            other.Name_exp_44 = this.Name_exp_44;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.NUMDOC = this.NUMDOC;
	            	other.CODITE = this.CODITE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.NUMPED = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
					this.TESTE = readString(dis);
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.MAROPE_MG = (BigDecimal) dis.readObject();
					
						this.PERMAR_MG = (BigDecimal) dis.readObject();
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.Name_exp_43 = readInteger(dis);
					
						this.Name_exp_44 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.NUMPED = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
					this.TESTE = readString(dis);
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.MAROPE_MG = (BigDecimal) dis.readObject();
					
						this.PERMAR_MG = (BigDecimal) dis.readObject();
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.Name_exp_43 = readInteger(dis);
					
						this.Name_exp_44 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.NUMPED,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI2);
					
					// String
				
						writeString(this.TESTE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE_MG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR_MG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRVII);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_43,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_44,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.NUMPED,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI2);
					
					// String
				
						writeString(this.TESTE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE_MG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR_MG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRVII);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_43,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_44,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMDOC="+NUMDOC);
		sb.append(",NUMPED="+NUMPED);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",CODVEN="+CODVEN);
		sb.append(",VLRTNF="+String.valueOf(VLRTNF));
		sb.append(",DTASAI="+String.valueOf(DTASAI));
		sb.append(",CODITE="+CODITE);
		sb.append(",CODMAR="+CODMAR);
		sb.append(",DESCRI="+DESCRI);
		sb.append(",QTDSAI="+String.valueOf(QTDSAI));
		sb.append(",UNISAI="+String.valueOf(UNISAI));
		sb.append(",TOTSAI="+String.valueOf(TOTSAI));
		sb.append(",ICMSAI="+String.valueOf(ICMSAI));
		sb.append(",FCPSAI="+String.valueOf(FCPSAI));
		sb.append(",RETSAI="+String.valueOf(RETSAI));
		sb.append(",TOTFRE="+String.valueOf(TOTFRE));
		sb.append(",P_CSAI="+String.valueOf(P_CSAI));
		sb.append(",DIFSAI="+String.valueOf(DIFSAI));
		sb.append(",LIQSAI2="+String.valueOf(LIQSAI2));
		sb.append(",TESTE="+TESTE);
		sb.append(",LIQSAI="+String.valueOf(LIQSAI));
		sb.append(",NUMENT="+NUMENT);
		sb.append(",DTAENT="+String.valueOf(DTAENT));
		sb.append(",QTDENT="+String.valueOf(QTDENT));
		sb.append(",CSTENT="+CSTENT);
		sb.append(",TOTENT="+String.valueOf(TOTENT));
		sb.append(",ICMENT="+String.valueOf(ICMENT));
		sb.append(",RETENT="+String.valueOf(RETENT));
		sb.append(",IPIENT="+String.valueOf(IPIENT));
		sb.append(",P_CENT="+String.valueOf(P_CENT));
		sb.append(",LIQENT="+String.valueOf(LIQENT));
		sb.append(",VAL_ST="+String.valueOf(VAL_ST));
		sb.append(",VAL_OP="+String.valueOf(VAL_OP));
		sb.append(",VALORES="+VALORES);
		sb.append(",VALCOM="+String.valueOf(VALCOM));
		sb.append(",ICMEN2="+String.valueOf(ICMEN2));
		sb.append(",RESSAR="+String.valueOf(RESSAR));
		sb.append(",MAROPE="+String.valueOf(MAROPE));
		sb.append(",PERMAR="+String.valueOf(PERMAR));
		sb.append(",CSTCOM="+CSTCOM);
		sb.append(",CST1="+CST1);
		sb.append(",CST2="+CST2);
		sb.append(",MAROPE_MG="+String.valueOf(MAROPE_MG));
		sb.append(",PERMAR_MG="+String.valueOf(PERMAR_MG));
		sb.append(",RESSA2="+String.valueOf(RESSA2));
		sb.append(",IPISAI="+String.valueOf(IPISAI));
		sb.append(",VLRVII="+String.valueOf(VLRVII));
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",Name_exp_43="+String.valueOf(Name_exp_43));
		sb.append(",Name_exp_44="+String.valueOf(Name_exp_44));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMDOC, other.NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODITE, other.CODITE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfinsertStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfinsertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMDOC;

				public String getNUMDOC () {
					return this.NUMDOC;
				}

				public Boolean NUMDOCIsNullable(){
				    return true;
				}
				public Boolean NUMDOCIsKey(){
				    return true;
				}
				public Integer NUMDOCLength(){
				    return 23;
				}
				public Integer NUMDOCPrecision(){
				    return 0;
				}
				public String NUMDOCDefault(){
				
					return null;
				
				}
				public String NUMDOCComment(){
				
				    return "";
				
				}
				public String NUMDOCPattern(){
				
					return "";
				
				}
				public String NUMDOCOriginalDbColumnName(){
				
					return "NUMDOC";
				
				}

				
			    public String NUMPED;

				public String getNUMPED () {
					return this.NUMPED;
				}

				public Boolean NUMPEDIsNullable(){
				    return true;
				}
				public Boolean NUMPEDIsKey(){
				    return true;
				}
				public Integer NUMPEDLength(){
				    return 12;
				}
				public Integer NUMPEDPrecision(){
				    return 0;
				}
				public String NUMPEDDefault(){
				
					return null;
				
				}
				public String NUMPEDComment(){
				
				    return "";
				
				}
				public String NUMPEDPattern(){
				
					return "";
				
				}
				public String NUMPEDOriginalDbColumnName(){
				
					return "NUMPED";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String CODVEN;

				public String getCODVEN () {
					return this.CODVEN;
				}

				public Boolean CODVENIsNullable(){
				    return false;
				}
				public Boolean CODVENIsKey(){
				    return false;
				}
				public Integer CODVENLength(){
				    return 3;
				}
				public Integer CODVENPrecision(){
				    return 0;
				}
				public String CODVENDefault(){
				
					return null;
				
				}
				public String CODVENComment(){
				
				    return "";
				
				}
				public String CODVENPattern(){
				
					return "";
				
				}
				public String CODVENOriginalDbColumnName(){
				
					return "CODVEN";
				
				}

				
			    public BigDecimal VLRTNF;

				public BigDecimal getVLRTNF () {
					return this.VLRTNF;
				}

				public Boolean VLRTNFIsNullable(){
				    return true;
				}
				public Boolean VLRTNFIsKey(){
				    return false;
				}
				public Integer VLRTNFLength(){
				    return 12;
				}
				public Integer VLRTNFPrecision(){
				    return 2;
				}
				public String VLRTNFDefault(){
				
					return null;
				
				}
				public String VLRTNFComment(){
				
				    return "";
				
				}
				public String VLRTNFPattern(){
				
					return "";
				
				}
				public String VLRTNFOriginalDbColumnName(){
				
					return "VLRTNF";
				
				}

				
			    public java.util.Date DTASAI;

				public java.util.Date getDTASAI () {
					return this.DTASAI;
				}

				public Boolean DTASAIIsNullable(){
				    return true;
				}
				public Boolean DTASAIIsKey(){
				    return false;
				}
				public Integer DTASAILength(){
				    return 10;
				}
				public Integer DTASAIPrecision(){
				    return 0;
				}
				public String DTASAIDefault(){
				
					return null;
				
				}
				public String DTASAIComment(){
				
				    return "";
				
				}
				public String DTASAIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTASAIOriginalDbColumnName(){
				
					return "DTASAI";
				
				}

				
			    public String CODITE;

				public String getCODITE () {
					return this.CODITE;
				}

				public Boolean CODITEIsNullable(){
				    return true;
				}
				public Boolean CODITEIsKey(){
				    return true;
				}
				public Integer CODITELength(){
				    return 150;
				}
				public Integer CODITEPrecision(){
				    return 0;
				}
				public String CODITEDefault(){
				
					return null;
				
				}
				public String CODITEComment(){
				
				    return "";
				
				}
				public String CODITEPattern(){
				
					return "";
				
				}
				public String CODITEOriginalDbColumnName(){
				
					return "CODITE";
				
				}

				
			    public String CODMAR;

				public String getCODMAR () {
					return this.CODMAR;
				}

				public Boolean CODMARIsNullable(){
				    return true;
				}
				public Boolean CODMARIsKey(){
				    return false;
				}
				public Integer CODMARLength(){
				    return 37;
				}
				public Integer CODMARPrecision(){
				    return 0;
				}
				public String CODMARDefault(){
				
					return null;
				
				}
				public String CODMARComment(){
				
				    return "";
				
				}
				public String CODMARPattern(){
				
					return "";
				
				}
				public String CODMAROriginalDbColumnName(){
				
					return "CODMAR";
				
				}

				
			    public String DESCRI;

				public String getDESCRI () {
					return this.DESCRI;
				}

				public Boolean DESCRIIsNullable(){
				    return true;
				}
				public Boolean DESCRIIsKey(){
				    return false;
				}
				public Integer DESCRILength(){
				    return 150;
				}
				public Integer DESCRIPrecision(){
				    return 0;
				}
				public String DESCRIDefault(){
				
					return null;
				
				}
				public String DESCRIComment(){
				
				    return "";
				
				}
				public String DESCRIPattern(){
				
					return "";
				
				}
				public String DESCRIOriginalDbColumnName(){
				
					return "DESCRI";
				
				}

				
			    public BigDecimal QTDSAI;

				public BigDecimal getQTDSAI () {
					return this.QTDSAI;
				}

				public Boolean QTDSAIIsNullable(){
				    return true;
				}
				public Boolean QTDSAIIsKey(){
				    return false;
				}
				public Integer QTDSAILength(){
				    return 34;
				}
				public Integer QTDSAIPrecision(){
				    return 4;
				}
				public String QTDSAIDefault(){
				
					return null;
				
				}
				public String QTDSAIComment(){
				
				    return "";
				
				}
				public String QTDSAIPattern(){
				
					return "";
				
				}
				public String QTDSAIOriginalDbColumnName(){
				
					return "QTDSAI";
				
				}

				
			    public BigDecimal UNISAI;

				public BigDecimal getUNISAI () {
					return this.UNISAI;
				}

				public Boolean UNISAIIsNullable(){
				    return true;
				}
				public Boolean UNISAIIsKey(){
				    return false;
				}
				public Integer UNISAILength(){
				    return 12;
				}
				public Integer UNISAIPrecision(){
				    return 4;
				}
				public String UNISAIDefault(){
				
					return null;
				
				}
				public String UNISAIComment(){
				
				    return "";
				
				}
				public String UNISAIPattern(){
				
					return "";
				
				}
				public String UNISAIOriginalDbColumnName(){
				
					return "UNISAI";
				
				}

				
			    public BigDecimal TOTSAI;

				public BigDecimal getTOTSAI () {
					return this.TOTSAI;
				}

				public Boolean TOTSAIIsNullable(){
				    return true;
				}
				public Boolean TOTSAIIsKey(){
				    return false;
				}
				public Integer TOTSAILength(){
				    return 34;
				}
				public Integer TOTSAIPrecision(){
				    return 2;
				}
				public String TOTSAIDefault(){
				
					return null;
				
				}
				public String TOTSAIComment(){
				
				    return "";
				
				}
				public String TOTSAIPattern(){
				
					return "";
				
				}
				public String TOTSAIOriginalDbColumnName(){
				
					return "TOTSAI";
				
				}

				
			    public BigDecimal ICMSAI;

				public BigDecimal getICMSAI () {
					return this.ICMSAI;
				}

				public Boolean ICMSAIIsNullable(){
				    return true;
				}
				public Boolean ICMSAIIsKey(){
				    return false;
				}
				public Integer ICMSAILength(){
				    return 34;
				}
				public Integer ICMSAIPrecision(){
				    return 2;
				}
				public String ICMSAIDefault(){
				
					return null;
				
				}
				public String ICMSAIComment(){
				
				    return "";
				
				}
				public String ICMSAIPattern(){
				
					return "";
				
				}
				public String ICMSAIOriginalDbColumnName(){
				
					return "ICMSAI";
				
				}

				
			    public BigDecimal FCPSAI;

				public BigDecimal getFCPSAI () {
					return this.FCPSAI;
				}

				public Boolean FCPSAIIsNullable(){
				    return true;
				}
				public Boolean FCPSAIIsKey(){
				    return false;
				}
				public Integer FCPSAILength(){
				    return 37;
				}
				public Integer FCPSAIPrecision(){
				    return 2;
				}
				public String FCPSAIDefault(){
				
					return null;
				
				}
				public String FCPSAIComment(){
				
				    return "";
				
				}
				public String FCPSAIPattern(){
				
					return "";
				
				}
				public String FCPSAIOriginalDbColumnName(){
				
					return "FCPSAI";
				
				}

				
			    public BigDecimal RETSAI;

				public BigDecimal getRETSAI () {
					return this.RETSAI;
				}

				public Boolean RETSAIIsNullable(){
				    return true;
				}
				public Boolean RETSAIIsKey(){
				    return false;
				}
				public Integer RETSAILength(){
				    return 35;
				}
				public Integer RETSAIPrecision(){
				    return 2;
				}
				public String RETSAIDefault(){
				
					return null;
				
				}
				public String RETSAIComment(){
				
				    return "";
				
				}
				public String RETSAIPattern(){
				
					return "";
				
				}
				public String RETSAIOriginalDbColumnName(){
				
					return "RETSAI";
				
				}

				
			    public BigDecimal TOTFRE;

				public BigDecimal getTOTFRE () {
					return this.TOTFRE;
				}

				public Boolean TOTFREIsNullable(){
				    return false;
				}
				public Boolean TOTFREIsKey(){
				    return false;
				}
				public Integer TOTFRELength(){
				    return 12;
				}
				public Integer TOTFREPrecision(){
				    return 2;
				}
				public String TOTFREDefault(){
				
					return "0.00";
				
				}
				public String TOTFREComment(){
				
				    return "";
				
				}
				public String TOTFREPattern(){
				
					return "";
				
				}
				public String TOTFREOriginalDbColumnName(){
				
					return "TOTFRE";
				
				}

				
			    public BigDecimal P_CSAI;

				public BigDecimal getP_CSAI () {
					return this.P_CSAI;
				}

				public Boolean P_CSAIIsNullable(){
				    return true;
				}
				public Boolean P_CSAIIsKey(){
				    return false;
				}
				public Integer P_CSAILength(){
				    return 35;
				}
				public Integer P_CSAIPrecision(){
				    return 2;
				}
				public String P_CSAIDefault(){
				
					return null;
				
				}
				public String P_CSAIComment(){
				
				    return "";
				
				}
				public String P_CSAIPattern(){
				
					return "";
				
				}
				public String P_CSAIOriginalDbColumnName(){
				
					return "P_CSAI";
				
				}

				
			    public BigDecimal DIFSAI;

				public BigDecimal getDIFSAI () {
					return this.DIFSAI;
				}

				public Boolean DIFSAIIsNullable(){
				    return true;
				}
				public Boolean DIFSAIIsKey(){
				    return false;
				}
				public Integer DIFSAILength(){
				    return 38;
				}
				public Integer DIFSAIPrecision(){
				    return 2;
				}
				public String DIFSAIDefault(){
				
					return null;
				
				}
				public String DIFSAIComment(){
				
				    return "";
				
				}
				public String DIFSAIPattern(){
				
					return "";
				
				}
				public String DIFSAIOriginalDbColumnName(){
				
					return "DIFSAI";
				
				}

				
			    public BigDecimal LIQSAI2;

				public BigDecimal getLIQSAI2 () {
					return this.LIQSAI2;
				}

				public Boolean LIQSAI2IsNullable(){
				    return true;
				}
				public Boolean LIQSAI2IsKey(){
				    return false;
				}
				public Integer LIQSAI2Length(){
				    return 40;
				}
				public Integer LIQSAI2Precision(){
				    return 2;
				}
				public String LIQSAI2Default(){
				
					return null;
				
				}
				public String LIQSAI2Comment(){
				
				    return "";
				
				}
				public String LIQSAI2Pattern(){
				
					return "";
				
				}
				public String LIQSAI2OriginalDbColumnName(){
				
					return "LIQSAI2";
				
				}

				
			    public String TESTE;

				public String getTESTE () {
					return this.TESTE;
				}

				public Boolean TESTEIsNullable(){
				    return true;
				}
				public Boolean TESTEIsKey(){
				    return false;
				}
				public Integer TESTELength(){
				    return 200;
				}
				public Integer TESTEPrecision(){
				    return 0;
				}
				public String TESTEDefault(){
				
					return null;
				
				}
				public String TESTEComment(){
				
				    return "";
				
				}
				public String TESTEPattern(){
				
					return "";
				
				}
				public String TESTEOriginalDbColumnName(){
				
					return "TESTE";
				
				}

				
			    public BigDecimal LIQSAI;

				public BigDecimal getLIQSAI () {
					return this.LIQSAI;
				}

				public Boolean LIQSAIIsNullable(){
				    return true;
				}
				public Boolean LIQSAIIsKey(){
				    return false;
				}
				public Integer LIQSAILength(){
				    return 41;
				}
				public Integer LIQSAIPrecision(){
				    return 2;
				}
				public String LIQSAIDefault(){
				
					return null;
				
				}
				public String LIQSAIComment(){
				
				    return "";
				
				}
				public String LIQSAIPattern(){
				
					return "";
				
				}
				public String LIQSAIOriginalDbColumnName(){
				
					return "LIQSAI";
				
				}

				
			    public String NUMENT;

				public String getNUMENT () {
					return this.NUMENT;
				}

				public Boolean NUMENTIsNullable(){
				    return true;
				}
				public Boolean NUMENTIsKey(){
				    return false;
				}
				public Integer NUMENTLength(){
				    return 19;
				}
				public Integer NUMENTPrecision(){
				    return 0;
				}
				public String NUMENTDefault(){
				
					return null;
				
				}
				public String NUMENTComment(){
				
				    return "";
				
				}
				public String NUMENTPattern(){
				
					return "";
				
				}
				public String NUMENTOriginalDbColumnName(){
				
					return "NUMENT";
				
				}

				
			    public java.util.Date DTAENT;

				public java.util.Date getDTAENT () {
					return this.DTAENT;
				}

				public Boolean DTAENTIsNullable(){
				    return true;
				}
				public Boolean DTAENTIsKey(){
				    return false;
				}
				public Integer DTAENTLength(){
				    return 10;
				}
				public Integer DTAENTPrecision(){
				    return 0;
				}
				public String DTAENTDefault(){
				
					return null;
				
				}
				public String DTAENTComment(){
				
				    return "";
				
				}
				public String DTAENTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTAENTOriginalDbColumnName(){
				
					return "DTAENT";
				
				}

				
			    public BigDecimal QTDENT;

				public BigDecimal getQTDENT () {
					return this.QTDENT;
				}

				public Boolean QTDENTIsNullable(){
				    return true;
				}
				public Boolean QTDENTIsKey(){
				    return false;
				}
				public Integer QTDENTLength(){
				    return 12;
				}
				public Integer QTDENTPrecision(){
				    return 4;
				}
				public String QTDENTDefault(){
				
					return null;
				
				}
				public String QTDENTComment(){
				
				    return "";
				
				}
				public String QTDENTPattern(){
				
					return "";
				
				}
				public String QTDENTOriginalDbColumnName(){
				
					return "QTDENT";
				
				}

				
			    public String CSTENT;

				public String getCSTENT () {
					return this.CSTENT;
				}

				public Boolean CSTENTIsNullable(){
				    return true;
				}
				public Boolean CSTENTIsKey(){
				    return false;
				}
				public Integer CSTENTLength(){
				    return 3;
				}
				public Integer CSTENTPrecision(){
				    return 0;
				}
				public String CSTENTDefault(){
				
					return null;
				
				}
				public String CSTENTComment(){
				
				    return "";
				
				}
				public String CSTENTPattern(){
				
					return "";
				
				}
				public String CSTENTOriginalDbColumnName(){
				
					return "CSTENT";
				
				}

				
			    public BigDecimal TOTENT;

				public BigDecimal getTOTENT () {
					return this.TOTENT;
				}

				public Boolean TOTENTIsNullable(){
				    return true;
				}
				public Boolean TOTENTIsKey(){
				    return false;
				}
				public Integer TOTENTLength(){
				    return 46;
				}
				public Integer TOTENTPrecision(){
				    return 8;
				}
				public String TOTENTDefault(){
				
					return null;
				
				}
				public String TOTENTComment(){
				
				    return "";
				
				}
				public String TOTENTPattern(){
				
					return "";
				
				}
				public String TOTENTOriginalDbColumnName(){
				
					return "TOTENT";
				
				}

				
			    public BigDecimal ICMENT;

				public BigDecimal getICMENT () {
					return this.ICMENT;
				}

				public Boolean ICMENTIsNullable(){
				    return true;
				}
				public Boolean ICMENTIsKey(){
				    return false;
				}
				public Integer ICMENTLength(){
				    return 54;
				}
				public Integer ICMENTPrecision(){
				    return 10;
				}
				public String ICMENTDefault(){
				
					return null;
				
				}
				public String ICMENTComment(){
				
				    return "";
				
				}
				public String ICMENTPattern(){
				
					return "";
				
				}
				public String ICMENTOriginalDbColumnName(){
				
					return "ICMENT";
				
				}

				
			    public BigDecimal RETENT;

				public BigDecimal getRETENT () {
					return this.RETENT;
				}

				public Boolean RETENTIsNullable(){
				    return true;
				}
				public Boolean RETENTIsKey(){
				    return false;
				}
				public Integer RETENTLength(){
				    return 54;
				}
				public Integer RETENTPrecision(){
				    return 10;
				}
				public String RETENTDefault(){
				
					return null;
				
				}
				public String RETENTComment(){
				
				    return "";
				
				}
				public String RETENTPattern(){
				
					return "";
				
				}
				public String RETENTOriginalDbColumnName(){
				
					return "RETENT";
				
				}

				
			    public BigDecimal IPIENT;

				public BigDecimal getIPIENT () {
					return this.IPIENT;
				}

				public Boolean IPIENTIsNullable(){
				    return true;
				}
				public Boolean IPIENTIsKey(){
				    return false;
				}
				public Integer IPIENTLength(){
				    return 54;
				}
				public Integer IPIENTPrecision(){
				    return 10;
				}
				public String IPIENTDefault(){
				
					return null;
				
				}
				public String IPIENTComment(){
				
				    return "";
				
				}
				public String IPIENTPattern(){
				
					return "";
				
				}
				public String IPIENTOriginalDbColumnName(){
				
					return "IPIENT";
				
				}

				
			    public BigDecimal P_CENT;

				public BigDecimal getP_CENT () {
					return this.P_CENT;
				}

				public Boolean P_CENTIsNullable(){
				    return true;
				}
				public Boolean P_CENTIsKey(){
				    return false;
				}
				public Integer P_CENTLength(){
				    return 55;
				}
				public Integer P_CENTPrecision(){
				    return 10;
				}
				public String P_CENTDefault(){
				
					return null;
				
				}
				public String P_CENTComment(){
				
				    return "";
				
				}
				public String P_CENTPattern(){
				
					return "";
				
				}
				public String P_CENTOriginalDbColumnName(){
				
					return "P_CENT";
				
				}

				
			    public BigDecimal LIQENT;

				public BigDecimal getLIQENT () {
					return this.LIQENT;
				}

				public Boolean LIQENTIsNullable(){
				    return true;
				}
				public Boolean LIQENTIsKey(){
				    return false;
				}
				public Integer LIQENTLength(){
				    return 57;
				}
				public Integer LIQENTPrecision(){
				    return 10;
				}
				public String LIQENTDefault(){
				
					return null;
				
				}
				public String LIQENTComment(){
				
				    return "";
				
				}
				public String LIQENTPattern(){
				
					return "";
				
				}
				public String LIQENTOriginalDbColumnName(){
				
					return "LIQENT";
				
				}

				
			    public BigDecimal VAL_ST;

				public BigDecimal getVAL_ST () {
					return this.VAL_ST;
				}

				public Boolean VAL_STIsNullable(){
				    return false;
				}
				public Boolean VAL_STIsKey(){
				    return false;
				}
				public Integer VAL_STLength(){
				    return 12;
				}
				public Integer VAL_STPrecision(){
				    return 2;
				}
				public String VAL_STDefault(){
				
					return "0.00";
				
				}
				public String VAL_STComment(){
				
				    return "";
				
				}
				public String VAL_STPattern(){
				
					return "";
				
				}
				public String VAL_STOriginalDbColumnName(){
				
					return "VAL_ST";
				
				}

				
			    public BigDecimal VAL_OP;

				public BigDecimal getVAL_OP () {
					return this.VAL_OP;
				}

				public Boolean VAL_OPIsNullable(){
				    return false;
				}
				public Boolean VAL_OPIsKey(){
				    return false;
				}
				public Integer VAL_OPLength(){
				    return 12;
				}
				public Integer VAL_OPPrecision(){
				    return 2;
				}
				public String VAL_OPDefault(){
				
					return "0.00";
				
				}
				public String VAL_OPComment(){
				
				    return "";
				
				}
				public String VAL_OPPattern(){
				
					return "";
				
				}
				public String VAL_OPOriginalDbColumnName(){
				
					return "VAL_OP";
				
				}

				
			    public String VALORES;

				public String getVALORES () {
					return this.VALORES;
				}

				public Boolean VALORESIsNullable(){
				    return true;
				}
				public Boolean VALORESIsKey(){
				    return false;
				}
				public Integer VALORESLength(){
				    return 75;
				}
				public Integer VALORESPrecision(){
				    return 0;
				}
				public String VALORESDefault(){
				
					return null;
				
				}
				public String VALORESComment(){
				
				    return "";
				
				}
				public String VALORESPattern(){
				
					return "";
				
				}
				public String VALORESOriginalDbColumnName(){
				
					return "VALORES";
				
				}

				
			    public BigDecimal VALCOM;

				public BigDecimal getVALCOM () {
					return this.VALCOM;
				}

				public Boolean VALCOMIsNullable(){
				    return true;
				}
				public Boolean VALCOMIsKey(){
				    return false;
				}
				public Integer VALCOMLength(){
				    return 39;
				}
				public Integer VALCOMPrecision(){
				    return 6;
				}
				public String VALCOMDefault(){
				
					return null;
				
				}
				public String VALCOMComment(){
				
				    return "";
				
				}
				public String VALCOMPattern(){
				
					return "";
				
				}
				public String VALCOMOriginalDbColumnName(){
				
					return "VALCOM";
				
				}

				
			    public BigDecimal ICMEN2;

				public BigDecimal getICMEN2 () {
					return this.ICMEN2;
				}

				public Boolean ICMEN2IsNullable(){
				    return false;
				}
				public Boolean ICMEN2IsKey(){
				    return false;
				}
				public Integer ICMEN2Length(){
				    return 20;
				}
				public Integer ICMEN2Precision(){
				    return 6;
				}
				public String ICMEN2Default(){
				
					return "0.000000";
				
				}
				public String ICMEN2Comment(){
				
				    return "";
				
				}
				public String ICMEN2Pattern(){
				
					return "";
				
				}
				public String ICMEN2OriginalDbColumnName(){
				
					return "ICMEN2";
				
				}

				
			    public BigDecimal RESSAR;

				public BigDecimal getRESSAR () {
					return this.RESSAR;
				}

				public Boolean RESSARIsNullable(){
				    return false;
				}
				public Boolean RESSARIsKey(){
				    return false;
				}
				public Integer RESSARLength(){
				    return 20;
				}
				public Integer RESSARPrecision(){
				    return 6;
				}
				public String RESSARDefault(){
				
					return "0.000000";
				
				}
				public String RESSARComment(){
				
				    return "";
				
				}
				public String RESSARPattern(){
				
					return "";
				
				}
				public String RESSAROriginalDbColumnName(){
				
					return "RESSAR";
				
				}

				
			    public BigDecimal MAROPE;

				public BigDecimal getMAROPE () {
					return this.MAROPE;
				}

				public Boolean MAROPEIsNullable(){
				    return true;
				}
				public Boolean MAROPEIsKey(){
				    return false;
				}
				public Integer MAROPELength(){
				    return 61;
				}
				public Integer MAROPEPrecision(){
				    return 10;
				}
				public String MAROPEDefault(){
				
					return null;
				
				}
				public String MAROPEComment(){
				
				    return "";
				
				}
				public String MAROPEPattern(){
				
					return "";
				
				}
				public String MAROPEOriginalDbColumnName(){
				
					return "MAROPE";
				
				}

				
			    public BigDecimal PERMAR;

				public BigDecimal getPERMAR () {
					return this.PERMAR;
				}

				public Boolean PERMARIsNullable(){
				    return true;
				}
				public Boolean PERMARIsKey(){
				    return false;
				}
				public Integer PERMARLength(){
				    return 65;
				}
				public Integer PERMARPrecision(){
				    return 14;
				}
				public String PERMARDefault(){
				
					return null;
				
				}
				public String PERMARComment(){
				
				    return "";
				
				}
				public String PERMARPattern(){
				
					return "";
				
				}
				public String PERMAROriginalDbColumnName(){
				
					return "PERMAR";
				
				}

				
			    public String CSTCOM;

				public String getCSTCOM () {
					return this.CSTCOM;
				}

				public Boolean CSTCOMIsNullable(){
				    return true;
				}
				public Boolean CSTCOMIsKey(){
				    return false;
				}
				public Integer CSTCOMLength(){
				    return 3;
				}
				public Integer CSTCOMPrecision(){
				    return 0;
				}
				public String CSTCOMDefault(){
				
					return null;
				
				}
				public String CSTCOMComment(){
				
				    return "";
				
				}
				public String CSTCOMPattern(){
				
					return "";
				
				}
				public String CSTCOMOriginalDbColumnName(){
				
					return "CSTCOM";
				
				}

				
			    public String CST1;

				public String getCST1 () {
					return this.CST1;
				}

				public Boolean CST1IsNullable(){
				    return false;
				}
				public Boolean CST1IsKey(){
				    return false;
				}
				public Integer CST1Length(){
				    return 95;
				}
				public Integer CST1Precision(){
				    return 0;
				}
				public String CST1Default(){
				
					return null;
				
				}
				public String CST1Comment(){
				
				    return "";
				
				}
				public String CST1Pattern(){
				
					return "";
				
				}
				public String CST1OriginalDbColumnName(){
				
					return "CST1";
				
				}

				
			    public String CST2;

				public String getCST2 () {
					return this.CST2;
				}

				public Boolean CST2IsNullable(){
				    return false;
				}
				public Boolean CST2IsKey(){
				    return false;
				}
				public Integer CST2Length(){
				    return 59;
				}
				public Integer CST2Precision(){
				    return 0;
				}
				public String CST2Default(){
				
					return null;
				
				}
				public String CST2Comment(){
				
				    return "";
				
				}
				public String CST2Pattern(){
				
					return "";
				
				}
				public String CST2OriginalDbColumnName(){
				
					return "CST2";
				
				}

				
			    public BigDecimal MAROPE_MG;

				public BigDecimal getMAROPE_MG () {
					return this.MAROPE_MG;
				}

				public Boolean MAROPE_MGIsNullable(){
				    return true;
				}
				public Boolean MAROPE_MGIsKey(){
				    return false;
				}
				public Integer MAROPE_MGLength(){
				    return 50;
				}
				public Integer MAROPE_MGPrecision(){
				    return 6;
				}
				public String MAROPE_MGDefault(){
				
					return null;
				
				}
				public String MAROPE_MGComment(){
				
				    return "";
				
				}
				public String MAROPE_MGPattern(){
				
					return "";
				
				}
				public String MAROPE_MGOriginalDbColumnName(){
				
					return "MAROPE_MG";
				
				}

				
			    public BigDecimal PERMAR_MG;

				public BigDecimal getPERMAR_MG () {
					return this.PERMAR_MG;
				}

				public Boolean PERMAR_MGIsNullable(){
				    return true;
				}
				public Boolean PERMAR_MGIsKey(){
				    return false;
				}
				public Integer PERMAR_MGLength(){
				    return 59;
				}
				public Integer PERMAR_MGPrecision(){
				    return 10;
				}
				public String PERMAR_MGDefault(){
				
					return null;
				
				}
				public String PERMAR_MGComment(){
				
				    return "";
				
				}
				public String PERMAR_MGPattern(){
				
					return "";
				
				}
				public String PERMAR_MGOriginalDbColumnName(){
				
					return "PERMAR_MG";
				
				}

				
			    public BigDecimal RESSA2;

				public BigDecimal getRESSA2 () {
					return this.RESSA2;
				}

				public Boolean RESSA2IsNullable(){
				    return true;
				}
				public Boolean RESSA2IsKey(){
				    return false;
				}
				public Integer RESSA2Length(){
				    return 13;
				}
				public Integer RESSA2Precision(){
				    return 2;
				}
				public String RESSA2Default(){
				
					return null;
				
				}
				public String RESSA2Comment(){
				
				    return "";
				
				}
				public String RESSA2Pattern(){
				
					return "";
				
				}
				public String RESSA2OriginalDbColumnName(){
				
					return "RESSA2";
				
				}

				
			    public BigDecimal IPISAI;

				public BigDecimal getIPISAI () {
					return this.IPISAI;
				}

				public Boolean IPISAIIsNullable(){
				    return true;
				}
				public Boolean IPISAIIsKey(){
				    return false;
				}
				public Integer IPISAILength(){
				    return 12;
				}
				public Integer IPISAIPrecision(){
				    return 2;
				}
				public String IPISAIDefault(){
				
					return null;
				
				}
				public String IPISAIComment(){
				
				    return "";
				
				}
				public String IPISAIPattern(){
				
					return "";
				
				}
				public String IPISAIOriginalDbColumnName(){
				
					return "IPISAI";
				
				}

				
			    public BigDecimal VLRVII;

				public BigDecimal getVLRVII () {
					return this.VLRVII;
				}

				public Boolean VLRVIIIsNullable(){
				    return true;
				}
				public Boolean VLRVIIIsKey(){
				    return false;
				}
				public Integer VLRVIILength(){
				    return 54;
				}
				public Integer VLRVIIPrecision(){
				    return 10;
				}
				public String VLRVIIDefault(){
				
					return null;
				
				}
				public String VLRVIIComment(){
				
				    return "";
				
				}
				public String VLRVIIPattern(){
				
					return "";
				
				}
				public String VLRVIIOriginalDbColumnName(){
				
					return "VLRVII";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return null;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer Name_exp_43;

				public Integer getName_exp_43 () {
					return this.Name_exp_43;
				}

				public Boolean Name_exp_43IsNullable(){
				    return true;
				}
				public Boolean Name_exp_43IsKey(){
				    return false;
				}
				public Integer Name_exp_43Length(){
				    return null;
				}
				public Integer Name_exp_43Precision(){
				    return null;
				}
				public String Name_exp_43Default(){
				
					return null;
				
				}
				public String Name_exp_43Comment(){
				
				    return "";
				
				}
				public String Name_exp_43Pattern(){
				
					return "";
				
				}
				public String Name_exp_43OriginalDbColumnName(){
				
					return "Name_exp_43";
				
				}

				
			    public Integer Name_exp_44;

				public Integer getName_exp_44 () {
					return this.Name_exp_44;
				}

				public Boolean Name_exp_44IsNullable(){
				    return true;
				}
				public Boolean Name_exp_44IsKey(){
				    return false;
				}
				public Integer Name_exp_44Length(){
				    return null;
				}
				public Integer Name_exp_44Precision(){
				    return null;
				}
				public String Name_exp_44Default(){
				
					return null;
				
				}
				public String Name_exp_44Comment(){
				
				    return "";
				
				}
				public String Name_exp_44Pattern(){
				
					return "";
				
				}
				public String Name_exp_44OriginalDbColumnName(){
				
					return "Name_exp_44";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMDOC == null) ? 0 : this.NUMDOC.hashCode());
					
						result = prime * result + ((this.NUMPED == null) ? 0 : this.NUMPED.hashCode());
					
						result = prime * result + ((this.CODITE == null) ? 0 : this.CODITE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOfcopyOfinsertStruct other = (copyOfcopyOfcopyOfcopyOfinsertStruct) obj;
		
						if (this.NUMDOC == null) {
							if (other.NUMDOC != null)
								return false;
						
						} else if (!this.NUMDOC.equals(other.NUMDOC))
						
							return false;
					
						if (this.NUMPED == null) {
							if (other.NUMPED != null)
								return false;
						
						} else if (!this.NUMPED.equals(other.NUMPED))
						
							return false;
					
						if (this.CODITE == null) {
							if (other.CODITE != null)
								return false;
						
						} else if (!this.CODITE.equals(other.CODITE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOfcopyOfinsertStruct other) {

		other.NUMDOC = this.NUMDOC;
	            other.NUMPED = this.NUMPED;
	            other.ESTADO = this.ESTADO;
	            other.CODVEN = this.CODVEN;
	            other.VLRTNF = this.VLRTNF;
	            other.DTASAI = this.DTASAI;
	            other.CODITE = this.CODITE;
	            other.CODMAR = this.CODMAR;
	            other.DESCRI = this.DESCRI;
	            other.QTDSAI = this.QTDSAI;
	            other.UNISAI = this.UNISAI;
	            other.TOTSAI = this.TOTSAI;
	            other.ICMSAI = this.ICMSAI;
	            other.FCPSAI = this.FCPSAI;
	            other.RETSAI = this.RETSAI;
	            other.TOTFRE = this.TOTFRE;
	            other.P_CSAI = this.P_CSAI;
	            other.DIFSAI = this.DIFSAI;
	            other.LIQSAI2 = this.LIQSAI2;
	            other.TESTE = this.TESTE;
	            other.LIQSAI = this.LIQSAI;
	            other.NUMENT = this.NUMENT;
	            other.DTAENT = this.DTAENT;
	            other.QTDENT = this.QTDENT;
	            other.CSTENT = this.CSTENT;
	            other.TOTENT = this.TOTENT;
	            other.ICMENT = this.ICMENT;
	            other.RETENT = this.RETENT;
	            other.IPIENT = this.IPIENT;
	            other.P_CENT = this.P_CENT;
	            other.LIQENT = this.LIQENT;
	            other.VAL_ST = this.VAL_ST;
	            other.VAL_OP = this.VAL_OP;
	            other.VALORES = this.VALORES;
	            other.VALCOM = this.VALCOM;
	            other.ICMEN2 = this.ICMEN2;
	            other.RESSAR = this.RESSAR;
	            other.MAROPE = this.MAROPE;
	            other.PERMAR = this.PERMAR;
	            other.CSTCOM = this.CSTCOM;
	            other.CST1 = this.CST1;
	            other.CST2 = this.CST2;
	            other.MAROPE_MG = this.MAROPE_MG;
	            other.PERMAR_MG = this.PERMAR_MG;
	            other.RESSA2 = this.RESSA2;
	            other.IPISAI = this.IPISAI;
	            other.VLRVII = this.VLRVII;
	            other.CODIGO_PRODUTO = this.CODIGO_PRODUTO;
	            other.Name_exp_43 = this.Name_exp_43;
	            other.Name_exp_44 = this.Name_exp_44;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfinsertStruct other) {

		other.NUMDOC = this.NUMDOC;
	            	other.NUMPED = this.NUMPED;
	            	other.CODITE = this.CODITE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.NUMPED = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
					this.TESTE = readString(dis);
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.MAROPE_MG = (BigDecimal) dis.readObject();
					
						this.PERMAR_MG = (BigDecimal) dis.readObject();
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.Name_exp_43 = readInteger(dis);
					
						this.Name_exp_44 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.NUMPED = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
					this.TESTE = readString(dis);
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.MAROPE_MG = (BigDecimal) dis.readObject();
					
						this.PERMAR_MG = (BigDecimal) dis.readObject();
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.Name_exp_43 = readInteger(dis);
					
						this.Name_exp_44 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.NUMPED,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI2);
					
					// String
				
						writeString(this.TESTE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE_MG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR_MG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRVII);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_43,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_44,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.NUMPED,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI2);
					
					// String
				
						writeString(this.TESTE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE_MG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR_MG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRVII);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_43,dos);
					
					// Integer
				
						writeInteger(this.Name_exp_44,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMDOC="+NUMDOC);
		sb.append(",NUMPED="+NUMPED);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",CODVEN="+CODVEN);
		sb.append(",VLRTNF="+String.valueOf(VLRTNF));
		sb.append(",DTASAI="+String.valueOf(DTASAI));
		sb.append(",CODITE="+CODITE);
		sb.append(",CODMAR="+CODMAR);
		sb.append(",DESCRI="+DESCRI);
		sb.append(",QTDSAI="+String.valueOf(QTDSAI));
		sb.append(",UNISAI="+String.valueOf(UNISAI));
		sb.append(",TOTSAI="+String.valueOf(TOTSAI));
		sb.append(",ICMSAI="+String.valueOf(ICMSAI));
		sb.append(",FCPSAI="+String.valueOf(FCPSAI));
		sb.append(",RETSAI="+String.valueOf(RETSAI));
		sb.append(",TOTFRE="+String.valueOf(TOTFRE));
		sb.append(",P_CSAI="+String.valueOf(P_CSAI));
		sb.append(",DIFSAI="+String.valueOf(DIFSAI));
		sb.append(",LIQSAI2="+String.valueOf(LIQSAI2));
		sb.append(",TESTE="+TESTE);
		sb.append(",LIQSAI="+String.valueOf(LIQSAI));
		sb.append(",NUMENT="+NUMENT);
		sb.append(",DTAENT="+String.valueOf(DTAENT));
		sb.append(",QTDENT="+String.valueOf(QTDENT));
		sb.append(",CSTENT="+CSTENT);
		sb.append(",TOTENT="+String.valueOf(TOTENT));
		sb.append(",ICMENT="+String.valueOf(ICMENT));
		sb.append(",RETENT="+String.valueOf(RETENT));
		sb.append(",IPIENT="+String.valueOf(IPIENT));
		sb.append(",P_CENT="+String.valueOf(P_CENT));
		sb.append(",LIQENT="+String.valueOf(LIQENT));
		sb.append(",VAL_ST="+String.valueOf(VAL_ST));
		sb.append(",VAL_OP="+String.valueOf(VAL_OP));
		sb.append(",VALORES="+VALORES);
		sb.append(",VALCOM="+String.valueOf(VALCOM));
		sb.append(",ICMEN2="+String.valueOf(ICMEN2));
		sb.append(",RESSAR="+String.valueOf(RESSAR));
		sb.append(",MAROPE="+String.valueOf(MAROPE));
		sb.append(",PERMAR="+String.valueOf(PERMAR));
		sb.append(",CSTCOM="+CSTCOM);
		sb.append(",CST1="+CST1);
		sb.append(",CST2="+CST2);
		sb.append(",MAROPE_MG="+String.valueOf(MAROPE_MG));
		sb.append(",PERMAR_MG="+String.valueOf(PERMAR_MG));
		sb.append(",RESSA2="+String.valueOf(RESSA2));
		sb.append(",IPISAI="+String.valueOf(IPISAI));
		sb.append(",VLRVII="+String.valueOf(VLRVII));
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",Name_exp_43="+String.valueOf(Name_exp_43));
		sb.append(",Name_exp_44="+String.valueOf(Name_exp_44));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfinsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMDOC, other.NUMDOC);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMPED, other.NUMPED);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODITE, other.CODITE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String NUMDOC;

				public String getNUMDOC () {
					return this.NUMDOC;
				}

				public Boolean NUMDOCIsNullable(){
				    return true;
				}
				public Boolean NUMDOCIsKey(){
				    return false;
				}
				public Integer NUMDOCLength(){
				    return 23;
				}
				public Integer NUMDOCPrecision(){
				    return 0;
				}
				public String NUMDOCDefault(){
				
					return null;
				
				}
				public String NUMDOCComment(){
				
				    return "";
				
				}
				public String NUMDOCPattern(){
				
					return "";
				
				}
				public String NUMDOCOriginalDbColumnName(){
				
					return "NUMDOC";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 2;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String CODVEN;

				public String getCODVEN () {
					return this.CODVEN;
				}

				public Boolean CODVENIsNullable(){
				    return false;
				}
				public Boolean CODVENIsKey(){
				    return false;
				}
				public Integer CODVENLength(){
				    return 3;
				}
				public Integer CODVENPrecision(){
				    return 0;
				}
				public String CODVENDefault(){
				
					return null;
				
				}
				public String CODVENComment(){
				
				    return "";
				
				}
				public String CODVENPattern(){
				
					return "";
				
				}
				public String CODVENOriginalDbColumnName(){
				
					return "CODVEN";
				
				}

				
			    public BigDecimal VLRTNF;

				public BigDecimal getVLRTNF () {
					return this.VLRTNF;
				}

				public Boolean VLRTNFIsNullable(){
				    return true;
				}
				public Boolean VLRTNFIsKey(){
				    return false;
				}
				public Integer VLRTNFLength(){
				    return 12;
				}
				public Integer VLRTNFPrecision(){
				    return 2;
				}
				public String VLRTNFDefault(){
				
					return null;
				
				}
				public String VLRTNFComment(){
				
				    return "";
				
				}
				public String VLRTNFPattern(){
				
					return "";
				
				}
				public String VLRTNFOriginalDbColumnName(){
				
					return "VLRTNF";
				
				}

				
			    public java.util.Date DTASAI;

				public java.util.Date getDTASAI () {
					return this.DTASAI;
				}

				public Boolean DTASAIIsNullable(){
				    return true;
				}
				public Boolean DTASAIIsKey(){
				    return false;
				}
				public Integer DTASAILength(){
				    return 10;
				}
				public Integer DTASAIPrecision(){
				    return 0;
				}
				public String DTASAIDefault(){
				
					return null;
				
				}
				public String DTASAIComment(){
				
				    return "";
				
				}
				public String DTASAIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTASAIOriginalDbColumnName(){
				
					return "DTASAI";
				
				}

				
			    public String CODITE;

				public String getCODITE () {
					return this.CODITE;
				}

				public Boolean CODITEIsNullable(){
				    return true;
				}
				public Boolean CODITEIsKey(){
				    return false;
				}
				public Integer CODITELength(){
				    return 106;
				}
				public Integer CODITEPrecision(){
				    return 0;
				}
				public String CODITEDefault(){
				
					return null;
				
				}
				public String CODITEComment(){
				
				    return "";
				
				}
				public String CODITEPattern(){
				
					return "";
				
				}
				public String CODITEOriginalDbColumnName(){
				
					return "CODITE";
				
				}

				
			    public String CODMAR;

				public String getCODMAR () {
					return this.CODMAR;
				}

				public Boolean CODMARIsNullable(){
				    return true;
				}
				public Boolean CODMARIsKey(){
				    return false;
				}
				public Integer CODMARLength(){
				    return 37;
				}
				public Integer CODMARPrecision(){
				    return 0;
				}
				public String CODMARDefault(){
				
					return null;
				
				}
				public String CODMARComment(){
				
				    return "";
				
				}
				public String CODMARPattern(){
				
					return "";
				
				}
				public String CODMAROriginalDbColumnName(){
				
					return "CODMAR";
				
				}

				
			    public String DESCRI;

				public String getDESCRI () {
					return this.DESCRI;
				}

				public Boolean DESCRIIsNullable(){
				    return true;
				}
				public Boolean DESCRIIsKey(){
				    return false;
				}
				public Integer DESCRILength(){
				    return 100;
				}
				public Integer DESCRIPrecision(){
				    return 0;
				}
				public String DESCRIDefault(){
				
					return null;
				
				}
				public String DESCRIComment(){
				
				    return "";
				
				}
				public String DESCRIPattern(){
				
					return "";
				
				}
				public String DESCRIOriginalDbColumnName(){
				
					return "DESCRI";
				
				}

				
			    public BigDecimal QTDSAI;

				public BigDecimal getQTDSAI () {
					return this.QTDSAI;
				}

				public Boolean QTDSAIIsNullable(){
				    return true;
				}
				public Boolean QTDSAIIsKey(){
				    return false;
				}
				public Integer QTDSAILength(){
				    return 34;
				}
				public Integer QTDSAIPrecision(){
				    return 4;
				}
				public String QTDSAIDefault(){
				
					return null;
				
				}
				public String QTDSAIComment(){
				
				    return "";
				
				}
				public String QTDSAIPattern(){
				
					return "";
				
				}
				public String QTDSAIOriginalDbColumnName(){
				
					return "QTDSAI";
				
				}

				
			    public BigDecimal UNISAI;

				public BigDecimal getUNISAI () {
					return this.UNISAI;
				}

				public Boolean UNISAIIsNullable(){
				    return true;
				}
				public Boolean UNISAIIsKey(){
				    return false;
				}
				public Integer UNISAILength(){
				    return 12;
				}
				public Integer UNISAIPrecision(){
				    return 4;
				}
				public String UNISAIDefault(){
				
					return null;
				
				}
				public String UNISAIComment(){
				
				    return "";
				
				}
				public String UNISAIPattern(){
				
					return "";
				
				}
				public String UNISAIOriginalDbColumnName(){
				
					return "UNISAI";
				
				}

				
			    public BigDecimal TOTSAI;

				public BigDecimal getTOTSAI () {
					return this.TOTSAI;
				}

				public Boolean TOTSAIIsNullable(){
				    return true;
				}
				public Boolean TOTSAIIsKey(){
				    return false;
				}
				public Integer TOTSAILength(){
				    return 34;
				}
				public Integer TOTSAIPrecision(){
				    return 2;
				}
				public String TOTSAIDefault(){
				
					return null;
				
				}
				public String TOTSAIComment(){
				
				    return "";
				
				}
				public String TOTSAIPattern(){
				
					return "";
				
				}
				public String TOTSAIOriginalDbColumnName(){
				
					return "TOTSAI";
				
				}

				
			    public BigDecimal ICMSAI;

				public BigDecimal getICMSAI () {
					return this.ICMSAI;
				}

				public Boolean ICMSAIIsNullable(){
				    return true;
				}
				public Boolean ICMSAIIsKey(){
				    return false;
				}
				public Integer ICMSAILength(){
				    return 34;
				}
				public Integer ICMSAIPrecision(){
				    return 2;
				}
				public String ICMSAIDefault(){
				
					return null;
				
				}
				public String ICMSAIComment(){
				
				    return "";
				
				}
				public String ICMSAIPattern(){
				
					return "";
				
				}
				public String ICMSAIOriginalDbColumnName(){
				
					return "ICMSAI";
				
				}

				
			    public BigDecimal FCPSAI;

				public BigDecimal getFCPSAI () {
					return this.FCPSAI;
				}

				public Boolean FCPSAIIsNullable(){
				    return true;
				}
				public Boolean FCPSAIIsKey(){
				    return false;
				}
				public Integer FCPSAILength(){
				    return 37;
				}
				public Integer FCPSAIPrecision(){
				    return 2;
				}
				public String FCPSAIDefault(){
				
					return null;
				
				}
				public String FCPSAIComment(){
				
				    return "";
				
				}
				public String FCPSAIPattern(){
				
					return "";
				
				}
				public String FCPSAIOriginalDbColumnName(){
				
					return "FCPSAI";
				
				}

				
			    public BigDecimal RETSAI;

				public BigDecimal getRETSAI () {
					return this.RETSAI;
				}

				public Boolean RETSAIIsNullable(){
				    return true;
				}
				public Boolean RETSAIIsKey(){
				    return false;
				}
				public Integer RETSAILength(){
				    return 35;
				}
				public Integer RETSAIPrecision(){
				    return 2;
				}
				public String RETSAIDefault(){
				
					return null;
				
				}
				public String RETSAIComment(){
				
				    return "";
				
				}
				public String RETSAIPattern(){
				
					return "";
				
				}
				public String RETSAIOriginalDbColumnName(){
				
					return "RETSAI";
				
				}

				
			    public BigDecimal TOTFRE;

				public BigDecimal getTOTFRE () {
					return this.TOTFRE;
				}

				public Boolean TOTFREIsNullable(){
				    return false;
				}
				public Boolean TOTFREIsKey(){
				    return false;
				}
				public Integer TOTFRELength(){
				    return 12;
				}
				public Integer TOTFREPrecision(){
				    return 2;
				}
				public String TOTFREDefault(){
				
					return "0.00";
				
				}
				public String TOTFREComment(){
				
				    return "";
				
				}
				public String TOTFREPattern(){
				
					return "";
				
				}
				public String TOTFREOriginalDbColumnName(){
				
					return "TOTFRE";
				
				}

				
			    public BigDecimal P_CSAI;

				public BigDecimal getP_CSAI () {
					return this.P_CSAI;
				}

				public Boolean P_CSAIIsNullable(){
				    return true;
				}
				public Boolean P_CSAIIsKey(){
				    return false;
				}
				public Integer P_CSAILength(){
				    return 35;
				}
				public Integer P_CSAIPrecision(){
				    return 2;
				}
				public String P_CSAIDefault(){
				
					return null;
				
				}
				public String P_CSAIComment(){
				
				    return "";
				
				}
				public String P_CSAIPattern(){
				
					return "";
				
				}
				public String P_CSAIOriginalDbColumnName(){
				
					return "P_CSAI";
				
				}

				
			    public BigDecimal DIFSAI;

				public BigDecimal getDIFSAI () {
					return this.DIFSAI;
				}

				public Boolean DIFSAIIsNullable(){
				    return true;
				}
				public Boolean DIFSAIIsKey(){
				    return false;
				}
				public Integer DIFSAILength(){
				    return 38;
				}
				public Integer DIFSAIPrecision(){
				    return 2;
				}
				public String DIFSAIDefault(){
				
					return null;
				
				}
				public String DIFSAIComment(){
				
				    return "";
				
				}
				public String DIFSAIPattern(){
				
					return "";
				
				}
				public String DIFSAIOriginalDbColumnName(){
				
					return "DIFSAI";
				
				}

				
			    public BigDecimal LIQSAI2;

				public BigDecimal getLIQSAI2 () {
					return this.LIQSAI2;
				}

				public Boolean LIQSAI2IsNullable(){
				    return true;
				}
				public Boolean LIQSAI2IsKey(){
				    return false;
				}
				public Integer LIQSAI2Length(){
				    return 40;
				}
				public Integer LIQSAI2Precision(){
				    return 2;
				}
				public String LIQSAI2Default(){
				
					return null;
				
				}
				public String LIQSAI2Comment(){
				
				    return "";
				
				}
				public String LIQSAI2Pattern(){
				
					return "";
				
				}
				public String LIQSAI2OriginalDbColumnName(){
				
					return "LIQSAI2";
				
				}

				
			    public BigDecimal LIQSAI;

				public BigDecimal getLIQSAI () {
					return this.LIQSAI;
				}

				public Boolean LIQSAIIsNullable(){
				    return true;
				}
				public Boolean LIQSAIIsKey(){
				    return false;
				}
				public Integer LIQSAILength(){
				    return 41;
				}
				public Integer LIQSAIPrecision(){
				    return 2;
				}
				public String LIQSAIDefault(){
				
					return null;
				
				}
				public String LIQSAIComment(){
				
				    return "";
				
				}
				public String LIQSAIPattern(){
				
					return "";
				
				}
				public String LIQSAIOriginalDbColumnName(){
				
					return "LIQSAI";
				
				}

				
			    public String NUMENT;

				public String getNUMENT () {
					return this.NUMENT;
				}

				public Boolean NUMENTIsNullable(){
				    return true;
				}
				public Boolean NUMENTIsKey(){
				    return false;
				}
				public Integer NUMENTLength(){
				    return 50;
				}
				public Integer NUMENTPrecision(){
				    return 0;
				}
				public String NUMENTDefault(){
				
					return null;
				
				}
				public String NUMENTComment(){
				
				    return "";
				
				}
				public String NUMENTPattern(){
				
					return "";
				
				}
				public String NUMENTOriginalDbColumnName(){
				
					return "NUMENT";
				
				}

				
			    public java.util.Date DTAENT;

				public java.util.Date getDTAENT () {
					return this.DTAENT;
				}

				public Boolean DTAENTIsNullable(){
				    return true;
				}
				public Boolean DTAENTIsKey(){
				    return false;
				}
				public Integer DTAENTLength(){
				    return 10;
				}
				public Integer DTAENTPrecision(){
				    return 0;
				}
				public String DTAENTDefault(){
				
					return null;
				
				}
				public String DTAENTComment(){
				
				    return "";
				
				}
				public String DTAENTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DTAENTOriginalDbColumnName(){
				
					return "DTAENT";
				
				}

				
			    public BigDecimal QTDENT;

				public BigDecimal getQTDENT () {
					return this.QTDENT;
				}

				public Boolean QTDENTIsNullable(){
				    return true;
				}
				public Boolean QTDENTIsKey(){
				    return false;
				}
				public Integer QTDENTLength(){
				    return 12;
				}
				public Integer QTDENTPrecision(){
				    return 4;
				}
				public String QTDENTDefault(){
				
					return null;
				
				}
				public String QTDENTComment(){
				
				    return "";
				
				}
				public String QTDENTPattern(){
				
					return "";
				
				}
				public String QTDENTOriginalDbColumnName(){
				
					return "QTDENT";
				
				}

				
			    public String CSTENT;

				public String getCSTENT () {
					return this.CSTENT;
				}

				public Boolean CSTENTIsNullable(){
				    return true;
				}
				public Boolean CSTENTIsKey(){
				    return false;
				}
				public Integer CSTENTLength(){
				    return 3;
				}
				public Integer CSTENTPrecision(){
				    return 0;
				}
				public String CSTENTDefault(){
				
					return null;
				
				}
				public String CSTENTComment(){
				
				    return "";
				
				}
				public String CSTENTPattern(){
				
					return "";
				
				}
				public String CSTENTOriginalDbColumnName(){
				
					return "CSTENT";
				
				}

				
			    public BigDecimal TOTENT;

				public BigDecimal getTOTENT () {
					return this.TOTENT;
				}

				public Boolean TOTENTIsNullable(){
				    return true;
				}
				public Boolean TOTENTIsKey(){
				    return false;
				}
				public Integer TOTENTLength(){
				    return 46;
				}
				public Integer TOTENTPrecision(){
				    return 8;
				}
				public String TOTENTDefault(){
				
					return null;
				
				}
				public String TOTENTComment(){
				
				    return "";
				
				}
				public String TOTENTPattern(){
				
					return "";
				
				}
				public String TOTENTOriginalDbColumnName(){
				
					return "TOTENT";
				
				}

				
			    public BigDecimal ICMENT;

				public BigDecimal getICMENT () {
					return this.ICMENT;
				}

				public Boolean ICMENTIsNullable(){
				    return true;
				}
				public Boolean ICMENTIsKey(){
				    return false;
				}
				public Integer ICMENTLength(){
				    return 54;
				}
				public Integer ICMENTPrecision(){
				    return 10;
				}
				public String ICMENTDefault(){
				
					return null;
				
				}
				public String ICMENTComment(){
				
				    return "";
				
				}
				public String ICMENTPattern(){
				
					return "";
				
				}
				public String ICMENTOriginalDbColumnName(){
				
					return "ICMENT";
				
				}

				
			    public BigDecimal RETENT;

				public BigDecimal getRETENT () {
					return this.RETENT;
				}

				public Boolean RETENTIsNullable(){
				    return true;
				}
				public Boolean RETENTIsKey(){
				    return false;
				}
				public Integer RETENTLength(){
				    return 54;
				}
				public Integer RETENTPrecision(){
				    return 10;
				}
				public String RETENTDefault(){
				
					return null;
				
				}
				public String RETENTComment(){
				
				    return "";
				
				}
				public String RETENTPattern(){
				
					return "";
				
				}
				public String RETENTOriginalDbColumnName(){
				
					return "RETENT";
				
				}

				
			    public BigDecimal IPIENT;

				public BigDecimal getIPIENT () {
					return this.IPIENT;
				}

				public Boolean IPIENTIsNullable(){
				    return true;
				}
				public Boolean IPIENTIsKey(){
				    return false;
				}
				public Integer IPIENTLength(){
				    return 54;
				}
				public Integer IPIENTPrecision(){
				    return 10;
				}
				public String IPIENTDefault(){
				
					return null;
				
				}
				public String IPIENTComment(){
				
				    return "";
				
				}
				public String IPIENTPattern(){
				
					return "";
				
				}
				public String IPIENTOriginalDbColumnName(){
				
					return "IPIENT";
				
				}

				
			    public BigDecimal P_CENT;

				public BigDecimal getP_CENT () {
					return this.P_CENT;
				}

				public Boolean P_CENTIsNullable(){
				    return true;
				}
				public Boolean P_CENTIsKey(){
				    return false;
				}
				public Integer P_CENTLength(){
				    return 55;
				}
				public Integer P_CENTPrecision(){
				    return 10;
				}
				public String P_CENTDefault(){
				
					return null;
				
				}
				public String P_CENTComment(){
				
				    return "";
				
				}
				public String P_CENTPattern(){
				
					return "";
				
				}
				public String P_CENTOriginalDbColumnName(){
				
					return "P_CENT";
				
				}

				
			    public BigDecimal LIQENT;

				public BigDecimal getLIQENT () {
					return this.LIQENT;
				}

				public Boolean LIQENTIsNullable(){
				    return true;
				}
				public Boolean LIQENTIsKey(){
				    return false;
				}
				public Integer LIQENTLength(){
				    return 57;
				}
				public Integer LIQENTPrecision(){
				    return 10;
				}
				public String LIQENTDefault(){
				
					return null;
				
				}
				public String LIQENTComment(){
				
				    return "";
				
				}
				public String LIQENTPattern(){
				
					return "";
				
				}
				public String LIQENTOriginalDbColumnName(){
				
					return "LIQENT";
				
				}

				
			    public BigDecimal VAL_ST;

				public BigDecimal getVAL_ST () {
					return this.VAL_ST;
				}

				public Boolean VAL_STIsNullable(){
				    return false;
				}
				public Boolean VAL_STIsKey(){
				    return false;
				}
				public Integer VAL_STLength(){
				    return 12;
				}
				public Integer VAL_STPrecision(){
				    return 2;
				}
				public String VAL_STDefault(){
				
					return "0.00";
				
				}
				public String VAL_STComment(){
				
				    return "";
				
				}
				public String VAL_STPattern(){
				
					return "";
				
				}
				public String VAL_STOriginalDbColumnName(){
				
					return "VAL_ST";
				
				}

				
			    public BigDecimal VAL_OP;

				public BigDecimal getVAL_OP () {
					return this.VAL_OP;
				}

				public Boolean VAL_OPIsNullable(){
				    return false;
				}
				public Boolean VAL_OPIsKey(){
				    return false;
				}
				public Integer VAL_OPLength(){
				    return 12;
				}
				public Integer VAL_OPPrecision(){
				    return 2;
				}
				public String VAL_OPDefault(){
				
					return "0.00";
				
				}
				public String VAL_OPComment(){
				
				    return "";
				
				}
				public String VAL_OPPattern(){
				
					return "";
				
				}
				public String VAL_OPOriginalDbColumnName(){
				
					return "VAL_OP";
				
				}

				
			    public String VALORES;

				public String getVALORES () {
					return this.VALORES;
				}

				public Boolean VALORESIsNullable(){
				    return true;
				}
				public Boolean VALORESIsKey(){
				    return false;
				}
				public Integer VALORESLength(){
				    return 100;
				}
				public Integer VALORESPrecision(){
				    return 0;
				}
				public String VALORESDefault(){
				
					return null;
				
				}
				public String VALORESComment(){
				
				    return "";
				
				}
				public String VALORESPattern(){
				
					return "";
				
				}
				public String VALORESOriginalDbColumnName(){
				
					return "VALORES";
				
				}

				
			    public BigDecimal VALCOM;

				public BigDecimal getVALCOM () {
					return this.VALCOM;
				}

				public Boolean VALCOMIsNullable(){
				    return true;
				}
				public Boolean VALCOMIsKey(){
				    return false;
				}
				public Integer VALCOMLength(){
				    return 39;
				}
				public Integer VALCOMPrecision(){
				    return 6;
				}
				public String VALCOMDefault(){
				
					return null;
				
				}
				public String VALCOMComment(){
				
				    return "";
				
				}
				public String VALCOMPattern(){
				
					return "";
				
				}
				public String VALCOMOriginalDbColumnName(){
				
					return "VALCOM";
				
				}

				
			    public BigDecimal ICMEN2;

				public BigDecimal getICMEN2 () {
					return this.ICMEN2;
				}

				public Boolean ICMEN2IsNullable(){
				    return false;
				}
				public Boolean ICMEN2IsKey(){
				    return false;
				}
				public Integer ICMEN2Length(){
				    return 20;
				}
				public Integer ICMEN2Precision(){
				    return 6;
				}
				public String ICMEN2Default(){
				
					return "0.000000";
				
				}
				public String ICMEN2Comment(){
				
				    return "";
				
				}
				public String ICMEN2Pattern(){
				
					return "";
				
				}
				public String ICMEN2OriginalDbColumnName(){
				
					return "ICMEN2";
				
				}

				
			    public BigDecimal RESSAR;

				public BigDecimal getRESSAR () {
					return this.RESSAR;
				}

				public Boolean RESSARIsNullable(){
				    return false;
				}
				public Boolean RESSARIsKey(){
				    return false;
				}
				public Integer RESSARLength(){
				    return 20;
				}
				public Integer RESSARPrecision(){
				    return 6;
				}
				public String RESSARDefault(){
				
					return "0.000000";
				
				}
				public String RESSARComment(){
				
				    return "";
				
				}
				public String RESSARPattern(){
				
					return "";
				
				}
				public String RESSAROriginalDbColumnName(){
				
					return "RESSAR";
				
				}

				
			    public BigDecimal MAROPE;

				public BigDecimal getMAROPE () {
					return this.MAROPE;
				}

				public Boolean MAROPEIsNullable(){
				    return true;
				}
				public Boolean MAROPEIsKey(){
				    return false;
				}
				public Integer MAROPELength(){
				    return 61;
				}
				public Integer MAROPEPrecision(){
				    return 10;
				}
				public String MAROPEDefault(){
				
					return null;
				
				}
				public String MAROPEComment(){
				
				    return "";
				
				}
				public String MAROPEPattern(){
				
					return "";
				
				}
				public String MAROPEOriginalDbColumnName(){
				
					return "MAROPE";
				
				}

				
			    public BigDecimal PERMAR;

				public BigDecimal getPERMAR () {
					return this.PERMAR;
				}

				public Boolean PERMARIsNullable(){
				    return true;
				}
				public Boolean PERMARIsKey(){
				    return false;
				}
				public Integer PERMARLength(){
				    return 65;
				}
				public Integer PERMARPrecision(){
				    return 14;
				}
				public String PERMARDefault(){
				
					return null;
				
				}
				public String PERMARComment(){
				
				    return "";
				
				}
				public String PERMARPattern(){
				
					return "";
				
				}
				public String PERMAROriginalDbColumnName(){
				
					return "PERMAR";
				
				}

				
			    public String CSTCOM;

				public String getCSTCOM () {
					return this.CSTCOM;
				}

				public Boolean CSTCOMIsNullable(){
				    return true;
				}
				public Boolean CSTCOMIsKey(){
				    return false;
				}
				public Integer CSTCOMLength(){
				    return 5;
				}
				public Integer CSTCOMPrecision(){
				    return 0;
				}
				public String CSTCOMDefault(){
				
					return null;
				
				}
				public String CSTCOMComment(){
				
				    return "";
				
				}
				public String CSTCOMPattern(){
				
					return "";
				
				}
				public String CSTCOMOriginalDbColumnName(){
				
					return "CSTCOM";
				
				}

				
			    public String CST1;

				public String getCST1 () {
					return this.CST1;
				}

				public Boolean CST1IsNullable(){
				    return false;
				}
				public Boolean CST1IsKey(){
				    return false;
				}
				public Integer CST1Length(){
				    return 95;
				}
				public Integer CST1Precision(){
				    return 0;
				}
				public String CST1Default(){
				
					return null;
				
				}
				public String CST1Comment(){
				
				    return "";
				
				}
				public String CST1Pattern(){
				
					return "";
				
				}
				public String CST1OriginalDbColumnName(){
				
					return "CST1";
				
				}

				
			    public String CST2;

				public String getCST2 () {
					return this.CST2;
				}

				public Boolean CST2IsNullable(){
				    return false;
				}
				public Boolean CST2IsKey(){
				    return false;
				}
				public Integer CST2Length(){
				    return 59;
				}
				public Integer CST2Precision(){
				    return 0;
				}
				public String CST2Default(){
				
					return null;
				
				}
				public String CST2Comment(){
				
				    return "";
				
				}
				public String CST2Pattern(){
				
					return "";
				
				}
				public String CST2OriginalDbColumnName(){
				
					return "CST2";
				
				}

				
			    public BigDecimal RESSA2;

				public BigDecimal getRESSA2 () {
					return this.RESSA2;
				}

				public Boolean RESSA2IsNullable(){
				    return true;
				}
				public Boolean RESSA2IsKey(){
				    return false;
				}
				public Integer RESSA2Length(){
				    return 13;
				}
				public Integer RESSA2Precision(){
				    return 2;
				}
				public String RESSA2Default(){
				
					return null;
				
				}
				public String RESSA2Comment(){
				
				    return "";
				
				}
				public String RESSA2Pattern(){
				
					return "";
				
				}
				public String RESSA2OriginalDbColumnName(){
				
					return "RESSA2";
				
				}

				
			    public BigDecimal IPISAI;

				public BigDecimal getIPISAI () {
					return this.IPISAI;
				}

				public Boolean IPISAIIsNullable(){
				    return true;
				}
				public Boolean IPISAIIsKey(){
				    return false;
				}
				public Integer IPISAILength(){
				    return 12;
				}
				public Integer IPISAIPrecision(){
				    return 2;
				}
				public String IPISAIDefault(){
				
					return null;
				
				}
				public String IPISAIComment(){
				
				    return "";
				
				}
				public String IPISAIPattern(){
				
					return "";
				
				}
				public String IPISAIOriginalDbColumnName(){
				
					return "IPISAI";
				
				}

				
			    public BigDecimal VLRVII;

				public BigDecimal getVLRVII () {
					return this.VLRVII;
				}

				public Boolean VLRVIIIsNullable(){
				    return true;
				}
				public Boolean VLRVIIIsKey(){
				    return false;
				}
				public Integer VLRVIILength(){
				    return 54;
				}
				public Integer VLRVIIPrecision(){
				    return 10;
				}
				public String VLRVIIDefault(){
				
					return null;
				
				}
				public String VLRVIIComment(){
				
				    return "";
				
				}
				public String VLRVIIPattern(){
				
					return "";
				
				}
				public String VLRVIIOriginalDbColumnName(){
				
					return "VLRVII";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.NUMDOC = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.CODVEN = readString(dis);
					
						this.VLRTNF = (BigDecimal) dis.readObject();
					
					this.DTASAI = readDate(dis);
					
					this.CODITE = readString(dis);
					
					this.CODMAR = readString(dis);
					
					this.DESCRI = readString(dis);
					
						this.QTDSAI = (BigDecimal) dis.readObject();
					
						this.UNISAI = (BigDecimal) dis.readObject();
					
						this.TOTSAI = (BigDecimal) dis.readObject();
					
						this.ICMSAI = (BigDecimal) dis.readObject();
					
						this.FCPSAI = (BigDecimal) dis.readObject();
					
						this.RETSAI = (BigDecimal) dis.readObject();
					
						this.TOTFRE = (BigDecimal) dis.readObject();
					
						this.P_CSAI = (BigDecimal) dis.readObject();
					
						this.DIFSAI = (BigDecimal) dis.readObject();
					
						this.LIQSAI2 = (BigDecimal) dis.readObject();
					
						this.LIQSAI = (BigDecimal) dis.readObject();
					
					this.NUMENT = readString(dis);
					
					this.DTAENT = readDate(dis);
					
						this.QTDENT = (BigDecimal) dis.readObject();
					
					this.CSTENT = readString(dis);
					
						this.TOTENT = (BigDecimal) dis.readObject();
					
						this.ICMENT = (BigDecimal) dis.readObject();
					
						this.RETENT = (BigDecimal) dis.readObject();
					
						this.IPIENT = (BigDecimal) dis.readObject();
					
						this.P_CENT = (BigDecimal) dis.readObject();
					
						this.LIQENT = (BigDecimal) dis.readObject();
					
						this.VAL_ST = (BigDecimal) dis.readObject();
					
						this.VAL_OP = (BigDecimal) dis.readObject();
					
					this.VALORES = readString(dis);
					
						this.VALCOM = (BigDecimal) dis.readObject();
					
						this.ICMEN2 = (BigDecimal) dis.readObject();
					
						this.RESSAR = (BigDecimal) dis.readObject();
					
						this.MAROPE = (BigDecimal) dis.readObject();
					
						this.PERMAR = (BigDecimal) dis.readObject();
					
					this.CSTCOM = readString(dis);
					
					this.CST1 = readString(dis);
					
					this.CST2 = readString(dis);
					
						this.RESSA2 = (BigDecimal) dis.readObject();
					
						this.IPISAI = (BigDecimal) dis.readObject();
					
						this.VLRVII = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RETENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLRVII);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMDOC,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CODVEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRTNF);
					
					// java.util.Date
				
						writeDate(this.DTASAI,dos);
					
					// String
				
						writeString(this.CODITE,dos);
					
					// String
				
						writeString(this.CODMAR,dos);
					
					// String
				
						writeString(this.DESCRI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FCPSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTFRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIFSAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQSAI);
					
					// String
				
						writeString(this.NUMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DTAENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTDENT);
					
					// String
				
						writeString(this.CSTENT,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RETENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPIENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.P_CENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LIQENT);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_ST);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAL_OP);
					
					// String
				
						writeString(this.VALORES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALCOM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ICMEN2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MAROPE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERMAR);
					
					// String
				
						writeString(this.CSTCOM,dos);
					
					// String
				
						writeString(this.CST1,dos);
					
					// String
				
						writeString(this.CST2,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESSA2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPISAI);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLRVII);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMDOC="+NUMDOC);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",CODVEN="+CODVEN);
		sb.append(",VLRTNF="+String.valueOf(VLRTNF));
		sb.append(",DTASAI="+String.valueOf(DTASAI));
		sb.append(",CODITE="+CODITE);
		sb.append(",CODMAR="+CODMAR);
		sb.append(",DESCRI="+DESCRI);
		sb.append(",QTDSAI="+String.valueOf(QTDSAI));
		sb.append(",UNISAI="+String.valueOf(UNISAI));
		sb.append(",TOTSAI="+String.valueOf(TOTSAI));
		sb.append(",ICMSAI="+String.valueOf(ICMSAI));
		sb.append(",FCPSAI="+String.valueOf(FCPSAI));
		sb.append(",RETSAI="+String.valueOf(RETSAI));
		sb.append(",TOTFRE="+String.valueOf(TOTFRE));
		sb.append(",P_CSAI="+String.valueOf(P_CSAI));
		sb.append(",DIFSAI="+String.valueOf(DIFSAI));
		sb.append(",LIQSAI2="+String.valueOf(LIQSAI2));
		sb.append(",LIQSAI="+String.valueOf(LIQSAI));
		sb.append(",NUMENT="+NUMENT);
		sb.append(",DTAENT="+String.valueOf(DTAENT));
		sb.append(",QTDENT="+String.valueOf(QTDENT));
		sb.append(",CSTENT="+CSTENT);
		sb.append(",TOTENT="+String.valueOf(TOTENT));
		sb.append(",ICMENT="+String.valueOf(ICMENT));
		sb.append(",RETENT="+String.valueOf(RETENT));
		sb.append(",IPIENT="+String.valueOf(IPIENT));
		sb.append(",P_CENT="+String.valueOf(P_CENT));
		sb.append(",LIQENT="+String.valueOf(LIQENT));
		sb.append(",VAL_ST="+String.valueOf(VAL_ST));
		sb.append(",VAL_OP="+String.valueOf(VAL_OP));
		sb.append(",VALORES="+VALORES);
		sb.append(",VALCOM="+String.valueOf(VALCOM));
		sb.append(",ICMEN2="+String.valueOf(ICMEN2));
		sb.append(",RESSAR="+String.valueOf(RESSAR));
		sb.append(",MAROPE="+String.valueOf(MAROPE));
		sb.append(",PERMAR="+String.valueOf(PERMAR));
		sb.append(",CSTCOM="+CSTCOM);
		sb.append(",CST1="+CST1);
		sb.append(",CST2="+CST2);
		sb.append(",RESSA2="+String.valueOf(RESSA2));
		sb.append(",IPISAI="+String.valueOf(IPISAI));
		sb.append(",VLRVII="+String.valueOf(VLRVII));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
copyOfcopyOfcopyOfcopyOfinsertStruct copyOfcopyOfcopyOfcopyOfinsert = new copyOfcopyOfcopyOfcopyOfinsertStruct();
row18Struct row18 = new row18Struct();






	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("vw_custo_efetivo_mg").toLowerCase();
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("vw_custo_efetivo_mg").toLowerCase();
}

        int updateKeyCount_tDBOutput_7 = 2;
        if(updateKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_7 == 50 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rowsToCommitCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_7=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_7 + "\" WHERE \"numdoc\" = ? AND \"codite\" = ?");
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"numdoc\",\"numped\",\"estado\",\"codven\",\"vlrtnf\",\"dtasai\",\"codite\",\"codmar\",\"descri\",\"qtdsai\",\"unisai\",\"totsai\",\"icmsai\",\"fcpsai\",\"retsai\",\"totfre\",\"p_csai\",\"difsai\",\"liqsai2\",\"teste\",\"liqsai\",\"nument\",\"dtaent\",\"qtdent\",\"cstent\",\"totent\",\"icment\",\"retent\",\"ipient\",\"p_cent\",\"liqent\",\"val_st\",\"val_op\",\"valores\",\"valcom\",\"icmen2\",\"ressar\",\"marope\",\"permar\",\"cstcom\",\"cst1\",\"cst2\",\"marope_mg\",\"permar_mg\",\"ressa2\",\"ipisai\",\"vlrvii\",\"codigo_produto\",\"name_exp_43\",\"name_exp_44\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
	    String update_tDBOutput_7 = "UPDATE \"" + tableName_tDBOutput_7 + "\" SET \"numped\" = ?,\"estado\" = ?,\"codven\" = ?,\"vlrtnf\" = ?,\"dtasai\" = ?,\"codmar\" = ?,\"descri\" = ?,\"qtdsai\" = ?,\"unisai\" = ?,\"totsai\" = ?,\"icmsai\" = ?,\"fcpsai\" = ?,\"retsai\" = ?,\"totfre\" = ?,\"p_csai\" = ?,\"difsai\" = ?,\"liqsai2\" = ?,\"teste\" = ?,\"liqsai\" = ?,\"nument\" = ?,\"dtaent\" = ?,\"qtdent\" = ?,\"cstent\" = ?,\"totent\" = ?,\"icment\" = ?,\"retent\" = ?,\"ipient\" = ?,\"p_cent\" = ?,\"liqent\" = ?,\"val_st\" = ?,\"val_op\" = ?,\"valores\" = ?,\"valcom\" = ?,\"icmen2\" = ?,\"ressar\" = ?,\"marope\" = ?,\"permar\" = ?,\"cstcom\" = ?,\"cst1\" = ?,\"cst2\" = ?,\"marope_mg\" = ?,\"permar_mg\" = ?,\"ressa2\" = ?,\"ipisai\" = ?,\"vlrvii\" = ?,\"codigo_produto\" = ?,\"name_exp_43\" = ?,\"name_exp_44\" = ? WHERE \"numdoc\" = ? AND \"codite\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(update_tDBOutput_7);
	    resourceMap.put("pstmtUpdate_tDBOutput_7", pstmtUpdate_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfinsert");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String NUMDOC;
					String NUMPED;
					String ESTADO;
					String CODVEN;
					BigDecimal VLRTNF;
					java.util.Date DTASAI;
					String CODITE;
					String CODMAR;
					String DESCRI;
					BigDecimal QTDSAI;
					BigDecimal UNISAI;
					BigDecimal TOTSAI;
					BigDecimal ICMSAI;
					BigDecimal FCPSAI;
					BigDecimal RETSAI;
					BigDecimal TOTFRE;
					BigDecimal P_CSAI;
					BigDecimal DIFSAI;
					BigDecimal LIQSAI2;
					String TESTE;
					BigDecimal LIQSAI;
					String NUMENT;
					java.util.Date DTAENT;
					BigDecimal QTDENT;
					String CSTENT;
					BigDecimal TOTENT;
					BigDecimal ICMENT;
					BigDecimal RETENT;
					BigDecimal IPIENT;
					BigDecimal P_CENT;
					BigDecimal LIQENT;
					BigDecimal VAL_ST;
					BigDecimal VAL_OP;
					String VALORES;
					BigDecimal VALCOM;
					BigDecimal ICMEN2;
					BigDecimal RESSAR;
					BigDecimal MAROPE;
					BigDecimal PERMAR;
					String CSTCOM;
					String CST1;
					String CST2;
					BigDecimal MAROPE_MG;
					BigDecimal PERMAR_MG;
					BigDecimal RESSA2;
					BigDecimal IPISAI;
					BigDecimal VLRVII;
					String CODIGO_PRODUTO;
					Integer Name_exp_43;
					Integer Name_exp_44;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.NUMDOC == null) ? 0 : this.NUMDOC.hashCode());
								
								result = prime * result + ((this.NUMPED == null) ? 0 : this.NUMPED.hashCode());
								
								result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
								
								result = prime * result + ((this.CODVEN == null) ? 0 : this.CODVEN.hashCode());
								
								result = prime * result + ((this.VLRTNF == null) ? 0 : this.VLRTNF.hashCode());
								
								result = prime * result + ((this.DTASAI == null) ? 0 : this.DTASAI.hashCode());
								
								result = prime * result + ((this.CODITE == null) ? 0 : this.CODITE.hashCode());
								
								result = prime * result + ((this.CODMAR == null) ? 0 : this.CODMAR.hashCode());
								
								result = prime * result + ((this.DESCRI == null) ? 0 : this.DESCRI.hashCode());
								
								result = prime * result + ((this.QTDSAI == null) ? 0 : this.QTDSAI.hashCode());
								
								result = prime * result + ((this.UNISAI == null) ? 0 : this.UNISAI.hashCode());
								
								result = prime * result + ((this.TOTSAI == null) ? 0 : this.TOTSAI.hashCode());
								
								result = prime * result + ((this.ICMSAI == null) ? 0 : this.ICMSAI.hashCode());
								
								result = prime * result + ((this.FCPSAI == null) ? 0 : this.FCPSAI.hashCode());
								
								result = prime * result + ((this.RETSAI == null) ? 0 : this.RETSAI.hashCode());
								
								result = prime * result + ((this.TOTFRE == null) ? 0 : this.TOTFRE.hashCode());
								
								result = prime * result + ((this.P_CSAI == null) ? 0 : this.P_CSAI.hashCode());
								
								result = prime * result + ((this.DIFSAI == null) ? 0 : this.DIFSAI.hashCode());
								
								result = prime * result + ((this.LIQSAI2 == null) ? 0 : this.LIQSAI2.hashCode());
								
								result = prime * result + ((this.TESTE == null) ? 0 : this.TESTE.hashCode());
								
								result = prime * result + ((this.LIQSAI == null) ? 0 : this.LIQSAI.hashCode());
								
								result = prime * result + ((this.NUMENT == null) ? 0 : this.NUMENT.hashCode());
								
								result = prime * result + ((this.DTAENT == null) ? 0 : this.DTAENT.hashCode());
								
								result = prime * result + ((this.QTDENT == null) ? 0 : this.QTDENT.hashCode());
								
								result = prime * result + ((this.CSTENT == null) ? 0 : this.CSTENT.hashCode());
								
								result = prime * result + ((this.TOTENT == null) ? 0 : this.TOTENT.hashCode());
								
								result = prime * result + ((this.ICMENT == null) ? 0 : this.ICMENT.hashCode());
								
								result = prime * result + ((this.RETENT == null) ? 0 : this.RETENT.hashCode());
								
								result = prime * result + ((this.IPIENT == null) ? 0 : this.IPIENT.hashCode());
								
								result = prime * result + ((this.P_CENT == null) ? 0 : this.P_CENT.hashCode());
								
								result = prime * result + ((this.LIQENT == null) ? 0 : this.LIQENT.hashCode());
								
								result = prime * result + ((this.VAL_ST == null) ? 0 : this.VAL_ST.hashCode());
								
								result = prime * result + ((this.VAL_OP == null) ? 0 : this.VAL_OP.hashCode());
								
								result = prime * result + ((this.VALORES == null) ? 0 : this.VALORES.hashCode());
								
								result = prime * result + ((this.VALCOM == null) ? 0 : this.VALCOM.hashCode());
								
								result = prime * result + ((this.ICMEN2 == null) ? 0 : this.ICMEN2.hashCode());
								
								result = prime * result + ((this.RESSAR == null) ? 0 : this.RESSAR.hashCode());
								
								result = prime * result + ((this.MAROPE == null) ? 0 : this.MAROPE.hashCode());
								
								result = prime * result + ((this.PERMAR == null) ? 0 : this.PERMAR.hashCode());
								
								result = prime * result + ((this.CSTCOM == null) ? 0 : this.CSTCOM.hashCode());
								
								result = prime * result + ((this.CST1 == null) ? 0 : this.CST1.hashCode());
								
								result = prime * result + ((this.CST2 == null) ? 0 : this.CST2.hashCode());
								
								result = prime * result + ((this.MAROPE_MG == null) ? 0 : this.MAROPE_MG.hashCode());
								
								result = prime * result + ((this.PERMAR_MG == null) ? 0 : this.PERMAR_MG.hashCode());
								
								result = prime * result + ((this.RESSA2 == null) ? 0 : this.RESSA2.hashCode());
								
								result = prime * result + ((this.IPISAI == null) ? 0 : this.IPISAI.hashCode());
								
								result = prime * result + ((this.VLRVII == null) ? 0 : this.VLRVII.hashCode());
								
								result = prime * result + ((this.CODIGO_PRODUTO == null) ? 0 : this.CODIGO_PRODUTO.hashCode());
								
								result = prime * result + ((this.Name_exp_43 == null) ? 0 : this.Name_exp_43.hashCode());
								
								result = prime * result + ((this.Name_exp_44 == null) ? 0 : this.Name_exp_44.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.NUMDOC == null) {
										if (other.NUMDOC != null) 
											return false;
								
									} else if (!this.NUMDOC.equals(other.NUMDOC))
								 
										return false;
								
									if (this.NUMPED == null) {
										if (other.NUMPED != null) 
											return false;
								
									} else if (!this.NUMPED.equals(other.NUMPED))
								 
										return false;
								
									if (this.ESTADO == null) {
										if (other.ESTADO != null) 
											return false;
								
									} else if (!this.ESTADO.equals(other.ESTADO))
								 
										return false;
								
									if (this.CODVEN == null) {
										if (other.CODVEN != null) 
											return false;
								
									} else if (!this.CODVEN.equals(other.CODVEN))
								 
										return false;
								
									if (this.VLRTNF == null) {
										if (other.VLRTNF != null) 
											return false;
								
									} else if (!this.VLRTNF.equals(other.VLRTNF))
								 
										return false;
								
									if (this.DTASAI == null) {
										if (other.DTASAI != null) 
											return false;
								
									} else if (!this.DTASAI.equals(other.DTASAI))
								 
										return false;
								
									if (this.CODITE == null) {
										if (other.CODITE != null) 
											return false;
								
									} else if (!this.CODITE.equals(other.CODITE))
								 
										return false;
								
									if (this.CODMAR == null) {
										if (other.CODMAR != null) 
											return false;
								
									} else if (!this.CODMAR.equals(other.CODMAR))
								 
										return false;
								
									if (this.DESCRI == null) {
										if (other.DESCRI != null) 
											return false;
								
									} else if (!this.DESCRI.equals(other.DESCRI))
								 
										return false;
								
									if (this.QTDSAI == null) {
										if (other.QTDSAI != null) 
											return false;
								
									} else if (!this.QTDSAI.equals(other.QTDSAI))
								 
										return false;
								
									if (this.UNISAI == null) {
										if (other.UNISAI != null) 
											return false;
								
									} else if (!this.UNISAI.equals(other.UNISAI))
								 
										return false;
								
									if (this.TOTSAI == null) {
										if (other.TOTSAI != null) 
											return false;
								
									} else if (!this.TOTSAI.equals(other.TOTSAI))
								 
										return false;
								
									if (this.ICMSAI == null) {
										if (other.ICMSAI != null) 
											return false;
								
									} else if (!this.ICMSAI.equals(other.ICMSAI))
								 
										return false;
								
									if (this.FCPSAI == null) {
										if (other.FCPSAI != null) 
											return false;
								
									} else if (!this.FCPSAI.equals(other.FCPSAI))
								 
										return false;
								
									if (this.RETSAI == null) {
										if (other.RETSAI != null) 
											return false;
								
									} else if (!this.RETSAI.equals(other.RETSAI))
								 
										return false;
								
									if (this.TOTFRE == null) {
										if (other.TOTFRE != null) 
											return false;
								
									} else if (!this.TOTFRE.equals(other.TOTFRE))
								 
										return false;
								
									if (this.P_CSAI == null) {
										if (other.P_CSAI != null) 
											return false;
								
									} else if (!this.P_CSAI.equals(other.P_CSAI))
								 
										return false;
								
									if (this.DIFSAI == null) {
										if (other.DIFSAI != null) 
											return false;
								
									} else if (!this.DIFSAI.equals(other.DIFSAI))
								 
										return false;
								
									if (this.LIQSAI2 == null) {
										if (other.LIQSAI2 != null) 
											return false;
								
									} else if (!this.LIQSAI2.equals(other.LIQSAI2))
								 
										return false;
								
									if (this.TESTE == null) {
										if (other.TESTE != null) 
											return false;
								
									} else if (!this.TESTE.equals(other.TESTE))
								 
										return false;
								
									if (this.LIQSAI == null) {
										if (other.LIQSAI != null) 
											return false;
								
									} else if (!this.LIQSAI.equals(other.LIQSAI))
								 
										return false;
								
									if (this.NUMENT == null) {
										if (other.NUMENT != null) 
											return false;
								
									} else if (!this.NUMENT.equals(other.NUMENT))
								 
										return false;
								
									if (this.DTAENT == null) {
										if (other.DTAENT != null) 
											return false;
								
									} else if (!this.DTAENT.equals(other.DTAENT))
								 
										return false;
								
									if (this.QTDENT == null) {
										if (other.QTDENT != null) 
											return false;
								
									} else if (!this.QTDENT.equals(other.QTDENT))
								 
										return false;
								
									if (this.CSTENT == null) {
										if (other.CSTENT != null) 
											return false;
								
									} else if (!this.CSTENT.equals(other.CSTENT))
								 
										return false;
								
									if (this.TOTENT == null) {
										if (other.TOTENT != null) 
											return false;
								
									} else if (!this.TOTENT.equals(other.TOTENT))
								 
										return false;
								
									if (this.ICMENT == null) {
										if (other.ICMENT != null) 
											return false;
								
									} else if (!this.ICMENT.equals(other.ICMENT))
								 
										return false;
								
									if (this.RETENT == null) {
										if (other.RETENT != null) 
											return false;
								
									} else if (!this.RETENT.equals(other.RETENT))
								 
										return false;
								
									if (this.IPIENT == null) {
										if (other.IPIENT != null) 
											return false;
								
									} else if (!this.IPIENT.equals(other.IPIENT))
								 
										return false;
								
									if (this.P_CENT == null) {
										if (other.P_CENT != null) 
											return false;
								
									} else if (!this.P_CENT.equals(other.P_CENT))
								 
										return false;
								
									if (this.LIQENT == null) {
										if (other.LIQENT != null) 
											return false;
								
									} else if (!this.LIQENT.equals(other.LIQENT))
								 
										return false;
								
									if (this.VAL_ST == null) {
										if (other.VAL_ST != null) 
											return false;
								
									} else if (!this.VAL_ST.equals(other.VAL_ST))
								 
										return false;
								
									if (this.VAL_OP == null) {
										if (other.VAL_OP != null) 
											return false;
								
									} else if (!this.VAL_OP.equals(other.VAL_OP))
								 
										return false;
								
									if (this.VALORES == null) {
										if (other.VALORES != null) 
											return false;
								
									} else if (!this.VALORES.equals(other.VALORES))
								 
										return false;
								
									if (this.VALCOM == null) {
										if (other.VALCOM != null) 
											return false;
								
									} else if (!this.VALCOM.equals(other.VALCOM))
								 
										return false;
								
									if (this.ICMEN2 == null) {
										if (other.ICMEN2 != null) 
											return false;
								
									} else if (!this.ICMEN2.equals(other.ICMEN2))
								 
										return false;
								
									if (this.RESSAR == null) {
										if (other.RESSAR != null) 
											return false;
								
									} else if (!this.RESSAR.equals(other.RESSAR))
								 
										return false;
								
									if (this.MAROPE == null) {
										if (other.MAROPE != null) 
											return false;
								
									} else if (!this.MAROPE.equals(other.MAROPE))
								 
										return false;
								
									if (this.PERMAR == null) {
										if (other.PERMAR != null) 
											return false;
								
									} else if (!this.PERMAR.equals(other.PERMAR))
								 
										return false;
								
									if (this.CSTCOM == null) {
										if (other.CSTCOM != null) 
											return false;
								
									} else if (!this.CSTCOM.equals(other.CSTCOM))
								 
										return false;
								
									if (this.CST1 == null) {
										if (other.CST1 != null) 
											return false;
								
									} else if (!this.CST1.equals(other.CST1))
								 
										return false;
								
									if (this.CST2 == null) {
										if (other.CST2 != null) 
											return false;
								
									} else if (!this.CST2.equals(other.CST2))
								 
										return false;
								
									if (this.MAROPE_MG == null) {
										if (other.MAROPE_MG != null) 
											return false;
								
									} else if (!this.MAROPE_MG.equals(other.MAROPE_MG))
								 
										return false;
								
									if (this.PERMAR_MG == null) {
										if (other.PERMAR_MG != null) 
											return false;
								
									} else if (!this.PERMAR_MG.equals(other.PERMAR_MG))
								 
										return false;
								
									if (this.RESSA2 == null) {
										if (other.RESSA2 != null) 
											return false;
								
									} else if (!this.RESSA2.equals(other.RESSA2))
								 
										return false;
								
									if (this.IPISAI == null) {
										if (other.IPISAI != null) 
											return false;
								
									} else if (!this.IPISAI.equals(other.IPISAI))
								 
										return false;
								
									if (this.VLRVII == null) {
										if (other.VLRVII != null) 
											return false;
								
									} else if (!this.VLRVII.equals(other.VLRVII))
								 
										return false;
								
									if (this.CODIGO_PRODUTO == null) {
										if (other.CODIGO_PRODUTO != null) 
											return false;
								
									} else if (!this.CODIGO_PRODUTO.equals(other.CODIGO_PRODUTO))
								 
										return false;
								
									if (this.Name_exp_43 == null) {
										if (other.Name_exp_43 != null) 
											return false;
								
									} else if (!this.Name_exp_43.equals(other.Name_exp_43))
								 
										return false;
								
									if (this.Name_exp_44 == null) {
										if (other.Name_exp_44 != null) 
											return false;
								
									} else if (!this.Name_exp_44.equals(other.Name_exp_44))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfinsertStruct copyOfcopyOfcopyOfcopyOfinsert_tmp = new copyOfcopyOfcopyOfcopyOfinsertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row16Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row17.NUMDOC = next_tHashInput_6.NUMDOC;
	row17.ESTADO = next_tHashInput_6.ESTADO;
	row17.CODVEN = next_tHashInput_6.CODVEN;
	row17.VLRTNF = next_tHashInput_6.VLRTNF;
	row17.DTASAI = next_tHashInput_6.DTASAI;
	row17.CODITE = next_tHashInput_6.CODITE;
	row17.CODMAR = next_tHashInput_6.CODMAR;
	row17.DESCRI = next_tHashInput_6.DESCRI;
	row17.QTDSAI = next_tHashInput_6.QTDSAI;
	row17.UNISAI = next_tHashInput_6.UNISAI;
	row17.TOTSAI = next_tHashInput_6.TOTSAI;
	row17.ICMSAI = next_tHashInput_6.ICMSAI;
	row17.FCPSAI = next_tHashInput_6.FCPSAI;
	row17.RETSAI = next_tHashInput_6.RETSAI;
	row17.TOTFRE = next_tHashInput_6.TOTFRE;
	row17.P_CSAI = next_tHashInput_6.P_CSAI;
	row17.DIFSAI = next_tHashInput_6.DIFSAI;
	row17.LIQSAI2 = next_tHashInput_6.LIQSAI2;
	row17.LIQSAI = next_tHashInput_6.LIQSAI;
	row17.NUMENT = next_tHashInput_6.NUMENT;
	row17.DTAENT = next_tHashInput_6.DTAENT;
	row17.QTDENT = next_tHashInput_6.QTDENT;
	row17.CSTENT = next_tHashInput_6.CSTENT;
	row17.TOTENT = next_tHashInput_6.TOTENT;
	row17.ICMENT = next_tHashInput_6.ICMENT;
	row17.RETENT = next_tHashInput_6.RETENT;
	row17.IPIENT = next_tHashInput_6.IPIENT;
	row17.P_CENT = next_tHashInput_6.P_CENT;
	row17.LIQENT = next_tHashInput_6.LIQENT;
	row17.VAL_ST = next_tHashInput_6.VAL_ST;
	row17.VAL_OP = next_tHashInput_6.VAL_OP;
	row17.VALORES = next_tHashInput_6.VALORES;
	row17.VALCOM = next_tHashInput_6.VALCOM;
	row17.ICMEN2 = next_tHashInput_6.ICMEN2;
	row17.RESSAR = next_tHashInput_6.RESSAR;
	row17.MAROPE = next_tHashInput_6.MAROPE;
	row17.PERMAR = next_tHashInput_6.PERMAR;
	row17.CSTCOM = next_tHashInput_6.CSTCOM;
	row17.CST1 = next_tHashInput_6.CST1;
	row17.CST2 = next_tHashInput_6.CST2;
	row17.RESSA2 = next_tHashInput_6.RESSA2;
	row17.IPISAI = next_tHashInput_6.IPISAI;
	row17.VLRVII = next_tHashInput_6.VLRVII;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfinsert = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfinsert'
copyOfcopyOfcopyOfcopyOfinsert_tmp.NUMDOC = row17.NUMDOC;
copyOfcopyOfcopyOfcopyOfinsert_tmp.NUMPED = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.ESTADO = row17.ESTADO;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CODVEN = row17.CODVEN;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VLRTNF = row17.VLRTNF;
copyOfcopyOfcopyOfcopyOfinsert_tmp.DTASAI = row17.DTASAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CODITE = row17.CODITE;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CODMAR = row17.CODMAR;
copyOfcopyOfcopyOfcopyOfinsert_tmp.DESCRI = row17.DESCRI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.QTDSAI = row17.QTDSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.UNISAI = row17.UNISAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.TOTSAI = row17.TOTSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.ICMSAI = row17.ICMSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.FCPSAI = row17.FCPSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.RETSAI = row17.RETSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.TOTFRE = row17.TOTFRE;
copyOfcopyOfcopyOfcopyOfinsert_tmp.P_CSAI = row17.P_CSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.DIFSAI = row17.DIFSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.LIQSAI2 = row17.LIQSAI2;
copyOfcopyOfcopyOfcopyOfinsert_tmp.TESTE = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.LIQSAI = row17.LIQSAI;
copyOfcopyOfcopyOfcopyOfinsert_tmp.NUMENT = row17.NUMENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.DTAENT = row17.DTAENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.QTDENT = row17.QTDENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CSTENT = row17.CSTENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.TOTENT = row17.TOTENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.ICMENT = row17.ICMENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.RETENT = row17.RETENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.IPIENT = row17.IPIENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.P_CENT = row17.P_CENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.LIQENT = row17.LIQENT;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VAL_ST = row17.VAL_ST;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VAL_OP = row17.VAL_OP;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VALORES = row17.VALORES;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VALCOM = row17.VALCOM;
copyOfcopyOfcopyOfcopyOfinsert_tmp.ICMEN2 = row17.ICMEN2;
copyOfcopyOfcopyOfcopyOfinsert_tmp.RESSAR = row17.RESSAR;
copyOfcopyOfcopyOfcopyOfinsert_tmp.MAROPE = row17.MAROPE;
copyOfcopyOfcopyOfcopyOfinsert_tmp.PERMAR = row17.PERMAR;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CSTCOM = row17.CSTCOM;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CST1 = row17.CST1;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CST2 = row17.CST2;
copyOfcopyOfcopyOfcopyOfinsert_tmp.MAROPE_MG = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.PERMAR_MG = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.RESSA2 = row17.RESSA2 ;
copyOfcopyOfcopyOfcopyOfinsert_tmp.IPISAI = row17.IPISAI ;
copyOfcopyOfcopyOfcopyOfinsert_tmp.VLRVII = row17.VLRVII ;
copyOfcopyOfcopyOfcopyOfinsert_tmp.CODIGO_PRODUTO = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.Name_exp_43 = null;
copyOfcopyOfcopyOfcopyOfinsert_tmp.Name_exp_44 = null;
copyOfcopyOfcopyOfcopyOfinsert = copyOfcopyOfcopyOfcopyOfinsert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfinsert"
if(copyOfcopyOfcopyOfcopyOfinsert != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOfinsert"
						
						);
					}
					
row18 = null;			
if(copyOfcopyOfcopyOfcopyOfinsert.NUMDOC == null){
	finder_tUniqRow_5.NUMDOC = null;
}else{
	finder_tUniqRow_5.NUMDOC = copyOfcopyOfcopyOfcopyOfinsert.NUMDOC.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.NUMPED == null){
	finder_tUniqRow_5.NUMPED = null;
}else{
	finder_tUniqRow_5.NUMPED = copyOfcopyOfcopyOfcopyOfinsert.NUMPED.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.ESTADO == null){
	finder_tUniqRow_5.ESTADO = null;
}else{
	finder_tUniqRow_5.ESTADO = copyOfcopyOfcopyOfcopyOfinsert.ESTADO.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CODVEN == null){
	finder_tUniqRow_5.CODVEN = null;
}else{
	finder_tUniqRow_5.CODVEN = copyOfcopyOfcopyOfcopyOfinsert.CODVEN.toLowerCase();
}
finder_tUniqRow_5.VLRTNF = copyOfcopyOfcopyOfcopyOfinsert.VLRTNF;
finder_tUniqRow_5.DTASAI = copyOfcopyOfcopyOfcopyOfinsert.DTASAI;
if(copyOfcopyOfcopyOfcopyOfinsert.CODITE == null){
	finder_tUniqRow_5.CODITE = null;
}else{
	finder_tUniqRow_5.CODITE = copyOfcopyOfcopyOfcopyOfinsert.CODITE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CODMAR == null){
	finder_tUniqRow_5.CODMAR = null;
}else{
	finder_tUniqRow_5.CODMAR = copyOfcopyOfcopyOfcopyOfinsert.CODMAR.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.DESCRI == null){
	finder_tUniqRow_5.DESCRI = null;
}else{
	finder_tUniqRow_5.DESCRI = copyOfcopyOfcopyOfcopyOfinsert.DESCRI.toLowerCase();
}
finder_tUniqRow_5.QTDSAI = copyOfcopyOfcopyOfcopyOfinsert.QTDSAI;
finder_tUniqRow_5.UNISAI = copyOfcopyOfcopyOfcopyOfinsert.UNISAI;
finder_tUniqRow_5.TOTSAI = copyOfcopyOfcopyOfcopyOfinsert.TOTSAI;
finder_tUniqRow_5.ICMSAI = copyOfcopyOfcopyOfcopyOfinsert.ICMSAI;
finder_tUniqRow_5.FCPSAI = copyOfcopyOfcopyOfcopyOfinsert.FCPSAI;
finder_tUniqRow_5.RETSAI = copyOfcopyOfcopyOfcopyOfinsert.RETSAI;
finder_tUniqRow_5.TOTFRE = copyOfcopyOfcopyOfcopyOfinsert.TOTFRE;
finder_tUniqRow_5.P_CSAI = copyOfcopyOfcopyOfcopyOfinsert.P_CSAI;
finder_tUniqRow_5.DIFSAI = copyOfcopyOfcopyOfcopyOfinsert.DIFSAI;
finder_tUniqRow_5.LIQSAI2 = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI2;
if(copyOfcopyOfcopyOfcopyOfinsert.TESTE == null){
	finder_tUniqRow_5.TESTE = null;
}else{
	finder_tUniqRow_5.TESTE = copyOfcopyOfcopyOfcopyOfinsert.TESTE.toLowerCase();
}
finder_tUniqRow_5.LIQSAI = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI;
if(copyOfcopyOfcopyOfcopyOfinsert.NUMENT == null){
	finder_tUniqRow_5.NUMENT = null;
}else{
	finder_tUniqRow_5.NUMENT = copyOfcopyOfcopyOfcopyOfinsert.NUMENT.toLowerCase();
}
finder_tUniqRow_5.DTAENT = copyOfcopyOfcopyOfcopyOfinsert.DTAENT;
finder_tUniqRow_5.QTDENT = copyOfcopyOfcopyOfcopyOfinsert.QTDENT;
if(copyOfcopyOfcopyOfcopyOfinsert.CSTENT == null){
	finder_tUniqRow_5.CSTENT = null;
}else{
	finder_tUniqRow_5.CSTENT = copyOfcopyOfcopyOfcopyOfinsert.CSTENT.toLowerCase();
}
finder_tUniqRow_5.TOTENT = copyOfcopyOfcopyOfcopyOfinsert.TOTENT;
finder_tUniqRow_5.ICMENT = copyOfcopyOfcopyOfcopyOfinsert.ICMENT;
finder_tUniqRow_5.RETENT = copyOfcopyOfcopyOfcopyOfinsert.RETENT;
finder_tUniqRow_5.IPIENT = copyOfcopyOfcopyOfcopyOfinsert.IPIENT;
finder_tUniqRow_5.P_CENT = copyOfcopyOfcopyOfcopyOfinsert.P_CENT;
finder_tUniqRow_5.LIQENT = copyOfcopyOfcopyOfcopyOfinsert.LIQENT;
finder_tUniqRow_5.VAL_ST = copyOfcopyOfcopyOfcopyOfinsert.VAL_ST;
finder_tUniqRow_5.VAL_OP = copyOfcopyOfcopyOfcopyOfinsert.VAL_OP;
if(copyOfcopyOfcopyOfcopyOfinsert.VALORES == null){
	finder_tUniqRow_5.VALORES = null;
}else{
	finder_tUniqRow_5.VALORES = copyOfcopyOfcopyOfcopyOfinsert.VALORES.toLowerCase();
}
finder_tUniqRow_5.VALCOM = copyOfcopyOfcopyOfcopyOfinsert.VALCOM;
finder_tUniqRow_5.ICMEN2 = copyOfcopyOfcopyOfcopyOfinsert.ICMEN2;
finder_tUniqRow_5.RESSAR = copyOfcopyOfcopyOfcopyOfinsert.RESSAR;
finder_tUniqRow_5.MAROPE = copyOfcopyOfcopyOfcopyOfinsert.MAROPE;
finder_tUniqRow_5.PERMAR = copyOfcopyOfcopyOfcopyOfinsert.PERMAR;
if(copyOfcopyOfcopyOfcopyOfinsert.CSTCOM == null){
	finder_tUniqRow_5.CSTCOM = null;
}else{
	finder_tUniqRow_5.CSTCOM = copyOfcopyOfcopyOfcopyOfinsert.CSTCOM.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CST1 == null){
	finder_tUniqRow_5.CST1 = null;
}else{
	finder_tUniqRow_5.CST1 = copyOfcopyOfcopyOfcopyOfinsert.CST1.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CST2 == null){
	finder_tUniqRow_5.CST2 = null;
}else{
	finder_tUniqRow_5.CST2 = copyOfcopyOfcopyOfcopyOfinsert.CST2.toLowerCase();
}
finder_tUniqRow_5.MAROPE_MG = copyOfcopyOfcopyOfcopyOfinsert.MAROPE_MG;
finder_tUniqRow_5.PERMAR_MG = copyOfcopyOfcopyOfcopyOfinsert.PERMAR_MG;
finder_tUniqRow_5.RESSA2 = copyOfcopyOfcopyOfcopyOfinsert.RESSA2;
finder_tUniqRow_5.IPISAI = copyOfcopyOfcopyOfcopyOfinsert.IPISAI;
finder_tUniqRow_5.VLRVII = copyOfcopyOfcopyOfcopyOfinsert.VLRVII;
if(copyOfcopyOfcopyOfcopyOfinsert.CODIGO_PRODUTO == null){
	finder_tUniqRow_5.CODIGO_PRODUTO = null;
}else{
	finder_tUniqRow_5.CODIGO_PRODUTO = copyOfcopyOfcopyOfcopyOfinsert.CODIGO_PRODUTO.toLowerCase();
}
finder_tUniqRow_5.Name_exp_43 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_43;
finder_tUniqRow_5.Name_exp_44 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_44;	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(copyOfcopyOfcopyOfcopyOfinsert.NUMDOC == null){
	new_tUniqRow_5.NUMDOC = null;
}else{
	new_tUniqRow_5.NUMDOC = copyOfcopyOfcopyOfcopyOfinsert.NUMDOC.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.NUMPED == null){
	new_tUniqRow_5.NUMPED = null;
}else{
	new_tUniqRow_5.NUMPED = copyOfcopyOfcopyOfcopyOfinsert.NUMPED.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.ESTADO == null){
	new_tUniqRow_5.ESTADO = null;
}else{
	new_tUniqRow_5.ESTADO = copyOfcopyOfcopyOfcopyOfinsert.ESTADO.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CODVEN == null){
	new_tUniqRow_5.CODVEN = null;
}else{
	new_tUniqRow_5.CODVEN = copyOfcopyOfcopyOfcopyOfinsert.CODVEN.toLowerCase();
}
new_tUniqRow_5.VLRTNF = copyOfcopyOfcopyOfcopyOfinsert.VLRTNF;
new_tUniqRow_5.DTASAI = copyOfcopyOfcopyOfcopyOfinsert.DTASAI;
if(copyOfcopyOfcopyOfcopyOfinsert.CODITE == null){
	new_tUniqRow_5.CODITE = null;
}else{
	new_tUniqRow_5.CODITE = copyOfcopyOfcopyOfcopyOfinsert.CODITE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CODMAR == null){
	new_tUniqRow_5.CODMAR = null;
}else{
	new_tUniqRow_5.CODMAR = copyOfcopyOfcopyOfcopyOfinsert.CODMAR.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.DESCRI == null){
	new_tUniqRow_5.DESCRI = null;
}else{
	new_tUniqRow_5.DESCRI = copyOfcopyOfcopyOfcopyOfinsert.DESCRI.toLowerCase();
}
new_tUniqRow_5.QTDSAI = copyOfcopyOfcopyOfcopyOfinsert.QTDSAI;
new_tUniqRow_5.UNISAI = copyOfcopyOfcopyOfcopyOfinsert.UNISAI;
new_tUniqRow_5.TOTSAI = copyOfcopyOfcopyOfcopyOfinsert.TOTSAI;
new_tUniqRow_5.ICMSAI = copyOfcopyOfcopyOfcopyOfinsert.ICMSAI;
new_tUniqRow_5.FCPSAI = copyOfcopyOfcopyOfcopyOfinsert.FCPSAI;
new_tUniqRow_5.RETSAI = copyOfcopyOfcopyOfcopyOfinsert.RETSAI;
new_tUniqRow_5.TOTFRE = copyOfcopyOfcopyOfcopyOfinsert.TOTFRE;
new_tUniqRow_5.P_CSAI = copyOfcopyOfcopyOfcopyOfinsert.P_CSAI;
new_tUniqRow_5.DIFSAI = copyOfcopyOfcopyOfcopyOfinsert.DIFSAI;
new_tUniqRow_5.LIQSAI2 = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI2;
if(copyOfcopyOfcopyOfcopyOfinsert.TESTE == null){
	new_tUniqRow_5.TESTE = null;
}else{
	new_tUniqRow_5.TESTE = copyOfcopyOfcopyOfcopyOfinsert.TESTE.toLowerCase();
}
new_tUniqRow_5.LIQSAI = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI;
if(copyOfcopyOfcopyOfcopyOfinsert.NUMENT == null){
	new_tUniqRow_5.NUMENT = null;
}else{
	new_tUniqRow_5.NUMENT = copyOfcopyOfcopyOfcopyOfinsert.NUMENT.toLowerCase();
}
new_tUniqRow_5.DTAENT = copyOfcopyOfcopyOfcopyOfinsert.DTAENT;
new_tUniqRow_5.QTDENT = copyOfcopyOfcopyOfcopyOfinsert.QTDENT;
if(copyOfcopyOfcopyOfcopyOfinsert.CSTENT == null){
	new_tUniqRow_5.CSTENT = null;
}else{
	new_tUniqRow_5.CSTENT = copyOfcopyOfcopyOfcopyOfinsert.CSTENT.toLowerCase();
}
new_tUniqRow_5.TOTENT = copyOfcopyOfcopyOfcopyOfinsert.TOTENT;
new_tUniqRow_5.ICMENT = copyOfcopyOfcopyOfcopyOfinsert.ICMENT;
new_tUniqRow_5.RETENT = copyOfcopyOfcopyOfcopyOfinsert.RETENT;
new_tUniqRow_5.IPIENT = copyOfcopyOfcopyOfcopyOfinsert.IPIENT;
new_tUniqRow_5.P_CENT = copyOfcopyOfcopyOfcopyOfinsert.P_CENT;
new_tUniqRow_5.LIQENT = copyOfcopyOfcopyOfcopyOfinsert.LIQENT;
new_tUniqRow_5.VAL_ST = copyOfcopyOfcopyOfcopyOfinsert.VAL_ST;
new_tUniqRow_5.VAL_OP = copyOfcopyOfcopyOfcopyOfinsert.VAL_OP;
if(copyOfcopyOfcopyOfcopyOfinsert.VALORES == null){
	new_tUniqRow_5.VALORES = null;
}else{
	new_tUniqRow_5.VALORES = copyOfcopyOfcopyOfcopyOfinsert.VALORES.toLowerCase();
}
new_tUniqRow_5.VALCOM = copyOfcopyOfcopyOfcopyOfinsert.VALCOM;
new_tUniqRow_5.ICMEN2 = copyOfcopyOfcopyOfcopyOfinsert.ICMEN2;
new_tUniqRow_5.RESSAR = copyOfcopyOfcopyOfcopyOfinsert.RESSAR;
new_tUniqRow_5.MAROPE = copyOfcopyOfcopyOfcopyOfinsert.MAROPE;
new_tUniqRow_5.PERMAR = copyOfcopyOfcopyOfcopyOfinsert.PERMAR;
if(copyOfcopyOfcopyOfcopyOfinsert.CSTCOM == null){
	new_tUniqRow_5.CSTCOM = null;
}else{
	new_tUniqRow_5.CSTCOM = copyOfcopyOfcopyOfcopyOfinsert.CSTCOM.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CST1 == null){
	new_tUniqRow_5.CST1 = null;
}else{
	new_tUniqRow_5.CST1 = copyOfcopyOfcopyOfcopyOfinsert.CST1.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfinsert.CST2 == null){
	new_tUniqRow_5.CST2 = null;
}else{
	new_tUniqRow_5.CST2 = copyOfcopyOfcopyOfcopyOfinsert.CST2.toLowerCase();
}
new_tUniqRow_5.MAROPE_MG = copyOfcopyOfcopyOfcopyOfinsert.MAROPE_MG;
new_tUniqRow_5.PERMAR_MG = copyOfcopyOfcopyOfcopyOfinsert.PERMAR_MG;
new_tUniqRow_5.RESSA2 = copyOfcopyOfcopyOfcopyOfinsert.RESSA2;
new_tUniqRow_5.IPISAI = copyOfcopyOfcopyOfcopyOfinsert.IPISAI;
new_tUniqRow_5.VLRVII = copyOfcopyOfcopyOfcopyOfinsert.VLRVII;
if(copyOfcopyOfcopyOfcopyOfinsert.CODIGO_PRODUTO == null){
	new_tUniqRow_5.CODIGO_PRODUTO = null;
}else{
	new_tUniqRow_5.CODIGO_PRODUTO = copyOfcopyOfcopyOfcopyOfinsert.CODIGO_PRODUTO.toLowerCase();
}
new_tUniqRow_5.Name_exp_43 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_43;
new_tUniqRow_5.Name_exp_44 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_44;
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row18 == null){ 
	
	row18 = new row18Struct();
}row18.NUMDOC = copyOfcopyOfcopyOfcopyOfinsert.NUMDOC;			row18.NUMPED = copyOfcopyOfcopyOfcopyOfinsert.NUMPED;			row18.ESTADO = copyOfcopyOfcopyOfcopyOfinsert.ESTADO;			row18.CODVEN = copyOfcopyOfcopyOfcopyOfinsert.CODVEN;			row18.VLRTNF = copyOfcopyOfcopyOfcopyOfinsert.VLRTNF;			row18.DTASAI = copyOfcopyOfcopyOfcopyOfinsert.DTASAI;			row18.CODITE = copyOfcopyOfcopyOfcopyOfinsert.CODITE;			row18.CODMAR = copyOfcopyOfcopyOfcopyOfinsert.CODMAR;			row18.DESCRI = copyOfcopyOfcopyOfcopyOfinsert.DESCRI;			row18.QTDSAI = copyOfcopyOfcopyOfcopyOfinsert.QTDSAI;			row18.UNISAI = copyOfcopyOfcopyOfcopyOfinsert.UNISAI;			row18.TOTSAI = copyOfcopyOfcopyOfcopyOfinsert.TOTSAI;			row18.ICMSAI = copyOfcopyOfcopyOfcopyOfinsert.ICMSAI;			row18.FCPSAI = copyOfcopyOfcopyOfcopyOfinsert.FCPSAI;			row18.RETSAI = copyOfcopyOfcopyOfcopyOfinsert.RETSAI;			row18.TOTFRE = copyOfcopyOfcopyOfcopyOfinsert.TOTFRE;			row18.P_CSAI = copyOfcopyOfcopyOfcopyOfinsert.P_CSAI;			row18.DIFSAI = copyOfcopyOfcopyOfcopyOfinsert.DIFSAI;			row18.LIQSAI2 = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI2;			row18.TESTE = copyOfcopyOfcopyOfcopyOfinsert.TESTE;			row18.LIQSAI = copyOfcopyOfcopyOfcopyOfinsert.LIQSAI;			row18.NUMENT = copyOfcopyOfcopyOfcopyOfinsert.NUMENT;			row18.DTAENT = copyOfcopyOfcopyOfcopyOfinsert.DTAENT;			row18.QTDENT = copyOfcopyOfcopyOfcopyOfinsert.QTDENT;			row18.CSTENT = copyOfcopyOfcopyOfcopyOfinsert.CSTENT;			row18.TOTENT = copyOfcopyOfcopyOfcopyOfinsert.TOTENT;			row18.ICMENT = copyOfcopyOfcopyOfcopyOfinsert.ICMENT;			row18.RETENT = copyOfcopyOfcopyOfcopyOfinsert.RETENT;			row18.IPIENT = copyOfcopyOfcopyOfcopyOfinsert.IPIENT;			row18.P_CENT = copyOfcopyOfcopyOfcopyOfinsert.P_CENT;			row18.LIQENT = copyOfcopyOfcopyOfcopyOfinsert.LIQENT;			row18.VAL_ST = copyOfcopyOfcopyOfcopyOfinsert.VAL_ST;			row18.VAL_OP = copyOfcopyOfcopyOfcopyOfinsert.VAL_OP;			row18.VALORES = copyOfcopyOfcopyOfcopyOfinsert.VALORES;			row18.VALCOM = copyOfcopyOfcopyOfcopyOfinsert.VALCOM;			row18.ICMEN2 = copyOfcopyOfcopyOfcopyOfinsert.ICMEN2;			row18.RESSAR = copyOfcopyOfcopyOfcopyOfinsert.RESSAR;			row18.MAROPE = copyOfcopyOfcopyOfcopyOfinsert.MAROPE;			row18.PERMAR = copyOfcopyOfcopyOfcopyOfinsert.PERMAR;			row18.CSTCOM = copyOfcopyOfcopyOfcopyOfinsert.CSTCOM;			row18.CST1 = copyOfcopyOfcopyOfcopyOfinsert.CST1;			row18.CST2 = copyOfcopyOfcopyOfcopyOfinsert.CST2;			row18.MAROPE_MG = copyOfcopyOfcopyOfcopyOfinsert.MAROPE_MG;			row18.PERMAR_MG = copyOfcopyOfcopyOfcopyOfinsert.PERMAR_MG;			row18.RESSA2 = copyOfcopyOfcopyOfcopyOfinsert.RESSA2;			row18.IPISAI = copyOfcopyOfcopyOfcopyOfinsert.IPISAI;			row18.VLRVII = copyOfcopyOfcopyOfcopyOfinsert.VLRVII;			row18.CODIGO_PRODUTO = copyOfcopyOfcopyOfcopyOfinsert.CODIGO_PRODUTO;			row18.Name_exp_43 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_43;			row18.Name_exp_44 = copyOfcopyOfcopyOfcopyOfinsert.Name_exp_44;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";
	
	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(row18.NUMDOC == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, row18.NUMDOC);
}

                    if(row18.CODITE == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(2, row18.CODITE);
}

            int checkCount_tDBOutput_7 = -1;
            try (java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7.executeQuery()) {
                while(rs_tDBOutput_7.next()) {
                    checkCount_tDBOutput_7 = rs_tDBOutput_7.getInt(1);
                }
            }
            if(checkCount_tDBOutput_7 > 0) {
                        if(row18.NUMPED == null) {
pstmtUpdate_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(1, row18.NUMPED);
}

                        if(row18.ESTADO == null) {
pstmtUpdate_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(2, row18.ESTADO);
}

                        if(row18.CODVEN == null) {
pstmtUpdate_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(3, row18.CODVEN);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(4, row18.VLRTNF);

                        if(row18.DTASAI != null) {
pstmtUpdate_tDBOutput_7.setTimestamp(5, new java.sql.Timestamp(row18.DTASAI.getTime()));
} else {
pstmtUpdate_tDBOutput_7.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(row18.CODMAR == null) {
pstmtUpdate_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(6, row18.CODMAR);
}

                        if(row18.DESCRI == null) {
pstmtUpdate_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(7, row18.DESCRI);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(8, row18.QTDSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(9, row18.UNISAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(10, row18.TOTSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(11, row18.ICMSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(12, row18.FCPSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(13, row18.RETSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(14, row18.TOTFRE);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(15, row18.P_CSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(16, row18.DIFSAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(17, row18.LIQSAI2);

                        if(row18.TESTE == null) {
pstmtUpdate_tDBOutput_7.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(18, row18.TESTE);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(19, row18.LIQSAI);

                        if(row18.NUMENT == null) {
pstmtUpdate_tDBOutput_7.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(20, row18.NUMENT);
}

                        if(row18.DTAENT != null) {
pstmtUpdate_tDBOutput_7.setTimestamp(21, new java.sql.Timestamp(row18.DTAENT.getTime()));
} else {
pstmtUpdate_tDBOutput_7.setNull(21, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(22, row18.QTDENT);

                        if(row18.CSTENT == null) {
pstmtUpdate_tDBOutput_7.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(23, row18.CSTENT);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(24, row18.TOTENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(25, row18.ICMENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(26, row18.RETENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(27, row18.IPIENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(28, row18.P_CENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(29, row18.LIQENT);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(30, row18.VAL_ST);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(31, row18.VAL_OP);

                        if(row18.VALORES == null) {
pstmtUpdate_tDBOutput_7.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(32, row18.VALORES);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(33, row18.VALCOM);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(34, row18.ICMEN2);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(35, row18.RESSAR);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(36, row18.MAROPE);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(37, row18.PERMAR);

                        if(row18.CSTCOM == null) {
pstmtUpdate_tDBOutput_7.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(38, row18.CSTCOM);
}

                        if(row18.CST1 == null) {
pstmtUpdate_tDBOutput_7.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(39, row18.CST1);
}

                        if(row18.CST2 == null) {
pstmtUpdate_tDBOutput_7.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(40, row18.CST2);
}

                        pstmtUpdate_tDBOutput_7.setBigDecimal(41, row18.MAROPE_MG);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(42, row18.PERMAR_MG);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(43, row18.RESSA2);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(44, row18.IPISAI);

                        pstmtUpdate_tDBOutput_7.setBigDecimal(45, row18.VLRVII);

                        if(row18.CODIGO_PRODUTO == null) {
pstmtUpdate_tDBOutput_7.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(46, row18.CODIGO_PRODUTO);
}

                        if(row18.Name_exp_43 == null) {
pstmtUpdate_tDBOutput_7.setNull(47, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_7.setInt(47, row18.Name_exp_43);
}

                        if(row18.Name_exp_44 == null) {
pstmtUpdate_tDBOutput_7.setNull(48, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_7.setInt(48, row18.Name_exp_44);
}

                        if(row18.NUMDOC == null) {
pstmtUpdate_tDBOutput_7.setNull(49 + count_tDBOutput_7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(49 + count_tDBOutput_7, row18.NUMDOC);
}

                        if(row18.CODITE == null) {
pstmtUpdate_tDBOutput_7.setNull(50 + count_tDBOutput_7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(50 + count_tDBOutput_7, row18.CODITE);
}

                try {
					
                    int processedCount_tDBOutput_7 = pstmtUpdate_tDBOutput_7.executeUpdate();
                    updatedCount_tDBOutput_7 += processedCount_tDBOutput_7;
                    rowsToCommitCount_tDBOutput_7 += processedCount_tDBOutput_7;
                    nb_line_tDBOutput_7++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_7 = true;
                        nb_line_tDBOutput_7++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row18.NUMDOC == null) {
pstmtInsert_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(1, row18.NUMDOC);
}

                        if(row18.NUMPED == null) {
pstmtInsert_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(2, row18.NUMPED);
}

                        if(row18.ESTADO == null) {
pstmtInsert_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(3, row18.ESTADO);
}

                        if(row18.CODVEN == null) {
pstmtInsert_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(4, row18.CODVEN);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(5, row18.VLRTNF);

                        if(row18.DTASAI != null) {
pstmtInsert_tDBOutput_7.setTimestamp(6, new java.sql.Timestamp(row18.DTASAI.getTime()));
} else {
pstmtInsert_tDBOutput_7.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(row18.CODITE == null) {
pstmtInsert_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(7, row18.CODITE);
}

                        if(row18.CODMAR == null) {
pstmtInsert_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(8, row18.CODMAR);
}

                        if(row18.DESCRI == null) {
pstmtInsert_tDBOutput_7.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(9, row18.DESCRI);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(10, row18.QTDSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(11, row18.UNISAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(12, row18.TOTSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(13, row18.ICMSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(14, row18.FCPSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(15, row18.RETSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(16, row18.TOTFRE);

                        pstmtInsert_tDBOutput_7.setBigDecimal(17, row18.P_CSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(18, row18.DIFSAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(19, row18.LIQSAI2);

                        if(row18.TESTE == null) {
pstmtInsert_tDBOutput_7.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(20, row18.TESTE);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(21, row18.LIQSAI);

                        if(row18.NUMENT == null) {
pstmtInsert_tDBOutput_7.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(22, row18.NUMENT);
}

                        if(row18.DTAENT != null) {
pstmtInsert_tDBOutput_7.setTimestamp(23, new java.sql.Timestamp(row18.DTAENT.getTime()));
} else {
pstmtInsert_tDBOutput_7.setNull(23, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(24, row18.QTDENT);

                        if(row18.CSTENT == null) {
pstmtInsert_tDBOutput_7.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(25, row18.CSTENT);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(26, row18.TOTENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(27, row18.ICMENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(28, row18.RETENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(29, row18.IPIENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(30, row18.P_CENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(31, row18.LIQENT);

                        pstmtInsert_tDBOutput_7.setBigDecimal(32, row18.VAL_ST);

                        pstmtInsert_tDBOutput_7.setBigDecimal(33, row18.VAL_OP);

                        if(row18.VALORES == null) {
pstmtInsert_tDBOutput_7.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(34, row18.VALORES);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(35, row18.VALCOM);

                        pstmtInsert_tDBOutput_7.setBigDecimal(36, row18.ICMEN2);

                        pstmtInsert_tDBOutput_7.setBigDecimal(37, row18.RESSAR);

                        pstmtInsert_tDBOutput_7.setBigDecimal(38, row18.MAROPE);

                        pstmtInsert_tDBOutput_7.setBigDecimal(39, row18.PERMAR);

                        if(row18.CSTCOM == null) {
pstmtInsert_tDBOutput_7.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(40, row18.CSTCOM);
}

                        if(row18.CST1 == null) {
pstmtInsert_tDBOutput_7.setNull(41, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(41, row18.CST1);
}

                        if(row18.CST2 == null) {
pstmtInsert_tDBOutput_7.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(42, row18.CST2);
}

                        pstmtInsert_tDBOutput_7.setBigDecimal(43, row18.MAROPE_MG);

                        pstmtInsert_tDBOutput_7.setBigDecimal(44, row18.PERMAR_MG);

                        pstmtInsert_tDBOutput_7.setBigDecimal(45, row18.RESSA2);

                        pstmtInsert_tDBOutput_7.setBigDecimal(46, row18.IPISAI);

                        pstmtInsert_tDBOutput_7.setBigDecimal(47, row18.VLRVII);

                        if(row18.CODIGO_PRODUTO == null) {
pstmtInsert_tDBOutput_7.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(48, row18.CODIGO_PRODUTO);
}

                        if(row18.Name_exp_43 == null) {
pstmtInsert_tDBOutput_7.setNull(49, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_7.setInt(49, row18.Name_exp_43);
}

                        if(row18.Name_exp_44 == null) {
pstmtInsert_tDBOutput_7.setNull(50, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_7.setInt(50, row18.Name_exp_44);
}

                try {
					
                    int processedCount_tDBOutput_7 = pstmtInsert_tDBOutput_7.executeUpdate();
                    insertedCount_tDBOutput_7 += processedCount_tDBOutput_7;
                    rowsToCommitCount_tDBOutput_7 += processedCount_tDBOutput_7;
                    nb_line_tDBOutput_7++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_7 = true;
                        nb_line_tDBOutput_7++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";
	
	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfinsert"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";
	
	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfinsert");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	



        if(pstmtUpdate_tDBOutput_7 != null){
            pstmtUpdate_tDBOutput_7.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_7");
        }
        if(pstmtInsert_tDBOutput_7 != null){
            pstmtInsert_tDBOutput_7.close();
            resourceMap.remove("pstmtInsert_tDBOutput_7");
        }
        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";
	
	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_7 = null;
                if ((pstmtUpdateToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_7")) != null) {
                    pstmtUpdateToClose_tDBOutput_7.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_7 = null;
                if ((pstmtInsertToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_7")) != null) {
                    pstmtInsertToClose_tDBOutput_7.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_vw_custo_efetivo_mg) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row5Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row6.nm_programa = next_tHashInput_2.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_2.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_2.data_termino_execucao;
	row6.mensagem = next_tHashInput_2.mensagem;
	row6.uuid = next_tHashInput_2.uuid;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_vw_custo_efetivo_mg_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final vw_custo_efetivo_mg vw_custo_efetivo_mgClass = new vw_custo_efetivo_mg();

        int exitCode = vw_custo_efetivo_mgClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = vw_custo_efetivo_mg.class.getClassLoader().getResourceAsStream("palacio_ferramentas/vw_custo_efetivo_mg_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = vw_custo_efetivo_mg.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("dias", "id_Integer");
                        if(context.getStringValue("dias") == null) {
                            context.dias = null;
                        } else {
                            try{
                                context.dias=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dias"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dias", e.getMessage()));
                                context.dias=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("dias")) {
                context.dias = (Integer) parentContextMap.get("dias");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : vw_custo_efetivo_mg");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     537195 characters generated by Talend Open Studio for Big Data 
 *     on the 16 de abril de 2025 16:29:03 BRT
 ************************************************************************************************/