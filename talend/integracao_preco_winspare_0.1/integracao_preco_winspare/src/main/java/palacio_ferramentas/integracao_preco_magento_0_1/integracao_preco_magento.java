// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.integracao_preco_magento_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_3
	//import java.util.List;
import java.math.BigDecimal;
import java.math.RoundingMode;

	//the import part of tJavaRow_2
	//import java.util.List;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.lang.Object;
import java.math.MathContext;


@SuppressWarnings("unused")

/**
 * Job: integracao_preco_magento Purpose: <br>
 * Description:  <br>
 * @author luisll@uol.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class integracao_preco_magento implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(WINSPARE_DB != null){
				
					this.setProperty("WINSPARE_DB", WINSPARE_DB.toString());
				
			}
			
			if(WINSPARE_HOST != null){
				
					this.setProperty("WINSPARE_HOST", WINSPARE_HOST.toString());
				
			}
			
			if(WINSPARE_PORT != null){
				
					this.setProperty("WINSPARE_PORT", WINSPARE_PORT.toString());
				
			}
			
			if(WINSPARE_PWD != null){
				
					this.setProperty("WINSPARE_PWD", WINSPARE_PWD.toString());
				
			}
			
			if(WINSPARE_USER != null){
				
					this.setProperty("WINSPARE_USER", WINSPARE_USER.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String WINSPARE_DB;
public String getWINSPARE_DB(){
	return this.WINSPARE_DB;
}
public String WINSPARE_HOST;
public String getWINSPARE_HOST(){
	return this.WINSPARE_HOST;
}
public String WINSPARE_PORT;
public String getWINSPARE_PORT(){
	return this.WINSPARE_PORT;
}
public String WINSPARE_PWD;
public String getWINSPARE_PWD(){
	return this.WINSPARE_PWD;
}
public String WINSPARE_USER;
public String getWINSPARE_USER(){
	return this.WINSPARE_USER;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "integracao_preco_magento";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				integracao_preco_magento.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(integracao_preco_magento.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";
	
	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "ApplicationName=integracao_preco_winsp";
            String url_tDBConnection_3 = "jdbc:postgresql://"+System.getenv(context.WINSPARE_HOST)+":"+System.getenv(context.WINSPARE_PORT)+"/"+System.getenv(context.WINSPARE_DB);
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = System.getenv(context.WINSPARE_USER);
	
	
		
	final String decryptedPassword_tDBConnection_3 = System.getenv(context.WINSPARE_PWD); 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3","");

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = context.JDBC_PARAMETERS;
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD); 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName=integracao_preco_winsp";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
insert_logStruct insert_log = new insert_logStruct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row15.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row15.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row16 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row16 = new row16Struct();
                                row16.nm_programa = insert_log.nm_programa;
                                row16.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row16.data_termino_execucao = insert_log.data_termino_execucao;
                                row16.mensagem = insert_log.mensagem;
                                row16.uuid = insert_log.uuid;
                                row16.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_5 = new row16Struct();
				
					oneRow_tHashOutput_5.nm_programa = row16.nm_programa;
					oneRow_tHashOutput_5.data_inicio_execucao = row16.data_inicio_execucao;
					oneRow_tHashOutput_5.data_termino_execucao = row16.data_termino_execucao;
					oneRow_tHashOutput_5.mensagem = row16.mensagem;
					oneRow_tHashOutput_5.uuid = row16.uuid;
					oneRow_tHashOutput_5.versao = row16.versao;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return null;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return null;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DWStruct implements routines.system.IPersistableRow<DWStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DWStruct other = (DWStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DWStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(DWStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DWStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);

		row11Struct row11 = new row11Struct();

		row12Struct row12 = new row12Struct();

		row13Struct row13 = new row13Struct();

		row24Struct row24 = new row24Struct();

		row25Struct row25 = new row25Struct();

			row14Struct row14 = new row14Struct();
DWStruct DW = new DWStruct();
row38Struct row38 = new row38Struct();






	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DW");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
DWStruct DW_tmp = new DWStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12","row11","row25","row24","row13");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row11.CD_PRODUTO = next_tHashInput_1.CD_PRODUTO;
	row11.SITUACAO = next_tHashInput_1.SITUACAO;
	row11.VL_ATUAL = next_tHashInput_1.VL_ATUAL;
	row11.VL_ARREDONDAMENTO = next_tHashInput_1.VL_ARREDONDAMENTO;
	row11.VL_ANTERIOR = next_tHashInput_1.VL_ANTERIOR;
	row11.MKTPLACE = next_tHashInput_1.MKTPLACE;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row11"
									
							);
						}
						
//////////
 

// for output
			row14 = new row14Struct();
								
			row14.CD_PRODUTO = row11.CD_PRODUTO;								
			row14.SITUACAO = row11.SITUACAO;								
			row14.VL_ATUAL = row11.VL_ATUAL;								
			row14.VL_ARREDONDAMENTO = row11.VL_ARREDONDAMENTO;								
			row14.VL_ANTERIOR = row11.VL_ANTERIOR;								
			row14.MKTPLACE = row11.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row30HashKey.CD_PRODUTO = row14.CD_PRODUTO ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.CD_PRODUTO = '" + row30HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DW = null;


// # Output table : 'DW'
DW_tmp.CD_PRODUTO = row14.CD_PRODUTO ;
DW_tmp.DT_ULTI_ATUALIZACAO = TalendDate.getCurrentDate();
DW_tmp.VL_ATUAL = row14.VL_ATUAL ;
DW_tmp.VL_ANTERIOR = row14.VL_ANTERIOR ;
DW_tmp.MKTPLACE = row14.MKTPLACE ;
DW_tmp.DC_PRODUTO = row30.DC_PRODUTO ;
DW_tmp.VL_CUSTO = row30.VL_CUSTO ;
DW_tmp.CD_OPERADOR = row30.CD_OPERADOR ;
DW_tmp.NM_OPERADOR = row30.NM_OPERADOR ;
DW_tmp.CD_MARCA = row30.CD_MARCA ;
DW_tmp.DC_MARCA = row30.DC_MARCA ;
DW_tmp.CD_FORNECEDOR = row30.CD_FORNECEDOR ;
DW_tmp.CD_COMPRADOR = row30.CD_COMPRADOR ;
DW_tmp.NM_COMPRADOR = row30.NM_COMPRADOR ;
DW_tmp.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO ;
DW_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
DW = DW_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DW"
if(DW != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DW"
						
						);
					}
					

    //Code generated according to input schema and output schema
row38.CD_PRODUTO = DW.CD_PRODUTO;
row38.DT_ULTI_ATUALIZACAO = DW.DT_ULTI_ATUALIZACAO;
row38.VL_ATUAL = DW.VL_ATUAL.setScale(2,RoundingMode.HALF_EVEN);
row38.VL_ANTERIOR = DW.VL_ANTERIOR.setScale(2,RoundingMode.HALF_EVEN);
row38.MKTPLACE = DW.MKTPLACE;
row38.DC_PRODUTO = DW.DC_PRODUTO;
row38.VL_CUSTO = DW.VL_CUSTO;
row38.CD_OPERADOR = DW.CD_OPERADOR;
row38.NM_OPERADOR = DW.NM_OPERADOR;
row38.CD_MARCA = DW.CD_MARCA;
row38.DC_MARCA = DW.DC_MARCA;
row38.CD_FORNECEDOR = DW.CD_FORNECEDOR;
row38.CD_COMPRADOR = DW.CD_COMPRADOR;
row38.NM_COMPRADOR = DW.NM_COMPRADOR;
row38.VL_ARREDONDAMENTO = DW.VL_ARREDONDAMENTO;
row38.DATA_EXECUCAO = DW.DATA_EXECUCAO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_8 = new row38Struct();
				
					oneRow_tHashOutput_8.CD_PRODUTO = row38.CD_PRODUTO;
					oneRow_tHashOutput_8.DT_ULTI_ATUALIZACAO = row38.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_8.VL_ATUAL = row38.VL_ATUAL;
					oneRow_tHashOutput_8.VL_ANTERIOR = row38.VL_ANTERIOR;
					oneRow_tHashOutput_8.MKTPLACE = row38.MKTPLACE;
					oneRow_tHashOutput_8.DC_PRODUTO = row38.DC_PRODUTO;
					oneRow_tHashOutput_8.VL_CUSTO = row38.VL_CUSTO;
					oneRow_tHashOutput_8.CD_OPERADOR = row38.CD_OPERADOR;
					oneRow_tHashOutput_8.NM_OPERADOR = row38.NM_OPERADOR;
					oneRow_tHashOutput_8.CD_MARCA = row38.CD_MARCA;
					oneRow_tHashOutput_8.DC_MARCA = row38.DC_MARCA;
					oneRow_tHashOutput_8.CD_FORNECEDOR = row38.CD_FORNECEDOR;
					oneRow_tHashOutput_8.CD_COMPRADOR = row38.CD_COMPRADOR;
					oneRow_tHashOutput_8.NM_COMPRADOR = row38.NM_COMPRADOR;
					oneRow_tHashOutput_8.VL_ARREDONDAMENTO = row38.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_8.DATA_EXECUCAO = row38.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "DW"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row7Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row7Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row12.CD_PRODUTO = next_tHashInput_3.CD_PRODUTO;
	row12.SITUACAO = next_tHashInput_3.SITUACAO;
	row12.VL_ATUAL = next_tHashInput_3.VL_ATUAL;
	row12.VL_ARREDONDAMENTO = next_tHashInput_3.VL_ARREDONDAMENTO;
	row12.VL_ANTERIOR = next_tHashInput_3.VL_ANTERIOR;
	row12.MKTPLACE = next_tHashInput_3.MKTPLACE;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row12"
									
							);
						}
						
//////////
 

// for output
			row14 = new row14Struct();
								
			row14.CD_PRODUTO = row12.CD_PRODUTO;								
			row14.SITUACAO = row12.SITUACAO;								
			row14.VL_ATUAL = row12.VL_ATUAL;								
			row14.VL_ARREDONDAMENTO = row12.VL_ARREDONDAMENTO;								
			row14.VL_ANTERIOR = row12.VL_ANTERIOR;								
			row14.MKTPLACE = row12.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row30HashKey.CD_PRODUTO = row14.CD_PRODUTO ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.CD_PRODUTO = '" + row30HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DW = null;


// # Output table : 'DW'
DW_tmp.CD_PRODUTO = row14.CD_PRODUTO ;
DW_tmp.DT_ULTI_ATUALIZACAO = TalendDate.getCurrentDate();
DW_tmp.VL_ATUAL = row14.VL_ATUAL ;
DW_tmp.VL_ANTERIOR = row14.VL_ANTERIOR ;
DW_tmp.MKTPLACE = row14.MKTPLACE ;
DW_tmp.DC_PRODUTO = row30.DC_PRODUTO ;
DW_tmp.VL_CUSTO = row30.VL_CUSTO ;
DW_tmp.CD_OPERADOR = row30.CD_OPERADOR ;
DW_tmp.NM_OPERADOR = row30.NM_OPERADOR ;
DW_tmp.CD_MARCA = row30.CD_MARCA ;
DW_tmp.DC_MARCA = row30.DC_MARCA ;
DW_tmp.CD_FORNECEDOR = row30.CD_FORNECEDOR ;
DW_tmp.CD_COMPRADOR = row30.CD_COMPRADOR ;
DW_tmp.NM_COMPRADOR = row30.NM_COMPRADOR ;
DW_tmp.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO ;
DW_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
DW = DW_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DW"
if(DW != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DW"
						
						);
					}
					

    //Code generated according to input schema and output schema
row38.CD_PRODUTO = DW.CD_PRODUTO;
row38.DT_ULTI_ATUALIZACAO = DW.DT_ULTI_ATUALIZACAO;
row38.VL_ATUAL = DW.VL_ATUAL.setScale(2,RoundingMode.HALF_EVEN);
row38.VL_ANTERIOR = DW.VL_ANTERIOR.setScale(2,RoundingMode.HALF_EVEN);
row38.MKTPLACE = DW.MKTPLACE;
row38.DC_PRODUTO = DW.DC_PRODUTO;
row38.VL_CUSTO = DW.VL_CUSTO;
row38.CD_OPERADOR = DW.CD_OPERADOR;
row38.NM_OPERADOR = DW.NM_OPERADOR;
row38.CD_MARCA = DW.CD_MARCA;
row38.DC_MARCA = DW.DC_MARCA;
row38.CD_FORNECEDOR = DW.CD_FORNECEDOR;
row38.CD_COMPRADOR = DW.CD_COMPRADOR;
row38.NM_COMPRADOR = DW.NM_COMPRADOR;
row38.VL_ARREDONDAMENTO = DW.VL_ARREDONDAMENTO;
row38.DATA_EXECUCAO = DW.DATA_EXECUCAO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_8 = new row38Struct();
				
					oneRow_tHashOutput_8.CD_PRODUTO = row38.CD_PRODUTO;
					oneRow_tHashOutput_8.DT_ULTI_ATUALIZACAO = row38.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_8.VL_ATUAL = row38.VL_ATUAL;
					oneRow_tHashOutput_8.VL_ANTERIOR = row38.VL_ANTERIOR;
					oneRow_tHashOutput_8.MKTPLACE = row38.MKTPLACE;
					oneRow_tHashOutput_8.DC_PRODUTO = row38.DC_PRODUTO;
					oneRow_tHashOutput_8.VL_CUSTO = row38.VL_CUSTO;
					oneRow_tHashOutput_8.CD_OPERADOR = row38.CD_OPERADOR;
					oneRow_tHashOutput_8.NM_OPERADOR = row38.NM_OPERADOR;
					oneRow_tHashOutput_8.CD_MARCA = row38.CD_MARCA;
					oneRow_tHashOutput_8.DC_MARCA = row38.DC_MARCA;
					oneRow_tHashOutput_8.CD_FORNECEDOR = row38.CD_FORNECEDOR;
					oneRow_tHashOutput_8.CD_COMPRADOR = row38.CD_COMPRADOR;
					oneRow_tHashOutput_8.NM_COMPRADOR = row38.NM_COMPRADOR;
					oneRow_tHashOutput_8.VL_ARREDONDAMENTO = row38.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_8.DATA_EXECUCAO = row38.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "DW"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row10Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row13.CD_PRODUTO = next_tHashInput_2.CD_PRODUTO;
	row13.SITUACAO = next_tHashInput_2.SITUACAO;
	row13.VL_ATUAL = next_tHashInput_2.VL_ATUAL;
	row13.VL_ARREDONDAMENTO = next_tHashInput_2.VL_ARREDONDAMENTO;
	row13.VL_ANTERIOR = next_tHashInput_2.VL_ANTERIOR;
	row13.MKTPLACE = next_tHashInput_2.MKTPLACE;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row13"
									
							);
						}
						
//////////
 

// for output
			row14 = new row14Struct();
								
			row14.CD_PRODUTO = row13.CD_PRODUTO;								
			row14.SITUACAO = row13.SITUACAO;								
			row14.VL_ATUAL = row13.VL_ATUAL;								
			row14.VL_ARREDONDAMENTO = row13.VL_ARREDONDAMENTO;								
			row14.VL_ANTERIOR = row13.VL_ANTERIOR;								
			row14.MKTPLACE = row13.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row30HashKey.CD_PRODUTO = row14.CD_PRODUTO ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.CD_PRODUTO = '" + row30HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DW = null;


// # Output table : 'DW'
DW_tmp.CD_PRODUTO = row14.CD_PRODUTO ;
DW_tmp.DT_ULTI_ATUALIZACAO = TalendDate.getCurrentDate();
DW_tmp.VL_ATUAL = row14.VL_ATUAL ;
DW_tmp.VL_ANTERIOR = row14.VL_ANTERIOR ;
DW_tmp.MKTPLACE = row14.MKTPLACE ;
DW_tmp.DC_PRODUTO = row30.DC_PRODUTO ;
DW_tmp.VL_CUSTO = row30.VL_CUSTO ;
DW_tmp.CD_OPERADOR = row30.CD_OPERADOR ;
DW_tmp.NM_OPERADOR = row30.NM_OPERADOR ;
DW_tmp.CD_MARCA = row30.CD_MARCA ;
DW_tmp.DC_MARCA = row30.DC_MARCA ;
DW_tmp.CD_FORNECEDOR = row30.CD_FORNECEDOR ;
DW_tmp.CD_COMPRADOR = row30.CD_COMPRADOR ;
DW_tmp.NM_COMPRADOR = row30.NM_COMPRADOR ;
DW_tmp.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO ;
DW_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
DW = DW_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DW"
if(DW != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DW"
						
						);
					}
					

    //Code generated according to input schema and output schema
row38.CD_PRODUTO = DW.CD_PRODUTO;
row38.DT_ULTI_ATUALIZACAO = DW.DT_ULTI_ATUALIZACAO;
row38.VL_ATUAL = DW.VL_ATUAL.setScale(2,RoundingMode.HALF_EVEN);
row38.VL_ANTERIOR = DW.VL_ANTERIOR.setScale(2,RoundingMode.HALF_EVEN);
row38.MKTPLACE = DW.MKTPLACE;
row38.DC_PRODUTO = DW.DC_PRODUTO;
row38.VL_CUSTO = DW.VL_CUSTO;
row38.CD_OPERADOR = DW.CD_OPERADOR;
row38.NM_OPERADOR = DW.NM_OPERADOR;
row38.CD_MARCA = DW.CD_MARCA;
row38.DC_MARCA = DW.DC_MARCA;
row38.CD_FORNECEDOR = DW.CD_FORNECEDOR;
row38.CD_COMPRADOR = DW.CD_COMPRADOR;
row38.NM_COMPRADOR = DW.NM_COMPRADOR;
row38.VL_ARREDONDAMENTO = DW.VL_ARREDONDAMENTO;
row38.DATA_EXECUCAO = DW.DATA_EXECUCAO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_8 = new row38Struct();
				
					oneRow_tHashOutput_8.CD_PRODUTO = row38.CD_PRODUTO;
					oneRow_tHashOutput_8.DT_ULTI_ATUALIZACAO = row38.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_8.VL_ATUAL = row38.VL_ATUAL;
					oneRow_tHashOutput_8.VL_ANTERIOR = row38.VL_ANTERIOR;
					oneRow_tHashOutput_8.MKTPLACE = row38.MKTPLACE;
					oneRow_tHashOutput_8.DC_PRODUTO = row38.DC_PRODUTO;
					oneRow_tHashOutput_8.VL_CUSTO = row38.VL_CUSTO;
					oneRow_tHashOutput_8.CD_OPERADOR = row38.CD_OPERADOR;
					oneRow_tHashOutput_8.NM_OPERADOR = row38.NM_OPERADOR;
					oneRow_tHashOutput_8.CD_MARCA = row38.CD_MARCA;
					oneRow_tHashOutput_8.DC_MARCA = row38.DC_MARCA;
					oneRow_tHashOutput_8.CD_FORNECEDOR = row38.CD_FORNECEDOR;
					oneRow_tHashOutput_8.CD_COMPRADOR = row38.CD_COMPRADOR;
					oneRow_tHashOutput_8.NM_COMPRADOR = row38.NM_COMPRADOR;
					oneRow_tHashOutput_8.VL_ARREDONDAMENTO = row38.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_8.DATA_EXECUCAO = row38.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "DW"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfout1Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfcopyOfcopyOfout1Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    copyOfcopyOfcopyOfout1Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row24.CD_PRODUTO = next_tHashInput_6.CD_PRODUTO;
	row24.SITUACAO = next_tHashInput_6.SITUACAO;
	row24.VL_ATUAL = next_tHashInput_6.VL_ATUAL;
	row24.VL_ARREDONDAMENTO = next_tHashInput_6.VL_ARREDONDAMENTO;
	row24.VL_ANTERIOR = next_tHashInput_6.VL_ANTERIOR;
	row24.MKTPLACE = next_tHashInput_6.MKTPLACE;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row24"
									
							);
						}
						
//////////
 

// for output
			row14 = new row14Struct();
								
			row14.CD_PRODUTO = row24.CD_PRODUTO;								
			row14.SITUACAO = row24.SITUACAO;								
			row14.VL_ATUAL = row24.VL_ATUAL;								
			row14.VL_ARREDONDAMENTO = row24.VL_ARREDONDAMENTO;								
			row14.VL_ANTERIOR = row24.VL_ANTERIOR;								
			row14.MKTPLACE = row24.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row30HashKey.CD_PRODUTO = row14.CD_PRODUTO ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.CD_PRODUTO = '" + row30HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DW = null;


// # Output table : 'DW'
DW_tmp.CD_PRODUTO = row14.CD_PRODUTO ;
DW_tmp.DT_ULTI_ATUALIZACAO = TalendDate.getCurrentDate();
DW_tmp.VL_ATUAL = row14.VL_ATUAL ;
DW_tmp.VL_ANTERIOR = row14.VL_ANTERIOR ;
DW_tmp.MKTPLACE = row14.MKTPLACE ;
DW_tmp.DC_PRODUTO = row30.DC_PRODUTO ;
DW_tmp.VL_CUSTO = row30.VL_CUSTO ;
DW_tmp.CD_OPERADOR = row30.CD_OPERADOR ;
DW_tmp.NM_OPERADOR = row30.NM_OPERADOR ;
DW_tmp.CD_MARCA = row30.CD_MARCA ;
DW_tmp.DC_MARCA = row30.DC_MARCA ;
DW_tmp.CD_FORNECEDOR = row30.CD_FORNECEDOR ;
DW_tmp.CD_COMPRADOR = row30.CD_COMPRADOR ;
DW_tmp.NM_COMPRADOR = row30.NM_COMPRADOR ;
DW_tmp.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO ;
DW_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
DW = DW_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DW"
if(DW != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DW"
						
						);
					}
					

    //Code generated according to input schema and output schema
row38.CD_PRODUTO = DW.CD_PRODUTO;
row38.DT_ULTI_ATUALIZACAO = DW.DT_ULTI_ATUALIZACAO;
row38.VL_ATUAL = DW.VL_ATUAL.setScale(2,RoundingMode.HALF_EVEN);
row38.VL_ANTERIOR = DW.VL_ANTERIOR.setScale(2,RoundingMode.HALF_EVEN);
row38.MKTPLACE = DW.MKTPLACE;
row38.DC_PRODUTO = DW.DC_PRODUTO;
row38.VL_CUSTO = DW.VL_CUSTO;
row38.CD_OPERADOR = DW.CD_OPERADOR;
row38.NM_OPERADOR = DW.NM_OPERADOR;
row38.CD_MARCA = DW.CD_MARCA;
row38.DC_MARCA = DW.DC_MARCA;
row38.CD_FORNECEDOR = DW.CD_FORNECEDOR;
row38.CD_COMPRADOR = DW.CD_COMPRADOR;
row38.NM_COMPRADOR = DW.NM_COMPRADOR;
row38.VL_ARREDONDAMENTO = DW.VL_ARREDONDAMENTO;
row38.DATA_EXECUCAO = DW.DATA_EXECUCAO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_8 = new row38Struct();
				
					oneRow_tHashOutput_8.CD_PRODUTO = row38.CD_PRODUTO;
					oneRow_tHashOutput_8.DT_ULTI_ATUALIZACAO = row38.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_8.VL_ATUAL = row38.VL_ATUAL;
					oneRow_tHashOutput_8.VL_ANTERIOR = row38.VL_ANTERIOR;
					oneRow_tHashOutput_8.MKTPLACE = row38.MKTPLACE;
					oneRow_tHashOutput_8.DC_PRODUTO = row38.DC_PRODUTO;
					oneRow_tHashOutput_8.VL_CUSTO = row38.VL_CUSTO;
					oneRow_tHashOutput_8.CD_OPERADOR = row38.CD_OPERADOR;
					oneRow_tHashOutput_8.NM_OPERADOR = row38.NM_OPERADOR;
					oneRow_tHashOutput_8.CD_MARCA = row38.CD_MARCA;
					oneRow_tHashOutput_8.DC_MARCA = row38.DC_MARCA;
					oneRow_tHashOutput_8.CD_FORNECEDOR = row38.CD_FORNECEDOR;
					oneRow_tHashOutput_8.CD_COMPRADOR = row38.CD_COMPRADOR;
					oneRow_tHashOutput_8.NM_COMPRADOR = row38.NM_COMPRADOR;
					oneRow_tHashOutput_8.VL_ARREDONDAMENTO = row38.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_8.DATA_EXECUCAO = row38.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "DW"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */
	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfcopyOfout1Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfcopyOfcopyOfcopyOfout1Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    copyOfcopyOfcopyOfcopyOfout1Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row25.CD_PRODUTO = next_tHashInput_7.CD_PRODUTO;
	row25.SITUACAO = next_tHashInput_7.SITUACAO;
	row25.VL_ATUAL = next_tHashInput_7.VL_ATUAL;
	row25.VL_ARREDONDAMENTO = next_tHashInput_7.VL_ARREDONDAMENTO;
	row25.VL_ANTERIOR = next_tHashInput_7.VL_ANTERIOR;
	row25.MKTPLACE = next_tHashInput_7.MKTPLACE;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row25"
									
							);
						}
						
//////////
 

// for output
			row14 = new row14Struct();
								
			row14.CD_PRODUTO = row25.CD_PRODUTO;								
			row14.SITUACAO = row25.SITUACAO;								
			row14.VL_ATUAL = row25.VL_ATUAL;								
			row14.VL_ARREDONDAMENTO = row25.VL_ARREDONDAMENTO;								
			row14.VL_ANTERIOR = row25.VL_ANTERIOR;								
			row14.MKTPLACE = row25.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row30HashKey.CD_PRODUTO = row14.CD_PRODUTO ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.CD_PRODUTO = '" + row30HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DW = null;


// # Output table : 'DW'
DW_tmp.CD_PRODUTO = row14.CD_PRODUTO ;
DW_tmp.DT_ULTI_ATUALIZACAO = TalendDate.getCurrentDate();
DW_tmp.VL_ATUAL = row14.VL_ATUAL ;
DW_tmp.VL_ANTERIOR = row14.VL_ANTERIOR ;
DW_tmp.MKTPLACE = row14.MKTPLACE ;
DW_tmp.DC_PRODUTO = row30.DC_PRODUTO ;
DW_tmp.VL_CUSTO = row30.VL_CUSTO ;
DW_tmp.CD_OPERADOR = row30.CD_OPERADOR ;
DW_tmp.NM_OPERADOR = row30.NM_OPERADOR ;
DW_tmp.CD_MARCA = row30.CD_MARCA ;
DW_tmp.DC_MARCA = row30.DC_MARCA ;
DW_tmp.CD_FORNECEDOR = row30.CD_FORNECEDOR ;
DW_tmp.CD_COMPRADOR = row30.CD_COMPRADOR ;
DW_tmp.NM_COMPRADOR = row30.NM_COMPRADOR ;
DW_tmp.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO ;
DW_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
DW = DW_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DW"
if(DW != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DW"
						
						);
					}
					

    //Code generated according to input schema and output schema
row38.CD_PRODUTO = DW.CD_PRODUTO;
row38.DT_ULTI_ATUALIZACAO = DW.DT_ULTI_ATUALIZACAO;
row38.VL_ATUAL = DW.VL_ATUAL.setScale(2,RoundingMode.HALF_EVEN);
row38.VL_ANTERIOR = DW.VL_ANTERIOR.setScale(2,RoundingMode.HALF_EVEN);
row38.MKTPLACE = DW.MKTPLACE;
row38.DC_PRODUTO = DW.DC_PRODUTO;
row38.VL_CUSTO = DW.VL_CUSTO;
row38.CD_OPERADOR = DW.CD_OPERADOR;
row38.NM_OPERADOR = DW.NM_OPERADOR;
row38.CD_MARCA = DW.CD_MARCA;
row38.DC_MARCA = DW.DC_MARCA;
row38.CD_FORNECEDOR = DW.CD_FORNECEDOR;
row38.CD_COMPRADOR = DW.CD_COMPRADOR;
row38.NM_COMPRADOR = DW.NM_COMPRADOR;
row38.VL_ARREDONDAMENTO = DW.VL_ARREDONDAMENTO;
row38.DATA_EXECUCAO = DW.DATA_EXECUCAO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_8 = new row38Struct();
				
					oneRow_tHashOutput_8.CD_PRODUTO = row38.CD_PRODUTO;
					oneRow_tHashOutput_8.DT_ULTI_ATUALIZACAO = row38.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_8.VL_ATUAL = row38.VL_ATUAL;
					oneRow_tHashOutput_8.VL_ANTERIOR = row38.VL_ANTERIOR;
					oneRow_tHashOutput_8.MKTPLACE = row38.MKTPLACE;
					oneRow_tHashOutput_8.DC_PRODUTO = row38.DC_PRODUTO;
					oneRow_tHashOutput_8.VL_CUSTO = row38.VL_CUSTO;
					oneRow_tHashOutput_8.CD_OPERADOR = row38.CD_OPERADOR;
					oneRow_tHashOutput_8.NM_OPERADOR = row38.NM_OPERADOR;
					oneRow_tHashOutput_8.CD_MARCA = row38.CD_MARCA;
					oneRow_tHashOutput_8.DC_MARCA = row38.DC_MARCA;
					oneRow_tHashOutput_8.CD_FORNECEDOR = row38.CD_FORNECEDOR;
					oneRow_tHashOutput_8.CD_COMPRADOR = row38.CD_COMPRADOR;
					oneRow_tHashOutput_8.NM_COMPRADOR = row38.NM_COMPRADOR;
					oneRow_tHashOutput_8.VL_ARREDONDAMENTO = row38.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_8.DATA_EXECUCAO = row38.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "DW"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12","row11","row25","row24","row13");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DW");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tHashInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row43Struct other = (row43Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row43Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(row43Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saida2Struct implements routines.system.IPersistableRow<saida2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saida2Struct other = (saida2Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saida2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(saida2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saida2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return null;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return null;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_13Struct implements routines.system.IPersistableRow<after_tHashInput_13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return null;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return null;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_13Struct other = (after_tHashInput_13Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_13Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(after_tHashInput_13Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_10Process(globalMap);

		row46Struct row46 = new row46Struct();
saida2Struct saida2 = new saida2Struct();
row43Struct row43 = new row43Struct();






	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row43Struct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row43Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;

 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
saida2Struct saida2_tmp = new saida2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";
	
	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row38Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row38Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row46.CD_PRODUTO = next_tHashInput_13.CD_PRODUTO;
	row46.DT_ULTI_ATUALIZACAO = next_tHashInput_13.DT_ULTI_ATUALIZACAO;
	row46.VL_ATUAL = next_tHashInput_13.VL_ATUAL;
	row46.VL_ANTERIOR = next_tHashInput_13.VL_ANTERIOR;
	row46.MKTPLACE = next_tHashInput_13.MKTPLACE;
	row46.DC_PRODUTO = next_tHashInput_13.DC_PRODUTO;
	row46.VL_CUSTO = next_tHashInput_13.VL_CUSTO;
	row46.CD_OPERADOR = next_tHashInput_13.CD_OPERADOR;
	row46.NM_OPERADOR = next_tHashInput_13.NM_OPERADOR;
	row46.CD_MARCA = next_tHashInput_13.CD_MARCA;
	row46.DC_MARCA = next_tHashInput_13.DC_MARCA;
	row46.CD_FORNECEDOR = next_tHashInput_13.CD_FORNECEDOR;
	row46.CD_COMPRADOR = next_tHashInput_13.CD_COMPRADOR;
	row46.NM_COMPRADOR = next_tHashInput_13.NM_COMPRADOR;
	row46.VL_ARREDONDAMENTO = next_tHashInput_13.VL_ARREDONDAMENTO;
	row46.DATA_EXECUCAO = next_tHashInput_13.DATA_EXECUCAO;

 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row33Struct row33 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row33HashKey.CD_PRODUTO = row46.CD_PRODUTO ;
                        		    		
                        		    		    row33HashKey.VL_ATUAL = row46.VL_ATUAL;
                        		    		
                        		    		    row33HashKey.MKTPLACE = row46.MKTPLACE ;
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
	
		  								forceLooprow33 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow33 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row33 != null && tHash_Lookup_row33.hasNext()) || forceLooprow33) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row33'
									
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								
								if(!forceLooprow33) { // G 46
								
							
								 
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow33 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

saida2 = null;

if(!rejectedInnerJoin_tMap_11 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'saida2'
// # Filter conditions 
if( rejectedInnerJoin_tMap_11 ) {
saida2_tmp.CD_PRODUTO = row46.CD_PRODUTO;
saida2_tmp.DT_ULTI_ATUALIZACAO = row46.DT_ULTI_ATUALIZACAO;
saida2_tmp.VL_ATUAL = row46.VL_ATUAL;
saida2_tmp.VL_ANTERIOR = row46.VL_ANTERIOR;
saida2_tmp.MKTPLACE = row46.MKTPLACE;
saida2_tmp.DC_PRODUTO = row46.DC_PRODUTO;
saida2_tmp.VL_CUSTO = row46.VL_CUSTO;
saida2_tmp.CD_OPERADOR = row46.CD_OPERADOR;
saida2_tmp.NM_OPERADOR = row46.NM_OPERADOR;
saida2_tmp.CD_MARCA = row46.CD_MARCA;
saida2_tmp.DC_MARCA = row46.DC_MARCA;
saida2_tmp.CD_FORNECEDOR = row46.CD_FORNECEDOR;
saida2_tmp.CD_COMPRADOR = row46.CD_COMPRADOR;
saida2_tmp.NM_COMPRADOR = row46.NM_COMPRADOR;
saida2_tmp.VL_ARREDONDAMENTO = row46.VL_ARREDONDAMENTO;
saida2_tmp.DATA_EXECUCAO = row46.DATA_EXECUCAO;
saida2 = saida2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "saida2"
if(saida2 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"saida2"
						
						);
					}
					

    //Code generated according to input schema and output schema
row43.CD_PRODUTO = saida2.CD_PRODUTO;
row43.DT_ULTI_ATUALIZACAO = saida2.DT_ULTI_ATUALIZACAO;
row43.VL_ATUAL = saida2.VL_ATUAL;
row43.VL_ANTERIOR = saida2.VL_ANTERIOR;
row43.MKTPLACE = saida2.MKTPLACE;
row43.DC_PRODUTO = saida2.DC_PRODUTO;
row43.VL_CUSTO = saida2.VL_CUSTO;
row43.CD_OPERADOR = saida2.CD_OPERADOR;
row43.NM_OPERADOR = saida2.NM_OPERADOR;
row43.CD_MARCA = saida2.CD_MARCA;
row43.DC_MARCA = saida2.DC_MARCA;
row43.CD_FORNECEDOR = saida2.CD_FORNECEDOR;
row43.CD_COMPRADOR = saida2.CD_COMPRADOR;
row43.NM_COMPRADOR = saida2.NM_COMPRADOR;
row43.VL_ARREDONDAMENTO = saida2.VL_ARREDONDAMENTO;
row43.DATA_EXECUCAO = saida2.DATA_EXECUCAO;


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					



    
		row43Struct oneRow_tHashOutput_12 = new row43Struct();
				
					oneRow_tHashOutput_12.CD_PRODUTO = row43.CD_PRODUTO;
					oneRow_tHashOutput_12.DT_ULTI_ATUALIZACAO = row43.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_12.VL_ATUAL = row43.VL_ATUAL;
					oneRow_tHashOutput_12.VL_ANTERIOR = row43.VL_ANTERIOR;
					oneRow_tHashOutput_12.MKTPLACE = row43.MKTPLACE;
					oneRow_tHashOutput_12.DC_PRODUTO = row43.DC_PRODUTO;
					oneRow_tHashOutput_12.VL_CUSTO = row43.VL_CUSTO;
					oneRow_tHashOutput_12.CD_OPERADOR = row43.CD_OPERADOR;
					oneRow_tHashOutput_12.NM_OPERADOR = row43.NM_OPERADOR;
					oneRow_tHashOutput_12.CD_MARCA = row43.CD_MARCA;
					oneRow_tHashOutput_12.DC_MARCA = row43.DC_MARCA;
					oneRow_tHashOutput_12.CD_FORNECEDOR = row43.CD_FORNECEDOR;
					oneRow_tHashOutput_12.CD_COMPRADOR = row43.CD_COMPRADOR;
					oneRow_tHashOutput_12.NM_COMPRADOR = row43.NM_COMPRADOR;
					oneRow_tHashOutput_12.VL_ARREDONDAMENTO = row43.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_12.DATA_EXECUCAO = row43.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;

 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "saida2"



	
		} // close loop of lookup 'row33' // G_TM_M_043
	
	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tHashInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class WinspareStruct implements routines.system.IPersistableRow<WinspareStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final WinspareStruct other = (WinspareStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(WinspareStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(WinspareStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(WinspareStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Insert_dwStruct implements routines.system.IPersistableRow<Insert_dwStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Insert_dwStruct other = (Insert_dwStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.DT_ULTI_ATUALIZACAO == null) {
							if (other.DT_ULTI_ATUALIZACAO != null)
								return false;
						
						} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Insert_dwStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.VL_ARREDONDAMENTO = this.VL_ARREDONDAMENTO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(Insert_dwStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Insert_dwStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DT_ULTI_ATUALIZACAO, other.DT_ULTI_ATUALIZACAO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return true;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return null;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return null;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();
WinspareStruct Winspare = new WinspareStruct();
Insert_dwStruct Insert_dw = new Insert_dwStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Winspare");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("product_price").toLowerCase();
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("product_price").toLowerCase();
}


int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	



int count_tDBOutput_5=0;
            try (java.sql.Statement stmtClear_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                stmtClear_tDBOutput_5.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_5 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_5 = new java.lang.StringBuilder();
        sb_tDBOutput_5.append("INSERT INTO \"").append(tableName_tDBOutput_5).append("\" (\"cd_produto\",\"vl_atual\",\"vl_arredondamento\",\"vl_anterior\",\"mktplace\",\"data_execucao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_5 = sb_tDBOutput_5.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert_dw");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("product_price").toLowerCase();
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("product_price").toLowerCase();
}


int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_6=0;
        java.lang.StringBuilder sb_tDBOutput_6 = new java.lang.StringBuilder();
        sb_tDBOutput_6.append("INSERT INTO \"").append(tableName_tDBOutput_6).append("\" (\"cd_produto\",\"dt_ulti_atualizacao\",\"vl_atual\",\"vl_anterior\",\"mktplace\",\"dc_produto\",\"vl_custo\",\"cd_operador\",\"nm_operador\",\"cd_marca\",\"dc_marca\",\"cd_fornecedor\",\"cd_comprador\",\"nm_comprador\",\"vl_arredondamento\",\"data_execucao\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_6 = sb_tDBOutput_6.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
WinspareStruct Winspare_tmp = new WinspareStruct();
Insert_dwStruct Insert_dw_tmp = new Insert_dwStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row43Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row43Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row43Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row48.CD_PRODUTO = next_tHashInput_11.CD_PRODUTO;
	row48.DT_ULTI_ATUALIZACAO = next_tHashInput_11.DT_ULTI_ATUALIZACAO;
	row48.VL_ATUAL = next_tHashInput_11.VL_ATUAL;
	row48.VL_ANTERIOR = next_tHashInput_11.VL_ANTERIOR;
	row48.MKTPLACE = next_tHashInput_11.MKTPLACE;
	row48.DC_PRODUTO = next_tHashInput_11.DC_PRODUTO;
	row48.VL_CUSTO = next_tHashInput_11.VL_CUSTO;
	row48.CD_OPERADOR = next_tHashInput_11.CD_OPERADOR;
	row48.NM_OPERADOR = next_tHashInput_11.NM_OPERADOR;
	row48.CD_MARCA = next_tHashInput_11.CD_MARCA;
	row48.DC_MARCA = next_tHashInput_11.DC_MARCA;
	row48.CD_FORNECEDOR = next_tHashInput_11.CD_FORNECEDOR;
	row48.CD_COMPRADOR = next_tHashInput_11.CD_COMPRADOR;
	row48.NM_COMPRADOR = next_tHashInput_11.NM_COMPRADOR;
	row48.VL_ARREDONDAMENTO = next_tHashInput_11.VL_ARREDONDAMENTO;
	row48.DATA_EXECUCAO = next_tHashInput_11.DATA_EXECUCAO;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

Winspare = null;
Insert_dw = null;


// # Output table : 'Winspare'
Winspare_tmp.CD_PRODUTO = row48.CD_PRODUTO;
Winspare_tmp.VL_ATUAL = row48.VL_ATUAL;
Winspare_tmp.VL_ARREDONDAMENTO = row48.VL_ARREDONDAMENTO;
Winspare_tmp.VL_ANTERIOR = row48.VL_ANTERIOR;
Winspare_tmp.MKTPLACE = row48.MKTPLACE;
Winspare_tmp.DATA_EXECUCAO = row48.DATA_EXECUCAO;
Winspare = Winspare_tmp;

// # Output table : 'Insert_dw'
Insert_dw_tmp.CD_PRODUTO = row48.CD_PRODUTO;
Insert_dw_tmp.DT_ULTI_ATUALIZACAO = row48.DT_ULTI_ATUALIZACAO;
Insert_dw_tmp.VL_ATUAL = row48.VL_ATUAL;
Insert_dw_tmp.VL_ANTERIOR = row48.VL_ANTERIOR;
Insert_dw_tmp.MKTPLACE = row48.MKTPLACE;
Insert_dw_tmp.DC_PRODUTO = row48.DC_PRODUTO;
Insert_dw_tmp.VL_CUSTO = row48.VL_CUSTO;
Insert_dw_tmp.CD_OPERADOR = row48.CD_OPERADOR;
Insert_dw_tmp.NM_OPERADOR = row48.NM_OPERADOR;
Insert_dw_tmp.CD_MARCA = row48.CD_MARCA;
Insert_dw_tmp.DC_MARCA = row48.DC_MARCA;
Insert_dw_tmp.CD_FORNECEDOR = row48.CD_FORNECEDOR;
Insert_dw_tmp.CD_COMPRADOR = row48.CD_COMPRADOR;
Insert_dw_tmp.NM_COMPRADOR = row48.NM_COMPRADOR;
Insert_dw_tmp.VL_ARREDONDAMENTO = row48.VL_ARREDONDAMENTO;
Insert_dw_tmp.DATA_EXECUCAO = row48.DATA_EXECUCAO;
Insert_dw = Insert_dw_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "Winspare"
if(Winspare != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Winspare"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(Winspare.CD_PRODUTO == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, Winspare.CD_PRODUTO);
}

                    pstmt_tDBOutput_5.setBigDecimal(2, Winspare.VL_ATUAL);

                    pstmt_tDBOutput_5.setBigDecimal(3, Winspare.VL_ARREDONDAMENTO);

                    pstmt_tDBOutput_5.setBigDecimal(4, Winspare.VL_ANTERIOR);

                    if(Winspare.MKTPLACE == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, Winspare.MKTPLACE);
}

                    if(Winspare.DATA_EXECUCAO != null) {
pstmt_tDBOutput_5.setTimestamp(6, new java.sql.Timestamp(Winspare.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

			
            try {
                nb_line_tDBOutput_5++;
				
                int processedCount_tDBOutput_5 = pstmt_tDBOutput_5.executeUpdate();
                insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
                rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_5 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "Winspare"




// Start of branch "Insert_dw"
if(Insert_dw != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert_dw"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(Insert_dw.CD_PRODUTO == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, Insert_dw.CD_PRODUTO);
}

                    if(Insert_dw.DT_ULTI_ATUALIZACAO != null) {
pstmt_tDBOutput_6.setTimestamp(2, new java.sql.Timestamp(Insert_dw.DT_ULTI_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_6.setBigDecimal(3, Insert_dw.VL_ATUAL);

                    pstmt_tDBOutput_6.setBigDecimal(4, Insert_dw.VL_ANTERIOR);

                    if(Insert_dw.MKTPLACE == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(5, Insert_dw.MKTPLACE);
}

                    if(Insert_dw.DC_PRODUTO == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(6, Insert_dw.DC_PRODUTO);
}

                    pstmt_tDBOutput_6.setBigDecimal(7, Insert_dw.VL_CUSTO);

                    if(Insert_dw.CD_OPERADOR == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(8, Insert_dw.CD_OPERADOR);
}

                    if(Insert_dw.NM_OPERADOR == null) {
pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(9, Insert_dw.NM_OPERADOR);
}

                    if(Insert_dw.CD_MARCA == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(10, Insert_dw.CD_MARCA);
}

                    if(Insert_dw.DC_MARCA == null) {
pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(11, Insert_dw.DC_MARCA);
}

                    if(Insert_dw.CD_FORNECEDOR == null) {
pstmt_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(12, Insert_dw.CD_FORNECEDOR);
}

                    if(Insert_dw.CD_COMPRADOR == null) {
pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(13, Insert_dw.CD_COMPRADOR);
}

                    if(Insert_dw.NM_COMPRADOR == null) {
pstmt_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(14, Insert_dw.NM_COMPRADOR);
}

                    pstmt_tDBOutput_6.setBigDecimal(15, Insert_dw.VL_ARREDONDAMENTO);

                    if(Insert_dw.DATA_EXECUCAO != null) {
pstmt_tDBOutput_6.setTimestamp(16, new java.sql.Timestamp(Insert_dw.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(16, java.sql.Types.TIMESTAMP);
}

			
            try {
                nb_line_tDBOutput_6++;
				
                int processedCount_tDBOutput_6 = pstmt_tDBOutput_6.executeUpdate();
                insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
                rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_6 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "Insert_dw"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Winspare");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */




	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert_dw");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */




	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row16Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row17.nm_programa = next_tHashInput_4.nm_programa;
	row17.data_inicio_execucao = next_tHashInput_4.data_inicio_execucao;
	row17.data_termino_execucao = next_tHashInput_4.data_termino_execucao;
	row17.mensagem = next_tHashInput_4.mensagem;
	row17.uuid = next_tHashInput_4.uuid;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row17.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row17.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_3", false);
		start_Hash.put("tDBClose_3", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_3";
	
	
		int tos_count_tDBClose_3 = 0;
		

 



/**
 * [tDBClose_3 begin ] stop
 */
	
	/**
	 * [tDBClose_3 main ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	



	java.sql.Connection conn_tDBClose_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_3 != null && !conn_tDBClose_3.isClosed())
	{
        conn_tDBClose_3.close();
	}

 


	tos_count_tDBClose_3++;

/**
 * [tDBClose_3 main ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_3 end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 

ok_Hash.put("tDBClose_3", true);
end_Hash.put("tDBClose_3", System.currentTimeMillis());




/**
 * [tDBClose_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_3 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String SITUACAO;

				public String getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+SITUACAO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row2Struct row2 = new row2Struct();
out1Struct out1 = new out1Struct();
row1Struct row1 = new row1Struct();







	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select\n	    CD_PRODUTO,\n		SITUACAO,\n		VL_ATUAL,\n		VL_ARREDONDAMENTO,\n		VL_ANTERIOR,\n		MKTPLACE\nfrom\n	(\n	SELECT"
+"\n		CD_PRODUTO,\n		DATA_HORA_ATUALIZACAO,\n		COALESCE(SITUACAO, 0) AS SITUACAO,\n		VL_ATUAL,\n		(VL_ARREDONDAMENTO / 0.9"
+"0) AS VL_ARREDONDAMENTO,\n		VL_ANTERIOR,\n		MKTPLACE\n	FROM\n		(\n		SELECT\n			DISTINCT(ALT_CODITE) CD_PRODUTO,\n			C.IT"
+"E_SITPRO SITUACAO,\n			CONCAT(ALT_DTAALT, ' ', ALT_HORALT) DATA_HORA_ATUALIZACAO,\n			IG.ITE_PREVE7 VL_ATUAL,\n			CASE\n"
+"				WHEN MOD(IG.ITE_PREVE7,\n				1) > 0 THEN CEIL(IG.ITE_PREVE7)-0.10\n				ELSE CEIL(IG.ITE_PREVE7)\n			END AS VL_ARREDO"
+"NDAMENTO,\n			IG.ITE_PREVE7 / 0.90 AS VL_MAGENTO,\n			PA.ALT_VE7ANT VL_ANTERIOR,\n			'MKTPLACE 7' AS MKTPLACE,\n			CURRE"
+"NT_TIMESTAMP() AS DATA_EXECUCAO\n		FROM\n			PREALT PA\n		INNER JOIN ITEGER IG ON\n			PA.ALT_CODITE = IG.ITE_CODITE\n			A"
+"ND IG.ITE_CODEMP = '001'\n			-- INNER JOIN DESSIT DS ON DS.ITE_CODITE = PA.ALT_CODITE AND DS.ITE_ATZPRE = 'S'\n		INNER J"
+"OIN CADITE C ON\n			PA.ALT_CODITE = C.ITE_CODITE\n		WHERE\n			ALT_DTAALT = CURDATE()\n			AND ALT_CODEMP = '001'\n			AND "
+"PA.ALT_VE7ANT <> IG.ITE_PREVE7\n			AND IG.ITE_PREVE7 >= 100) INTEGRACAO)x\nwhere x.DATA_HORA_ATUALIZACAO = (\n	select ma"
+"x(CONCAT(ALT_DTAALT, ' ', ALT_HORALT))\n	FROM PREALT PA\n	where PA.ALT_CODITE = x.CD_PRODUTO\nAND PA.ALT_VE7ANT <> x.VL_"
+"ATUAL)";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.CD_PRODUTO = null;
							} else {
	                         		
        	row5.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.SITUACAO = null;
							} else {
	                         		
        	row5.SITUACAO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.VL_ATUAL = null;
							} else {
		                          
            row5.VL_ATUAL = rs_tDBInput_3.getBigDecimal(3);
            if(rs_tDBInput_3.wasNull()){
                    row5.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row5.VL_ARREDONDAMENTO = rs_tDBInput_3.getBigDecimal(4);
            if(rs_tDBInput_3.wasNull()){
                    row5.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.VL_ANTERIOR = null;
							} else {
		                          
            row5.VL_ANTERIOR = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    row5.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.MKTPLACE = null;
							} else {
	                         		
        	row5.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


  row2 = new row2Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row2.CD_PRODUTO=TypeConvert.String2String(row5.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.SITUACAO=TypeConvert.String2Integer(row5.SITUACAO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VL_ATUAL=TypeConvert.BigDecimal2BigDecimal(row5.VL_ATUAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VL_ARREDONDAMENTO=TypeConvert.BigDecimal2BigDecimal(row5.VL_ARREDONDAMENTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.VL_ANTERIOR=TypeConvert.BigDecimal2BigDecimal(row5.VL_ANTERIOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row2.MKTPLACE=TypeConvert.String2String(row5.MKTPLACE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row2 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.CD_PRODUTO = row2.CD_PRODUTO ;
out1_tmp.SITUACAO = row2.SITUACAO ;
out1_tmp.VL_ATUAL = row2.VL_ATUAL ;
out1_tmp.VL_ARREDONDAMENTO = row2.VL_ARREDONDAMENTO ;
out1_tmp.VL_ANTERIOR = row2.VL_ANTERIOR ;
out1_tmp.MKTPLACE = row2.MKTPLACE ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

          row1 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((out1.SITUACAO == null? false : out1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) != 0)
                           , "SITUACAO.compareTo(7) != 0 failed");
		 	
            ope_tFilterRow_1.matches((out1.SITUACAO == null? false : out1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(8))) != 0)
                           , "SITUACAO.compareTo(8) != 0 failed");
		 	
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row1 == null){ 
                row1 = new row1Struct();
              }
               row1.CD_PRODUTO = out1.CD_PRODUTO;
               row1.SITUACAO = out1.SITUACAO;
               row1.VL_ATUAL = out1.VL_ATUAL;
               row1.VL_ARREDONDAMENTO = out1.VL_ARREDONDAMENTO;
               row1.VL_ANTERIOR = out1.VL_ANTERIOR;
               row1.MKTPLACE = out1.MKTPLACE;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_2 = new row1Struct();
				
					oneRow_tHashOutput_2.CD_PRODUTO = row1.CD_PRODUTO;
					oneRow_tHashOutput_2.SITUACAO = row1.SITUACAO;
					oneRow_tHashOutput_2.VL_ATUAL = row1.VL_ATUAL;
					oneRow_tHashOutput_2.VL_ARREDONDAMENTO = row1.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_2.VL_ANTERIOR = row1.VL_ANTERIOR;
					oneRow_tHashOutput_2.MKTPLACE = row1.MKTPLACE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String SITUACAO;

				public String getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+SITUACAO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();
copyOfcopyOfout1Struct copyOfcopyOfout1 = new copyOfcopyOfout1Struct();
row10Struct row10 = new row10Struct();







	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout1");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout1Struct copyOfcopyOfout1_tmp = new copyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tConvertType_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_3", false);
		start_Hash.put("tConvertType_3", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tConvertType_3 = 0;
		
	int nb_line_tConvertType_3 = 0;  
 



/**
 * [tConvertType_3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select \n       CD_PRODUTO,\n       SITUACAO,\n       VL_ATUAL,\n       VL_ARREDONDAMENTO,\n       VL_ANTERIOR,\n      "
+" MKTPLACE\n  from (\n  SELECT DISTINCT(ALT_CODITE) CD_PRODUTO,\n  CONCAT(ALT_DTAALT,' ',ALT_HORALT)  DATA_HORA_ATUALIZAC"
+"AO,\n   COALESCE(C.ITE_SITPRO,0) AS SITUACAO,\n       IG.ITE_PREVE7 VL_ATUAL,\n       (IG.ITE_PREVE7/0.90) VL_ARREDONDAM"
+"ENTO,\n       PA.ALT_VE7ANT VL_ANTERIOR,\n       'MKTPLACE 7' AS MKTPLACE\n  FROM PREALT PA \n INNER JOIN ITEGER IG ON P"
+"A.ALT_CODITE = IG.ITE_CODITE AND IG.ITE_CODEMP = '001'\n INNER JOIN CADITE C ON PA.ALT_CODITE = C.ITE_CODITE\n WHERE ALT"
+"_DTAALT = CURDATE()\n   AND ALT_CODEMP = '001'\n   AND PA.ALT_VE7ANT <> IG.ITE_PREVE7)x\nwhere x.DATA_HORA_ATUALIZACAO ="
+" (select max(CONCAT(ALT_DTAALT,' ',ALT_HORALT))\n                                   FROM PREALT PA\n                    "
+"              where PA.ALT_CODITE  = x.CD_PRODUTO\n                                    AND PA.ALT_VE7ANT <> x.VL_ATUAL)";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row8.CD_PRODUTO = null;
							} else {
	                         		
        	row8.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row8.SITUACAO = null;
							} else {
	                         		
        	row8.SITUACAO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row8.VL_ATUAL = null;
							} else {
		                          
            row8.VL_ATUAL = rs_tDBInput_2.getBigDecimal(3);
            if(rs_tDBInput_2.wasNull()){
                    row8.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row8.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row8.VL_ARREDONDAMENTO = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    row8.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row8.VL_ANTERIOR = null;
							} else {
		                          
            row8.VL_ANTERIOR = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    row8.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row8.MKTPLACE = null;
							} else {
	                         		
        	row8.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_3 main ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


  row9 = new row9Struct();
  boolean bHasError_tConvertType_3 = false;             
          try {
              row9.CD_PRODUTO=TypeConvert.String2String(row8.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row9.SITUACAO=TypeConvert.String2Integer(row8.SITUACAO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row9.VL_ATUAL=TypeConvert.BigDecimal2BigDecimal(row8.VL_ATUAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row9.VL_ARREDONDAMENTO=TypeConvert.BigDecimal2BigDecimal(row8.VL_ARREDONDAMENTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row9.VL_ANTERIOR=TypeConvert.BigDecimal2BigDecimal(row8.VL_ANTERIOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row9.MKTPLACE=TypeConvert.String2String(row8.MKTPLACE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_3) {row9 = null;}

  nb_line_tConvertType_3 ++ ;

 


	tos_count_tConvertType_3++;

/**
 * [tConvertType_3 main ] stop
 */
	
	/**
	 * [tConvertType_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfout1'
copyOfcopyOfout1_tmp.CD_PRODUTO = row9.CD_PRODUTO ;
copyOfcopyOfout1_tmp.SITUACAO = row9.SITUACAO ;
copyOfcopyOfout1_tmp.VL_ATUAL = row9.VL_ATUAL ;
copyOfcopyOfout1_tmp.VL_ARREDONDAMENTO = row9.VL_ARREDONDAMENTO ;
copyOfcopyOfout1_tmp.VL_ANTERIOR = row9.VL_ANTERIOR ;
copyOfcopyOfout1_tmp.MKTPLACE = row9.MKTPLACE ;
copyOfcopyOfout1 = copyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout1"
if(copyOfcopyOfout1 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfout1"
						
						);
					}
					

          row10 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((copyOfcopyOfout1.SITUACAO == null? false : copyOfcopyOfout1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) == 0)
                           , "SITUACAO.compareTo(7) == 0 failed");
		 	
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.CD_PRODUTO = copyOfcopyOfout1.CD_PRODUTO;
               row10.SITUACAO = copyOfcopyOfout1.SITUACAO;
               row10.VL_ATUAL = copyOfcopyOfout1.VL_ATUAL;
               row10.VL_ARREDONDAMENTO = copyOfcopyOfout1.VL_ARREDONDAMENTO;
               row10.VL_ANTERIOR = copyOfcopyOfout1.VL_ANTERIOR;
               row10.MKTPLACE = copyOfcopyOfout1.MKTPLACE;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_4 = new row10Struct();
				
					oneRow_tHashOutput_4.CD_PRODUTO = row10.CD_PRODUTO;
					oneRow_tHashOutput_4.SITUACAO = row10.SITUACAO;
					oneRow_tHashOutput_4.VL_ATUAL = row10.VL_ATUAL;
					oneRow_tHashOutput_4.VL_ARREDONDAMENTO = row10.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_4.VL_ANTERIOR = row10.VL_ANTERIOR;
					oneRow_tHashOutput_4.MKTPLACE = row10.MKTPLACE;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tConvertType_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tConvertType_3 end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	
      globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tConvertType_3", true);
end_Hash.put("tConvertType_3", System.currentTimeMillis());




/**
 * [tConvertType_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tConvertType_3 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_3";
	
	

 



/**
 * [tConvertType_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String SITUACAO;

				public String getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.SITUACAO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+SITUACAO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row6Struct row6 = new row6Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();
row7Struct row7 = new row7Struct();







	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select CD_PRODUTO,\n       SITUACAO,\n       VL_ATUAL,\n       VL_ARREDONDAMENTO,\n       VL_ANTERIOR,\n       MKTPLACE"
+"\n  from (\n   SELECT DISTINCT(ALT_CODITE) CD_PRODUTO,\n   CONCAT(ALT_DTAALT,' ',ALT_HORALT)  DATA_HORA_ATUALIZACAO,\n  "
+" COALESCE(C.ITE_SITPRO,0) AS SITUACAO,\n       IG.ITE_PREVE7 VL_ATUAL,\n       (IG.ITE_PREVE7 / 0.90) VL_ARREDONDAMENTO,"
+"\n        PA.ALT_VE7ANT VL_ANTERIOR,\n       'MKTPLACE 7' AS MKTPLACE\n  FROM PREALT PA \n INNER JOIN ITEGER IG ON PA.AL"
+"T_CODITE = IG.ITE_CODITE AND IG.ITE_CODEMP = '001'\n INNER JOIN CADITE C ON PA.ALT_CODITE = C.ITE_CODITE\n WHERE ALT_DTA"
+"ALT = CURDATE()\n    AND ALT_CODEMP = '001'\n   AND PA.ALT_VE7ANT <> IG.ITE_PREVE7\n   AND IG.ITE_PREVE7 < 100)x\nwhere "
+"x.DATA_HORA_ATUALIZACAO = (select max(CONCAT(ALT_DTAALT,' ',ALT_HORALT))\n                                   FROM PREALT"
+" PA\n                                  where PA.ALT_CODITE  = x.CD_PRODUTO)";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.CD_PRODUTO = null;
							} else {
	                         		
        	row4.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.SITUACAO = null;
							} else {
	                         		
        	row4.SITUACAO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.VL_ATUAL = null;
							} else {
		                          
            row4.VL_ATUAL = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    row4.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row4.VL_ARREDONDAMENTO = rs_tDBInput_1.getBigDecimal(4);
            if(rs_tDBInput_1.wasNull()){
                    row4.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row4.VL_ANTERIOR = null;
							} else {
		                          
            row4.VL_ANTERIOR = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    row4.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row4.MKTPLACE = null;
							} else {
	                         		
        	row4.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


  row6 = new row6Struct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              row6.CD_PRODUTO=TypeConvert.String2String(row4.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.SITUACAO=TypeConvert.String2Integer(row4.SITUACAO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.VL_ATUAL=TypeConvert.BigDecimal2BigDecimal(row4.VL_ATUAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.VL_ARREDONDAMENTO=TypeConvert.BigDecimal2BigDecimal(row4.VL_ARREDONDAMENTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.VL_ANTERIOR=TypeConvert.BigDecimal2BigDecimal(row4.VL_ANTERIOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row6.MKTPLACE=TypeConvert.String2String(row4.MKTPLACE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {row6 = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.CD_PRODUTO = row6.CD_PRODUTO ;
copyOfout1_tmp.SITUACAO = row6.SITUACAO ;
copyOfout1_tmp.VL_ATUAL = row6.VL_ATUAL ;
copyOfout1_tmp.VL_ARREDONDAMENTO = row6.VL_ARREDONDAMENTO ;
copyOfout1_tmp.VL_ANTERIOR = row6.VL_ANTERIOR ;
copyOfout1_tmp.MKTPLACE = row6.MKTPLACE ;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					

          row7 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((copyOfout1.SITUACAO == null? false : copyOfout1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) != 0)
                           , "SITUACAO.compareTo(7) != 0 failed");
		 	
            ope_tFilterRow_2.matches((copyOfout1.SITUACAO == null? false : copyOfout1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(8))) != 0)
                           , "SITUACAO.compareTo(8) != 0 failed");
		 	
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.CD_PRODUTO = copyOfout1.CD_PRODUTO;
               row7.SITUACAO = copyOfout1.SITUACAO;
               row7.VL_ATUAL = copyOfout1.VL_ATUAL;
               row7.VL_ARREDONDAMENTO = copyOfout1.VL_ARREDONDAMENTO;
               row7.VL_ANTERIOR = copyOfout1.VL_ANTERIOR;
               row7.MKTPLACE = copyOfout1.MKTPLACE;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



    
		row7Struct oneRow_tHashOutput_3 = new row7Struct();
				
					oneRow_tHashOutput_3.CD_PRODUTO = row7.CD_PRODUTO;
					oneRow_tHashOutput_3.SITUACAO = row7.SITUACAO;
					oneRow_tHashOutput_3.VL_ATUAL = row7.VL_ATUAL;
					oneRow_tHashOutput_3.VL_ARREDONDAMENTO = row7.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_3.VL_ANTERIOR = row7.VL_ANTERIOR;
					oneRow_tHashOutput_3.MKTPLACE = row7.MKTPLACE;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row21Struct row21 = new row21Struct();
copyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfout1 = new copyOfcopyOfcopyOfout1Struct();






	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfout1");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfout1Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfout1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfout1_tmp = new copyOfcopyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tConvertType_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_4", false);
		start_Hash.put("tConvertType_4", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tConvertType_4 = 0;
		
	int nb_line_tConvertType_4 = 0;  
 



/**
 * [tConvertType_4 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT CD_PRODUTO,\n        VL_ATUAL, \n        VL_ARREDONDAMENTO,\n        VL_ANTERIOR,\n        MKTPLACE\n  FROM (\nS"
+"ELECT DISTINCT(ALT_CODITE) CD_PRODUTO,\nCONCAT(ALT_DTAALT,' ',ALT_HORALT)  DATA_HORA_ATUALIZACAO,\n        IG.ITE_PREVE3"
+" VL_ATUAL, \n        IG.ITE_PREVE3 VL_ARREDONDAMENTO,\n        PA.ALT_VE3ANT VL_ANTERIOR,\n        'MKTPLACE 3' AS MKTPL"
+"ACE\n   FROM PREALT PA \n  INNER JOIN ITEGER IG ON PA.ALT_CODITE = IG.ITE_CODITE AND IG.ITE_CODEMP = '001'\n  WHERE ALT_"
+"DTAALT = CURDATE()\n    AND ALT_CODEMP  = '001'\n  -- AND ALT_CODITE = '62157'\n    AND PA.ALT_VE3ANT <> IG.ITE_PREVE3)x"
+"\nWHERE x.DATA_HORA_ATUALIZACAO = (SELECT max(CONCAT(ALT_DTAALT,' ',ALT_HORALT))\n                                   FRO"
+"M PREALT PA\n                                  WHERE PA.ALT_CODITE  = x.CD_PRODUTO\n                                  AN"
+"D PA.ALT_VE3ANT <> x.VL_ATUAL)";
		    

		    globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);

		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row20.CD_PRODUTO = null;
							} else {
	                         		
        	row20.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row20.VL_ATUAL = null;
							} else {
		                          
            row20.VL_ATUAL = rs_tDBInput_5.getBigDecimal(2);
            if(rs_tDBInput_5.wasNull()){
                    row20.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row20.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row20.VL_ARREDONDAMENTO = rs_tDBInput_5.getBigDecimal(3);
            if(rs_tDBInput_5.wasNull()){
                    row20.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row20.VL_ANTERIOR = null;
							} else {
		                          
            row20.VL_ANTERIOR = rs_tDBInput_5.getBigDecimal(4);
            if(rs_tDBInput_5.wasNull()){
                    row20.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row20.MKTPLACE = null;
							} else {
	                         		
        	row20.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_4 main ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					


  row21 = new row21Struct();
  boolean bHasError_tConvertType_4 = false;             
          try {
              row21.CD_PRODUTO=TypeConvert.String2String(row20.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row21.VL_ATUAL=TypeConvert.BigDecimal2BigDecimal(row20.VL_ATUAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row21.VL_ARREDONDAMENTO=TypeConvert.BigDecimal2BigDecimal(row20.VL_ARREDONDAMENTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row21.VL_ANTERIOR=TypeConvert.BigDecimal2BigDecimal(row20.VL_ANTERIOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row21.MKTPLACE=TypeConvert.String2String(row20.MKTPLACE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_4_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_4 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_4) {row21 = null;}

  nb_line_tConvertType_4 ++ ;

 


	tos_count_tConvertType_4++;

/**
 * [tConvertType_4 main ] stop
 */
	
	/**
	 * [tConvertType_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfcopyOfout1'
copyOfcopyOfcopyOfout1_tmp.CD_PRODUTO = row21.CD_PRODUTO ;
copyOfcopyOfcopyOfout1_tmp.SITUACAO = null;
copyOfcopyOfcopyOfout1_tmp.VL_ATUAL = row21.VL_ATUAL ;
copyOfcopyOfcopyOfout1_tmp.VL_ARREDONDAMENTO = row21.VL_ARREDONDAMENTO ;
copyOfcopyOfcopyOfout1_tmp.VL_ANTERIOR = row21.VL_ANTERIOR ;
copyOfcopyOfcopyOfout1_tmp.MKTPLACE = row21.MKTPLACE ;
copyOfcopyOfcopyOfout1 = copyOfcopyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfout1"
if(copyOfcopyOfcopyOfout1 != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfout1"
						
						);
					}
					



    
		copyOfcopyOfcopyOfout1Struct oneRow_tHashOutput_6 = new copyOfcopyOfcopyOfout1Struct();
				
					oneRow_tHashOutput_6.CD_PRODUTO = copyOfcopyOfcopyOfout1.CD_PRODUTO;
					oneRow_tHashOutput_6.SITUACAO = copyOfcopyOfcopyOfout1.SITUACAO;
					oneRow_tHashOutput_6.VL_ATUAL = copyOfcopyOfcopyOfout1.VL_ATUAL;
					oneRow_tHashOutput_6.VL_ARREDONDAMENTO = copyOfcopyOfcopyOfout1.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_6.VL_ANTERIOR = copyOfcopyOfcopyOfout1.VL_ANTERIOR;
					oneRow_tHashOutput_6.MKTPLACE = copyOfcopyOfcopyOfout1.MKTPLACE;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfout1"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tConvertType_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tConvertType_4 end ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	
      globalMap.put("tConvertType_4_NB_LINE", nb_line_tConvertType_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tConvertType_4", true);
end_Hash.put("tConvertType_4", System.currentTimeMillis());




/**
 * [tConvertType_4 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tConvertType_4 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_4";
	
	

 



/**
 * [tConvertType_4 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return false;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
row23Struct row23 = new row23Struct();
copyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfout1 = new copyOfcopyOfcopyOfcopyOfout1Struct();






	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfout1");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfcopyOfout1Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfcopyOfcopyOfcopyOfout1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfout1Struct copyOfcopyOfcopyOfcopyOfout1_tmp = new copyOfcopyOfcopyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tConvertType_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_5", false);
		start_Hash.put("tConvertType_5", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tConvertType_5 = 0;
		
	int nb_line_tConvertType_5 = 0;  
 



/**
 * [tConvertType_5 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";
	
	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select cd_produto, \n        vl_atual,\n        vl_arredondamento,\n        vl_anterior,\n        mktplace\nfrom (\n   "
+"SELECT DISTINCT(ALT_CODITE) cd_produto, \n   CONCAT(ALT_DTAALT,' ',ALT_HORALT)  DATA_HORA_ATUALIZACAO,\n        IG.ITE_P"
+"REVE4 vl_atual, \n        IG.ITE_PREVE4  vl_arredondamento,\n        PA.ALT_VE4ANT vl_anterior,\n        'MKTPLACE 4' AS"
+" mktplace\n   FROM PREALT PA \n  INNER JOIN ITEGER IG ON PA.ALT_CODITE = IG.ITE_CODITE AND IG.ITE_CODEMP = '001'\n  WHER"
+"E ALT_DTAALT = CURDATE() \n     AND ALT_CODEMP  = '001'\n    AND PA.ALT_VE4ANT <> IG.ITE_PREVE4)x\nwhere x.DATA_HORA_ATU"
+"ALIZACAO = (select max(CONCAT(ALT_DTAALT,' ',ALT_HORALT))\n                                   FROM PREALT PA\n          "
+"                        where PA.ALT_CODITE  = x.CD_PRODUTO\n                                    AND PA.ALT_VE4ANT <> x."
+"VL_ATUAL)";
		    

		    globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);

		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row22.CD_PRODUTO = null;
							} else {
	                         		
        	row22.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row22.VL_ATUAL = null;
							} else {
		                          
            row22.VL_ATUAL = rs_tDBInput_6.getBigDecimal(2);
            if(rs_tDBInput_6.wasNull()){
                    row22.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row22.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row22.VL_ARREDONDAMENTO = rs_tDBInput_6.getBigDecimal(3);
            if(rs_tDBInput_6.wasNull()){
                    row22.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row22.VL_ANTERIOR = null;
							} else {
		                          
            row22.VL_ANTERIOR = rs_tDBInput_6.getBigDecimal(4);
            if(rs_tDBInput_6.wasNull()){
                    row22.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row22.MKTPLACE = null;
							} else {
	                         		
        	row22.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_5 main ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					


  row23 = new row23Struct();
  boolean bHasError_tConvertType_5 = false;             
          try {
              row23.CD_PRODUTO=TypeConvert.String2String(row22.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row23.VL_ATUAL=TypeConvert.BigDecimal2BigDecimal(row22.VL_ATUAL);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row23.VL_ARREDONDAMENTO=TypeConvert.BigDecimal2BigDecimal(row22.VL_ARREDONDAMENTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row23.VL_ANTERIOR=TypeConvert.BigDecimal2BigDecimal(row22.VL_ANTERIOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row23.MKTPLACE=TypeConvert.String2String(row22.MKTPLACE);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_5_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_5 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_5) {row23 = null;}

  nb_line_tConvertType_5 ++ ;

 


	tos_count_tConvertType_5++;

/**
 * [tConvertType_5 main ] stop
 */
	
	/**
	 * [tConvertType_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfout1'
copyOfcopyOfcopyOfcopyOfout1_tmp.CD_PRODUTO = row23.CD_PRODUTO;
copyOfcopyOfcopyOfcopyOfout1_tmp.SITUACAO = null;
copyOfcopyOfcopyOfcopyOfout1_tmp.VL_ATUAL = row23.VL_ATUAL;
copyOfcopyOfcopyOfcopyOfout1_tmp.VL_ARREDONDAMENTO = row23.VL_ARREDONDAMENTO;
copyOfcopyOfcopyOfcopyOfout1_tmp.VL_ANTERIOR = row23.VL_ANTERIOR;
copyOfcopyOfcopyOfcopyOfout1_tmp.MKTPLACE = row23.MKTPLACE;
copyOfcopyOfcopyOfcopyOfout1 = copyOfcopyOfcopyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfout1"
if(copyOfcopyOfcopyOfcopyOfout1 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOfout1"
						
						);
					}
					



    
		copyOfcopyOfcopyOfcopyOfout1Struct oneRow_tHashOutput_7 = new copyOfcopyOfcopyOfcopyOfout1Struct();
				
					oneRow_tHashOutput_7.CD_PRODUTO = copyOfcopyOfcopyOfcopyOfout1.CD_PRODUTO;
					oneRow_tHashOutput_7.SITUACAO = copyOfcopyOfcopyOfcopyOfout1.SITUACAO;
					oneRow_tHashOutput_7.VL_ATUAL = copyOfcopyOfcopyOfcopyOfout1.VL_ATUAL;
					oneRow_tHashOutput_7.VL_ARREDONDAMENTO = copyOfcopyOfcopyOfcopyOfout1.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_7.VL_ANTERIOR = copyOfcopyOfcopyOfcopyOfout1.VL_ANTERIOR;
					oneRow_tHashOutput_7.MKTPLACE = copyOfcopyOfcopyOfcopyOfout1.MKTPLACE;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfout1"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tConvertType_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tConvertType_5 end ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	
      globalMap.put("tConvertType_5_NB_LINE", nb_line_tConvertType_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tConvertType_5", true);
end_Hash.put("tConvertType_5", System.currentTimeMillis());




/**
 * [tConvertType_5 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tConvertType_5 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_5";
	
	

 



/**
 * [tConvertType_5 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
						this.VL_CUSTO = (BigDecimal) dis.readObject();
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_CUSTO);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public String VL_CUSTO;

				public String getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public String DT_ULTI_ATUALIZACAO;

				public String getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.VL_CUSTO = readString(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.VL_CUSTO = readString(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.NM_OPERADOR = readString(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CD_COMPRADOR = readString(dis);
					
					this.NM_COMPRADOR = readString(dis);
					
					this.DT_ULTI_ATUALIZACAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// String
				
						writeString(this.VL_CUSTO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// String
				
						writeString(this.DT_ULTI_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// String
				
						writeString(this.VL_CUSTO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.NM_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CD_COMPRADOR,dos);
					
					// String
				
						writeString(this.NM_COMPRADOR,dos);
					
					// String
				
						writeString(this.DT_ULTI_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+VL_CUSTO);
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",DT_ULTI_ATUALIZACAO="+DT_ULTI_ATUALIZACAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row28Struct row28 = new row28Struct();





	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tConvertType_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_6", false);
		start_Hash.put("tConvertType_6", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tConvertType_6 = 0;
		
	int nb_line_tConvertType_6 = 0;  
 



/**
 * [tConvertType_6 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";
	
	
		int tos_count_tDBInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
		    calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT I.ITE_CODITE                                                  CD_PRODUTO,\n       I.ITE_DESITE                  "
+"                                DC_PRODUTO,\n       ROUND(G.ITE_PRECUS,4)                          				 VL_CUSTO,\n     "
+"  I.ITE_CODOPE                                   				 CD_OPERADOR,\n       (select LTRIM(REPLACE(OPE_NOMOPE , '*', ' '))"
+"\n          from CADOPE CO\n         where  CO.OPE_CODOPE = I.ITE_CODOPE)         				 NM_OPERADOR,\n       I.ITE_CODMAR"
+"                                   				 CD_MARCA,\n       (SELECT M.MAR_DESMAR\n          FROM CADMAR M\n         WHERE "
+"M.MAR_CODMAR = I.ITE_CODMAR)           				 DC_MARCA,\n       I.ITE_CODFOR                                   				 CD_FOR"
+"NECEDOR,\n       (SELECT F.FOR_COMPRA CD_COMPRADOR\n          FROM CADFOR F\n         where F.FOR_CODFOR = I.ITE_CODFOR)"
+"           				 CD_COMPRADOR,\n       (SELECT OPE.OPE_NOMOPE                         				 NM_COMPRADOR\n          FROM C"
+"ADFOR F\n          LEFT JOIN CADOPE OPE ON OPE.OPE_CODOPE = F.FOR_COMPRA\n         where F.FOR_CODFOR = I.ITE_CODFOR)   "
+"        			 	 NM_COMPRADOR,\n        I.ITE_DHUALT                                                 DT_ULTI_ATUALIZACAO\n "
+"   FROM CADITE I,\n         ITEGER G\n   WHERE G.ITE_CODITE = I.ITE_CODITE\n   GROUP BY I.ITE_CODITE";
		    

		    globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);

		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row27.CD_PRODUTO = null;
							} else {
	                         		
        	row27.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row27.DC_PRODUTO = null;
							} else {
	                         		
        	row27.DC_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row27.VL_CUSTO = null;
							} else {
	                         		
        	row27.VL_CUSTO = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row27.CD_OPERADOR = null;
							} else {
	                         		
        	row27.CD_OPERADOR = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row27.NM_OPERADOR = null;
							} else {
	                         		
        	row27.NM_OPERADOR = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row27.CD_MARCA = null;
							} else {
	                         		
        	row27.CD_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row27.DC_MARCA = null;
							} else {
	                         		
        	row27.DC_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row27.CD_FORNECEDOR = null;
							} else {
	                         		
        	row27.CD_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row27.CD_COMPRADOR = null;
							} else {
	                         		
        	row27.CD_COMPRADOR = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row27.NM_COMPRADOR = null;
							} else {
	                         		
        	row27.NM_COMPRADOR = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row27.DT_ULTI_ATUALIZACAO = null;
							} else {
	                         		
        	row27.DT_ULTI_ATUALIZACAO = routines.system.JDBCUtil.getString(rs_tDBInput_7, 11, false);
		                    }
					

 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_6 main ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


  row28 = new row28Struct();
  boolean bHasError_tConvertType_6 = false;             
          try {
              row28.CD_PRODUTO=TypeConvert.String2String(row27.CD_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DC_PRODUTO=TypeConvert.String2String(row27.DC_PRODUTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.VL_CUSTO=TypeConvert.String2BigDecimal(row27.VL_CUSTO);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CD_OPERADOR=TypeConvert.String2String(row27.CD_OPERADOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.NM_OPERADOR=TypeConvert.String2String(row27.NM_OPERADOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CD_MARCA=TypeConvert.String2String(row27.CD_MARCA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DC_MARCA=TypeConvert.String2String(row27.DC_MARCA);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CD_FORNECEDOR=TypeConvert.String2String(row27.CD_FORNECEDOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.CD_COMPRADOR=TypeConvert.String2String(row27.CD_COMPRADOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.NM_COMPRADOR=TypeConvert.String2String(row27.NM_COMPRADOR);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row28.DT_ULTI_ATUALIZACAO=TypeConvert.String2Date(row27.DT_ULTI_ATUALIZACAO, "yyyy-MM-dd HH:mm:ss");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_6_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_6 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_6) {row28 = null;}

  nb_line_tConvertType_6 ++ ;

 


	tos_count_tConvertType_6++;

/**
 * [tConvertType_6 main ] stop
 */
	
	/**
	 * [tConvertType_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



    
		row28Struct oneRow_tHashOutput_9 = new row28Struct();
				
					oneRow_tHashOutput_9.CD_PRODUTO = row28.CD_PRODUTO;
					oneRow_tHashOutput_9.DC_PRODUTO = row28.DC_PRODUTO;
					oneRow_tHashOutput_9.VL_CUSTO = row28.VL_CUSTO;
					oneRow_tHashOutput_9.CD_OPERADOR = row28.CD_OPERADOR;
					oneRow_tHashOutput_9.NM_OPERADOR = row28.NM_OPERADOR;
					oneRow_tHashOutput_9.CD_MARCA = row28.CD_MARCA;
					oneRow_tHashOutput_9.DC_MARCA = row28.DC_MARCA;
					oneRow_tHashOutput_9.CD_FORNECEDOR = row28.CD_FORNECEDOR;
					oneRow_tHashOutput_9.CD_COMPRADOR = row28.CD_COMPRADOR;
					oneRow_tHashOutput_9.NM_COMPRADOR = row28.NM_COMPRADOR;
					oneRow_tHashOutput_9.DT_ULTI_ATUALIZACAO = row28.DT_ULTI_ATUALIZACAO;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tConvertType_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tConvertType_6 end ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	
      globalMap.put("tConvertType_6_NB_LINE", nb_line_tConvertType_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tConvertType_6", true);
end_Hash.put("tConvertType_6", System.currentTimeMillis());




/**
 * [tConvertType_6 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";
	
	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tConvertType_6 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_6";
	
	

 



/**
 * [tConvertType_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : this.VL_ATUAL.hashCode());
					
						result = prime * result + ((this.VL_ANTERIOR == null) ? 0 : this.VL_ANTERIOR.hashCode());
					
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if (!this.VL_ATUAL.equals(other.VL_ATUAL))
						
							return false;
					
						if (this.VL_ANTERIOR == null) {
							if (other.VL_ANTERIOR != null)
								return false;
						
						} else if (!this.VL_ANTERIOR.equals(other.VL_ANTERIOR))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.VL_ANTERIOR = this.VL_ANTERIOR;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ANTERIOR = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ANTERIOR);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ANTERIOR, other.VL_ANTERIOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_integracao_preco_magento_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";
	
	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "select cd_produto,\n       vl_atual,\n       vl_anterior,\n       mktplace\n  from product_price\n where dt_ulti_atuali"
+"zacao >= current_date";
		    

		    globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);

		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row31.CD_PRODUTO = null;
							} else {
	                         		
        	row31.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row31.VL_ATUAL = null;
							} else {
		                          
            row31.VL_ATUAL = rs_tDBInput_8.getBigDecimal(2);
            if(rs_tDBInput_8.wasNull()){
                    row31.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row31.VL_ANTERIOR = null;
							} else {
		                          
            row31.VL_ANTERIOR = rs_tDBInput_8.getBigDecimal(3);
            if(rs_tDBInput_8.wasNull()){
                    row31.VL_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row31.MKTPLACE = null;
							} else {
	                         		
        	row31.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					



    
		row31Struct oneRow_tHashOutput_11 = new row31Struct();
				
					oneRow_tHashOutput_11.CD_PRODUTO = row31.CD_PRODUTO;
					oneRow_tHashOutput_11.VL_ATUAL = row31.VL_ATUAL;
					oneRow_tHashOutput_11.VL_ANTERIOR = row31.VL_ANTERIOR;
					oneRow_tHashOutput_11.MKTPLACE = row31.MKTPLACE;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";
	
	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return null;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public BigDecimal VL_CUSTO;

				public BigDecimal getVL_CUSTO () {
					return this.VL_CUSTO;
				}

				public Boolean VL_CUSTOIsNullable(){
				    return true;
				}
				public Boolean VL_CUSTOIsKey(){
				    return false;
				}
				public Integer VL_CUSTOLength(){
				    return null;
				}
				public Integer VL_CUSTOPrecision(){
				    return null;
				}
				public String VL_CUSTODefault(){
				
					return null;
				
				}
				public String VL_CUSTOComment(){
				
				    return "";
				
				}
				public String VL_CUSTOPattern(){
				
					return "";
				
				}
				public String VL_CUSTOOriginalDbColumnName(){
				
					return "VL_CUSTO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return null;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String NM_OPERADOR;

				public String getNM_OPERADOR () {
					return this.NM_OPERADOR;
				}

				public Boolean NM_OPERADORIsNullable(){
				    return true;
				}
				public Boolean NM_OPERADORIsKey(){
				    return false;
				}
				public Integer NM_OPERADORLength(){
				    return null;
				}
				public Integer NM_OPERADORPrecision(){
				    return null;
				}
				public String NM_OPERADORDefault(){
				
					return null;
				
				}
				public String NM_OPERADORComment(){
				
				    return "";
				
				}
				public String NM_OPERADORPattern(){
				
					return "";
				
				}
				public String NM_OPERADOROriginalDbColumnName(){
				
					return "NM_OPERADOR";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return null;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return null;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return null;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CD_COMPRADOR;

				public String getCD_COMPRADOR () {
					return this.CD_COMPRADOR;
				}

				public Boolean CD_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean CD_COMPRADORIsKey(){
				    return false;
				}
				public Integer CD_COMPRADORLength(){
				    return null;
				}
				public Integer CD_COMPRADORPrecision(){
				    return null;
				}
				public String CD_COMPRADORDefault(){
				
					return null;
				
				}
				public String CD_COMPRADORComment(){
				
				    return "";
				
				}
				public String CD_COMPRADORPattern(){
				
					return "";
				
				}
				public String CD_COMPRADOROriginalDbColumnName(){
				
					return "CD_COMPRADOR";
				
				}

				
			    public String NM_COMPRADOR;

				public String getNM_COMPRADOR () {
					return this.NM_COMPRADOR;
				}

				public Boolean NM_COMPRADORIsNullable(){
				    return true;
				}
				public Boolean NM_COMPRADORIsKey(){
				    return false;
				}
				public Integer NM_COMPRADORLength(){
				    return null;
				}
				public Integer NM_COMPRADORPrecision(){
				    return null;
				}
				public String NM_COMPRADORDefault(){
				
					return null;
				
				}
				public String NM_COMPRADORComment(){
				
				    return "";
				
				}
				public String NM_COMPRADORPattern(){
				
					return "";
				
				}
				public String NM_COMPRADOROriginalDbColumnName(){
				
					return "NM_COMPRADOR";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.VL_CUSTO = this.VL_CUSTO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.NM_OPERADOR = this.NM_OPERADOR;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CD_COMPRADOR = this.CD_COMPRADOR;
	            other.NM_COMPRADOR = this.NM_COMPRADOR;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DC_PRODUTO = readString(dis,ois);
					
       			    	this.VL_CUSTO = (BigDecimal) ois.readObject();
					
						this.CD_OPERADOR = readString(dis,ois);
					
						this.NM_OPERADOR = readString(dis,ois);
					
						this.CD_MARCA = readString(dis,ois);
					
						this.DC_MARCA = readString(dis,ois);
					
						this.CD_FORNECEDOR = readString(dis,ois);
					
						this.CD_COMPRADOR = readString(dis,ois);
					
						this.NM_COMPRADOR = readString(dis,ois);
					
						this.DT_ULTI_ATUALIZACAO = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DC_PRODUTO = readString(dis,objectIn);
					
       			    	this.VL_CUSTO = (BigDecimal) objectIn.readObject();
					
						this.CD_OPERADOR = readString(dis,objectIn);
					
						this.NM_OPERADOR = readString(dis,objectIn);
					
						this.CD_MARCA = readString(dis,objectIn);
					
						this.DC_MARCA = readString(dis,objectIn);
					
						this.CD_FORNECEDOR = readString(dis,objectIn);
					
						this.CD_COMPRADOR = readString(dis,objectIn);
					
						this.NM_COMPRADOR = readString(dis,objectIn);
					
						this.DT_ULTI_ATUALIZACAO = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DC_PRODUTO, dos, oos);
					
       			    	oos.writeObject(this.VL_CUSTO);
					
						writeString(this.CD_OPERADOR, dos, oos);
					
						writeString(this.NM_OPERADOR, dos, oos);
					
						writeString(this.CD_MARCA, dos, oos);
					
						writeString(this.DC_MARCA, dos, oos);
					
						writeString(this.CD_FORNECEDOR, dos, oos);
					
						writeString(this.CD_COMPRADOR, dos, oos);
					
						writeString(this.NM_COMPRADOR, dos, oos);
					
						writeDate(this.DT_ULTI_ATUALIZACAO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.DC_PRODUTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VL_CUSTO);
					
						writeString(this.CD_OPERADOR, dos, objectOut);
					
						writeString(this.NM_OPERADOR, dos, objectOut);
					
						writeString(this.CD_MARCA, dos, objectOut);
					
						writeString(this.DC_MARCA, dos, objectOut);
					
						writeString(this.CD_FORNECEDOR, dos, objectOut);
					
						writeString(this.CD_COMPRADOR, dos, objectOut);
					
						writeString(this.NM_COMPRADOR, dos, objectOut);
					
						writeDate(this.DT_ULTI_ATUALIZACAO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",VL_CUSTO="+String.valueOf(VL_CUSTO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",NM_OPERADOR="+NM_OPERADOR);
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CD_COMPRADOR="+CD_COMPRADOR);
		sb.append(",NM_COMPRADOR="+NM_COMPRADOR);
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_1) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_3 - inputs:(row14,row30) outputs:(DW)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row28Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row28Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row30.CD_PRODUTO = next_tHashInput_8.CD_PRODUTO;
	row30.DC_PRODUTO = next_tHashInput_8.DC_PRODUTO;
	row30.VL_CUSTO = next_tHashInput_8.VL_CUSTO;
	row30.CD_OPERADOR = next_tHashInput_8.CD_OPERADOR;
	row30.NM_OPERADOR = next_tHashInput_8.NM_OPERADOR;
	row30.CD_MARCA = next_tHashInput_8.CD_MARCA;
	row30.DC_MARCA = next_tHashInput_8.DC_MARCA;
	row30.CD_FORNECEDOR = next_tHashInput_8.CD_FORNECEDOR;
	row30.CD_COMPRADOR = next_tHashInput_8.CD_COMPRADOR;
	row30.NM_COMPRADOR = next_tHashInput_8.NM_COMPRADOR;
	row30.DT_ULTI_ATUALIZACAO = next_tHashInput_8.DT_ULTI_ATUALIZACAO;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.CD_PRODUTO = row30.CD_PRODUTO;
				
				row30_HashRow.DC_PRODUTO = row30.DC_PRODUTO;
				
				row30_HashRow.VL_CUSTO = row30.VL_CUSTO;
				
				row30_HashRow.CD_OPERADOR = row30.CD_OPERADOR;
				
				row30_HashRow.NM_OPERADOR = row30.NM_OPERADOR;
				
				row30_HashRow.CD_MARCA = row30.CD_MARCA;
				
				row30_HashRow.DC_MARCA = row30.DC_MARCA;
				
				row30_HashRow.CD_FORNECEDOR = row30.CD_FORNECEDOR;
				
				row30_HashRow.CD_COMPRADOR = row30.CD_COMPRADOR;
				
				row30_HashRow.NM_COMPRADOR = row30.NM_COMPRADOR;
				
				row30_HashRow.DT_ULTI_ATUALIZACAO = row30.DT_ULTI_ATUALIZACAO;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

tHash_Lookup_row30.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return true;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ANTERIOR;

				public BigDecimal getVL_ANTERIOR () {
					return this.VL_ANTERIOR;
				}

				public Boolean VL_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean VL_ANTERIORIsKey(){
				    return true;
				}
				public Integer VL_ANTERIORLength(){
				    return 12;
				}
				public Integer VL_ANTERIORPrecision(){
				    return 2;
				}
				public String VL_ANTERIORDefault(){
				
					return null;
				
				}
				public String VL_ANTERIORComment(){
				
				    return "";
				
				}
				public String VL_ANTERIORPattern(){
				
					return "";
				
				}
				public String VL_ANTERIOROriginalDbColumnName(){
				
					return "VL_ANTERIOR";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return true;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
						result = prime * result + ((this.VL_ATUAL == null) ? 0 : new Double(this.VL_ATUAL.doubleValue()).hashCode());
						
						result = prime * result + ((this.MKTPLACE == null) ? 0 : this.MKTPLACE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					
						if (this.VL_ATUAL == null) {
							if (other.VL_ATUAL != null)
								return false;
						
						} else if ((other.VL_ATUAL == null) || (this.VL_ATUAL.compareTo(other.VL_ATUAL)!=0))
						
							return false;
					
						if (this.MKTPLACE == null) {
							if (other.MKTPLACE != null)
								return false;
						
						} else if (!this.MKTPLACE.equals(other.MKTPLACE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.VL_ATUAL = this.VL_ATUAL;
	            other.VL_ANTERIOR = this.VL_ANTERIOR;
	            other.MKTPLACE = this.MKTPLACE;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	other.VL_ATUAL = this.VL_ATUAL;
	            	other.MKTPLACE = this.MKTPLACE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_preco_magento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_preco_magento) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VL_ANTERIOR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VL_ANTERIOR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VL_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VL_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ANTERIOR="+String.valueOf(VL_ANTERIOR));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VL_ATUAL, other.VL_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MKTPLACE, other.MKTPLACE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tAdvancedHash_row33 = 0;
		

			   		// connection name:row33
			   		// source node:tHashInput_10 - inputs:(after_tHashInput_13) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_11 - inputs:(row46,row33) outputs:(saida2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row31Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row31Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row33.CD_PRODUTO = next_tHashInput_10.CD_PRODUTO;
	row33.VL_ATUAL = next_tHashInput_10.VL_ATUAL;
	row33.VL_ANTERIOR = next_tHashInput_10.VL_ANTERIOR;
	row33.MKTPLACE = next_tHashInput_10.MKTPLACE;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.CD_PRODUTO = row33.CD_PRODUTO;
				
				row33_HashRow.VL_ATUAL = row33.VL_ATUAL;
				
				row33_HashRow.VL_ANTERIOR = row33.VL_ANTERIOR;
				
				row33_HashRow.MKTPLACE = row33.MKTPLACE;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_preco_magento_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

tHash_Lookup_row33.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final integracao_preco_magento integracao_preco_magentoClass = new integracao_preco_magento();

        int exitCode = integracao_preco_magentoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = integracao_preco_magento.class.getClassLoader().getResourceAsStream("palacio_ferramentas/integracao_preco_magento_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = integracao_preco_magento.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("WINSPARE_DB", "id_String");
                        if(context.getStringValue("WINSPARE_DB") == null) {
                            context.WINSPARE_DB = null;
                        } else {
                            context.WINSPARE_DB=(String) context.getProperty("WINSPARE_DB");
                        }
                        context.setContextType("WINSPARE_HOST", "id_String");
                        if(context.getStringValue("WINSPARE_HOST") == null) {
                            context.WINSPARE_HOST = null;
                        } else {
                            context.WINSPARE_HOST=(String) context.getProperty("WINSPARE_HOST");
                        }
                        context.setContextType("WINSPARE_PORT", "id_String");
                        if(context.getStringValue("WINSPARE_PORT") == null) {
                            context.WINSPARE_PORT = null;
                        } else {
                            context.WINSPARE_PORT=(String) context.getProperty("WINSPARE_PORT");
                        }
                        context.setContextType("WINSPARE_PWD", "id_String");
                        if(context.getStringValue("WINSPARE_PWD") == null) {
                            context.WINSPARE_PWD = null;
                        } else {
                            context.WINSPARE_PWD=(String) context.getProperty("WINSPARE_PWD");
                        }
                        context.setContextType("WINSPARE_USER", "id_String");
                        if(context.getStringValue("WINSPARE_USER") == null) {
                            context.WINSPARE_USER = null;
                        } else {
                            context.WINSPARE_USER=(String) context.getProperty("WINSPARE_USER");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("WINSPARE_DB")) {
                context.WINSPARE_DB = (String) parentContextMap.get("WINSPARE_DB");
            }if (parentContextMap.containsKey("WINSPARE_HOST")) {
                context.WINSPARE_HOST = (String) parentContextMap.get("WINSPARE_HOST");
            }if (parentContextMap.containsKey("WINSPARE_PORT")) {
                context.WINSPARE_PORT = (String) parentContextMap.get("WINSPARE_PORT");
            }if (parentContextMap.containsKey("WINSPARE_PWD")) {
                context.WINSPARE_PWD = (String) parentContextMap.get("WINSPARE_PWD");
            }if (parentContextMap.containsKey("WINSPARE_USER")) {
                context.WINSPARE_USER = (String) parentContextMap.get("WINSPARE_USER");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_5Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}catch (java.lang.Error e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_5;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_6Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

e_tDBInput_6.printStackTrace();

}catch (java.lang.Error e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_6;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_7Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

e_tDBInput_7.printStackTrace();

}catch (java.lang.Error e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_7;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_8Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}catch (java.lang.Error e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_8;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : integracao_preco_magento");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1061176 characters generated by Talend Open Studio for Big Data 
 *     on the 9 de setembro de 2024 16:50:25 BRT
 ************************************************************************************************/