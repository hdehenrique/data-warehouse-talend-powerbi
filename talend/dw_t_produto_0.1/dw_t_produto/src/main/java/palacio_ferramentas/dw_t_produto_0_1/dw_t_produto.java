// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_produto_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJava_1
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJava_2
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


@SuppressWarnings("unused")

/**
 * Job: dw_t_produto Purpose: <br>
 * Description:  <br>
 * @author henriquesantos@palaciodasferramentas.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_produto implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_produto";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_produto.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_produto.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = 
"ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_produto_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row5.mensagem;
					oneRow_tHashOutput_1.uuid = row5.uuid;
					oneRow_tHashOutput_1.versao = row5.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class saidaStruct implements routines.system.IPersistableRow<saidaStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saidaStruct other = (saidaStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saidaStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(saidaStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
saidaStruct saida = new saidaStruct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<saidaStruct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_produto_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<saidaStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
saidaStruct saida_tmp = new saidaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String CD_PRODUTO;
					String DC_PRODUTO;
					java.util.Date DT_CADASTRO;
					java.util.Date DT_ULTI_ATUALIZACAO;
					String CD_OPERADOR;
					String CD_LINHA;
					String LINHA;
					String CD_GRUPO;
					String GRUPO;
					String REFERENCIA;
					String UNIDADE;
					BigDecimal PESO;
					BigDecimal PESO_LIQ;
					BigDecimal ALTURA;
					BigDecimal LARGURA;
					BigDecimal PROFUNDIDADE;
					Character INFLAMAVEL;
					Character ATIVO_VENDA;
					Character ATIVO_COMPRA;
					Character EXPORTA_SITE;
					String CD_MARCA;
					String DC_MARCA;
					String CD_FORNECEDOR;
					String CODIGO_FABRICA;
					String LOCAL_FISICO;
					String SITUACAO_PRODUTO;
					String CD_NCM;
					String DESCRICAO_NCM;
					String LANCAMENTO;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
								
								result = prime * result + ((this.DC_PRODUTO == null) ? 0 : this.DC_PRODUTO.hashCode());
								
								result = prime * result + ((this.DT_CADASTRO == null) ? 0 : this.DT_CADASTRO.hashCode());
								
								result = prime * result + ((this.DT_ULTI_ATUALIZACAO == null) ? 0 : this.DT_ULTI_ATUALIZACAO.hashCode());
								
								result = prime * result + ((this.CD_OPERADOR == null) ? 0 : this.CD_OPERADOR.hashCode());
								
								result = prime * result + ((this.CD_LINHA == null) ? 0 : this.CD_LINHA.hashCode());
								
								result = prime * result + ((this.LINHA == null) ? 0 : this.LINHA.hashCode());
								
								result = prime * result + ((this.CD_GRUPO == null) ? 0 : this.CD_GRUPO.hashCode());
								
								result = prime * result + ((this.GRUPO == null) ? 0 : this.GRUPO.hashCode());
								
								result = prime * result + ((this.REFERENCIA == null) ? 0 : this.REFERENCIA.hashCode());
								
								result = prime * result + ((this.UNIDADE == null) ? 0 : this.UNIDADE.hashCode());
								
								result = prime * result + ((this.PESO == null) ? 0 : this.PESO.hashCode());
								
								result = prime * result + ((this.PESO_LIQ == null) ? 0 : this.PESO_LIQ.hashCode());
								
								result = prime * result + ((this.ALTURA == null) ? 0 : this.ALTURA.hashCode());
								
								result = prime * result + ((this.LARGURA == null) ? 0 : this.LARGURA.hashCode());
								
								result = prime * result + ((this.PROFUNDIDADE == null) ? 0 : this.PROFUNDIDADE.hashCode());
								
								result = prime * result + ((this.INFLAMAVEL == null) ? 0 : this.INFLAMAVEL.hashCode());
								
								result = prime * result + ((this.ATIVO_VENDA == null) ? 0 : this.ATIVO_VENDA.hashCode());
								
								result = prime * result + ((this.ATIVO_COMPRA == null) ? 0 : this.ATIVO_COMPRA.hashCode());
								
								result = prime * result + ((this.EXPORTA_SITE == null) ? 0 : this.EXPORTA_SITE.hashCode());
								
								result = prime * result + ((this.CD_MARCA == null) ? 0 : this.CD_MARCA.hashCode());
								
								result = prime * result + ((this.DC_MARCA == null) ? 0 : this.DC_MARCA.hashCode());
								
								result = prime * result + ((this.CD_FORNECEDOR == null) ? 0 : this.CD_FORNECEDOR.hashCode());
								
								result = prime * result + ((this.CODIGO_FABRICA == null) ? 0 : this.CODIGO_FABRICA.hashCode());
								
								result = prime * result + ((this.LOCAL_FISICO == null) ? 0 : this.LOCAL_FISICO.hashCode());
								
								result = prime * result + ((this.SITUACAO_PRODUTO == null) ? 0 : this.SITUACAO_PRODUTO.hashCode());
								
								result = prime * result + ((this.CD_NCM == null) ? 0 : this.CD_NCM.hashCode());
								
								result = prime * result + ((this.DESCRICAO_NCM == null) ? 0 : this.DESCRICAO_NCM.hashCode());
								
								result = prime * result + ((this.LANCAMENTO == null) ? 0 : this.LANCAMENTO.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.CD_PRODUTO == null) {
										if (other.CD_PRODUTO != null) 
											return false;
								
									} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
								 
										return false;
								
									if (this.DC_PRODUTO == null) {
										if (other.DC_PRODUTO != null) 
											return false;
								
									} else if (!this.DC_PRODUTO.equals(other.DC_PRODUTO))
								 
										return false;
								
									if (this.DT_CADASTRO == null) {
										if (other.DT_CADASTRO != null) 
											return false;
								
									} else if (!this.DT_CADASTRO.equals(other.DT_CADASTRO))
								 
										return false;
								
									if (this.DT_ULTI_ATUALIZACAO == null) {
										if (other.DT_ULTI_ATUALIZACAO != null) 
											return false;
								
									} else if (!this.DT_ULTI_ATUALIZACAO.equals(other.DT_ULTI_ATUALIZACAO))
								 
										return false;
								
									if (this.CD_OPERADOR == null) {
										if (other.CD_OPERADOR != null) 
											return false;
								
									} else if (!this.CD_OPERADOR.equals(other.CD_OPERADOR))
								 
										return false;
								
									if (this.CD_LINHA == null) {
										if (other.CD_LINHA != null) 
											return false;
								
									} else if (!this.CD_LINHA.equals(other.CD_LINHA))
								 
										return false;
								
									if (this.LINHA == null) {
										if (other.LINHA != null) 
											return false;
								
									} else if (!this.LINHA.equals(other.LINHA))
								 
										return false;
								
									if (this.CD_GRUPO == null) {
										if (other.CD_GRUPO != null) 
											return false;
								
									} else if (!this.CD_GRUPO.equals(other.CD_GRUPO))
								 
										return false;
								
									if (this.GRUPO == null) {
										if (other.GRUPO != null) 
											return false;
								
									} else if (!this.GRUPO.equals(other.GRUPO))
								 
										return false;
								
									if (this.REFERENCIA == null) {
										if (other.REFERENCIA != null) 
											return false;
								
									} else if (!this.REFERENCIA.equals(other.REFERENCIA))
								 
										return false;
								
									if (this.UNIDADE == null) {
										if (other.UNIDADE != null) 
											return false;
								
									} else if (!this.UNIDADE.equals(other.UNIDADE))
								 
										return false;
								
									if (this.PESO == null) {
										if (other.PESO != null) 
											return false;
								
									} else if (!this.PESO.equals(other.PESO))
								 
										return false;
								
									if (this.PESO_LIQ == null) {
										if (other.PESO_LIQ != null) 
											return false;
								
									} else if (!this.PESO_LIQ.equals(other.PESO_LIQ))
								 
										return false;
								
									if (this.ALTURA == null) {
										if (other.ALTURA != null) 
											return false;
								
									} else if (!this.ALTURA.equals(other.ALTURA))
								 
										return false;
								
									if (this.LARGURA == null) {
										if (other.LARGURA != null) 
											return false;
								
									} else if (!this.LARGURA.equals(other.LARGURA))
								 
										return false;
								
									if (this.PROFUNDIDADE == null) {
										if (other.PROFUNDIDADE != null) 
											return false;
								
									} else if (!this.PROFUNDIDADE.equals(other.PROFUNDIDADE))
								 
										return false;
								
									if (this.INFLAMAVEL == null) {
										if (other.INFLAMAVEL != null) 
											return false;
								
									} else if (!this.INFLAMAVEL.equals(other.INFLAMAVEL))
								 
										return false;
								
									if (this.ATIVO_VENDA == null) {
										if (other.ATIVO_VENDA != null) 
											return false;
								
									} else if (!this.ATIVO_VENDA.equals(other.ATIVO_VENDA))
								 
										return false;
								
									if (this.ATIVO_COMPRA == null) {
										if (other.ATIVO_COMPRA != null) 
											return false;
								
									} else if (!this.ATIVO_COMPRA.equals(other.ATIVO_COMPRA))
								 
										return false;
								
									if (this.EXPORTA_SITE == null) {
										if (other.EXPORTA_SITE != null) 
											return false;
								
									} else if (!this.EXPORTA_SITE.equals(other.EXPORTA_SITE))
								 
										return false;
								
									if (this.CD_MARCA == null) {
										if (other.CD_MARCA != null) 
											return false;
								
									} else if (!this.CD_MARCA.equals(other.CD_MARCA))
								 
										return false;
								
									if (this.DC_MARCA == null) {
										if (other.DC_MARCA != null) 
											return false;
								
									} else if (!this.DC_MARCA.equals(other.DC_MARCA))
								 
										return false;
								
									if (this.CD_FORNECEDOR == null) {
										if (other.CD_FORNECEDOR != null) 
											return false;
								
									} else if (!this.CD_FORNECEDOR.equals(other.CD_FORNECEDOR))
								 
										return false;
								
									if (this.CODIGO_FABRICA == null) {
										if (other.CODIGO_FABRICA != null) 
											return false;
								
									} else if (!this.CODIGO_FABRICA.equals(other.CODIGO_FABRICA))
								 
										return false;
								
									if (this.LOCAL_FISICO == null) {
										if (other.LOCAL_FISICO != null) 
											return false;
								
									} else if (!this.LOCAL_FISICO.equals(other.LOCAL_FISICO))
								 
										return false;
								
									if (this.SITUACAO_PRODUTO == null) {
										if (other.SITUACAO_PRODUTO != null) 
											return false;
								
									} else if (!this.SITUACAO_PRODUTO.equals(other.SITUACAO_PRODUTO))
								 
										return false;
								
									if (this.CD_NCM == null) {
										if (other.CD_NCM != null) 
											return false;
								
									} else if (!this.CD_NCM.equals(other.CD_NCM))
								 
										return false;
								
									if (this.DESCRICAO_NCM == null) {
										if (other.DESCRICAO_NCM != null) 
											return false;
								
									} else if (!this.DESCRICAO_NCM.equals(other.DESCRICAO_NCM))
								 
										return false;
								
									if (this.LANCAMENTO == null) {
										if (other.LANCAMENTO != null) 
											return false;
								
									} else if (!this.LANCAMENTO.equals(other.LANCAMENTO))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT I.ITE_CODITE CD_PRODUTO,\nI.ITE_DESITE DC_PRODUTO,\nI.ITE_DTACAD DT_CADASTRO,\nI.ITE_DTAALT DT_ULTI_ATUALIZACAO,"
+"\nI.ITE_CODOPE CD_OPERADOR,\n(SELECT LEFT(I.ITE_CODGRU, 3)\n   FROM CADGRU CL\n  WHERE CL.GRU_CODGRU = CONCAT(LEFT(I.ITE"
+"_CODGRU, 3), '000'))                               CD_LINHA,\n(SELECT CL.GRU_DESGRU\n   FROM CADGRU CL\n  WHERE CL.GRU_C"
+"ODGRU = CONCAT(LEFT(I.ITE_CODGRU, 3), '000'))                               LINHAGRUPO,\nRIGHT(I.ITE_CODGRU, 3)         "
+"                                                                      CD_GRUPO,\n(SELECT CG.GRU_DESGRU\n   FROM CADGRU C"
+"G\n  WHERE I.ITE_CODGRU = CG.GRU_CODGRU)                                                       GRUPO,\nI.ITE_REFERE REFE"
+"RENCIA,\nU.UNI_SIGUNI UNIDADE,\nITE_PESOIT PESO,\nITE_PESLIQ PESO_LIQ,\n(SELECT D.ITE_EXPALT FROM DESSIT D WHERE D.ITE_C"
+"ODITE = I.ITE_CODITE) ALTURA,\n(SELECT D.ITE_EXPLAR FROM DESSIT D WHERE D.ITE_CODITE = I.ITE_CODITE) LARGURA,\n(SELECT D"
+".ITE_EXPPRO FROM DESSIT D WHERE D.ITE_CODITE = I.ITE_CODITE) PROFUNDIDADE,\nITE_INFLAM INFLAMAVEL,\nITE_ITEATI ATIVO_VEN"
+"DA,\nITE_ATICOM  ATIVO_COMPRA,\nITE_EXPSIT EXPORTA_SITE,\nI.ITE_CODMAR CD_MARCA,\n(SELECT M.MAR_DESMAR\nFROM CADMAR M\nW"
+"HERE M.MAR_CODMAR = I.ITE_CODMAR) DC_MARCA,\nI.ITE_CODFOR CD_FORNECEDOR,\nI.ITE_CODFAB CODIGO_FABRICA,\nG.ITE_LOCFIS LOC"
+"AL_FISICO,\nI.ITE_SITPRO SITUACAO_PRODUTO,\nI.ITE_CLAIPI AS CD_NCM,\n(SELECT UPPER(C.NCM_DESCRI) FROM CADNCM C \n  WHERE"
+" C.NCM_CODNCM = I.ITE_CLAIPI\n  LIMIT 1) AS DESCRICAO_NCM,\nCASE \n        WHEN DATEDIFF(CURDATE(), I.ITE_DTACAD) <= 90 "
+"THEN 'SIM'\n        ELSE 'NÃO'\n    END AS LANCAMENTO\nFROM CADITE I\nINNER JOIN  ITEGER G ON G.ITE_CODITE = I.ITE_CODIT"
+"E\nINNER JOIN  CADUNI U ON U.UNI_CODUNI = I.ITE_CODUNI\n-- and I.ITE_CODITE in ( '75520','80639')\nGROUP BY I.ITE_CODITE"
+"";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.CD_PRODUTO = null;
							} else {
	                         		
        	row1.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.DC_PRODUTO = null;
							} else {
	                         		
        	row1.DC_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.DT_CADASTRO = null;
							} else {
										
				if(rs_tDBInput_2.getString(3) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row1.DT_CADASTRO = rs_tDBInput_2.getTimestamp(3);
					} else {
						row1.DT_CADASTRO = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row1.DT_CADASTRO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.DT_ULTI_ATUALIZACAO = null;
							} else {
										
				if(rs_tDBInput_2.getString(4) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row1.DT_ULTI_ATUALIZACAO = rs_tDBInput_2.getTimestamp(4);
					} else {
						row1.DT_ULTI_ATUALIZACAO = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row1.DT_ULTI_ATUALIZACAO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.CD_OPERADOR = null;
							} else {
	                         		
        	row1.CD_OPERADOR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.CD_LINHA = null;
							} else {
	                         		
        	row1.CD_LINHA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.LINHA = null;
							} else {
	                         		
        	row1.LINHA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.CD_GRUPO = null;
							} else {
	                         		
        	row1.CD_GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.GRUPO = null;
							} else {
	                         		
        	row1.GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.REFERENCIA = null;
							} else {
	                         		
        	row1.REFERENCIA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.UNIDADE = null;
							} else {
	                         		
        	row1.UNIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.PESO = null;
							} else {
		                          
            row1.PESO = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    row1.PESO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.PESO_LIQ = null;
							} else {
		                          
            row1.PESO_LIQ = rs_tDBInput_2.getBigDecimal(13);
            if(rs_tDBInput_2.wasNull()){
                    row1.PESO_LIQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.ALTURA = null;
							} else {
		                          
            row1.ALTURA = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    row1.ALTURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.LARGURA = null;
							} else {
		                          
            row1.LARGURA = rs_tDBInput_2.getBigDecimal(15);
            if(rs_tDBInput_2.wasNull()){
                    row1.LARGURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.PROFUNDIDADE = null;
							} else {
		                          
            row1.PROFUNDIDADE = rs_tDBInput_2.getBigDecimal(16);
            if(rs_tDBInput_2.wasNull()){
                    row1.PROFUNDIDADE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row1.INFLAMAVEL = null;
							} else {
									
					tmpContent_tDBInput_2 = rs_tDBInput_2.getString(17);
                    if(tmpContent_tDBInput_2 != null && tmpContent_tDBInput_2.length() > 0) {			  	
                        row1.INFLAMAVEL = tmpContent_tDBInput_2.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_2 == null) {			  	   	
                                row1.INFLAMAVEL = null;			  			
                            } else {			  		
                                row1.INFLAMAVEL = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row1.ATIVO_VENDA = null;
							} else {
									
					tmpContent_tDBInput_2 = rs_tDBInput_2.getString(18);
                    if(tmpContent_tDBInput_2 != null && tmpContent_tDBInput_2.length() > 0) {			  	
                        row1.ATIVO_VENDA = tmpContent_tDBInput_2.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_2 == null) {			  	   	
                                row1.ATIVO_VENDA = null;			  			
                            } else {			  		
                                row1.ATIVO_VENDA = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row1.ATIVO_COMPRA = null;
							} else {
									
					tmpContent_tDBInput_2 = rs_tDBInput_2.getString(19);
                    if(tmpContent_tDBInput_2 != null && tmpContent_tDBInput_2.length() > 0) {			  	
                        row1.ATIVO_COMPRA = tmpContent_tDBInput_2.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_2 == null) {			  	   	
                                row1.ATIVO_COMPRA = null;			  			
                            } else {			  		
                                row1.ATIVO_COMPRA = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row1.EXPORTA_SITE = null;
							} else {
									
					tmpContent_tDBInput_2 = rs_tDBInput_2.getString(20);
                    if(tmpContent_tDBInput_2 != null && tmpContent_tDBInput_2.length() > 0) {			  	
                        row1.EXPORTA_SITE = tmpContent_tDBInput_2.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_2 == null) {			  	   	
                                row1.EXPORTA_SITE = null;			  			
                            } else {			  		
                                row1.EXPORTA_SITE = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row1.CD_MARCA = null;
							} else {
	                         		
        	row1.CD_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row1.DC_MARCA = null;
							} else {
	                         		
        	row1.DC_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row1.CD_FORNECEDOR = null;
							} else {
	                         		
        	row1.CD_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row1.CODIGO_FABRICA = null;
							} else {
	                         		
        	row1.CODIGO_FABRICA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row1.LOCAL_FISICO = null;
							} else {
	                         		
        	row1.LOCAL_FISICO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row1.SITUACAO_PRODUTO = null;
							} else {
	                         		
        	row1.SITUACAO_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row1.CD_NCM = null;
							} else {
	                         		
        	row1.CD_NCM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row1.DESCRICAO_NCM = null;
							} else {
	                         		
        	row1.DESCRICAO_NCM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row1.LANCAMENTO = null;
							} else {
	                         		
        	row1.LANCAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row3 = null;			
if(row1.CD_PRODUTO == null){
	finder_tUniqRow_2.CD_PRODUTO = null;
}else{
	finder_tUniqRow_2.CD_PRODUTO = row1.CD_PRODUTO.toLowerCase();
}
if(row1.DC_PRODUTO == null){
	finder_tUniqRow_2.DC_PRODUTO = null;
}else{
	finder_tUniqRow_2.DC_PRODUTO = row1.DC_PRODUTO.toLowerCase();
}
finder_tUniqRow_2.DT_CADASTRO = row1.DT_CADASTRO;
finder_tUniqRow_2.DT_ULTI_ATUALIZACAO = row1.DT_ULTI_ATUALIZACAO;
if(row1.CD_OPERADOR == null){
	finder_tUniqRow_2.CD_OPERADOR = null;
}else{
	finder_tUniqRow_2.CD_OPERADOR = row1.CD_OPERADOR.toLowerCase();
}
if(row1.CD_LINHA == null){
	finder_tUniqRow_2.CD_LINHA = null;
}else{
	finder_tUniqRow_2.CD_LINHA = row1.CD_LINHA.toLowerCase();
}
if(row1.LINHA == null){
	finder_tUniqRow_2.LINHA = null;
}else{
	finder_tUniqRow_2.LINHA = row1.LINHA.toLowerCase();
}
if(row1.CD_GRUPO == null){
	finder_tUniqRow_2.CD_GRUPO = null;
}else{
	finder_tUniqRow_2.CD_GRUPO = row1.CD_GRUPO.toLowerCase();
}
if(row1.GRUPO == null){
	finder_tUniqRow_2.GRUPO = null;
}else{
	finder_tUniqRow_2.GRUPO = row1.GRUPO.toLowerCase();
}
if(row1.REFERENCIA == null){
	finder_tUniqRow_2.REFERENCIA = null;
}else{
	finder_tUniqRow_2.REFERENCIA = row1.REFERENCIA.toLowerCase();
}
if(row1.UNIDADE == null){
	finder_tUniqRow_2.UNIDADE = null;
}else{
	finder_tUniqRow_2.UNIDADE = row1.UNIDADE.toLowerCase();
}
finder_tUniqRow_2.PESO = row1.PESO;
finder_tUniqRow_2.PESO_LIQ = row1.PESO_LIQ;
finder_tUniqRow_2.ALTURA = row1.ALTURA;
finder_tUniqRow_2.LARGURA = row1.LARGURA;
finder_tUniqRow_2.PROFUNDIDADE = row1.PROFUNDIDADE;
finder_tUniqRow_2.INFLAMAVEL = row1.INFLAMAVEL;
finder_tUniqRow_2.ATIVO_VENDA = row1.ATIVO_VENDA;
finder_tUniqRow_2.ATIVO_COMPRA = row1.ATIVO_COMPRA;
finder_tUniqRow_2.EXPORTA_SITE = row1.EXPORTA_SITE;
if(row1.CD_MARCA == null){
	finder_tUniqRow_2.CD_MARCA = null;
}else{
	finder_tUniqRow_2.CD_MARCA = row1.CD_MARCA.toLowerCase();
}
if(row1.DC_MARCA == null){
	finder_tUniqRow_2.DC_MARCA = null;
}else{
	finder_tUniqRow_2.DC_MARCA = row1.DC_MARCA.toLowerCase();
}
if(row1.CD_FORNECEDOR == null){
	finder_tUniqRow_2.CD_FORNECEDOR = null;
}else{
	finder_tUniqRow_2.CD_FORNECEDOR = row1.CD_FORNECEDOR.toLowerCase();
}
if(row1.CODIGO_FABRICA == null){
	finder_tUniqRow_2.CODIGO_FABRICA = null;
}else{
	finder_tUniqRow_2.CODIGO_FABRICA = row1.CODIGO_FABRICA.toLowerCase();
}
if(row1.LOCAL_FISICO == null){
	finder_tUniqRow_2.LOCAL_FISICO = null;
}else{
	finder_tUniqRow_2.LOCAL_FISICO = row1.LOCAL_FISICO.toLowerCase();
}
if(row1.SITUACAO_PRODUTO == null){
	finder_tUniqRow_2.SITUACAO_PRODUTO = null;
}else{
	finder_tUniqRow_2.SITUACAO_PRODUTO = row1.SITUACAO_PRODUTO.toLowerCase();
}
if(row1.CD_NCM == null){
	finder_tUniqRow_2.CD_NCM = null;
}else{
	finder_tUniqRow_2.CD_NCM = row1.CD_NCM.toLowerCase();
}
if(row1.DESCRICAO_NCM == null){
	finder_tUniqRow_2.DESCRICAO_NCM = null;
}else{
	finder_tUniqRow_2.DESCRICAO_NCM = row1.DESCRICAO_NCM.toLowerCase();
}
if(row1.LANCAMENTO == null){
	finder_tUniqRow_2.LANCAMENTO = null;
}else{
	finder_tUniqRow_2.LANCAMENTO = row1.LANCAMENTO.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(row1.CD_PRODUTO == null){
	new_tUniqRow_2.CD_PRODUTO = null;
}else{
	new_tUniqRow_2.CD_PRODUTO = row1.CD_PRODUTO.toLowerCase();
}
if(row1.DC_PRODUTO == null){
	new_tUniqRow_2.DC_PRODUTO = null;
}else{
	new_tUniqRow_2.DC_PRODUTO = row1.DC_PRODUTO.toLowerCase();
}
new_tUniqRow_2.DT_CADASTRO = row1.DT_CADASTRO;
new_tUniqRow_2.DT_ULTI_ATUALIZACAO = row1.DT_ULTI_ATUALIZACAO;
if(row1.CD_OPERADOR == null){
	new_tUniqRow_2.CD_OPERADOR = null;
}else{
	new_tUniqRow_2.CD_OPERADOR = row1.CD_OPERADOR.toLowerCase();
}
if(row1.CD_LINHA == null){
	new_tUniqRow_2.CD_LINHA = null;
}else{
	new_tUniqRow_2.CD_LINHA = row1.CD_LINHA.toLowerCase();
}
if(row1.LINHA == null){
	new_tUniqRow_2.LINHA = null;
}else{
	new_tUniqRow_2.LINHA = row1.LINHA.toLowerCase();
}
if(row1.CD_GRUPO == null){
	new_tUniqRow_2.CD_GRUPO = null;
}else{
	new_tUniqRow_2.CD_GRUPO = row1.CD_GRUPO.toLowerCase();
}
if(row1.GRUPO == null){
	new_tUniqRow_2.GRUPO = null;
}else{
	new_tUniqRow_2.GRUPO = row1.GRUPO.toLowerCase();
}
if(row1.REFERENCIA == null){
	new_tUniqRow_2.REFERENCIA = null;
}else{
	new_tUniqRow_2.REFERENCIA = row1.REFERENCIA.toLowerCase();
}
if(row1.UNIDADE == null){
	new_tUniqRow_2.UNIDADE = null;
}else{
	new_tUniqRow_2.UNIDADE = row1.UNIDADE.toLowerCase();
}
new_tUniqRow_2.PESO = row1.PESO;
new_tUniqRow_2.PESO_LIQ = row1.PESO_LIQ;
new_tUniqRow_2.ALTURA = row1.ALTURA;
new_tUniqRow_2.LARGURA = row1.LARGURA;
new_tUniqRow_2.PROFUNDIDADE = row1.PROFUNDIDADE;
new_tUniqRow_2.INFLAMAVEL = row1.INFLAMAVEL;
new_tUniqRow_2.ATIVO_VENDA = row1.ATIVO_VENDA;
new_tUniqRow_2.ATIVO_COMPRA = row1.ATIVO_COMPRA;
new_tUniqRow_2.EXPORTA_SITE = row1.EXPORTA_SITE;
if(row1.CD_MARCA == null){
	new_tUniqRow_2.CD_MARCA = null;
}else{
	new_tUniqRow_2.CD_MARCA = row1.CD_MARCA.toLowerCase();
}
if(row1.DC_MARCA == null){
	new_tUniqRow_2.DC_MARCA = null;
}else{
	new_tUniqRow_2.DC_MARCA = row1.DC_MARCA.toLowerCase();
}
if(row1.CD_FORNECEDOR == null){
	new_tUniqRow_2.CD_FORNECEDOR = null;
}else{
	new_tUniqRow_2.CD_FORNECEDOR = row1.CD_FORNECEDOR.toLowerCase();
}
if(row1.CODIGO_FABRICA == null){
	new_tUniqRow_2.CODIGO_FABRICA = null;
}else{
	new_tUniqRow_2.CODIGO_FABRICA = row1.CODIGO_FABRICA.toLowerCase();
}
if(row1.LOCAL_FISICO == null){
	new_tUniqRow_2.LOCAL_FISICO = null;
}else{
	new_tUniqRow_2.LOCAL_FISICO = row1.LOCAL_FISICO.toLowerCase();
}
if(row1.SITUACAO_PRODUTO == null){
	new_tUniqRow_2.SITUACAO_PRODUTO = null;
}else{
	new_tUniqRow_2.SITUACAO_PRODUTO = row1.SITUACAO_PRODUTO.toLowerCase();
}
if(row1.CD_NCM == null){
	new_tUniqRow_2.CD_NCM = null;
}else{
	new_tUniqRow_2.CD_NCM = row1.CD_NCM.toLowerCase();
}
if(row1.DESCRICAO_NCM == null){
	new_tUniqRow_2.DESCRICAO_NCM = null;
}else{
	new_tUniqRow_2.DESCRICAO_NCM = row1.DESCRICAO_NCM.toLowerCase();
}
if(row1.LANCAMENTO == null){
	new_tUniqRow_2.LANCAMENTO = null;
}else{
	new_tUniqRow_2.LANCAMENTO = row1.LANCAMENTO.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3.CD_PRODUTO = row1.CD_PRODUTO;			row3.DC_PRODUTO = row1.DC_PRODUTO;			row3.DT_CADASTRO = row1.DT_CADASTRO;			row3.DT_ULTI_ATUALIZACAO = row1.DT_ULTI_ATUALIZACAO;			row3.CD_OPERADOR = row1.CD_OPERADOR;			row3.CD_LINHA = row1.CD_LINHA;			row3.LINHA = row1.LINHA;			row3.CD_GRUPO = row1.CD_GRUPO;			row3.GRUPO = row1.GRUPO;			row3.REFERENCIA = row1.REFERENCIA;			row3.UNIDADE = row1.UNIDADE;			row3.PESO = row1.PESO;			row3.PESO_LIQ = row1.PESO_LIQ;			row3.ALTURA = row1.ALTURA;			row3.LARGURA = row1.LARGURA;			row3.PROFUNDIDADE = row1.PROFUNDIDADE;			row3.INFLAMAVEL = row1.INFLAMAVEL;			row3.ATIVO_VENDA = row1.ATIVO_VENDA;			row3.ATIVO_COMPRA = row1.ATIVO_COMPRA;			row3.EXPORTA_SITE = row1.EXPORTA_SITE;			row3.CD_MARCA = row1.CD_MARCA;			row3.DC_MARCA = row1.DC_MARCA;			row3.CD_FORNECEDOR = row1.CD_FORNECEDOR;			row3.CODIGO_FABRICA = row1.CODIGO_FABRICA;			row3.LOCAL_FISICO = row1.LOCAL_FISICO;			row3.SITUACAO_PRODUTO = row1.SITUACAO_PRODUTO;			row3.CD_NCM = row1.CD_NCM;			row3.DESCRICAO_NCM = row1.DESCRICAO_NCM;			row3.LANCAMENTO = row1.LANCAMENTO;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

saida = null;


// # Output table : 'saida'
saida_tmp.CD_PRODUTO = row3.CD_PRODUTO ;
saida_tmp.DC_PRODUTO = row3.DC_PRODUTO ;
saida_tmp.DT_CADASTRO = row3.DT_CADASTRO ;
saida_tmp.DT_ULTI_ATUALIZACAO = row3.DT_ULTI_ATUALIZACAO ;
saida_tmp.CD_OPERADOR = row3.CD_OPERADOR ;
saida_tmp.CD_LINHA = row3.CD_LINHA ;
saida_tmp.LINHA = row3.LINHA ;
saida_tmp.CD_GRUPO = row3.CD_GRUPO ;
saida_tmp.GRUPO = row3.GRUPO ;
saida_tmp.REFERENCIA = row3.REFERENCIA ;
saida_tmp.UNIDADE = row3.UNIDADE ;
saida_tmp.PESO = row3.PESO ;
saida_tmp.PESO_LIQ = row3.PESO_LIQ ;
saida_tmp.ALTURA = row3.ALTURA ;
saida_tmp.LARGURA = row3.LARGURA ;
saida_tmp.PROFUNDIDADE = row3.PROFUNDIDADE ;
saida_tmp.INFLAMAVEL = row3.INFLAMAVEL ;
saida_tmp.ATIVO_VENDA = row3.ATIVO_VENDA ;
saida_tmp.ATIVO_COMPRA = row3.ATIVO_COMPRA ;
saida_tmp.EXPORTA_SITE = row3.EXPORTA_SITE ;
saida_tmp.CD_MARCA = row3.CD_MARCA ;
saida_tmp.DC_MARCA = row3.DC_MARCA ;
saida_tmp.CD_FORNECEDOR = row3.CD_FORNECEDOR ;
saida_tmp.CODIGO_FABRICA = row3.CODIGO_FABRICA ;
saida_tmp.LOCAL_FISICO = row3.LOCAL_FISICO ;
saida_tmp.SITUACAO_PRODUTO = row3.SITUACAO_PRODUTO ;
saida_tmp.CD_NCM = row3.CD_NCM ;
saida_tmp.DESCRICAO_NCM = row3.DESCRICAO_NCM ;
saida_tmp.LANCAMENTO = row3.LANCAMENTO ;
saida = saida_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "saida"
if(saida != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"saida"
						
						);
					}
					



    
		saidaStruct oneRow_tHashOutput_2 = new saidaStruct();
				
					oneRow_tHashOutput_2.CD_PRODUTO = saida.CD_PRODUTO;
					oneRow_tHashOutput_2.DC_PRODUTO = saida.DC_PRODUTO;
					oneRow_tHashOutput_2.DT_CADASTRO = saida.DT_CADASTRO;
					oneRow_tHashOutput_2.DT_ULTI_ATUALIZACAO = saida.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_2.CD_OPERADOR = saida.CD_OPERADOR;
					oneRow_tHashOutput_2.CD_LINHA = saida.CD_LINHA;
					oneRow_tHashOutput_2.LINHA = saida.LINHA;
					oneRow_tHashOutput_2.CD_GRUPO = saida.CD_GRUPO;
					oneRow_tHashOutput_2.GRUPO = saida.GRUPO;
					oneRow_tHashOutput_2.REFERENCIA = saida.REFERENCIA;
					oneRow_tHashOutput_2.UNIDADE = saida.UNIDADE;
					oneRow_tHashOutput_2.PESO = saida.PESO;
					oneRow_tHashOutput_2.PESO_LIQ = saida.PESO_LIQ;
					oneRow_tHashOutput_2.ALTURA = saida.ALTURA;
					oneRow_tHashOutput_2.LARGURA = saida.LARGURA;
					oneRow_tHashOutput_2.PROFUNDIDADE = saida.PROFUNDIDADE;
					oneRow_tHashOutput_2.INFLAMAVEL = saida.INFLAMAVEL;
					oneRow_tHashOutput_2.ATIVO_VENDA = saida.ATIVO_VENDA;
					oneRow_tHashOutput_2.ATIVO_COMPRA = saida.ATIVO_COMPRA;
					oneRow_tHashOutput_2.EXPORTA_SITE = saida.EXPORTA_SITE;
					oneRow_tHashOutput_2.CD_MARCA = saida.CD_MARCA;
					oneRow_tHashOutput_2.DC_MARCA = saida.DC_MARCA;
					oneRow_tHashOutput_2.CD_FORNECEDOR = saida.CD_FORNECEDOR;
					oneRow_tHashOutput_2.CODIGO_FABRICA = saida.CODIGO_FABRICA;
					oneRow_tHashOutput_2.LOCAL_FISICO = saida.LOCAL_FISICO;
					oneRow_tHashOutput_2.SITUACAO_PRODUTO = saida.SITUACAO_PRODUTO;
					oneRow_tHashOutput_2.CD_NCM = saida.CD_NCM;
					oneRow_tHashOutput_2.DESCRICAO_NCM = saida.DESCRICAO_NCM;
					oneRow_tHashOutput_2.LANCAMENTO = saida.LANCAMENTO;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "saida"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado Processo de Busca os dados dos Produtos no Autcom: "+data);

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class sitproStruct implements routines.system.IPersistableRow<sitproStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 120;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String DESC_SITUACAO_PRODUTO;

				public String getDESC_SITUACAO_PRODUTO () {
					return this.DESC_SITUACAO_PRODUTO;
				}

				public Boolean DESC_SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESC_SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESC_SITUACAO_PRODUTOLength(){
				    return null;
				}
				public Integer DESC_SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESC_SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESC_SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESC_SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESC_SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "DESC_SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CURVA_VLR;

				public String getCURVA_VLR () {
					return this.CURVA_VLR;
				}

				public Boolean CURVA_VLRIsNullable(){
				    return true;
				}
				public Boolean CURVA_VLRIsKey(){
				    return false;
				}
				public Integer CURVA_VLRLength(){
				    return 5;
				}
				public Integer CURVA_VLRPrecision(){
				    return null;
				}
				public String CURVA_VLRDefault(){
				
					return null;
				
				}
				public String CURVA_VLRComment(){
				
				    return "";
				
				}
				public String CURVA_VLRPattern(){
				
					return "";
				
				}
				public String CURVA_VLROriginalDbColumnName(){
				
					return "CURVA_VLR";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				
			    public String curva_vlr_cd;

				public String getCurva_vlr_cd () {
					return this.curva_vlr_cd;
				}

				public Boolean curva_vlr_cdIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_cdIsKey(){
				    return false;
				}
				public Integer curva_vlr_cdLength(){
				    return null;
				}
				public Integer curva_vlr_cdPrecision(){
				    return null;
				}
				public String curva_vlr_cdDefault(){
				
					return null;
				
				}
				public String curva_vlr_cdComment(){
				
				    return "";
				
				}
				public String curva_vlr_cdPattern(){
				
					return "";
				
				}
				public String curva_vlr_cdOriginalDbColumnName(){
				
					return "curva_vlr_cd";
				
				}

				
			    public String curva_vlr_mg;

				public String getCurva_vlr_mg () {
					return this.curva_vlr_mg;
				}

				public Boolean curva_vlr_mgIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_mgIsKey(){
				    return false;
				}
				public Integer curva_vlr_mgLength(){
				    return null;
				}
				public Integer curva_vlr_mgPrecision(){
				    return null;
				}
				public String curva_vlr_mgDefault(){
				
					return null;
				
				}
				public String curva_vlr_mgComment(){
				
				    return "";
				
				}
				public String curva_vlr_mgPattern(){
				
					return "";
				
				}
				public String curva_vlr_mgOriginalDbColumnName(){
				
					return "curva_vlr_mg";
				
				}

				
			    public String curva_vlr_rei;

				public String getCurva_vlr_rei () {
					return this.curva_vlr_rei;
				}

				public Boolean curva_vlr_reiIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_reiIsKey(){
				    return false;
				}
				public Integer curva_vlr_reiLength(){
				    return null;
				}
				public Integer curva_vlr_reiPrecision(){
				    return null;
				}
				public String curva_vlr_reiDefault(){
				
					return null;
				
				}
				public String curva_vlr_reiComment(){
				
				    return "";
				
				}
				public String curva_vlr_reiPattern(){
				
					return "";
				
				}
				public String curva_vlr_reiOriginalDbColumnName(){
				
					return "curva_vlr_rei";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sitproStruct other = (sitproStruct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sitproStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.DESC_SITUACAO_PRODUTO = this.DESC_SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.DT_ULT_COMPRA = this.DT_ULT_COMPRA;
	            other.DIAS_ULT_COMPRA = this.DIAS_ULT_COMPRA;
	            other.EMP_ULT_COMPRA = this.EMP_ULT_COMPRA;
	            other.QTD_ULT_COMPRA = this.QTD_ULT_COMPRA;
	            other.VL_ULT_COMPRA = this.VL_ULT_COMPRA;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            other.CURVA_VLR = this.CURVA_VLR;
	            other.LANCAMENTO = this.LANCAMENTO;
	            other.curva_vlr_cd = this.curva_vlr_cd;
	            other.curva_vlr_mg = this.curva_vlr_mg;
	            other.curva_vlr_rei = this.curva_vlr_rei;
	            
	}

	public void copyKeysDataTo(sitproStruct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.DESC_SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CURVA_VLR = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.DESC_SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CURVA_VLR = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.DESC_SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.DESC_SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",DESC_SITUACAO_PRODUTO="+DESC_SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CURVA_VLR="+CURVA_VLR);
		sb.append(",LANCAMENTO="+LANCAMENTO);
		sb.append(",curva_vlr_cd="+curva_vlr_cd);
		sb.append(",curva_vlr_mg="+curva_vlr_mg);
		sb.append(",curva_vlr_rei="+curva_vlr_rei);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sitproStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 120;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CURVA_VLR;

				public String getCURVA_VLR () {
					return this.CURVA_VLR;
				}

				public Boolean CURVA_VLRIsNullable(){
				    return true;
				}
				public Boolean CURVA_VLRIsKey(){
				    return false;
				}
				public Integer CURVA_VLRLength(){
				    return 5;
				}
				public Integer CURVA_VLRPrecision(){
				    return null;
				}
				public String CURVA_VLRDefault(){
				
					return null;
				
				}
				public String CURVA_VLRComment(){
				
				    return "";
				
				}
				public String CURVA_VLRPattern(){
				
					return "";
				
				}
				public String CURVA_VLROriginalDbColumnName(){
				
					return "CURVA_VLR";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				
			    public String curva_vlr_cd;

				public String getCurva_vlr_cd () {
					return this.curva_vlr_cd;
				}

				public Boolean curva_vlr_cdIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_cdIsKey(){
				    return false;
				}
				public Integer curva_vlr_cdLength(){
				    return null;
				}
				public Integer curva_vlr_cdPrecision(){
				    return null;
				}
				public String curva_vlr_cdDefault(){
				
					return null;
				
				}
				public String curva_vlr_cdComment(){
				
				    return "";
				
				}
				public String curva_vlr_cdPattern(){
				
					return "";
				
				}
				public String curva_vlr_cdOriginalDbColumnName(){
				
					return "curva_vlr_cd";
				
				}

				
			    public String curva_vlr_mg;

				public String getCurva_vlr_mg () {
					return this.curva_vlr_mg;
				}

				public Boolean curva_vlr_mgIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_mgIsKey(){
				    return false;
				}
				public Integer curva_vlr_mgLength(){
				    return null;
				}
				public Integer curva_vlr_mgPrecision(){
				    return null;
				}
				public String curva_vlr_mgDefault(){
				
					return null;
				
				}
				public String curva_vlr_mgComment(){
				
				    return "";
				
				}
				public String curva_vlr_mgPattern(){
				
					return "";
				
				}
				public String curva_vlr_mgOriginalDbColumnName(){
				
					return "curva_vlr_mg";
				
				}

				
			    public String curva_vlr_rei;

				public String getCurva_vlr_rei () {
					return this.curva_vlr_rei;
				}

				public Boolean curva_vlr_reiIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_reiIsKey(){
				    return false;
				}
				public Integer curva_vlr_reiLength(){
				    return null;
				}
				public Integer curva_vlr_reiPrecision(){
				    return null;
				}
				public String curva_vlr_reiDefault(){
				
					return null;
				
				}
				public String curva_vlr_reiComment(){
				
				    return "";
				
				}
				public String curva_vlr_reiPattern(){
				
					return "";
				
				}
				public String curva_vlr_reiOriginalDbColumnName(){
				
					return "curva_vlr_rei";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CURVA_VLR = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CURVA_VLR = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CURVA_VLR="+CURVA_VLR);
		sb.append(",LANCAMENTO="+LANCAMENTO);
		sb.append(",curva_vlr_cd="+curva_vlr_cd);
		sb.append(",curva_vlr_mg="+curva_vlr_mg);
		sb.append(",curva_vlr_rei="+curva_vlr_rei);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_tableStruct implements routines.system.IPersistableRow<insert_tableStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 120;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_tableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tHashInput_2Struct other = (after_tHashInput_2Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tHashInput_2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(after_tHashInput_2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);
		tHashInput_4Process(globalMap);
		tDBInput_4Process(globalMap);

		row2Struct row2 = new row2Struct();
insert_tableStruct insert_table = new insert_tableStruct();
insertStruct insert = new insertStruct();
sitproStruct sitpro = new sitproStruct();







	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sitpro");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_t_produto").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_t_produto").toLowerCase();
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 1000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
            try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_3 = new java.lang.StringBuilder();
        sb_tDBOutput_3.append("INSERT INTO \"").append(tableName_tDBOutput_3).append("\" (\"cd_produto\",\"dc_produto\",\"dt_cadastro\",\"dt_ulti_atualizacao\",\"cd_operador\",\"cd_linha\",\"linha\",\"cd_grupo\",\"grupo\",\"referencia\",\"unidade\",\"peso\",\"peso_liq\",\"altura\",\"largura\",\"profundidade\",\"inflamavel\",\"ativo_venda\",\"ativo_compra\",\"exporta_site\",\"cd_marca\",\"dc_marca\",\"cd_fornecedor\",\"codigo_fabrica\",\"local_fisico\",\"situacao_produto\",\"desc_situacao_produto\",\"cd_ncm\",\"descricao_ncm\",\"dt_ult_compra\",\"dias_ult_compra\",\"emp_ult_compra\",\"qtd_ult_compra\",\"vl_ult_compra\",\"valor_unitario\",\"curva_vlr\",\"lancamento\",\"curva_vlr_cd\",\"curva_vlr_mg\",\"curva_vlr_rei\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_3 = sb_tDBOutput_3.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
sitproStruct sitpro_tmp = new sitproStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_table");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_tableStruct insert_table_tmp = new insert_tableStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<saidaStruct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_produto_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<saidaStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    saidaStruct next_tHashInput_2 = iterator_tHashInput_2.next();

	row2.CD_PRODUTO = next_tHashInput_2.CD_PRODUTO;
	row2.DC_PRODUTO = next_tHashInput_2.DC_PRODUTO;
	row2.DT_CADASTRO = next_tHashInput_2.DT_CADASTRO;
	row2.DT_ULTI_ATUALIZACAO = next_tHashInput_2.DT_ULTI_ATUALIZACAO;
	row2.CD_OPERADOR = next_tHashInput_2.CD_OPERADOR;
	row2.CD_LINHA = next_tHashInput_2.CD_LINHA;
	row2.LINHA = next_tHashInput_2.LINHA;
	row2.CD_GRUPO = next_tHashInput_2.CD_GRUPO;
	row2.GRUPO = next_tHashInput_2.GRUPO;
	row2.REFERENCIA = next_tHashInput_2.REFERENCIA;
	row2.UNIDADE = next_tHashInput_2.UNIDADE;
	row2.PESO = next_tHashInput_2.PESO;
	row2.PESO_LIQ = next_tHashInput_2.PESO_LIQ;
	row2.ALTURA = next_tHashInput_2.ALTURA;
	row2.LARGURA = next_tHashInput_2.LARGURA;
	row2.PROFUNDIDADE = next_tHashInput_2.PROFUNDIDADE;
	row2.INFLAMAVEL = next_tHashInput_2.INFLAMAVEL;
	row2.ATIVO_VENDA = next_tHashInput_2.ATIVO_VENDA;
	row2.ATIVO_COMPRA = next_tHashInput_2.ATIVO_COMPRA;
	row2.EXPORTA_SITE = next_tHashInput_2.EXPORTA_SITE;
	row2.CD_MARCA = next_tHashInput_2.CD_MARCA;
	row2.DC_MARCA = next_tHashInput_2.DC_MARCA;
	row2.CD_FORNECEDOR = next_tHashInput_2.CD_FORNECEDOR;
	row2.CODIGO_FABRICA = next_tHashInput_2.CODIGO_FABRICA;
	row2.LOCAL_FISICO = next_tHashInput_2.LOCAL_FISICO;
	row2.SITUACAO_PRODUTO = next_tHashInput_2.SITUACAO_PRODUTO;
	row2.CD_NCM = next_tHashInput_2.CD_NCM;
	row2.DESCRICAO_NCM = next_tHashInput_2.DESCRICAO_NCM;
	row2.LANCAMENTO = next_tHashInput_2.LANCAMENTO;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row11Struct row11 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row11HashKey.COD_ITEM = row2.CD_PRODUTO ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.COD_ITEM = '" + row11HashKey.COD_ITEM + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

insert_table = null;


// # Output table : 'insert_table'
insert_table_tmp.CD_PRODUTO = row2.CD_PRODUTO;
insert_table_tmp.DC_PRODUTO = row2.DC_PRODUTO;
insert_table_tmp.DT_CADASTRO = row2.DT_CADASTRO;
insert_table_tmp.DT_ULTI_ATUALIZACAO = row2.DT_ULTI_ATUALIZACAO;
insert_table_tmp.CD_OPERADOR = row2.CD_OPERADOR;
insert_table_tmp.CD_LINHA = row2.CD_LINHA;
insert_table_tmp.LINHA = row2.LINHA;
insert_table_tmp.CD_GRUPO = row2.CD_GRUPO;
insert_table_tmp.GRUPO = row2.GRUPO;
insert_table_tmp.REFERENCIA = row2.REFERENCIA;
insert_table_tmp.UNIDADE = row2.UNIDADE;
insert_table_tmp.PESO = row2.PESO;
insert_table_tmp.PESO_LIQ = row2.PESO_LIQ ;
insert_table_tmp.ALTURA = row2.ALTURA;
insert_table_tmp.LARGURA = row2.LARGURA;
insert_table_tmp.PROFUNDIDADE = row2.PROFUNDIDADE;
insert_table_tmp.INFLAMAVEL = row2.INFLAMAVEL;
insert_table_tmp.ATIVO_VENDA = row2.ATIVO_VENDA;
insert_table_tmp.ATIVO_COMPRA = row2.ATIVO_COMPRA;
insert_table_tmp.EXPORTA_SITE = row2.EXPORTA_SITE;
insert_table_tmp.CD_MARCA = row2.CD_MARCA;
insert_table_tmp.DC_MARCA = row2.DC_MARCA;
insert_table_tmp.CD_FORNECEDOR = row2.CD_FORNECEDOR;
insert_table_tmp.CODIGO_FABRICA = row2.CODIGO_FABRICA;
insert_table_tmp.LOCAL_FISICO = row2.LOCAL_FISICO;
insert_table_tmp.SITUACAO_PRODUTO = row2.SITUACAO_PRODUTO ;
insert_table_tmp.CD_NCM = row2.CD_NCM ;
insert_table_tmp.DESCRICAO_NCM = row2.DESCRICAO_NCM ;
insert_table_tmp.DT_ULT_COMPRA = row11.DT_ULT_COMPRA ;
insert_table_tmp.DIAS_ULT_COMPRA = row11.DIAS_ULT_COMPRA ;
insert_table_tmp.EMP_ULT_COMPRA = row11.EMP_ULT_COMPRA ;
insert_table_tmp.QTD_ULT_COMPRA = row11.QTD_ULT_COMPRA ;
insert_table_tmp.VL_ULT_COMPRA = row11.VL_ULT_COMPRA ;
insert_table_tmp.VALOR_UNITARIO = row11.VALOR_UNITARIO;
insert_table_tmp.LANCAMENTO = row2.LANCAMENTO ;
insert_table = insert_table_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "insert_table"
if(insert_table != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_table"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row12HashKey.CD_PRODUTO = insert_table.CD_PRODUTO ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.CD_PRODUTO = '" + row12HashKey.CD_PRODUTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.CD_PRODUTO = insert_table.CD_PRODUTO;
insert_tmp.DC_PRODUTO = insert_table.DC_PRODUTO;
insert_tmp.DT_CADASTRO = insert_table.DT_CADASTRO;
insert_tmp.DT_ULTI_ATUALIZACAO = insert_table.DT_ULTI_ATUALIZACAO;
insert_tmp.CD_OPERADOR = insert_table.CD_OPERADOR;
insert_tmp.CD_LINHA = insert_table.CD_LINHA;
insert_tmp.LINHA = insert_table.LINHA;
insert_tmp.CD_GRUPO = insert_table.CD_GRUPO;
insert_tmp.GRUPO = insert_table.GRUPO;
insert_tmp.REFERENCIA = insert_table.REFERENCIA;
insert_tmp.UNIDADE = insert_table.UNIDADE;
insert_tmp.PESO = insert_table.PESO;
insert_tmp.PESO_LIQ = insert_table.PESO_LIQ;
insert_tmp.ALTURA = insert_table.ALTURA;
insert_tmp.LARGURA = insert_table.LARGURA;
insert_tmp.PROFUNDIDADE = insert_table.PROFUNDIDADE;
insert_tmp.INFLAMAVEL = insert_table.INFLAMAVEL;
insert_tmp.ATIVO_VENDA = insert_table.ATIVO_VENDA;
insert_tmp.ATIVO_COMPRA = insert_table.ATIVO_COMPRA;
insert_tmp.EXPORTA_SITE = insert_table.EXPORTA_SITE;
insert_tmp.CD_MARCA = insert_table.CD_MARCA;
insert_tmp.DC_MARCA = insert_table.DC_MARCA;
insert_tmp.CD_FORNECEDOR = insert_table.CD_FORNECEDOR;
insert_tmp.CODIGO_FABRICA = insert_table.CODIGO_FABRICA;
insert_tmp.LOCAL_FISICO = insert_table.LOCAL_FISICO;
insert_tmp.SITUACAO_PRODUTO = insert_table.SITUACAO_PRODUTO;
insert_tmp.CD_NCM = insert_table.CD_NCM;
insert_tmp.DESCRICAO_NCM = insert_table.DESCRICAO_NCM;
insert_tmp.DT_ULT_COMPRA = insert_table.DT_ULT_COMPRA;
insert_tmp.DIAS_ULT_COMPRA = insert_table.DIAS_ULT_COMPRA;
insert_tmp.EMP_ULT_COMPRA = insert_table.EMP_ULT_COMPRA;
insert_tmp.QTD_ULT_COMPRA = insert_table.QTD_ULT_COMPRA;
insert_tmp.VL_ULT_COMPRA = insert_table.VL_ULT_COMPRA;
insert_tmp.VALOR_UNITARIO = insert_table.VALOR_UNITARIO;
insert_tmp.CURVA_VLR = row12.CURVA_VLR ;
insert_tmp.LANCAMENTO = insert_table.LANCAMENTO ;
insert_tmp.curva_vlr_cd = row12.curva_vlr_cd ;
insert_tmp.curva_vlr_mg = row12.curva_vlr_mg ;
insert_tmp.curva_vlr_rei = row12.curva_vlr_rei ;
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row13HashKey.SIT_CODIGO = insert.SITUACAO_PRODUTO ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.SIT_CODIGO = '" + row13HashKey.SIT_CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

sitpro = null;


// # Output table : 'sitpro'
sitpro_tmp.CD_PRODUTO = insert.CD_PRODUTO;
sitpro_tmp.DC_PRODUTO = insert.DC_PRODUTO;
sitpro_tmp.DT_CADASTRO = insert.DT_CADASTRO;
sitpro_tmp.DT_ULTI_ATUALIZACAO = insert.DT_ULTI_ATUALIZACAO;
sitpro_tmp.CD_OPERADOR = insert.CD_OPERADOR;
sitpro_tmp.CD_LINHA = insert.CD_LINHA;
sitpro_tmp.LINHA = insert.LINHA;
sitpro_tmp.CD_GRUPO = insert.CD_GRUPO;
sitpro_tmp.GRUPO = insert.GRUPO;
sitpro_tmp.REFERENCIA = insert.REFERENCIA;
sitpro_tmp.UNIDADE = insert.UNIDADE;
sitpro_tmp.PESO = insert.PESO;
sitpro_tmp.PESO_LIQ = insert.PESO_LIQ;
sitpro_tmp.ALTURA = insert.ALTURA;
sitpro_tmp.LARGURA = insert.LARGURA;
sitpro_tmp.PROFUNDIDADE = insert.PROFUNDIDADE;
sitpro_tmp.INFLAMAVEL = insert.INFLAMAVEL;
sitpro_tmp.ATIVO_VENDA = insert.ATIVO_VENDA;
sitpro_tmp.ATIVO_COMPRA = insert.ATIVO_COMPRA;
sitpro_tmp.EXPORTA_SITE = insert.EXPORTA_SITE;
sitpro_tmp.CD_MARCA = insert.CD_MARCA;
sitpro_tmp.DC_MARCA = insert.DC_MARCA;
sitpro_tmp.CD_FORNECEDOR = insert.CD_FORNECEDOR;
sitpro_tmp.CODIGO_FABRICA = insert.CODIGO_FABRICA;
sitpro_tmp.LOCAL_FISICO = insert.LOCAL_FISICO;
sitpro_tmp.SITUACAO_PRODUTO = insert.SITUACAO_PRODUTO;
sitpro_tmp.DESC_SITUACAO_PRODUTO = row13.SIT_DESCRI ;
sitpro_tmp.CD_NCM = insert.CD_NCM;
sitpro_tmp.DESCRICAO_NCM = insert.DESCRICAO_NCM;
sitpro_tmp.DT_ULT_COMPRA = insert.DT_ULT_COMPRA;
sitpro_tmp.DIAS_ULT_COMPRA = insert.DIAS_ULT_COMPRA;
sitpro_tmp.EMP_ULT_COMPRA = insert.EMP_ULT_COMPRA;
sitpro_tmp.QTD_ULT_COMPRA = insert.QTD_ULT_COMPRA;
sitpro_tmp.VL_ULT_COMPRA = insert.VL_ULT_COMPRA;
sitpro_tmp.VALOR_UNITARIO = insert.VALOR_UNITARIO;
sitpro_tmp.CURVA_VLR = insert.CURVA_VLR;
sitpro_tmp.LANCAMENTO = insert.LANCAMENTO;
sitpro_tmp.curva_vlr_cd = insert.curva_vlr_cd;
sitpro_tmp.curva_vlr_mg = insert.curva_vlr_mg;
sitpro_tmp.curva_vlr_rei = insert.curva_vlr_rei;
sitpro = sitpro_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "sitpro"
if(sitpro != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sitpro"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(sitpro.CD_PRODUTO == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, sitpro.CD_PRODUTO);
}

                    if(sitpro.DC_PRODUTO == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, sitpro.DC_PRODUTO);
}

                    if(sitpro.DT_CADASTRO != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(sitpro.DT_CADASTRO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(sitpro.DT_ULTI_ATUALIZACAO != null) {
pstmt_tDBOutput_3.setTimestamp(4, new java.sql.Timestamp(sitpro.DT_ULTI_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(sitpro.CD_OPERADOR == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, sitpro.CD_OPERADOR);
}

                    if(sitpro.CD_LINHA == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, sitpro.CD_LINHA);
}

                    if(sitpro.LINHA == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, sitpro.LINHA);
}

                    if(sitpro.CD_GRUPO == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, sitpro.CD_GRUPO);
}

                    if(sitpro.GRUPO == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, sitpro.GRUPO);
}

                    if(sitpro.REFERENCIA == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, sitpro.REFERENCIA);
}

                    if(sitpro.UNIDADE == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, sitpro.UNIDADE);
}

                    pstmt_tDBOutput_3.setBigDecimal(12, sitpro.PESO);

                    pstmt_tDBOutput_3.setBigDecimal(13, sitpro.PESO_LIQ);

                    pstmt_tDBOutput_3.setBigDecimal(14, sitpro.ALTURA);

                    pstmt_tDBOutput_3.setBigDecimal(15, sitpro.LARGURA);

                    pstmt_tDBOutput_3.setBigDecimal(16, sitpro.PROFUNDIDADE);

                    if(sitpro.INFLAMAVEL == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.CHAR);
} else {if(sitpro.INFLAMAVEL == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.CHAR);
} else if(sitpro.INFLAMAVEL == ' '){
pstmt_tDBOutput_3.setString(17, "");
} else {
pstmt_tDBOutput_3.setString(17, String.valueOf(sitpro.INFLAMAVEL));
}}

                    if(sitpro.ATIVO_VENDA == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.CHAR);
} else {if(sitpro.ATIVO_VENDA == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.CHAR);
} else if(sitpro.ATIVO_VENDA == ' '){
pstmt_tDBOutput_3.setString(18, "");
} else {
pstmt_tDBOutput_3.setString(18, String.valueOf(sitpro.ATIVO_VENDA));
}}

                    if(sitpro.ATIVO_COMPRA == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.CHAR);
} else {if(sitpro.ATIVO_COMPRA == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.CHAR);
} else if(sitpro.ATIVO_COMPRA == ' '){
pstmt_tDBOutput_3.setString(19, "");
} else {
pstmt_tDBOutput_3.setString(19, String.valueOf(sitpro.ATIVO_COMPRA));
}}

                    if(sitpro.EXPORTA_SITE == null) {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.CHAR);
} else {if(sitpro.EXPORTA_SITE == null) {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.CHAR);
} else if(sitpro.EXPORTA_SITE == ' '){
pstmt_tDBOutput_3.setString(20, "");
} else {
pstmt_tDBOutput_3.setString(20, String.valueOf(sitpro.EXPORTA_SITE));
}}

                    if(sitpro.CD_MARCA == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(21, sitpro.CD_MARCA);
}

                    if(sitpro.DC_MARCA == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, sitpro.DC_MARCA);
}

                    if(sitpro.CD_FORNECEDOR == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, sitpro.CD_FORNECEDOR);
}

                    if(sitpro.CODIGO_FABRICA == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, sitpro.CODIGO_FABRICA);
}

                    if(sitpro.LOCAL_FISICO == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(25, sitpro.LOCAL_FISICO);
}

                    if(sitpro.SITUACAO_PRODUTO == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(26, sitpro.SITUACAO_PRODUTO);
}

                    if(sitpro.DESC_SITUACAO_PRODUTO == null) {
pstmt_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(27, sitpro.DESC_SITUACAO_PRODUTO);
}

                    if(sitpro.CD_NCM == null) {
pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(28, sitpro.CD_NCM);
}

                    if(sitpro.DESCRICAO_NCM == null) {
pstmt_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(29, sitpro.DESCRICAO_NCM);
}

                    if(sitpro.DT_ULT_COMPRA != null) {
pstmt_tDBOutput_3.setTimestamp(30, new java.sql.Timestamp(sitpro.DT_ULT_COMPRA.getTime()));
} else {
pstmt_tDBOutput_3.setNull(30, java.sql.Types.TIMESTAMP);
}

                    if(sitpro.DIAS_ULT_COMPRA == null) {
pstmt_tDBOutput_3.setNull(31, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(31, sitpro.DIAS_ULT_COMPRA);
}

                    if(sitpro.EMP_ULT_COMPRA == null) {
pstmt_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(32, sitpro.EMP_ULT_COMPRA);
}

                    pstmt_tDBOutput_3.setBigDecimal(33, sitpro.QTD_ULT_COMPRA);

                    pstmt_tDBOutput_3.setBigDecimal(34, sitpro.VL_ULT_COMPRA);

                    pstmt_tDBOutput_3.setBigDecimal(35, sitpro.VALOR_UNITARIO);

                    if(sitpro.CURVA_VLR == null) {
pstmt_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(36, sitpro.CURVA_VLR);
}

                    if(sitpro.LANCAMENTO == null) {
pstmt_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(37, sitpro.LANCAMENTO);
}

                    if(sitpro.curva_vlr_cd == null) {
pstmt_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(38, sitpro.curva_vlr_cd);
}

                    if(sitpro.curva_vlr_mg == null) {
pstmt_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(39, sitpro.curva_vlr_mg);
}

                    if(sitpro.curva_vlr_rei == null) {
pstmt_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(40, sitpro.curva_vlr_rei);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "sitpro"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "insert_table"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_produto_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_table");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sitpro");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
	int count_tDBRow_1 = 0;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

query_tDBRow_1 = "\nupdate dw_t_produto set local_fisico = null where local_fisico = '';\nupdate dw_t_produto set local_fisico = null whe"
+"re local_fisico = ' ';\ncommit;\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
				stmt_tDBRow_1.execute(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

	globalMap.put("tDBRow_1_NB_LINE", count_tDBRow_1);
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_produto_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_produto_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 7;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.COD_ITEM == null) {
							if (other.COD_ITEM != null)
								return false;
						
						} else if (!this.COD_ITEM.equals(other.COD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.COD_ITEM = this.COD_ITEM;
	            other.DT_ULT_COMPRA = this.DT_ULT_COMPRA;
	            other.DIAS_ULT_COMPRA = this.DIAS_ULT_COMPRA;
	            other.EMP_ULT_COMPRA = this.EMP_ULT_COMPRA;
	            other.QTD_ULT_COMPRA = this.QTD_ULT_COMPRA;
	            other.VL_ULT_COMPRA = this.VL_ULT_COMPRA;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.COD_ITEM = this.COD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DT_ULT_COMPRA = readDate(dis,ois);
					
						this.DIAS_ULT_COMPRA = readInteger(dis,ois);
					
						this.EMP_ULT_COMPRA = readString(dis,ois);
					
       			    	this.QTD_ULT_COMPRA = (BigDecimal) ois.readObject();
					
       			    	this.VL_ULT_COMPRA = (BigDecimal) ois.readObject();
					
       			    	this.VALOR_UNITARIO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DT_ULT_COMPRA = readDate(dis,objectIn);
					
						this.DIAS_ULT_COMPRA = readInteger(dis,objectIn);
					
						this.EMP_ULT_COMPRA = readString(dis,objectIn);
					
       			    	this.QTD_ULT_COMPRA = (BigDecimal) objectIn.readObject();
					
       			    	this.VL_ULT_COMPRA = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR_UNITARIO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.DT_ULT_COMPRA, dos, oos);
					
					writeInteger(this.DIAS_ULT_COMPRA, dos, oos);
					
						writeString(this.EMP_ULT_COMPRA, dos, oos);
					
       			    	oos.writeObject(this.QTD_ULT_COMPRA);
					
       			    	oos.writeObject(this.VL_ULT_COMPRA);
					
       			    	oos.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.DT_ULT_COMPRA, dos, objectOut);
					
					writeInteger(this.DIAS_ULT_COMPRA, dos, objectOut);
					
						writeString(this.EMP_ULT_COMPRA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.QTD_ULT_COMPRA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VL_ULT_COMPRA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_ITEM, other.COD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_2) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_3 - inputs:(row2,row11) outputs:(insert_table)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_produto_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row10Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row11.COD_ITEM = next_tHashInput_3.COD_ITEM;
	row11.DT_ULT_COMPRA = next_tHashInput_3.DT_ULT_COMPRA;
	row11.DIAS_ULT_COMPRA = next_tHashInput_3.DIAS_ULT_COMPRA;
	row11.EMP_ULT_COMPRA = next_tHashInput_3.EMP_ULT_COMPRA;
	row11.QTD_ULT_COMPRA = next_tHashInput_3.QTD_ULT_COMPRA;
	row11.VL_ULT_COMPRA = next_tHashInput_3.VL_ULT_COMPRA;
	row11.VALOR_UNITARIO = next_tHashInput_3.VALOR_UNITARIO;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.COD_ITEM = row11.COD_ITEM;
				
				row11_HashRow.DT_ULT_COMPRA = row11.DT_ULT_COMPRA;
				
				row11_HashRow.DIAS_ULT_COMPRA = row11.DIAS_ULT_COMPRA;
				
				row11_HashRow.EMP_ULT_COMPRA = row11.EMP_ULT_COMPRA;
				
				row11_HashRow.QTD_ULT_COMPRA = row11.QTD_ULT_COMPRA;
				
				row11_HashRow.VL_ULT_COMPRA = row11.VL_ULT_COMPRA;
				
				row11_HashRow.VALOR_UNITARIO = row11.VALOR_UNITARIO;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_produto_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CURVA_VLR;

				public String getCURVA_VLR () {
					return this.CURVA_VLR;
				}

				public Boolean CURVA_VLRIsNullable(){
				    return true;
				}
				public Boolean CURVA_VLRIsKey(){
				    return false;
				}
				public Integer CURVA_VLRLength(){
				    return null;
				}
				public Integer CURVA_VLRPrecision(){
				    return null;
				}
				public String CURVA_VLRDefault(){
				
					return null;
				
				}
				public String CURVA_VLRComment(){
				
				    return "";
				
				}
				public String CURVA_VLRPattern(){
				
					return "";
				
				}
				public String CURVA_VLROriginalDbColumnName(){
				
					return "CURVA_VLR";
				
				}

				
			    public String curva_vlr_cd;

				public String getCurva_vlr_cd () {
					return this.curva_vlr_cd;
				}

				public Boolean curva_vlr_cdIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_cdIsKey(){
				    return false;
				}
				public Integer curva_vlr_cdLength(){
				    return null;
				}
				public Integer curva_vlr_cdPrecision(){
				    return null;
				}
				public String curva_vlr_cdDefault(){
				
					return null;
				
				}
				public String curva_vlr_cdComment(){
				
				    return "";
				
				}
				public String curva_vlr_cdPattern(){
				
					return "";
				
				}
				public String curva_vlr_cdOriginalDbColumnName(){
				
					return "curva_vlr_cd";
				
				}

				
			    public String curva_vlr_mg;

				public String getCurva_vlr_mg () {
					return this.curva_vlr_mg;
				}

				public Boolean curva_vlr_mgIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_mgIsKey(){
				    return false;
				}
				public Integer curva_vlr_mgLength(){
				    return null;
				}
				public Integer curva_vlr_mgPrecision(){
				    return null;
				}
				public String curva_vlr_mgDefault(){
				
					return null;
				
				}
				public String curva_vlr_mgComment(){
				
				    return "";
				
				}
				public String curva_vlr_mgPattern(){
				
					return "";
				
				}
				public String curva_vlr_mgOriginalDbColumnName(){
				
					return "curva_vlr_mg";
				
				}

				
			    public String curva_vlr_rei;

				public String getCurva_vlr_rei () {
					return this.curva_vlr_rei;
				}

				public Boolean curva_vlr_reiIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_reiIsKey(){
				    return false;
				}
				public Integer curva_vlr_reiLength(){
				    return null;
				}
				public Integer curva_vlr_reiPrecision(){
				    return null;
				}
				public String curva_vlr_reiDefault(){
				
					return null;
				
				}
				public String curva_vlr_reiComment(){
				
				    return "";
				
				}
				public String curva_vlr_reiPattern(){
				
					return "";
				
				}
				public String curva_vlr_reiOriginalDbColumnName(){
				
					return "curva_vlr_rei";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.CURVA_VLR = this.CURVA_VLR;
	            other.curva_vlr_cd = this.curva_vlr_cd;
	            other.curva_vlr_mg = this.curva_vlr_mg;
	            other.curva_vlr_rei = this.curva_vlr_rei;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CURVA_VLR = readString(dis,ois);
					
						this.curva_vlr_cd = readString(dis,ois);
					
						this.curva_vlr_mg = readString(dis,ois);
					
						this.curva_vlr_rei = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CURVA_VLR = readString(dis,objectIn);
					
						this.curva_vlr_cd = readString(dis,objectIn);
					
						this.curva_vlr_mg = readString(dis,objectIn);
					
						this.curva_vlr_rei = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CURVA_VLR, dos, oos);
					
						writeString(this.curva_vlr_cd, dos, oos);
					
						writeString(this.curva_vlr_mg, dos, oos);
					
						writeString(this.curva_vlr_rei, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CURVA_VLR, dos, objectOut);
					
						writeString(this.curva_vlr_cd, dos, objectOut);
					
						writeString(this.curva_vlr_mg, dos, objectOut);
					
						writeString(this.curva_vlr_rei, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CURVA_VLR="+CURVA_VLR);
		sb.append(",curva_vlr_cd="+curva_vlr_cd);
		sb.append(",curva_vlr_mg="+curva_vlr_mg);
		sb.append(",curva_vlr_rei="+curva_vlr_rei);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_2) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_4 - inputs:(insert_table,row12) outputs:(insert)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_dw_t_produto_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row9Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row12.CD_PRODUTO = next_tHashInput_4.CD_PRODUTO;
	row12.CURVA_VLR = next_tHashInput_4.CURVA_VLR;
	row12.curva_vlr_cd = next_tHashInput_4.curva_vlr_cd;
	row12.curva_vlr_mg = next_tHashInput_4.curva_vlr_mg;
	row12.curva_vlr_rei = next_tHashInput_4.curva_vlr_rei;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.CD_PRODUTO = row12.CD_PRODUTO;
				
				row12_HashRow.CURVA_VLR = row12.CURVA_VLR;
				
				row12_HashRow.curva_vlr_cd = row12.curva_vlr_cd;
				
				row12_HashRow.curva_vlr_mg = row12.curva_vlr_mg;
				
				row12_HashRow.curva_vlr_rei = row12.curva_vlr_rei;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_produto_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SIT_CODIGO;

				public String getSIT_CODIGO () {
					return this.SIT_CODIGO;
				}

				public Boolean SIT_CODIGOIsNullable(){
				    return true;
				}
				public Boolean SIT_CODIGOIsKey(){
				    return false;
				}
				public Integer SIT_CODIGOLength(){
				    return null;
				}
				public Integer SIT_CODIGOPrecision(){
				    return null;
				}
				public String SIT_CODIGODefault(){
				
					return null;
				
				}
				public String SIT_CODIGOComment(){
				
				    return "";
				
				}
				public String SIT_CODIGOPattern(){
				
					return "";
				
				}
				public String SIT_CODIGOOriginalDbColumnName(){
				
					return "SIT_CODIGO";
				
				}

				
			    public String SIT_DESCRI;

				public String getSIT_DESCRI () {
					return this.SIT_DESCRI;
				}

				public Boolean SIT_DESCRIIsNullable(){
				    return true;
				}
				public Boolean SIT_DESCRIIsKey(){
				    return false;
				}
				public Integer SIT_DESCRILength(){
				    return null;
				}
				public Integer SIT_DESCRIPrecision(){
				    return null;
				}
				public String SIT_DESCRIDefault(){
				
					return null;
				
				}
				public String SIT_DESCRIComment(){
				
				    return "";
				
				}
				public String SIT_DESCRIPattern(){
				
					return "";
				
				}
				public String SIT_DESCRIOriginalDbColumnName(){
				
					return "SIT_DESCRI";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIT_CODIGO == null) ? 0 : this.SIT_CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.SIT_CODIGO == null) {
							if (other.SIT_CODIGO != null)
								return false;
						
						} else if (!this.SIT_CODIGO.equals(other.SIT_CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.SIT_CODIGO = this.SIT_CODIGO;
	            other.SIT_DESCRI = this.SIT_DESCRI;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.SIT_CODIGO = this.SIT_CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.SIT_CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.SIT_CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIT_CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIT_CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIT_DESCRI = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIT_DESCRI = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIT_DESCRI, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIT_DESCRI, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIT_CODIGO="+SIT_CODIGO);
		sb.append(",SIT_DESCRI="+SIT_DESCRI);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIT_CODIGO, other.SIT_CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tDBInput_4 - inputs:(after_tHashInput_2) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_5 - inputs:(insert,row13) outputs:(sitpro)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT SIT_CODIGO ,SIT_DESCRI  FROM SITPRO";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row13.SIT_CODIGO = null;
							} else {
	                         		
        	row13.SIT_CODIGO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row13.SIT_DESCRI = null;
							} else {
	                         		
        	row13.SIT_DESCRI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.SIT_CODIGO = row13.SIT_CODIGO;
				
				row13_HashRow.SIT_DESCRI = row13.SIT_DESCRI;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 7;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return 7;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public java.util.Date DT_ULT_COMPRA;

				public java.util.Date getDT_ULT_COMPRA () {
					return this.DT_ULT_COMPRA;
				}

				public Boolean DT_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DT_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DT_ULT_COMPRALength(){
				    return null;
				}
				public Integer DT_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DT_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DT_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DT_ULT_COMPRAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULT_COMPRAOriginalDbColumnName(){
				
					return "DT_ULT_COMPRA";
				
				}

				
			    public Integer DIAS_ULT_COMPRA;

				public Integer getDIAS_ULT_COMPRA () {
					return this.DIAS_ULT_COMPRA;
				}

				public Boolean DIAS_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer DIAS_ULT_COMPRALength(){
				    return null;
				}
				public Integer DIAS_ULT_COMPRAPrecision(){
				    return null;
				}
				public String DIAS_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String DIAS_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String DIAS_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String DIAS_ULT_COMPRAOriginalDbColumnName(){
				
					return "DIAS_ULT_COMPRA";
				
				}

				
			    public String EMP_ULT_COMPRA;

				public String getEMP_ULT_COMPRA () {
					return this.EMP_ULT_COMPRA;
				}

				public Boolean EMP_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean EMP_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer EMP_ULT_COMPRALength(){
				    return 3;
				}
				public Integer EMP_ULT_COMPRAPrecision(){
				    return null;
				}
				public String EMP_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String EMP_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String EMP_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String EMP_ULT_COMPRAOriginalDbColumnName(){
				
					return "EMP_ULT_COMPRA";
				
				}

				
			    public BigDecimal QTD_ULT_COMPRA;

				public BigDecimal getQTD_ULT_COMPRA () {
					return this.QTD_ULT_COMPRA;
				}

				public Boolean QTD_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean QTD_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer QTD_ULT_COMPRALength(){
				    return 12;
				}
				public Integer QTD_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String QTD_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String QTD_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String QTD_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String QTD_ULT_COMPRAOriginalDbColumnName(){
				
					return "QTD_ULT_COMPRA";
				
				}

				
			    public BigDecimal VL_ULT_COMPRA;

				public BigDecimal getVL_ULT_COMPRA () {
					return this.VL_ULT_COMPRA;
				}

				public Boolean VL_ULT_COMPRAIsNullable(){
				    return true;
				}
				public Boolean VL_ULT_COMPRAIsKey(){
				    return false;
				}
				public Integer VL_ULT_COMPRALength(){
				    return 12;
				}
				public Integer VL_ULT_COMPRAPrecision(){
				    return 4;
				}
				public String VL_ULT_COMPRADefault(){
				
					return null;
				
				}
				public String VL_ULT_COMPRAComment(){
				
				    return "";
				
				}
				public String VL_ULT_COMPRAPattern(){
				
					return "";
				
				}
				public String VL_ULT_COMPRAOriginalDbColumnName(){
				
					return "VL_ULT_COMPRA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.DT_ULT_COMPRA = readDate(dis);
					
						this.DIAS_ULT_COMPRA = readInteger(dis);
					
					this.EMP_ULT_COMPRA = readString(dis);
					
						this.QTD_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VL_ULT_COMPRA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULT_COMPRA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_ULT_COMPRA,dos);
					
					// String
				
						writeString(this.EMP_ULT_COMPRA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QTD_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ULT_COMPRA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",DT_ULT_COMPRA="+String.valueOf(DT_ULT_COMPRA));
		sb.append(",DIAS_ULT_COMPRA="+String.valueOf(DIAS_ULT_COMPRA));
		sb.append(",EMP_ULT_COMPRA="+EMP_ULT_COMPRA);
		sb.append(",QTD_ULT_COMPRA="+String.valueOf(QTD_ULT_COMPRA));
		sb.append(",VL_ULT_COMPRA="+String.valueOf(VL_ULT_COMPRA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row10Struct row10 = new row10Struct();





	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_dw_t_produto_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String COD_ITEM;
					java.util.Date DT_ULT_COMPRA;
					Integer DIAS_ULT_COMPRA;
					String EMP_ULT_COMPRA;
					BigDecimal QTD_ULT_COMPRA;
					BigDecimal VL_ULT_COMPRA;
					BigDecimal VALOR_UNITARIO;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
								
								result = prime * result + ((this.DT_ULT_COMPRA == null) ? 0 : this.DT_ULT_COMPRA.hashCode());
								
								result = prime * result + ((this.DIAS_ULT_COMPRA == null) ? 0 : this.DIAS_ULT_COMPRA.hashCode());
								
								result = prime * result + ((this.EMP_ULT_COMPRA == null) ? 0 : this.EMP_ULT_COMPRA.hashCode());
								
								result = prime * result + ((this.QTD_ULT_COMPRA == null) ? 0 : this.QTD_ULT_COMPRA.hashCode());
								
								result = prime * result + ((this.VL_ULT_COMPRA == null) ? 0 : this.VL_ULT_COMPRA.hashCode());
								
								result = prime * result + ((this.VALOR_UNITARIO == null) ? 0 : this.VALOR_UNITARIO.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.COD_ITEM == null) {
										if (other.COD_ITEM != null) 
											return false;
								
									} else if (!this.COD_ITEM.equals(other.COD_ITEM))
								 
										return false;
								
									if (this.DT_ULT_COMPRA == null) {
										if (other.DT_ULT_COMPRA != null) 
											return false;
								
									} else if (!this.DT_ULT_COMPRA.equals(other.DT_ULT_COMPRA))
								 
										return false;
								
									if (this.DIAS_ULT_COMPRA == null) {
										if (other.DIAS_ULT_COMPRA != null) 
											return false;
								
									} else if (!this.DIAS_ULT_COMPRA.equals(other.DIAS_ULT_COMPRA))
								 
										return false;
								
									if (this.EMP_ULT_COMPRA == null) {
										if (other.EMP_ULT_COMPRA != null) 
											return false;
								
									} else if (!this.EMP_ULT_COMPRA.equals(other.EMP_ULT_COMPRA))
								 
										return false;
								
									if (this.QTD_ULT_COMPRA == null) {
										if (other.QTD_ULT_COMPRA != null) 
											return false;
								
									} else if (!this.QTD_ULT_COMPRA.equals(other.QTD_ULT_COMPRA))
								 
										return false;
								
									if (this.VL_ULT_COMPRA == null) {
										if (other.VL_ULT_COMPRA != null) 
											return false;
								
									} else if (!this.VL_ULT_COMPRA.equals(other.VL_ULT_COMPRA))
								 
										return false;
								
									if (this.VALOR_UNITARIO == null) {
										if (other.VALOR_UNITARIO != null) 
											return false;
								
									} else if (!this.VALOR_UNITARIO.equals(other.VALOR_UNITARIO))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT COD_ITEM,\n       DATA_ENTRADA AS DT_ULT_COMPRA,\n       CURRENT_DATE - DATA_ENTRADA DIAS_ULT_COMPRA,\n       EM"
+"PRESA AS EMP_ULT_COMPRA,\n       SUM(QTD_ITEM) AS QTD_ULT_COMPRA,\n       SUM(VALOR_TOTAL) AS VL_ULT_COMPRA ,\n       C."
+"VALOR_UNITARIO\n  FROM VW_COMPRAS C\n WHERE DATA_ENTRADA = (SELECT MAX(COMP.DATA_ENTRADA)\n                         FROM"
+" VW_COMPRAS COMP\n                        WHERE COMP.COD_ITEM = C.COD_ITEM\n--                        AND COMP.COD_ITEM "
+"= '66180'\n)\nGROUP BY COD_ITEM, DATA_ENTRADA, EMPRESA, VALOR_UNITARIO";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row7.COD_ITEM = null;
							} else {
	                         		
        	row7.COD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row7.DT_ULT_COMPRA = null;
							} else {
										
			row7.DT_ULT_COMPRA = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row7.DIAS_ULT_COMPRA = null;
							} else {
		                          
            row7.DIAS_ULT_COMPRA = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    row7.DIAS_ULT_COMPRA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row7.EMP_ULT_COMPRA = null;
							} else {
	                         		
        	row7.EMP_ULT_COMPRA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row7.QTD_ULT_COMPRA = null;
							} else {
		                          
            row7.QTD_ULT_COMPRA = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    row7.QTD_ULT_COMPRA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row7.VL_ULT_COMPRA = null;
							} else {
		                          
            row7.VL_ULT_COMPRA = rs_tDBInput_1.getBigDecimal(6);
            if(rs_tDBInput_1.wasNull()){
                    row7.VL_ULT_COMPRA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row7.VALOR_UNITARIO = null;
							} else {
		                          
            row7.VALOR_UNITARIO = rs_tDBInput_1.getBigDecimal(7);
            if(rs_tDBInput_1.wasNull()){
                    row7.VALOR_UNITARIO = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
row10 = null;			
if(row7.COD_ITEM == null){
	finder_tUniqRow_3.COD_ITEM = null;
}else{
	finder_tUniqRow_3.COD_ITEM = row7.COD_ITEM.toLowerCase();
}
finder_tUniqRow_3.DT_ULT_COMPRA = row7.DT_ULT_COMPRA;
finder_tUniqRow_3.DIAS_ULT_COMPRA = row7.DIAS_ULT_COMPRA;
if(row7.EMP_ULT_COMPRA == null){
	finder_tUniqRow_3.EMP_ULT_COMPRA = null;
}else{
	finder_tUniqRow_3.EMP_ULT_COMPRA = row7.EMP_ULT_COMPRA.toLowerCase();
}
finder_tUniqRow_3.QTD_ULT_COMPRA = row7.QTD_ULT_COMPRA;
finder_tUniqRow_3.VL_ULT_COMPRA = row7.VL_ULT_COMPRA;
finder_tUniqRow_3.VALOR_UNITARIO = row7.VALOR_UNITARIO;	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(row7.COD_ITEM == null){
	new_tUniqRow_3.COD_ITEM = null;
}else{
	new_tUniqRow_3.COD_ITEM = row7.COD_ITEM.toLowerCase();
}
new_tUniqRow_3.DT_ULT_COMPRA = row7.DT_ULT_COMPRA;
new_tUniqRow_3.DIAS_ULT_COMPRA = row7.DIAS_ULT_COMPRA;
if(row7.EMP_ULT_COMPRA == null){
	new_tUniqRow_3.EMP_ULT_COMPRA = null;
}else{
	new_tUniqRow_3.EMP_ULT_COMPRA = row7.EMP_ULT_COMPRA.toLowerCase();
}
new_tUniqRow_3.QTD_ULT_COMPRA = row7.QTD_ULT_COMPRA;
new_tUniqRow_3.VL_ULT_COMPRA = row7.VL_ULT_COMPRA;
new_tUniqRow_3.VALOR_UNITARIO = row7.VALOR_UNITARIO;
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.COD_ITEM = row7.COD_ITEM;			row10.DT_ULT_COMPRA = row7.DT_ULT_COMPRA;			row10.DIAS_ULT_COMPRA = row7.DIAS_ULT_COMPRA;			row10.EMP_ULT_COMPRA = row7.EMP_ULT_COMPRA;			row10.QTD_ULT_COMPRA = row7.QTD_ULT_COMPRA;			row10.VL_ULT_COMPRA = row7.VL_ULT_COMPRA;			row10.VALOR_UNITARIO = row7.VALOR_UNITARIO;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_3 = new row10Struct();
				
					oneRow_tHashOutput_3.COD_ITEM = row10.COD_ITEM;
					oneRow_tHashOutput_3.DT_ULT_COMPRA = row10.DT_ULT_COMPRA;
					oneRow_tHashOutput_3.DIAS_ULT_COMPRA = row10.DIAS_ULT_COMPRA;
					oneRow_tHashOutput_3.EMP_ULT_COMPRA = row10.EMP_ULT_COMPRA;
					oneRow_tHashOutput_3.QTD_ULT_COMPRA = row10.QTD_ULT_COMPRA;
					oneRow_tHashOutput_3.VL_ULT_COMPRA = row10.VL_ULT_COMPRA;
					oneRow_tHashOutput_3.VALOR_UNITARIO = row10.VALOR_UNITARIO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado Processo de Consulta a View de Compras: "+data);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CURVA_VLR;

				public String getCURVA_VLR () {
					return this.CURVA_VLR;
				}

				public Boolean CURVA_VLRIsNullable(){
				    return true;
				}
				public Boolean CURVA_VLRIsKey(){
				    return false;
				}
				public Integer CURVA_VLRLength(){
				    return null;
				}
				public Integer CURVA_VLRPrecision(){
				    return null;
				}
				public String CURVA_VLRDefault(){
				
					return null;
				
				}
				public String CURVA_VLRComment(){
				
				    return "";
				
				}
				public String CURVA_VLRPattern(){
				
					return "";
				
				}
				public String CURVA_VLROriginalDbColumnName(){
				
					return "CURVA_VLR";
				
				}

				
			    public String curva_vlr_cd;

				public String getCurva_vlr_cd () {
					return this.curva_vlr_cd;
				}

				public Boolean curva_vlr_cdIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_cdIsKey(){
				    return false;
				}
				public Integer curva_vlr_cdLength(){
				    return null;
				}
				public Integer curva_vlr_cdPrecision(){
				    return null;
				}
				public String curva_vlr_cdDefault(){
				
					return null;
				
				}
				public String curva_vlr_cdComment(){
				
				    return "";
				
				}
				public String curva_vlr_cdPattern(){
				
					return "";
				
				}
				public String curva_vlr_cdOriginalDbColumnName(){
				
					return "curva_vlr_cd";
				
				}

				
			    public String curva_vlr_mg;

				public String getCurva_vlr_mg () {
					return this.curva_vlr_mg;
				}

				public Boolean curva_vlr_mgIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_mgIsKey(){
				    return false;
				}
				public Integer curva_vlr_mgLength(){
				    return null;
				}
				public Integer curva_vlr_mgPrecision(){
				    return null;
				}
				public String curva_vlr_mgDefault(){
				
					return null;
				
				}
				public String curva_vlr_mgComment(){
				
				    return "";
				
				}
				public String curva_vlr_mgPattern(){
				
					return "";
				
				}
				public String curva_vlr_mgOriginalDbColumnName(){
				
					return "curva_vlr_mg";
				
				}

				
			    public String curva_vlr_rei;

				public String getCurva_vlr_rei () {
					return this.curva_vlr_rei;
				}

				public Boolean curva_vlr_reiIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_reiIsKey(){
				    return false;
				}
				public Integer curva_vlr_reiLength(){
				    return null;
				}
				public Integer curva_vlr_reiPrecision(){
				    return null;
				}
				public String curva_vlr_reiDefault(){
				
					return null;
				
				}
				public String curva_vlr_reiComment(){
				
				    return "";
				
				}
				public String curva_vlr_reiPattern(){
				
					return "";
				
				}
				public String curva_vlr_reiOriginalDbColumnName(){
				
					return "curva_vlr_rei";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CURVA_VLR = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CURVA_VLR = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CURVA_VLR="+CURVA_VLR);
		sb.append(",curva_vlr_cd="+curva_vlr_cd);
		sb.append(",curva_vlr_mg="+curva_vlr_mg);
		sb.append(",curva_vlr_rei="+curva_vlr_rei);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return null;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String CURVA_VLR;

				public String getCURVA_VLR () {
					return this.CURVA_VLR;
				}

				public Boolean CURVA_VLRIsNullable(){
				    return true;
				}
				public Boolean CURVA_VLRIsKey(){
				    return false;
				}
				public Integer CURVA_VLRLength(){
				    return null;
				}
				public Integer CURVA_VLRPrecision(){
				    return null;
				}
				public String CURVA_VLRDefault(){
				
					return null;
				
				}
				public String CURVA_VLRComment(){
				
				    return "";
				
				}
				public String CURVA_VLRPattern(){
				
					return "";
				
				}
				public String CURVA_VLROriginalDbColumnName(){
				
					return "CURVA_VLR";
				
				}

				
			    public String curva_vlr_cd;

				public String getCurva_vlr_cd () {
					return this.curva_vlr_cd;
				}

				public Boolean curva_vlr_cdIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_cdIsKey(){
				    return false;
				}
				public Integer curva_vlr_cdLength(){
				    return null;
				}
				public Integer curva_vlr_cdPrecision(){
				    return null;
				}
				public String curva_vlr_cdDefault(){
				
					return null;
				
				}
				public String curva_vlr_cdComment(){
				
				    return "";
				
				}
				public String curva_vlr_cdPattern(){
				
					return "";
				
				}
				public String curva_vlr_cdOriginalDbColumnName(){
				
					return "curva_vlr_cd";
				
				}

				
			    public String curva_vlr_mg;

				public String getCurva_vlr_mg () {
					return this.curva_vlr_mg;
				}

				public Boolean curva_vlr_mgIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_mgIsKey(){
				    return false;
				}
				public Integer curva_vlr_mgLength(){
				    return null;
				}
				public Integer curva_vlr_mgPrecision(){
				    return null;
				}
				public String curva_vlr_mgDefault(){
				
					return null;
				
				}
				public String curva_vlr_mgComment(){
				
				    return "";
				
				}
				public String curva_vlr_mgPattern(){
				
					return "";
				
				}
				public String curva_vlr_mgOriginalDbColumnName(){
				
					return "curva_vlr_mg";
				
				}

				
			    public String curva_vlr_rei;

				public String getCurva_vlr_rei () {
					return this.curva_vlr_rei;
				}

				public Boolean curva_vlr_reiIsNullable(){
				    return true;
				}
				public Boolean curva_vlr_reiIsKey(){
				    return false;
				}
				public Integer curva_vlr_reiLength(){
				    return null;
				}
				public Integer curva_vlr_reiPrecision(){
				    return null;
				}
				public String curva_vlr_reiDefault(){
				
					return null;
				
				}
				public String curva_vlr_reiComment(){
				
				    return "";
				
				}
				public String curva_vlr_reiPattern(){
				
					return "";
				
				}
				public String curva_vlr_reiOriginalDbColumnName(){
				
					return "curva_vlr_rei";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CURVA_VLR = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_produto) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.CURVA_VLR = readString(dis);
					
					this.curva_vlr_cd = readString(dis);
					
					this.curva_vlr_mg = readString(dis);
					
					this.curva_vlr_rei = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.CURVA_VLR,dos);
					
					// String
				
						writeString(this.curva_vlr_cd,dos);
					
					// String
				
						writeString(this.curva_vlr_mg,dos);
					
					// String
				
						writeString(this.curva_vlr_rei,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",CURVA_VLR="+CURVA_VLR);
		sb.append(",curva_vlr_cd="+curva_vlr_cd);
		sb.append(",curva_vlr_mg="+curva_vlr_mg);
		sb.append(",curva_vlr_rei="+curva_vlr_rei);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_dw_t_produto_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String CD_PRODUTO;
					String CURVA_VLR;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
								
								result = prime * result + ((this.CURVA_VLR == null) ? 0 : this.CURVA_VLR.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.CD_PRODUTO == null) {
										if (other.CD_PRODUTO != null) 
											return false;
								
									} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
								 
										return false;
								
									if (this.CURVA_VLR == null) {
										if (other.CURVA_VLR != null) 
											return false;
								
									} else if (!this.CURVA_VLR.equals(other.CURVA_VLR))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nSELECT CD_PRODUTO,\n       CURVA_VLR,\n       (SELECT distinct pp.agp_curva_emp\n          FROM STG_T_PRODUTO_EMPRESA"
+" pp\n         where pp.cd_produto = p.cd_produto \n           and pp.code_curva_emp = 'CD') curva_vlr_cd,\n(SELECT disti"
+"nct pp.agp_curva_emp\n          FROM STG_T_PRODUTO_EMPRESA pp\n         where pp.cd_produto = p.cd_produto \n           "
+"and pp.code_curva_emp = 'MG') curva_vlr_mg,\n(SELECT distinct pp.agp_curva_emp\n          FROM STG_T_PRODUTO_EMPRESA pp"
+"\n         where pp.cd_produto = p.cd_produto \n           and pp.code_curva_emp = 'REI') curva_vlr_rei\n  FROM STG_T_PRO"
+"DUTO_EMPRESA p\n where p.CD_EMPRESA = '001'\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row8.CD_PRODUTO = null;
							} else {
	                         		
        	row8.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row8.CURVA_VLR = null;
							} else {
	                         		
        	row8.CURVA_VLR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row8.curva_vlr_cd = null;
							} else {
	                         		
        	row8.curva_vlr_cd = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row8.curva_vlr_mg = null;
							} else {
	                         		
        	row8.curva_vlr_mg = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row8.curva_vlr_rei = null;
							} else {
	                         		
        	row8.curva_vlr_rei = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					
row9 = null;			
if(row8.CD_PRODUTO == null){
	finder_tUniqRow_1.CD_PRODUTO = null;
}else{
	finder_tUniqRow_1.CD_PRODUTO = row8.CD_PRODUTO.toLowerCase();
}
if(row8.CURVA_VLR == null){
	finder_tUniqRow_1.CURVA_VLR = null;
}else{
	finder_tUniqRow_1.CURVA_VLR = row8.CURVA_VLR.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row8.CD_PRODUTO == null){
	new_tUniqRow_1.CD_PRODUTO = null;
}else{
	new_tUniqRow_1.CD_PRODUTO = row8.CD_PRODUTO.toLowerCase();
}
if(row8.CURVA_VLR == null){
	new_tUniqRow_1.CURVA_VLR = null;
}else{
	new_tUniqRow_1.CURVA_VLR = row8.CURVA_VLR.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.CD_PRODUTO = row8.CD_PRODUTO;			row9.CURVA_VLR = row8.CURVA_VLR;			row9.curva_vlr_cd = row8.curva_vlr_cd;			row9.curva_vlr_mg = row8.curva_vlr_mg;			row9.curva_vlr_rei = row8.curva_vlr_rei;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					



    
		row9Struct oneRow_tHashOutput_4 = new row9Struct();
				
					oneRow_tHashOutput_4.CD_PRODUTO = row9.CD_PRODUTO;
					oneRow_tHashOutput_4.CURVA_VLR = row9.CURVA_VLR;
					oneRow_tHashOutput_4.curva_vlr_cd = row9.curva_vlr_cd;
					oneRow_tHashOutput_4.curva_vlr_mg = row9.curva_vlr_mg;
					oneRow_tHashOutput_4.curva_vlr_rei = row9.curva_vlr_rei;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


//context.data_execucao = data;

System.out.println("Finalizado Processo de Consulta dados da Stage produto Empresa: "+data);

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_produto dw_t_produtoClass = new dw_t_produto();

        int exitCode = dw_t_produtoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_produto.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_produto_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_produto.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_produto");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     774451 characters generated by Talend Open Studio for Big Data 
 *     on the 5 de agosto de 2024 10:09:11 BRT
 ************************************************************************************************/