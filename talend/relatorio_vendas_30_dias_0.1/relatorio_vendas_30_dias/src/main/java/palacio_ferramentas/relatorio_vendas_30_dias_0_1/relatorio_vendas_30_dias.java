// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.relatorio_vendas_30_dias_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: relatorio_vendas_30_dias Purpose: <br>
 * Description:  <br>
 * @author henriquesantos@palaciodasferramentas.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class relatorio_vendas_30_dias implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(data_execucao != null){
				
					this.setProperty("data_execucao", data_execucao.toString());
				
			}
			
			if(EMAIL_PASSWORD_P != null){
				
					this.setProperty("EMAIL_PASSWORD_P", EMAIL_PASSWORD_P.toString());
				
			}
			
			if(EMAIL_P != null){
				
					this.setProperty("EMAIL_P", EMAIL_P.toString());
				
			}
			
			if(SEND_EMAIL != null){
				
					this.setProperty("SEND_EMAIL", SEND_EMAIL.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(excel != null){
				
					this.setProperty("excel", excel.toString());
				
			}
			
			if(SMTP_P != null){
				
					this.setProperty("SMTP_P", SMTP_P.toString());
				
			}
			
			if(SMTP_PORT_P != null){
				
					this.setProperty("SMTP_PORT_P", SMTP_PORT_P.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
			if(caminho != null){
				
					this.setProperty("caminho", caminho.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public String data_execucao;
public String getData_execucao(){
	return this.data_execucao;
}
public String EMAIL_PASSWORD_P;
public String getEMAIL_PASSWORD_P(){
	return this.EMAIL_PASSWORD_P;
}
public String EMAIL_P;
public String getEMAIL_P(){
	return this.EMAIL_P;
}
public String SEND_EMAIL;
public String getSEND_EMAIL(){
	return this.SEND_EMAIL;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String excel;
public String getExcel(){
	return this.excel;
}
public String SMTP_P;
public String getSMTP_P(){
	return this.SMTP_P;
}
public String SMTP_PORT_P;
public String getSMTP_PORT_P(){
	return this.SMTP_PORT_P;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
public String caminho;
public String getCaminho(){
	return this.caminho;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "relatorio_vendas_30_dias";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				relatorio_vendas_30_dias.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(relatorio_vendas_30_dias.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";
	
	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_3 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_3 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3","");

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());


context.data_execucao = data;
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tDBInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return null;
				}
				public Integer jobPrecision(){
				    return null;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return "";
				
				}
				public String jobPattern(){
				
					return "";
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String nm_relatorio;

				public String getNm_relatorio () {
					return this.nm_relatorio;
				}

				public Boolean nm_relatorioIsNullable(){
				    return true;
				}
				public Boolean nm_relatorioIsKey(){
				    return false;
				}
				public Integer nm_relatorioLength(){
				    return null;
				}
				public Integer nm_relatorioPrecision(){
				    return null;
				}
				public String nm_relatorioDefault(){
				
					return null;
				
				}
				public String nm_relatorioComment(){
				
				    return "";
				
				}
				public String nm_relatorioPattern(){
				
					return "";
				
				}
				public String nm_relatorioOriginalDbColumnName(){
				
					return "nm_relatorio";
				
				}

				
			    public String caminho;

				public String getCaminho () {
					return this.caminho;
				}

				public Boolean caminhoIsNullable(){
				    return true;
				}
				public Boolean caminhoIsKey(){
				    return false;
				}
				public Integer caminhoLength(){
				    return null;
				}
				public Integer caminhoPrecision(){
				    return null;
				}
				public String caminhoDefault(){
				
					return null;
				
				}
				public String caminhoComment(){
				
				    return "";
				
				}
				public String caminhoPattern(){
				
					return "";
				
				}
				public String caminhoOriginalDbColumnName(){
				
					return "caminho";
				
				}

				
			    public String email;

				public String getEmail () {
					return this.email;
				}

				public Boolean emailIsNullable(){
				    return true;
				}
				public Boolean emailIsKey(){
				    return false;
				}
				public Integer emailLength(){
				    return null;
				}
				public Integer emailPrecision(){
				    return null;
				}
				public String emailDefault(){
				
					return null;
				
				}
				public String emailComment(){
				
				    return "";
				
				}
				public String emailPattern(){
				
					return "";
				
				}
				public String emailOriginalDbColumnName(){
				
					return "email";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.job = readString(dis);
					
					this.nm_relatorio = readString(dis);
					
					this.caminho = readString(dis);
					
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.job = readString(dis);
					
					this.nm_relatorio = readString(dis);
					
					this.caminho = readString(dis);
					
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.nm_relatorio,dos);
					
					// String
				
						writeString(this.caminho,dos);
					
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.nm_relatorio,dos);
					
					// String
				
						writeString(this.caminho,dos);
					
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job="+job);
		sb.append(",nm_relatorio="+nm_relatorio);
		sb.append(",caminho="+caminho);
		sb.append(",email="+email);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return null;
				}
				public Integer jobPrecision(){
				    return null;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return "";
				
				}
				public String jobPattern(){
				
					return "";
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String nm_relatorio;

				public String getNm_relatorio () {
					return this.nm_relatorio;
				}

				public Boolean nm_relatorioIsNullable(){
				    return true;
				}
				public Boolean nm_relatorioIsKey(){
				    return false;
				}
				public Integer nm_relatorioLength(){
				    return null;
				}
				public Integer nm_relatorioPrecision(){
				    return null;
				}
				public String nm_relatorioDefault(){
				
					return null;
				
				}
				public String nm_relatorioComment(){
				
				    return "";
				
				}
				public String nm_relatorioPattern(){
				
					return "";
				
				}
				public String nm_relatorioOriginalDbColumnName(){
				
					return "nm_relatorio";
				
				}

				
			    public String caminho;

				public String getCaminho () {
					return this.caminho;
				}

				public Boolean caminhoIsNullable(){
				    return true;
				}
				public Boolean caminhoIsKey(){
				    return false;
				}
				public Integer caminhoLength(){
				    return null;
				}
				public Integer caminhoPrecision(){
				    return null;
				}
				public String caminhoDefault(){
				
					return null;
				
				}
				public String caminhoComment(){
				
				    return "";
				
				}
				public String caminhoPattern(){
				
					return "";
				
				}
				public String caminhoOriginalDbColumnName(){
				
					return "caminho";
				
				}

				
			    public String email;

				public String getEmail () {
					return this.email;
				}

				public Boolean emailIsNullable(){
				    return true;
				}
				public Boolean emailIsKey(){
				    return false;
				}
				public Integer emailLength(){
				    return null;
				}
				public Integer emailPrecision(){
				    return null;
				}
				public String emailDefault(){
				
					return null;
				
				}
				public String emailComment(){
				
				    return "";
				
				}
				public String emailPattern(){
				
					return "";
				
				}
				public String emailOriginalDbColumnName(){
				
					return "email";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.job = readString(dis);
					
					this.nm_relatorio = readString(dis);
					
					this.caminho = readString(dis);
					
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.job = readString(dis);
					
					this.nm_relatorio = readString(dis);
					
					this.caminho = readString(dis);
					
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.nm_relatorio,dos);
					
					// String
				
						writeString(this.caminho,dos);
					
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.nm_relatorio,dos);
					
					// String
				
						writeString(this.caminho,dos);
					
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job="+job);
		sb.append(",nm_relatorio="+nm_relatorio);
		sb.append(",caminho="+caminho);
		sb.append(",email="+email);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
row26Struct row26 = new row26Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
		


	class Util_tLogRow_1 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_1";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "job");
				for(int i=0; i<titleWidth -"job".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "nm_relatorio");
				for(int i=0; i<titleWidth -"nm_relatorio".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "caminho");
				for(int i=0; i<titleWidth -"caminho".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[2]);
				for(int i=0; row[2] == null && i<dataWidth - 3 || row[2] != null && i<dataWidth -row[2].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "email");
				for(int i=0; i<titleWidth -"email".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[3]);
				for(int i=0; row[3] == null && i<dataWidth - 3 || row[3] != null && i<dataWidth -row[3].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();




	java.io.PrintStream consoleOut_tLogRow_1 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
    }

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";
	
	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
				
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "select job,\n       nm_relatorio,\n--       REPLACE(caminho,'/','\\') \ncaminho,\n       string_agg(distinct trim(email"
+"),',') email\n  from dw_t_relatorio_email\nwhere job = '"+context.programa+"'\n group by job, nm_relatorio, caminho";
		    

		    globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);

		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row25.job = null;
							} else {
	                         		
        	row25.job = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row25.nm_relatorio = null;
							} else {
	                         		
        	row25.nm_relatorio = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row25.caminho = null;
							} else {
	                         		
        	row25.caminho = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row25.email = null;
							} else {
	                         		
        	row25.email = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";
	
	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";
	
	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

    //Code generated according to input schema and output schema
row26.job = row25.job;
row26.nm_relatorio = row25.nm_relatorio;
row26.caminho = row25.caminho;
row26.email = row25.email;
context.SEND_EMAIL = row25.email;
context.caminho = row25.caminho;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row26.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row26.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row26.nm_relatorio != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row26.nm_relatorio)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row26.caminho != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row26.caminho)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row26.email != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row26.email)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_1 = new String[4];
   				
	    		if(row26.job != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row26.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(row26.nm_relatorio != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row26.nm_relatorio)			
					          ;	
							
	    		} //			
    			   				
	    		if(row26.caminho != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row26.caminho)			
					          ;	
							
	    		} //			
    			   				
	    		if(row26.email != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row26.email)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_1++;
                consoleOut_tLogRow_1.println(util_tLogRow_1.print(row_tLogRow_1,nb_line_tLogRow_1));
                consoleOut_tLogRow_1.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";
	
	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";
	
	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";
	
	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row5.mensagem;
					oneRow_tHashOutput_1.uuid = row5.uuid;
					oneRow_tHashOutput_1.versao = row5.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_2", false);
		start_Hash.put("tPostjob_2", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_2";
	
	
		int tos_count_tPostjob_2 = 0;
		

 



/**
 * [tPostjob_2 begin ] stop
 */
	
	/**
	 * [tPostjob_2 main ] start
	 */

	

	
	
	currentComponent="tPostjob_2";
	
	

 


	tos_count_tPostjob_2++;

/**
 * [tPostjob_2 main ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_2";
	
	

 



/**
 * [tPostjob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";
	
	

 



/**
 * [tPostjob_2 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_2 end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";
	
	

 

ok_Hash.put("tPostjob_2", true);
end_Hash.put("tPostjob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tHashInput_4Process(globalMap);



/**
 * [tPostjob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_2 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_2";
	
	

 



/**
 * [tPostjob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outStruct implements routines.system.IPersistableRow<outStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_10Process(globalMap);
		tHashInput_2Process(globalMap);
		tHashInput_12Process(globalMap);

		row12Struct row12 = new row12Struct();
out6Struct out6 = new out6Struct();
outStruct out = new outStruct();
out3Struct out3 = new out3Struct();
row10Struct row10 = new row10Struct();








	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
outStruct out_tmp = new outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row15Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row15Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row15Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row12.ITE_CODEMP = next_tHashInput_4.ITE_CODEMP;
	row12.ITE_CODITE = next_tHashInput_4.ITE_CODITE;
	row12.ITE_PRECUS = next_tHashInput_4.ITE_PRECUS;
	row12.ESTOQUE_DISP = next_tHashInput_4.ESTOQUE_DISP;
	row12.VL_ESTOQUE_DISP = next_tHashInput_4.VL_ESTOQUE_DISP;
	row12.ESTOQUE_FISICO = next_tHashInput_4.ESTOQUE_FISICO;
	row12.VL_ESTOQUE_FISICO = next_tHashInput_4.VL_ESTOQUE_FISICO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
						row21Struct row21 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row21HashKey.COD_ITEM = row12.ITE_CODITE ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row21.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_10 = true;
	  								
						
									
	
		  								forceLooprow21 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow21 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row21 != null && tHash_Lookup_row21.hasNext()) || forceLooprow21) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row21'
									
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								
								if(!forceLooprow21) { // G 46
								
							
								 
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow21 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

out6 = null;

if(!rejectedInnerJoin_tMap_10 ) {

// # Output table : 'out6'
out6_tmp.ITE_CODEMP = row12.ITE_CODEMP ;
out6_tmp.ITE_CODITE = row12.ITE_CODITE ;
out6_tmp.ITE_PRECUS = row12.ITE_PRECUS ;
out6_tmp.ESTOQUE_DISP = row12.ESTOQUE_DISP ;
out6_tmp.VL_ESTOQUE_DISP = row12.VL_ESTOQUE_DISP ;
out6_tmp.ESTOQUE_FISICO = row12.ESTOQUE_FISICO ;
out6_tmp.VL_ESTOQUE_FISICO = row12.VL_ESTOQUE_FISICO ;
out6_tmp.DT_ULTIMA_VENDA = row21.DT_ULTIMA_VENDA ;
out6_tmp.DIAS_SEM_VENDA = row21.DIAS_SEM_VENDA ;
out6 = out6_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_15 = false;
		boolean mainRowRejected_tMap_15 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		    row9HashKey.CD_PRODUTO = row21.COD_ITEM ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

out = null;


// # Output table : 'out'
out_tmp.ITE_CODEMP = out6.ITE_CODEMP ;
out_tmp.ITE_CODITE = out6.ITE_CODITE ;
out_tmp.ITE_PRECUS = out6.ITE_PRECUS ;
out_tmp.ESTOQUE_DISP = out6.ESTOQUE_DISP ;
out_tmp.VL_ESTOQUE_DISP = out6.VL_ESTOQUE_DISP ;
out_tmp.ESTOQUE_FISICO = out6.ESTOQUE_FISICO ;
out_tmp.VL_ESTOQUE_FISICO = out6.VL_ESTOQUE_FISICO ;
out_tmp.DT_ULTIMA_VENDA = out6.DT_ULTIMA_VENDA ;
out_tmp.DIAS_SEM_VENDA = out6.DIAS_SEM_VENDA ;
out_tmp.CD_MARCA = row9.CD_MARCA ;
out_tmp.DC_MARCA = row9.DC_MARCA ;
out_tmp.CD_FORNECEDOR = row9.CD_FORNECEDOR ;
out = out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "out"
if(out != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row8HashKey.FOR_CODFOR = out.CD_FORNECEDOR ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow8 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow8 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row8'
									
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								
								if(!forceLooprow8) { // G 46
								
							
								 
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow8 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.ITE_CODEMP = out.ITE_CODEMP ;
out3_tmp.ITE_CODITE = out.ITE_CODITE ;
out3_tmp.ITE_PRECUS = out.ITE_PRECUS ;
out3_tmp.ESTOQUE_DISP = out.ESTOQUE_DISP ;
out3_tmp.VL_ESTOQUE_DISP = out.VL_ESTOQUE_DISP ;
out3_tmp.ESTOQUE_FISICO = out.ESTOQUE_FISICO ;
out3_tmp.VL_ESTOQUE_FISICO = out.VL_ESTOQUE_FISICO ;
out3_tmp.DT_ULTIMA_VENDA = out.DT_ULTIMA_VENDA ;
out3_tmp.DIAS_SEM_VENDA = out.DIAS_SEM_VENDA ;
out3_tmp.CD_MARCA = out.CD_MARCA ;
out3_tmp.DC_MARCA = out.DC_MARCA ;
out3_tmp.CD_FORNECEDOR = out.CD_FORNECEDOR ;
out3_tmp.FOR_NOMFOR = row8.FOR_NOMFOR ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

          row10 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((out3.DIAS_SEM_VENDA == null? false : out3.DIAS_SEM_VENDA.compareTo(ParserUtils.parseTo_Integer(String.valueOf(30))) > 0)
                           , "DIAS_SEM_VENDA.compareTo(30) > 0 failed");
		 	
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.ITE_CODEMP = out3.ITE_CODEMP;
               row10.ITE_CODITE = out3.ITE_CODITE;
               row10.ITE_PRECUS = out3.ITE_PRECUS;
               row10.ESTOQUE_DISP = out3.ESTOQUE_DISP;
               row10.VL_ESTOQUE_DISP = out3.VL_ESTOQUE_DISP;
               row10.ESTOQUE_FISICO = out3.ESTOQUE_FISICO;
               row10.VL_ESTOQUE_FISICO = out3.VL_ESTOQUE_FISICO;
               row10.DT_ULTIMA_VENDA = out3.DT_ULTIMA_VENDA;
               row10.DIAS_SEM_VENDA = out3.DIAS_SEM_VENDA;
               row10.CD_MARCA = out3.CD_MARCA;
               row10.DC_MARCA = out3.DC_MARCA;
               row10.CD_FORNECEDOR = out3.CD_FORNECEDOR;
               row10.FOR_NOMFOR = out3.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_5 = new row10Struct();
				
					oneRow_tHashOutput_5.ITE_CODEMP = row10.ITE_CODEMP;
					oneRow_tHashOutput_5.ITE_CODITE = row10.ITE_CODITE;
					oneRow_tHashOutput_5.ITE_PRECUS = row10.ITE_PRECUS;
					oneRow_tHashOutput_5.ESTOQUE_DISP = row10.ESTOQUE_DISP;
					oneRow_tHashOutput_5.VL_ESTOQUE_DISP = row10.VL_ESTOQUE_DISP;
					oneRow_tHashOutput_5.ESTOQUE_FISICO = row10.ESTOQUE_FISICO;
					oneRow_tHashOutput_5.VL_ESTOQUE_FISICO = row10.VL_ESTOQUE_FISICO;
					oneRow_tHashOutput_5.DT_ULTIMA_VENDA = row10.DT_ULTIMA_VENDA;
					oneRow_tHashOutput_5.DIAS_SEM_VENDA = row10.DIAS_SEM_VENDA;
					oneRow_tHashOutput_5.CD_MARCA = row10.CD_MARCA;
					oneRow_tHashOutput_5.DC_MARCA = row10.DC_MARCA;
					oneRow_tHashOutput_5.CD_FORNECEDOR = row10.CD_FORNECEDOR;
					oneRow_tHashOutput_5.FOR_NOMFOR = row10.FOR_NOMFOR;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out3"



	
		} // close loop of lookup 'row8' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out"



	
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_end ] stop
 */

} // End of branch "out6"



	
		} // close loop of lookup 'row21' // G_TM_M_043
	
	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class __001Struct implements routines.system.IPersistableRow<__001Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__001Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class _001Struct implements routines.system.IPersistableRow<_001Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(_001Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
_001Struct _001 = new _001Struct();
row16Struct row16 = new row16Struct();
__001Struct __001 = new __001Struct();







	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__001");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		
		int columnIndex_tFileOutputExcel_1 = 0;
		boolean headerIsInserted_tFileOutputExcel_1 = false;
		
		
		String fileName_tFileOutputExcel_1="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_1.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_1.setSheet("001");
		xlsxTool_tFileOutputExcel_1.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_1++;
		headerIsInserted_tFileOutputExcel_1 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
__001Struct __001_tmp = new __001Struct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"_001");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
_001Struct _001_tmp = new _001Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row10Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row13.ITE_CODEMP = next_tHashInput_3.ITE_CODEMP;
	row13.ITE_CODITE = next_tHashInput_3.ITE_CODITE;
	row13.ITE_PRECUS = next_tHashInput_3.ITE_PRECUS;
	row13.ESTOQUE_DISP = next_tHashInput_3.ESTOQUE_DISP;
	row13.VL_ESTOQUE_DISP = next_tHashInput_3.VL_ESTOQUE_DISP;
	row13.ESTOQUE_FISICO = next_tHashInput_3.ESTOQUE_FISICO;
	row13.VL_ESTOQUE_FISICO = next_tHashInput_3.VL_ESTOQUE_FISICO;
	row13.DT_ULTIMA_VENDA = next_tHashInput_3.DT_ULTIMA_VENDA;
	row13.DIAS_SEM_VENDA = next_tHashInput_3.DIAS_SEM_VENDA;
	row13.CD_MARCA = next_tHashInput_3.CD_MARCA;
	row13.DC_MARCA = next_tHashInput_3.DC_MARCA;
	row13.CD_FORNECEDOR = next_tHashInput_3.CD_FORNECEDOR;
	row13.FOR_NOMFOR = next_tHashInput_3.FOR_NOMFOR;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

_001 = null;


// # Output table : '_001'
_001_tmp.ITE_CODEMP = row13.ITE_CODEMP ;
_001_tmp.ITE_CODITE = row13.ITE_CODITE ;
_001_tmp.ITE_PRECUS = row13.ITE_PRECUS ;
_001_tmp.ESTOQUE_DISP = row13.ESTOQUE_DISP ;
_001_tmp.VL_ESTOQUE_DISP = row13.VL_ESTOQUE_DISP ;
_001_tmp.DT_ULTIMA_VENDA = row13.DT_ULTIMA_VENDA ;
_001_tmp.DIAS_SEM_VENDA = row13.DIAS_SEM_VENDA ;
_001_tmp.CD_MARCA = row13.CD_MARCA ;
_001_tmp.DC_MARCA = row13.DC_MARCA ;
_001_tmp.CD_FORNECEDOR = row13.CD_FORNECEDOR ;
_001_tmp.FOR_NOMFOR = row13.FOR_NOMFOR ;
_001 = _001_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "_001"
if(_001 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"_001"
						
						);
					}
					

          row16 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((_001.ITE_CODEMP == null? false : _001.ITE_CODEMP.compareTo("001") == 0)
                           , "ITE_CODEMP.compareTo(\"001\") == 0 failed");
            ope_tFilterRow_2.matches((_001.ESTOQUE_DISP == null? false : _001.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row16 == null){ 
                row16 = new row16Struct();
              }
               row16.ITE_CODEMP = _001.ITE_CODEMP;
               row16.ITE_CODITE = _001.ITE_CODITE;
               row16.ITE_PRECUS = _001.ITE_PRECUS;
               row16.ESTOQUE_DISP = _001.ESTOQUE_DISP;
               row16.VL_ESTOQUE_DISP = _001.VL_ESTOQUE_DISP;
               row16.DT_ULTIMA_VENDA = _001.DT_ULTIMA_VENDA;
               row16.DIAS_SEM_VENDA = _001.DIAS_SEM_VENDA;
               row16.CD_MARCA = _001.CD_MARCA;
               row16.DC_MARCA = _001.DC_MARCA;
               row16.CD_FORNECEDOR = _001.CD_FORNECEDOR;
               row16.FOR_NOMFOR = _001.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_24 = false;
		boolean mainRowRejected_tMap_24 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

__001 = null;


// # Output table : '__001'
__001_tmp.ITE_CODEMP = row16.ITE_CODEMP;
__001_tmp.ITE_CODITE = row16.ITE_CODITE;
__001_tmp.ITE_PRECUS = row16.ITE_PRECUS;
__001_tmp.ESTOQUE_DISP = row16.ESTOQUE_DISP;
__001_tmp.VL_ESTOQUE_DISP = row16.VL_ESTOQUE_DISP;
__001_tmp.DT_ULTIMA_VENDA = row16.DT_ULTIMA_VENDA;
__001_tmp.DIAS_SEM_VENDA = row16.DIAS_SEM_VENDA;
__001_tmp.CD_MARCA = row16.CD_MARCA;
__001_tmp.DC_MARCA = row16.DC_MARCA;
__001_tmp.CD_FORNECEDOR = row16.CD_FORNECEDOR;
__001_tmp.FOR_NOMFOR = row16.FOR_NOMFOR;
__001 = __001_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "__001"
if(__001 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__001"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(__001.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((__001.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(__001.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((__001.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(__001.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(__001.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(__001.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(__001.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "__001"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "_001"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"_001");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

							columnIndex_tFileOutputExcel_1 = 0;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 1;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 2;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 3;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 4;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 5;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 6;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 7;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 8;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 9;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 10;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		if(headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0){
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		}
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__001");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tHashInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";
	
	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class __002Struct implements routines.system.IPersistableRow<__002Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__002Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOf_002Struct implements routines.system.IPersistableRow<copyOf_002Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOf_002Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();
copyOf_002Struct copyOf_002 = new copyOf_002Struct();
row17Struct row17 = new row17Struct();
__002Struct __002 = new __002Struct();







	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__002");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		
		int columnIndex_tFileOutputExcel_2 = 0;
		boolean headerIsInserted_tFileOutputExcel_2 = false;
		
		
		String fileName_tFileOutputExcel_2="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_2.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_2.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_2.setSheet("002");
		xlsxTool_tFileOutputExcel_2.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_2++;
		headerIsInserted_tFileOutputExcel_2 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
__002Struct __002_tmp = new __002Struct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOf_002");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOf_002Struct copyOf_002_tmp = new copyOf_002Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row10Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row34.ITE_CODEMP = next_tHashInput_5.ITE_CODEMP;
	row34.ITE_CODITE = next_tHashInput_5.ITE_CODITE;
	row34.ITE_PRECUS = next_tHashInput_5.ITE_PRECUS;
	row34.ESTOQUE_DISP = next_tHashInput_5.ESTOQUE_DISP;
	row34.VL_ESTOQUE_DISP = next_tHashInput_5.VL_ESTOQUE_DISP;
	row34.ESTOQUE_FISICO = next_tHashInput_5.ESTOQUE_FISICO;
	row34.VL_ESTOQUE_FISICO = next_tHashInput_5.VL_ESTOQUE_FISICO;
	row34.DT_ULTIMA_VENDA = next_tHashInput_5.DT_ULTIMA_VENDA;
	row34.DIAS_SEM_VENDA = next_tHashInput_5.DIAS_SEM_VENDA;
	row34.CD_MARCA = next_tHashInput_5.CD_MARCA;
	row34.DC_MARCA = next_tHashInput_5.DC_MARCA;
	row34.CD_FORNECEDOR = next_tHashInput_5.CD_FORNECEDOR;
	row34.FOR_NOMFOR = next_tHashInput_5.FOR_NOMFOR;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOf_002 = null;


// # Output table : 'copyOf_002'
copyOf_002_tmp.ITE_CODEMP = row34.ITE_CODEMP;
copyOf_002_tmp.ITE_CODITE = row34.ITE_CODITE;
copyOf_002_tmp.ITE_PRECUS = row34.ITE_PRECUS;
copyOf_002_tmp.ESTOQUE_DISP = row34.ESTOQUE_DISP;
copyOf_002_tmp.VL_ESTOQUE_DISP = row34.VL_ESTOQUE_DISP;
copyOf_002_tmp.ESTOQUE_FISICO = row34.ESTOQUE_FISICO;
copyOf_002_tmp.VL_ESTOQUE_FISICO = row34.VL_ESTOQUE_FISICO;
copyOf_002_tmp.DT_ULTIMA_VENDA = row34.DT_ULTIMA_VENDA;
copyOf_002_tmp.DIAS_SEM_VENDA = row34.DIAS_SEM_VENDA;
copyOf_002_tmp.CD_MARCA = row34.CD_MARCA;
copyOf_002_tmp.DC_MARCA = row34.DC_MARCA;
copyOf_002_tmp.CD_FORNECEDOR = row34.CD_FORNECEDOR;
copyOf_002_tmp.FOR_NOMFOR = row34.FOR_NOMFOR;
copyOf_002 = copyOf_002_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOf_002"
if(copyOf_002 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOf_002"
						
						);
					}
					

          row17 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((copyOf_002.ITE_CODEMP == null? false : copyOf_002.ITE_CODEMP.compareTo("002") == 0)
                           , "ITE_CODEMP.compareTo(\"002\") == 0 failed");
            ope_tFilterRow_3.matches((copyOf_002.ESTOQUE_DISP == null? false : copyOf_002.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row17 == null){ 
                row17 = new row17Struct();
              }
               row17.ITE_CODEMP = copyOf_002.ITE_CODEMP;
               row17.ITE_CODITE = copyOf_002.ITE_CODITE;
               row17.ITE_PRECUS = copyOf_002.ITE_PRECUS;
               row17.ESTOQUE_DISP = copyOf_002.ESTOQUE_DISP;
               row17.VL_ESTOQUE_DISP = copyOf_002.VL_ESTOQUE_DISP;
               row17.ESTOQUE_FISICO = copyOf_002.ESTOQUE_FISICO;
               row17.VL_ESTOQUE_FISICO = copyOf_002.VL_ESTOQUE_FISICO;
               row17.DT_ULTIMA_VENDA = copyOf_002.DT_ULTIMA_VENDA;
               row17.DIAS_SEM_VENDA = copyOf_002.DIAS_SEM_VENDA;
               row17.CD_MARCA = copyOf_002.CD_MARCA;
               row17.DC_MARCA = copyOf_002.DC_MARCA;
               row17.CD_FORNECEDOR = copyOf_002.CD_FORNECEDOR;
               row17.FOR_NOMFOR = copyOf_002.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_25 = false;
		boolean mainRowRejected_tMap_25 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

__002 = null;


// # Output table : '__002'
__002_tmp.ITE_CODEMP = row17.ITE_CODEMP;
__002_tmp.ITE_CODITE = row17.ITE_CODITE;
__002_tmp.ITE_PRECUS = row17.ITE_PRECUS;
__002_tmp.ESTOQUE_DISP = row17.ESTOQUE_DISP;
__002_tmp.VL_ESTOQUE_DISP = row17.VL_ESTOQUE_DISP;
__002_tmp.DT_ULTIMA_VENDA = row17.DT_ULTIMA_VENDA;
__002_tmp.DIAS_SEM_VENDA = row17.DIAS_SEM_VENDA;
__002_tmp.CD_MARCA = row17.CD_MARCA;
__002_tmp.DC_MARCA = row17.DC_MARCA;
__002_tmp.CD_FORNECEDOR = row17.CD_FORNECEDOR;
__002_tmp.FOR_NOMFOR = row17.FOR_NOMFOR;
__002 = __002_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";
	
	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "__002"
if(__002 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__002"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(__002.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((__002.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(__002.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((__002.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(__002.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(__002.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(__002.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(__002.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "__002"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";
	
	

 



/**
 * [tMap_25 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "copyOf_002"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOf_002");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

							columnIndex_tFileOutputExcel_2 = 0;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 1;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 2;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 3;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 4;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 5;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 6;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 7;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 8;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 9;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 10;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		if(headerIsInserted_tFileOutputExcel_2 && nb_line_tFileOutputExcel_2 > 0){
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		}
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__002");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tHashInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";
	
	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";
	
	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class __006Struct implements routines.system.IPersistableRow<__006Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__006Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOf_006Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOf_006Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOf_006Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();
copyOfcopyOfcopyOfcopyOf_006Struct copyOfcopyOfcopyOfcopyOf_006 = new copyOfcopyOfcopyOfcopyOf_006Struct();
row22Struct row22 = new row22Struct();
__006Struct __006 = new __006Struct();







	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__006");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		
		int columnIndex_tFileOutputExcel_6 = 0;
		boolean headerIsInserted_tFileOutputExcel_6 = false;
		
		
		String fileName_tFileOutputExcel_6="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_6.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_6.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_6.setSheet("006");
		xlsxTool_tFileOutputExcel_6.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		
		if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_6.addRow();
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_6++;
		headerIsInserted_tFileOutputExcel_6 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
__006Struct __006_tmp = new __006Struct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOf_006");
					}
				
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOf_006Struct copyOfcopyOfcopyOfcopyOf_006_tmp = new copyOfcopyOfcopyOfcopyOf_006Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row10Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row38.ITE_CODEMP = next_tHashInput_9.ITE_CODEMP;
	row38.ITE_CODITE = next_tHashInput_9.ITE_CODITE;
	row38.ITE_PRECUS = next_tHashInput_9.ITE_PRECUS;
	row38.ESTOQUE_DISP = next_tHashInput_9.ESTOQUE_DISP;
	row38.VL_ESTOQUE_DISP = next_tHashInput_9.VL_ESTOQUE_DISP;
	row38.ESTOQUE_FISICO = next_tHashInput_9.ESTOQUE_FISICO;
	row38.VL_ESTOQUE_FISICO = next_tHashInput_9.VL_ESTOQUE_FISICO;
	row38.DT_ULTIMA_VENDA = next_tHashInput_9.DT_ULTIMA_VENDA;
	row38.DIAS_SEM_VENDA = next_tHashInput_9.DIAS_SEM_VENDA;
	row38.CD_MARCA = next_tHashInput_9.CD_MARCA;
	row38.DC_MARCA = next_tHashInput_9.DC_MARCA;
	row38.CD_FORNECEDOR = next_tHashInput_9.CD_FORNECEDOR;
	row38.FOR_NOMFOR = next_tHashInput_9.FOR_NOMFOR;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOf_006 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOf_006'
copyOfcopyOfcopyOfcopyOf_006_tmp.ITE_CODEMP = row38.ITE_CODEMP;
copyOfcopyOfcopyOfcopyOf_006_tmp.ITE_CODITE = row38.ITE_CODITE;
copyOfcopyOfcopyOfcopyOf_006_tmp.ITE_PRECUS = row38.ITE_PRECUS;
copyOfcopyOfcopyOfcopyOf_006_tmp.ESTOQUE_DISP = row38.ESTOQUE_DISP;
copyOfcopyOfcopyOfcopyOf_006_tmp.VL_ESTOQUE_DISP = row38.VL_ESTOQUE_DISP;
copyOfcopyOfcopyOfcopyOf_006_tmp.ESTOQUE_FISICO = row38.ESTOQUE_FISICO;
copyOfcopyOfcopyOfcopyOf_006_tmp.VL_ESTOQUE_FISICO = row38.VL_ESTOQUE_FISICO;
copyOfcopyOfcopyOfcopyOf_006_tmp.DT_ULTIMA_VENDA = row38.DT_ULTIMA_VENDA;
copyOfcopyOfcopyOfcopyOf_006_tmp.DIAS_SEM_VENDA = row38.DIAS_SEM_VENDA;
copyOfcopyOfcopyOfcopyOf_006_tmp.CD_MARCA = row38.CD_MARCA;
copyOfcopyOfcopyOfcopyOf_006_tmp.DC_MARCA = row38.DC_MARCA;
copyOfcopyOfcopyOfcopyOf_006_tmp.CD_FORNECEDOR = row38.CD_FORNECEDOR;
copyOfcopyOfcopyOfcopyOf_006_tmp.FOR_NOMFOR = row38.FOR_NOMFOR;
copyOfcopyOfcopyOfcopyOf_006 = copyOfcopyOfcopyOfcopyOf_006_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOf_006"
if(copyOfcopyOfcopyOfcopyOf_006 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOf_006"
						
						);
					}
					

          row22 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
            ope_tFilterRow_7.matches((copyOfcopyOfcopyOfcopyOf_006.ITE_CODEMP == null? false : copyOfcopyOfcopyOfcopyOf_006.ITE_CODEMP.compareTo("006") == 0)
                           , "ITE_CODEMP.compareTo(\"006\") == 0 failed");
            ope_tFilterRow_7.matches((copyOfcopyOfcopyOfcopyOf_006.ESTOQUE_DISP == null? false : copyOfcopyOfcopyOfcopyOf_006.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row22 == null){ 
                row22 = new row22Struct();
              }
               row22.ITE_CODEMP = copyOfcopyOfcopyOfcopyOf_006.ITE_CODEMP;
               row22.ITE_CODITE = copyOfcopyOfcopyOfcopyOf_006.ITE_CODITE;
               row22.ITE_PRECUS = copyOfcopyOfcopyOfcopyOf_006.ITE_PRECUS;
               row22.ESTOQUE_DISP = copyOfcopyOfcopyOfcopyOf_006.ESTOQUE_DISP;
               row22.VL_ESTOQUE_DISP = copyOfcopyOfcopyOfcopyOf_006.VL_ESTOQUE_DISP;
               row22.ESTOQUE_FISICO = copyOfcopyOfcopyOfcopyOf_006.ESTOQUE_FISICO;
               row22.VL_ESTOQUE_FISICO = copyOfcopyOfcopyOfcopyOf_006.VL_ESTOQUE_FISICO;
               row22.DT_ULTIMA_VENDA = copyOfcopyOfcopyOfcopyOf_006.DT_ULTIMA_VENDA;
               row22.DIAS_SEM_VENDA = copyOfcopyOfcopyOfcopyOf_006.DIAS_SEM_VENDA;
               row22.CD_MARCA = copyOfcopyOfcopyOfcopyOf_006.CD_MARCA;
               row22.DC_MARCA = copyOfcopyOfcopyOfcopyOf_006.DC_MARCA;
               row22.CD_FORNECEDOR = copyOfcopyOfcopyOfcopyOf_006.CD_FORNECEDOR;
               row22.FOR_NOMFOR = copyOfcopyOfcopyOfcopyOf_006.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";
	
	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_26 = false;
		boolean mainRowRejected_tMap_26 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

__006 = null;


// # Output table : '__006'
__006_tmp.ITE_CODEMP = row22.ITE_CODEMP;
__006_tmp.ITE_CODITE = row22.ITE_CODITE;
__006_tmp.ITE_PRECUS = row22.ITE_PRECUS;
__006_tmp.ESTOQUE_DISP = row22.ESTOQUE_DISP;
__006_tmp.VL_ESTOQUE_DISP = row22.VL_ESTOQUE_DISP;
__006_tmp.DT_ULTIMA_VENDA = row22.DT_ULTIMA_VENDA;
__006_tmp.DIAS_SEM_VENDA = row22.DIAS_SEM_VENDA;
__006_tmp.CD_MARCA = row22.CD_MARCA;
__006_tmp.DC_MARCA = row22.DC_MARCA;
__006_tmp.CD_FORNECEDOR = row22.CD_FORNECEDOR;
__006_tmp.FOR_NOMFOR = row22.FOR_NOMFOR;
__006 = __006_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";
	
	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "__006"
if(__006 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__006"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(__006.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_6.addCellValue((__006.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(Double.parseDouble(String.valueOf(__006.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_6.addCellValue((__006.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(__006.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(Double.parseDouble(String.valueOf(__006.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(__006.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(__006.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */

} // End of branch "__006"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";
	
	

 



/**
 * [tMap_26 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";
	
	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOf_006"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";
	
	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOf_006");
			  	}
			  	
 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

							columnIndex_tFileOutputExcel_6 = 0;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 1;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 2;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 3;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 4;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 5;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 6;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 7;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 8;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 9;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 10;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		if(headerIsInserted_tFileOutputExcel_6 && nb_line_tFileOutputExcel_6 > 0){
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		}
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__006");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tHashInput_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";
	
	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";
	
	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";
	
	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class __007Struct implements routines.system.IPersistableRow<__007Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__007Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();
copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct copyOfcopyOfcopyOfcopyOf_007_0_0_0 = new copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct();
row20Struct row20 = new row20Struct();
__007Struct __007 = new __007Struct();







	
	/**
	 * [tFileOutputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_7", false);
		start_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__007");
					}
				
		int tos_count_tFileOutputExcel_7 = 0;
		


		
		int columnIndex_tFileOutputExcel_7 = 0;
		boolean headerIsInserted_tFileOutputExcel_7 = false;
		
		
		String fileName_tFileOutputExcel_7="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_7 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_7.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_7.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_7.setSheet("007");
		xlsxTool_tFileOutputExcel_7.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_7.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_7 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_7 = chm_tFileOutputExcel_7.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_7", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_7) {
			
				xlsxTool_tFileOutputExcel_7.prepareXlsxFile(fileName_tFileOutputExcel_7);
			
		}
		
		xlsxTool_tFileOutputExcel_7.setFont("");
		
		if (xlsxTool_tFileOutputExcel_7.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_7.addRow();
		
		xlsxTool_tFileOutputExcel_7.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_7++;
		headerIsInserted_tFileOutputExcel_7 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_7 begin ] stop
 */



	
	/**
	 * [tMap_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_27", false);
		start_Hash.put("tMap_27", System.currentTimeMillis());
		
	
	currentComponent="tMap_27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_27 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_27__Struct  {
}
Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
__007Struct __007_tmp = new __007Struct();
// ###############################

        
        



        









 



/**
 * [tMap_27 begin ] stop
 */



	
	/**
	 * [tFilterRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_9", false);
		start_Hash.put("tFilterRow_9", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOf_007_0_0_0");
					}
				
		int tos_count_tFilterRow_9 = 0;
		
    int nb_line_tFilterRow_9 = 0;
    int nb_line_ok_tFilterRow_9 = 0;
    int nb_line_reject_tFilterRow_9 = 0;

    class Operator_tFilterRow_9 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_9(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_9 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOf_007_0_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";
	
	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    row10Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row46.ITE_CODEMP = next_tHashInput_19.ITE_CODEMP;
	row46.ITE_CODITE = next_tHashInput_19.ITE_CODITE;
	row46.ITE_PRECUS = next_tHashInput_19.ITE_PRECUS;
	row46.ESTOQUE_DISP = next_tHashInput_19.ESTOQUE_DISP;
	row46.VL_ESTOQUE_DISP = next_tHashInput_19.VL_ESTOQUE_DISP;
	row46.ESTOQUE_FISICO = next_tHashInput_19.ESTOQUE_FISICO;
	row46.VL_ESTOQUE_FISICO = next_tHashInput_19.VL_ESTOQUE_FISICO;
	row46.DT_ULTIMA_VENDA = next_tHashInput_19.DT_ULTIMA_VENDA;
	row46.DIAS_SEM_VENDA = next_tHashInput_19.DIAS_SEM_VENDA;
	row46.CD_MARCA = next_tHashInput_19.CD_MARCA;
	row46.DC_MARCA = next_tHashInput_19.DC_MARCA;
	row46.CD_FORNECEDOR = next_tHashInput_19.CD_FORNECEDOR;
	row46.FOR_NOMFOR = next_tHashInput_19.FOR_NOMFOR;

 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_23 = false;
		boolean mainRowRejected_tMap_23 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOf_007_0_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOf_007_0_0_0'
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.ITE_CODEMP = row46.ITE_CODEMP;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.ITE_CODITE = row46.ITE_CODITE;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.ITE_PRECUS = row46.ITE_PRECUS;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.ESTOQUE_DISP = row46.ESTOQUE_DISP;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.VL_ESTOQUE_DISP = row46.VL_ESTOQUE_DISP;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.ESTOQUE_FISICO = row46.ESTOQUE_FISICO;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.VL_ESTOQUE_FISICO = row46.VL_ESTOQUE_FISICO;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.DT_ULTIMA_VENDA = row46.DT_ULTIMA_VENDA;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.DIAS_SEM_VENDA = row46.DIAS_SEM_VENDA;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.CD_MARCA = row46.CD_MARCA;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.DC_MARCA = row46.DC_MARCA;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.CD_FORNECEDOR = row46.CD_FORNECEDOR;
copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp.FOR_NOMFOR = row46.FOR_NOMFOR;
copyOfcopyOfcopyOfcopyOf_007_0_0_0 = copyOfcopyOfcopyOfcopyOf_007_0_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";
	
	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOf_007_0_0_0"
if(copyOfcopyOfcopyOfcopyOf_007_0_0_0 != null) { 



	
	/**
	 * [tFilterRow_9 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfcopyOf_007_0_0_0"
						
						);
					}
					

          row20 = null;
    Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("&&");
            ope_tFilterRow_9.matches((copyOfcopyOfcopyOfcopyOf_007_0_0_0.ITE_CODEMP == null? false : copyOfcopyOfcopyOfcopyOf_007_0_0_0.ITE_CODEMP.compareTo("007") == 0)
                           , "ITE_CODEMP.compareTo(\"007\") == 0 failed");
            ope_tFilterRow_9.matches((copyOfcopyOfcopyOfcopyOf_007_0_0_0.ESTOQUE_DISP == null? false : copyOfcopyOfcopyOfcopyOf_007_0_0_0.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_9.getMatchFlag()) {
              if(row20 == null){ 
                row20 = new row20Struct();
              }
               row20.ITE_CODEMP = copyOfcopyOfcopyOfcopyOf_007_0_0_0.ITE_CODEMP;
               row20.ITE_CODITE = copyOfcopyOfcopyOfcopyOf_007_0_0_0.ITE_CODITE;
               row20.ITE_PRECUS = copyOfcopyOfcopyOfcopyOf_007_0_0_0.ITE_PRECUS;
               row20.ESTOQUE_DISP = copyOfcopyOfcopyOfcopyOf_007_0_0_0.ESTOQUE_DISP;
               row20.VL_ESTOQUE_DISP = copyOfcopyOfcopyOfcopyOf_007_0_0_0.VL_ESTOQUE_DISP;
               row20.ESTOQUE_FISICO = copyOfcopyOfcopyOfcopyOf_007_0_0_0.ESTOQUE_FISICO;
               row20.VL_ESTOQUE_FISICO = copyOfcopyOfcopyOfcopyOf_007_0_0_0.VL_ESTOQUE_FISICO;
               row20.DT_ULTIMA_VENDA = copyOfcopyOfcopyOfcopyOf_007_0_0_0.DT_ULTIMA_VENDA;
               row20.DIAS_SEM_VENDA = copyOfcopyOfcopyOfcopyOf_007_0_0_0.DIAS_SEM_VENDA;
               row20.CD_MARCA = copyOfcopyOfcopyOfcopyOf_007_0_0_0.CD_MARCA;
               row20.DC_MARCA = copyOfcopyOfcopyOfcopyOf_007_0_0_0.DC_MARCA;
               row20.CD_FORNECEDOR = copyOfcopyOfcopyOfcopyOf_007_0_0_0.CD_FORNECEDOR;
               row20.FOR_NOMFOR = copyOfcopyOfcopyOfcopyOf_007_0_0_0.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_9++;
    } else {
      nb_line_reject_tFilterRow_9++;
    }

nb_line_tFilterRow_9++;

 


	tos_count_tFilterRow_9++;

/**
 * [tFilterRow_9 main ] stop
 */
	
	/**
	 * [tFilterRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";
	
	

 



/**
 * [tFilterRow_9 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_27 = false;
		boolean mainRowRejected_tMap_27 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

__007 = null;


// # Output table : '__007'
__007_tmp.ITE_CODEMP = row20.ITE_CODEMP;
__007_tmp.ITE_CODITE = row20.ITE_CODITE;
__007_tmp.ITE_PRECUS = row20.ITE_PRECUS;
__007_tmp.ESTOQUE_DISP = row20.ESTOQUE_DISP;
__007_tmp.VL_ESTOQUE_DISP = row20.VL_ESTOQUE_DISP;
__007_tmp.DT_ULTIMA_VENDA = row20.DT_ULTIMA_VENDA;
__007_tmp.DIAS_SEM_VENDA = row20.DIAS_SEM_VENDA;
__007_tmp.CD_MARCA = row20.CD_MARCA;
__007_tmp.DC_MARCA = row20.DC_MARCA;
__007_tmp.CD_FORNECEDOR = row20.CD_FORNECEDOR;
__007_tmp.FOR_NOMFOR = row20.FOR_NOMFOR;
__007 = __007_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";
	
	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "__007"
if(__007 != null) { 



	
	/**
	 * [tFileOutputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__007"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_7.addRow();
									   				
	    				if(__007.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_7.addCellValue((__007.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(Double.parseDouble(String.valueOf(__007.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_7.addCellValue((__007.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(__007.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(Double.parseDouble(String.valueOf(__007.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(__007.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(__007.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_7++;
				
 


	tos_count_tFileOutputExcel_7++;

/**
 * [tFileOutputExcel_7 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 process_data_end ] stop
 */

} // End of branch "__007"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";
	
	

 



/**
 * [tMap_27 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFilterRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";
	
	

 



/**
 * [tFilterRow_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOf_007_0_0_0"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";
	
	

 



/**
 * [tMap_23 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tFilterRow_9 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";
	
	
    globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOf_007_0_0_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_9", true);
end_Hash.put("tFilterRow_9", System.currentTimeMillis());




/**
 * [tFilterRow_9 end ] stop
 */

	
	/**
	 * [tMap_27 end ] start
	 */

	

	
	
	currentComponent="tMap_27";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_27", true);
end_Hash.put("tMap_27", System.currentTimeMillis());




/**
 * [tMap_27 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

							columnIndex_tFileOutputExcel_7 = 0;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 1;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 2;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 3;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 4;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 5;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 6;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 7;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 8;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 9;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 10;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
	
	
	
			xlsxTool_tFileOutputExcel_7.writeExcel(fileName_tFileOutputExcel_7,true);
	
		if(headerIsInserted_tFileOutputExcel_7 && nb_line_tFileOutputExcel_7 > 0){
			nb_line_tFileOutputExcel_7 = nb_line_tFileOutputExcel_7 -1;
		}
		globalMap.put("tFileOutputExcel_7_NB_LINE",nb_line_tFileOutputExcel_7);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__007");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_7", true);
end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());




/**
 * [tFileOutputExcel_7 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tHashInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";
	
	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tFilterRow_9 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";
	
	

 



/**
 * [tFilterRow_9 finally ] stop
 */

	
	/**
	 * [tMap_27 finally ] start
	 */

	

	
	
	currentComponent="tMap_27";
	
	

 



/**
 * [tMap_27 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";
	
	

 



/**
 * [tFileOutputExcel_7 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class __00Struct implements routines.system.IPersistableRow<__00Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__00Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOf_008_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOf_008_0_0_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOf_008_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();
copyOfcopyOfcopyOf_008_0_0_0Struct copyOfcopyOfcopyOf_008_0_0_0 = new copyOfcopyOfcopyOf_008_0_0_0Struct();
row24Struct row24 = new row24Struct();
__00Struct __00 = new __00Struct();







	
	/**
	 * [tFileOutputExcel_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_8", false);
		start_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__00");
					}
				
		int tos_count_tFileOutputExcel_8 = 0;
		


		
		int columnIndex_tFileOutputExcel_8 = 0;
		boolean headerIsInserted_tFileOutputExcel_8 = false;
		
		
		String fileName_tFileOutputExcel_8="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_8 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_8.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_8.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_8.setSheet("008");
		xlsxTool_tFileOutputExcel_8.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_8.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_8.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_8 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_8 = chm_tFileOutputExcel_8.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_8", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_8) {
			
				xlsxTool_tFileOutputExcel_8.prepareXlsxFile(fileName_tFileOutputExcel_8);
			
		}
		
		xlsxTool_tFileOutputExcel_8.setFont("");
		
		if (xlsxTool_tFileOutputExcel_8.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_8.addRow();
		
		xlsxTool_tFileOutputExcel_8.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_8++;
		headerIsInserted_tFileOutputExcel_8 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_8 begin ] stop
 */



	
	/**
	 * [tMap_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_28", false);
		start_Hash.put("tMap_28", System.currentTimeMillis());
		
	
	currentComponent="tMap_28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_28 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_28__Struct  {
}
Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
__00Struct __00_tmp = new __00Struct();
// ###############################

        
        



        









 



/**
 * [tMap_28 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOf_008_0_0_0");
					}
				
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOf_008_0_0_0Struct copyOfcopyOfcopyOf_008_0_0_0_tmp = new copyOfcopyOfcopyOf_008_0_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";
	
	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row10Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row44.ITE_CODEMP = next_tHashInput_17.ITE_CODEMP;
	row44.ITE_CODITE = next_tHashInput_17.ITE_CODITE;
	row44.ITE_PRECUS = next_tHashInput_17.ITE_PRECUS;
	row44.ESTOQUE_DISP = next_tHashInput_17.ESTOQUE_DISP;
	row44.VL_ESTOQUE_DISP = next_tHashInput_17.VL_ESTOQUE_DISP;
	row44.ESTOQUE_FISICO = next_tHashInput_17.ESTOQUE_FISICO;
	row44.VL_ESTOQUE_FISICO = next_tHashInput_17.VL_ESTOQUE_FISICO;
	row44.DT_ULTIMA_VENDA = next_tHashInput_17.DT_ULTIMA_VENDA;
	row44.DIAS_SEM_VENDA = next_tHashInput_17.DIAS_SEM_VENDA;
	row44.CD_MARCA = next_tHashInput_17.CD_MARCA;
	row44.DC_MARCA = next_tHashInput_17.DC_MARCA;
	row44.CD_FORNECEDOR = next_tHashInput_17.CD_FORNECEDOR;
	row44.FOR_NOMFOR = next_tHashInput_17.FOR_NOMFOR;

 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_21 = false;
		boolean mainRowRejected_tMap_21 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOf_008_0_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOf_008_0_0_0'
copyOfcopyOfcopyOf_008_0_0_0_tmp.ITE_CODEMP = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.ITE_CODITE = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.ITE_PRECUS = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.ESTOQUE_DISP = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.VL_ESTOQUE_DISP = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.ESTOQUE_FISICO = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.VL_ESTOQUE_FISICO = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.DT_ULTIMA_VENDA = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.DIAS_SEM_VENDA = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.CD_MARCA = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.DC_MARCA = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.CD_FORNECEDOR = null;
copyOfcopyOfcopyOf_008_0_0_0_tmp.FOR_NOMFOR = null;
copyOfcopyOfcopyOf_008_0_0_0 = copyOfcopyOfcopyOf_008_0_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOf_008_0_0_0"
if(copyOfcopyOfcopyOf_008_0_0_0 != null) { 



	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOf_008_0_0_0"
						
						);
					}
					

          row24 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("&&");
            ope_tFilterRow_10.matches((copyOfcopyOfcopyOf_008_0_0_0.ITE_CODEMP == null? false : copyOfcopyOfcopyOf_008_0_0_0.ITE_CODEMP.compareTo("008") == 0)
                           , "ITE_CODEMP.compareTo(\"008\") == 0 failed");
            ope_tFilterRow_10.matches((copyOfcopyOfcopyOf_008_0_0_0.ESTOQUE_DISP == null? false : copyOfcopyOfcopyOf_008_0_0_0.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row24 == null){ 
                row24 = new row24Struct();
              }
               row24.ITE_CODEMP = copyOfcopyOfcopyOf_008_0_0_0.ITE_CODEMP;
               row24.ITE_CODITE = copyOfcopyOfcopyOf_008_0_0_0.ITE_CODITE;
               row24.ITE_PRECUS = copyOfcopyOfcopyOf_008_0_0_0.ITE_PRECUS;
               row24.ESTOQUE_DISP = copyOfcopyOfcopyOf_008_0_0_0.ESTOQUE_DISP;
               row24.VL_ESTOQUE_DISP = copyOfcopyOfcopyOf_008_0_0_0.VL_ESTOQUE_DISP;
               row24.ESTOQUE_FISICO = copyOfcopyOfcopyOf_008_0_0_0.ESTOQUE_FISICO;
               row24.VL_ESTOQUE_FISICO = copyOfcopyOfcopyOf_008_0_0_0.VL_ESTOQUE_FISICO;
               row24.DT_ULTIMA_VENDA = copyOfcopyOfcopyOf_008_0_0_0.DT_ULTIMA_VENDA;
               row24.DIAS_SEM_VENDA = copyOfcopyOfcopyOf_008_0_0_0.DIAS_SEM_VENDA;
               row24.CD_MARCA = copyOfcopyOfcopyOf_008_0_0_0.CD_MARCA;
               row24.DC_MARCA = copyOfcopyOfcopyOf_008_0_0_0.DC_MARCA;
               row24.CD_FORNECEDOR = copyOfcopyOfcopyOf_008_0_0_0.CD_FORNECEDOR;
               row24.FOR_NOMFOR = copyOfcopyOfcopyOf_008_0_0_0.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";
	
	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tMap_28 main ] start
	 */

	

	
	
	currentComponent="tMap_28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_28 = false;
		boolean mainRowRejected_tMap_28 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
        // ###############################
        // # Output tables

__00 = null;


// # Output table : '__00'
__00_tmp.ITE_CODEMP = row24.ITE_CODEMP;
__00_tmp.ITE_CODITE = row24.ITE_CODITE;
__00_tmp.ITE_PRECUS = row24.ITE_PRECUS;
__00_tmp.ESTOQUE_DISP = row24.ESTOQUE_DISP;
__00_tmp.VL_ESTOQUE_DISP = row24.VL_ESTOQUE_DISP;
__00_tmp.DT_ULTIMA_VENDA = row24.DT_ULTIMA_VENDA;
__00_tmp.DIAS_SEM_VENDA = row24.DIAS_SEM_VENDA;
__00_tmp.CD_MARCA = row24.CD_MARCA;
__00_tmp.DC_MARCA = row24.DC_MARCA;
__00_tmp.CD_FORNECEDOR = row24.CD_FORNECEDOR;
__00_tmp.FOR_NOMFOR = row24.FOR_NOMFOR;
__00 = __00_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_28 = false;










 


	tos_count_tMap_28++;

/**
 * [tMap_28 main ] stop
 */
	
	/**
	 * [tMap_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_28";
	
	

 



/**
 * [tMap_28 process_data_begin ] stop
 */
// Start of branch "__00"
if(__00 != null) { 



	
	/**
	 * [tFileOutputExcel_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__00"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_8.addRow();
									   				
	    				if(__00.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_8.addCellValue((__00.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(Double.parseDouble(String.valueOf(__00.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_8.addCellValue((__00.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(__00.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(Double.parseDouble(String.valueOf(__00.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(__00.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(__00.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_8++;
				
 


	tos_count_tFileOutputExcel_8++;

/**
 * [tFileOutputExcel_8 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";
	
	

 



/**
 * [tFileOutputExcel_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";
	
	

 



/**
 * [tFileOutputExcel_8 process_data_end ] stop
 */

} // End of branch "__00"




	
	/**
	 * [tMap_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_28";
	
	

 



/**
 * [tMap_28 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";
	
	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOf_008_0_0_0"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";
	
	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOf_008_0_0_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tMap_28 end ] start
	 */

	

	
	
	currentComponent="tMap_28";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_28", true);
end_Hash.put("tMap_28", System.currentTimeMillis());




/**
 * [tMap_28 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";
	
	

							columnIndex_tFileOutputExcel_8 = 0;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 1;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 2;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 3;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 4;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 5;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 6;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 7;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 8;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 9;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 10;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
	
	
	
			xlsxTool_tFileOutputExcel_8.writeExcel(fileName_tFileOutputExcel_8,true);
	
		if(headerIsInserted_tFileOutputExcel_8 && nb_line_tFileOutputExcel_8 > 0){
			nb_line_tFileOutputExcel_8 = nb_line_tFileOutputExcel_8 -1;
		}
		globalMap.put("tFileOutputExcel_8_NB_LINE",nb_line_tFileOutputExcel_8);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__00");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_8", true);
end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());




/**
 * [tFileOutputExcel_8 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tHashInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";
	
	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tMap_28 finally ] start
	 */

	

	
	
	currentComponent="tMap_28";
	
	

 



/**
 * [tMap_28 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";
	
	

 



/**
 * [tFileOutputExcel_8 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class __009Struct implements routines.system.IPersistableRow<__009Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__009Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOf_009_0_2Struct implements routines.system.IPersistableRow<copyOfcopyOf_009_0_2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOf_009_0_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
copyOfcopyOf_009_0_2Struct copyOfcopyOf_009_0_2 = new copyOfcopyOf_009_0_2Struct();
row27Struct row27 = new row27Struct();
__009Struct __009 = new __009Struct();







	
	/**
	 * [tFileOutputExcel_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_9", false);
		start_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__009");
					}
				
		int tos_count_tFileOutputExcel_9 = 0;
		


		
		int columnIndex_tFileOutputExcel_9 = 0;
		boolean headerIsInserted_tFileOutputExcel_9 = false;
		
		
		String fileName_tFileOutputExcel_9="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_9 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_9 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_9.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_9.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_9.setSheet("009");
		xlsxTool_tFileOutputExcel_9.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_9.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_9.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_9 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_9 = chm_tFileOutputExcel_9.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_9", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_9) {
			
				xlsxTool_tFileOutputExcel_9.prepareXlsxFile(fileName_tFileOutputExcel_9);
			
		}
		
		xlsxTool_tFileOutputExcel_9.setFont("");
		
		if (xlsxTool_tFileOutputExcel_9.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_9.addRow();
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_9++;
		headerIsInserted_tFileOutputExcel_9 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_9 begin ] stop
 */



	
	/**
	 * [tMap_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_29", false);
		start_Hash.put("tMap_29", System.currentTimeMillis());
		
	
	currentComponent="tMap_29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_29 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_29__Struct  {
}
Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
__009Struct __009_tmp = new __009Struct();
// ###############################

        
        



        









 



/**
 * [tMap_29 begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOf_009_0_2");
					}
				
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOf_009_0_2Struct copyOfcopyOf_009_0_2_tmp = new copyOfcopyOf_009_0_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";
	
	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    row10Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row45.ITE_CODEMP = next_tHashInput_18.ITE_CODEMP;
	row45.ITE_CODITE = next_tHashInput_18.ITE_CODITE;
	row45.ITE_PRECUS = next_tHashInput_18.ITE_PRECUS;
	row45.ESTOQUE_DISP = next_tHashInput_18.ESTOQUE_DISP;
	row45.VL_ESTOQUE_DISP = next_tHashInput_18.VL_ESTOQUE_DISP;
	row45.ESTOQUE_FISICO = next_tHashInput_18.ESTOQUE_FISICO;
	row45.VL_ESTOQUE_FISICO = next_tHashInput_18.VL_ESTOQUE_FISICO;
	row45.DT_ULTIMA_VENDA = next_tHashInput_18.DT_ULTIMA_VENDA;
	row45.DIAS_SEM_VENDA = next_tHashInput_18.DIAS_SEM_VENDA;
	row45.CD_MARCA = next_tHashInput_18.CD_MARCA;
	row45.DC_MARCA = next_tHashInput_18.DC_MARCA;
	row45.CD_FORNECEDOR = next_tHashInput_18.CD_FORNECEDOR;
	row45.FOR_NOMFOR = next_tHashInput_18.FOR_NOMFOR;

 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_22 = false;
		boolean mainRowRejected_tMap_22 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOf_009_0_2 = null;


// # Output table : 'copyOfcopyOf_009_0_2'
copyOfcopyOf_009_0_2_tmp.ITE_CODEMP = null;
copyOfcopyOf_009_0_2_tmp.ITE_CODITE = null;
copyOfcopyOf_009_0_2_tmp.ITE_PRECUS = null;
copyOfcopyOf_009_0_2_tmp.ESTOQUE_DISP = null;
copyOfcopyOf_009_0_2_tmp.VL_ESTOQUE_DISP = null;
copyOfcopyOf_009_0_2_tmp.ESTOQUE_FISICO = null;
copyOfcopyOf_009_0_2_tmp.VL_ESTOQUE_FISICO = null;
copyOfcopyOf_009_0_2_tmp.DT_ULTIMA_VENDA = null;
copyOfcopyOf_009_0_2_tmp.DIAS_SEM_VENDA = null;
copyOfcopyOf_009_0_2_tmp.CD_MARCA = null;
copyOfcopyOf_009_0_2_tmp.DC_MARCA = null;
copyOfcopyOf_009_0_2_tmp.CD_FORNECEDOR = null;
copyOfcopyOf_009_0_2_tmp.FOR_NOMFOR = null;
copyOfcopyOf_009_0_2 = copyOfcopyOf_009_0_2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";
	
	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOf_009_0_2"
if(copyOfcopyOf_009_0_2 != null) { 



	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOf_009_0_2"
						
						);
					}
					

          row27 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("&&");
            ope_tFilterRow_11.matches((copyOfcopyOf_009_0_2.ITE_CODEMP == null? false : copyOfcopyOf_009_0_2.ITE_CODEMP.compareTo("009") == 0)
                           , "ITE_CODEMP.compareTo(\"009\") == 0 failed");
            ope_tFilterRow_11.matches((copyOfcopyOf_009_0_2.ESTOQUE_DISP == null? false : copyOfcopyOf_009_0_2.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row27 == null){ 
                row27 = new row27Struct();
              }
               row27.ITE_CODEMP = copyOfcopyOf_009_0_2.ITE_CODEMP;
               row27.ITE_CODITE = copyOfcopyOf_009_0_2.ITE_CODITE;
               row27.ITE_PRECUS = copyOfcopyOf_009_0_2.ITE_PRECUS;
               row27.ESTOQUE_DISP = copyOfcopyOf_009_0_2.ESTOQUE_DISP;
               row27.VL_ESTOQUE_DISP = copyOfcopyOf_009_0_2.VL_ESTOQUE_DISP;
               row27.ESTOQUE_FISICO = copyOfcopyOf_009_0_2.ESTOQUE_FISICO;
               row27.VL_ESTOQUE_FISICO = copyOfcopyOf_009_0_2.VL_ESTOQUE_FISICO;
               row27.DT_ULTIMA_VENDA = copyOfcopyOf_009_0_2.DT_ULTIMA_VENDA;
               row27.DIAS_SEM_VENDA = copyOfcopyOf_009_0_2.DIAS_SEM_VENDA;
               row27.CD_MARCA = copyOfcopyOf_009_0_2.CD_MARCA;
               row27.DC_MARCA = copyOfcopyOf_009_0_2.DC_MARCA;
               row27.CD_FORNECEDOR = copyOfcopyOf_009_0_2.CD_FORNECEDOR;
               row27.FOR_NOMFOR = copyOfcopyOf_009_0_2.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";
	
	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tMap_29 main ] start
	 */

	

	
	
	currentComponent="tMap_29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_29 = false;
		boolean mainRowRejected_tMap_29 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
        // ###############################
        // # Output tables

__009 = null;


// # Output table : '__009'
__009_tmp.ITE_CODEMP = row27.ITE_CODEMP;
__009_tmp.ITE_CODITE = row27.ITE_CODITE;
__009_tmp.ITE_PRECUS = row27.ITE_PRECUS;
__009_tmp.ESTOQUE_DISP = row27.ESTOQUE_DISP;
__009_tmp.VL_ESTOQUE_DISP = row27.VL_ESTOQUE_DISP;
__009_tmp.DT_ULTIMA_VENDA = row27.DT_ULTIMA_VENDA;
__009_tmp.DIAS_SEM_VENDA = row27.DIAS_SEM_VENDA;
__009_tmp.CD_MARCA = row27.CD_MARCA;
__009_tmp.DC_MARCA = row27.DC_MARCA;
__009_tmp.CD_FORNECEDOR = row27.CD_FORNECEDOR;
__009_tmp.FOR_NOMFOR = row27.FOR_NOMFOR;
__009 = __009_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_29 = false;










 


	tos_count_tMap_29++;

/**
 * [tMap_29 main ] stop
 */
	
	/**
	 * [tMap_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_29";
	
	

 



/**
 * [tMap_29 process_data_begin ] stop
 */
// Start of branch "__009"
if(__009 != null) { 



	
	/**
	 * [tFileOutputExcel_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__009"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_9.addRow();
									   				
	    				if(__009.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_9.addCellValue((__009.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(Double.parseDouble(String.valueOf(__009.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_9.addCellValue((__009.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(__009.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(Double.parseDouble(String.valueOf(__009.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(__009.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(__009.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_9++;
				
 


	tos_count_tFileOutputExcel_9++;

/**
 * [tFileOutputExcel_9 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";
	
	

 



/**
 * [tFileOutputExcel_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";
	
	

 



/**
 * [tFileOutputExcel_9 process_data_end ] stop
 */

} // End of branch "__009"




	
	/**
	 * [tMap_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_29";
	
	

 



/**
 * [tMap_29 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";
	
	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */

} // End of branch "copyOfcopyOf_009_0_2"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";
	
	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";
	
	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOf_009_0_2");
			  	}
			  	
 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tMap_29 end ] start
	 */

	

	
	
	currentComponent="tMap_29";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_29", true);
end_Hash.put("tMap_29", System.currentTimeMillis());




/**
 * [tMap_29 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";
	
	

							columnIndex_tFileOutputExcel_9 = 0;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 1;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 2;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 3;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 4;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 5;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 6;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 7;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 8;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 9;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
							columnIndex_tFileOutputExcel_9 = 10;
						
					xlsxTool_tFileOutputExcel_9.setColAutoSize(columnIndex_tFileOutputExcel_9);
	
	
	
	
			xlsxTool_tFileOutputExcel_9.writeExcel(fileName_tFileOutputExcel_9,true);
	
		if(headerIsInserted_tFileOutputExcel_9 && nb_line_tFileOutputExcel_9 > 0){
			nb_line_tFileOutputExcel_9 = nb_line_tFileOutputExcel_9 -1;
		}
		globalMap.put("tFileOutputExcel_9_NB_LINE",nb_line_tFileOutputExcel_9);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__009");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_9", true);
end_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());




/**
 * [tFileOutputExcel_9 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tHashInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";
	
	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";
	
	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tMap_29 finally ] start
	 */

	

	
	
	currentComponent="tMap_29";
	
	

 



/**
 * [tMap_29 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";
	
	

 



/**
 * [tFileOutputExcel_9 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class __010Struct implements routines.system.IPersistableRow<__010Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__010Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOf_010_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOf_010_0_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOf_010_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();
copyOfcopyOfcopyOf_010_0_0Struct copyOfcopyOfcopyOf_010_0_0 = new copyOfcopyOfcopyOf_010_0_0Struct();
row28Struct row28 = new row28Struct();
__010Struct __010 = new __010Struct();







	
	/**
	 * [tFileOutputExcel_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_10", false);
		start_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__010");
					}
				
		int tos_count_tFileOutputExcel_10 = 0;
		


		
		int columnIndex_tFileOutputExcel_10 = 0;
		boolean headerIsInserted_tFileOutputExcel_10 = false;
		
		
		String fileName_tFileOutputExcel_10="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_10 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_10 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_10.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_10.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_10.setSheet("010");
		xlsxTool_tFileOutputExcel_10.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_10.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_10.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_10 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_10 = chm_tFileOutputExcel_10.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_10", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_10) {
			
				xlsxTool_tFileOutputExcel_10.prepareXlsxFile(fileName_tFileOutputExcel_10);
			
		}
		
		xlsxTool_tFileOutputExcel_10.setFont("");
		
		if (xlsxTool_tFileOutputExcel_10.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_10.addRow();
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_10++;
		headerIsInserted_tFileOutputExcel_10 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_10 begin ] stop
 */



	
	/**
	 * [tMap_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_30", false);
		start_Hash.put("tMap_30", System.currentTimeMillis());
		
	
	currentComponent="tMap_30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMap_30 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_30__Struct  {
}
Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
__010Struct __010_tmp = new __010Struct();
// ###############################

        
        



        









 



/**
 * [tMap_30 begin ] stop
 */



	
	/**
	 * [tFilterRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_12", false);
		start_Hash.put("tFilterRow_12", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOf_010_0_0");
					}
				
		int tos_count_tFilterRow_12 = 0;
		
    int nb_line_tFilterRow_12 = 0;
    int nb_line_ok_tFilterRow_12 = 0;
    int nb_line_reject_tFilterRow_12 = 0;

    class Operator_tFilterRow_12 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_12(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_12 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOf_010_0_0Struct copyOfcopyOfcopyOf_010_0_0_tmp = new copyOfcopyOfcopyOf_010_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";
	
	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row10Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row42.ITE_CODEMP = next_tHashInput_15.ITE_CODEMP;
	row42.ITE_CODITE = next_tHashInput_15.ITE_CODITE;
	row42.ITE_PRECUS = next_tHashInput_15.ITE_PRECUS;
	row42.ESTOQUE_DISP = next_tHashInput_15.ESTOQUE_DISP;
	row42.VL_ESTOQUE_DISP = next_tHashInput_15.VL_ESTOQUE_DISP;
	row42.ESTOQUE_FISICO = next_tHashInput_15.ESTOQUE_FISICO;
	row42.VL_ESTOQUE_FISICO = next_tHashInput_15.VL_ESTOQUE_FISICO;
	row42.DT_ULTIMA_VENDA = next_tHashInput_15.DT_ULTIMA_VENDA;
	row42.DIAS_SEM_VENDA = next_tHashInput_15.DIAS_SEM_VENDA;
	row42.CD_MARCA = next_tHashInput_15.CD_MARCA;
	row42.DC_MARCA = next_tHashInput_15.DC_MARCA;
	row42.CD_FORNECEDOR = next_tHashInput_15.CD_FORNECEDOR;
	row42.FOR_NOMFOR = next_tHashInput_15.FOR_NOMFOR;

 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_19 = false;
		boolean mainRowRejected_tMap_19 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOf_010_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOf_010_0_0'
copyOfcopyOfcopyOf_010_0_0_tmp.ITE_CODEMP = null;
copyOfcopyOfcopyOf_010_0_0_tmp.ITE_CODITE = null;
copyOfcopyOfcopyOf_010_0_0_tmp.ITE_PRECUS = null;
copyOfcopyOfcopyOf_010_0_0_tmp.ESTOQUE_DISP = null;
copyOfcopyOfcopyOf_010_0_0_tmp.VL_ESTOQUE_DISP = null;
copyOfcopyOfcopyOf_010_0_0_tmp.ESTOQUE_FISICO = null;
copyOfcopyOfcopyOf_010_0_0_tmp.VL_ESTOQUE_FISICO = null;
copyOfcopyOfcopyOf_010_0_0_tmp.DT_ULTIMA_VENDA = null;
copyOfcopyOfcopyOf_010_0_0_tmp.DIAS_SEM_VENDA = null;
copyOfcopyOfcopyOf_010_0_0_tmp.CD_MARCA = null;
copyOfcopyOfcopyOf_010_0_0_tmp.DC_MARCA = null;
copyOfcopyOfcopyOf_010_0_0_tmp.CD_FORNECEDOR = null;
copyOfcopyOfcopyOf_010_0_0_tmp.FOR_NOMFOR = null;
copyOfcopyOfcopyOf_010_0_0 = copyOfcopyOfcopyOf_010_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOf_010_0_0"
if(copyOfcopyOfcopyOf_010_0_0 != null) { 



	
	/**
	 * [tFilterRow_12 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOf_010_0_0"
						
						);
					}
					

          row28 = null;
    Operator_tFilterRow_12 ope_tFilterRow_12 = new Operator_tFilterRow_12("&&");
            ope_tFilterRow_12.matches((copyOfcopyOfcopyOf_010_0_0.ITE_CODEMP == null? false : copyOfcopyOfcopyOf_010_0_0.ITE_CODEMP.compareTo("007") == 0)
                           , "ITE_CODEMP.compareTo(\"007\") == 0 failed");
            ope_tFilterRow_12.matches((copyOfcopyOfcopyOf_010_0_0.ESTOQUE_DISP == null? false : copyOfcopyOfcopyOf_010_0_0.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_12.getMatchFlag()) {
              if(row28 == null){ 
                row28 = new row28Struct();
              }
               row28.ITE_CODEMP = copyOfcopyOfcopyOf_010_0_0.ITE_CODEMP;
               row28.ITE_CODITE = copyOfcopyOfcopyOf_010_0_0.ITE_CODITE;
               row28.ITE_PRECUS = copyOfcopyOfcopyOf_010_0_0.ITE_PRECUS;
               row28.ESTOQUE_DISP = copyOfcopyOfcopyOf_010_0_0.ESTOQUE_DISP;
               row28.VL_ESTOQUE_DISP = copyOfcopyOfcopyOf_010_0_0.VL_ESTOQUE_DISP;
               row28.ESTOQUE_FISICO = copyOfcopyOfcopyOf_010_0_0.ESTOQUE_FISICO;
               row28.VL_ESTOQUE_FISICO = copyOfcopyOfcopyOf_010_0_0.VL_ESTOQUE_FISICO;
               row28.DT_ULTIMA_VENDA = copyOfcopyOfcopyOf_010_0_0.DT_ULTIMA_VENDA;
               row28.DIAS_SEM_VENDA = copyOfcopyOfcopyOf_010_0_0.DIAS_SEM_VENDA;
               row28.CD_MARCA = copyOfcopyOfcopyOf_010_0_0.CD_MARCA;
               row28.DC_MARCA = copyOfcopyOfcopyOf_010_0_0.DC_MARCA;
               row28.CD_FORNECEDOR = copyOfcopyOfcopyOf_010_0_0.CD_FORNECEDOR;
               row28.FOR_NOMFOR = copyOfcopyOfcopyOf_010_0_0.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_12++;
    } else {
      nb_line_reject_tFilterRow_12++;
    }

nb_line_tFilterRow_12++;

 


	tos_count_tFilterRow_12++;

/**
 * [tFilterRow_12 main ] stop
 */
	
	/**
	 * [tFilterRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";
	
	

 



/**
 * [tFilterRow_12 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tMap_30 main ] start
	 */

	

	
	
	currentComponent="tMap_30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_30 = false;
		boolean mainRowRejected_tMap_30 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
        // ###############################
        // # Output tables

__010 = null;


// # Output table : '__010'
__010_tmp.ITE_CODEMP = row28.ITE_CODEMP;
__010_tmp.ITE_CODITE = row28.ITE_CODITE;
__010_tmp.ITE_PRECUS = row28.ITE_PRECUS;
__010_tmp.ESTOQUE_DISP = row28.ESTOQUE_DISP;
__010_tmp.VL_ESTOQUE_DISP = row28.VL_ESTOQUE_DISP;
__010_tmp.DT_ULTIMA_VENDA = row28.DT_ULTIMA_VENDA;
__010_tmp.DIAS_SEM_VENDA = row28.DIAS_SEM_VENDA;
__010_tmp.CD_MARCA = row28.CD_MARCA;
__010_tmp.DC_MARCA = row28.DC_MARCA;
__010_tmp.CD_FORNECEDOR = row28.CD_FORNECEDOR;
__010_tmp.FOR_NOMFOR = row28.FOR_NOMFOR;
__010 = __010_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_30 = false;










 


	tos_count_tMap_30++;

/**
 * [tMap_30 main ] stop
 */
	
	/**
	 * [tMap_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_30";
	
	

 



/**
 * [tMap_30 process_data_begin ] stop
 */
// Start of branch "__010"
if(__010 != null) { 



	
	/**
	 * [tFileOutputExcel_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__010"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_10.addRow();
									   				
	    				if(__010.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_10.addCellValue((__010.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(Double.parseDouble(String.valueOf(__010.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_10.addCellValue((__010.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(__010.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(Double.parseDouble(String.valueOf(__010.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(__010.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(__010.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_10++;
				
 


	tos_count_tFileOutputExcel_10++;

/**
 * [tFileOutputExcel_10 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";
	
	

 



/**
 * [tFileOutputExcel_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";
	
	

 



/**
 * [tFileOutputExcel_10 process_data_end ] stop
 */

} // End of branch "__010"




	
	/**
	 * [tMap_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_30";
	
	

 



/**
 * [tMap_30 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tFilterRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";
	
	

 



/**
 * [tFilterRow_12 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOf_010_0_0"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tFilterRow_12 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";
	
	
    globalMap.put("tFilterRow_12_NB_LINE", nb_line_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_OK", nb_line_ok_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_REJECT", nb_line_reject_tFilterRow_12);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOf_010_0_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_12", true);
end_Hash.put("tFilterRow_12", System.currentTimeMillis());




/**
 * [tFilterRow_12 end ] stop
 */

	
	/**
	 * [tMap_30 end ] start
	 */

	

	
	
	currentComponent="tMap_30";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMap_30", true);
end_Hash.put("tMap_30", System.currentTimeMillis());




/**
 * [tMap_30 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";
	
	

							columnIndex_tFileOutputExcel_10 = 0;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 1;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 2;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 3;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 4;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 5;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 6;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 7;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 8;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 9;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
							columnIndex_tFileOutputExcel_10 = 10;
						
					xlsxTool_tFileOutputExcel_10.setColAutoSize(columnIndex_tFileOutputExcel_10);
	
	
	
	
			xlsxTool_tFileOutputExcel_10.writeExcel(fileName_tFileOutputExcel_10,true);
	
		if(headerIsInserted_tFileOutputExcel_10 && nb_line_tFileOutputExcel_10 > 0){
			nb_line_tFileOutputExcel_10 = nb_line_tFileOutputExcel_10 -1;
		}
		globalMap.put("tFileOutputExcel_10_NB_LINE",nb_line_tFileOutputExcel_10);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__010");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_10", true);
end_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());




/**
 * [tFileOutputExcel_10 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tHashInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tFilterRow_12 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";
	
	

 



/**
 * [tFilterRow_12 finally ] stop
 */

	
	/**
	 * [tMap_30 finally ] start
	 */

	

	
	
	currentComponent="tMap_30";
	
	

 



/**
 * [tMap_30 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";
	
	

 



/**
 * [tFileOutputExcel_10 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class __201Struct implements routines.system.IPersistableRow<__201Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(__201Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOf_201_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOf_201_0_0Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOf_201_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();
copyOfcopyOf_201_0_0Struct copyOfcopyOf_201_0_0 = new copyOfcopyOf_201_0_0Struct();
row31Struct row31 = new row31Struct();
__201Struct __201 = new __201Struct();







	
	/**
	 * [tFileOutputExcel_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_12", false);
		start_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"__201");
					}
				
		int tos_count_tFileOutputExcel_12 = 0;
		


		
		int columnIndex_tFileOutputExcel_12 = 0;
		boolean headerIsInserted_tFileOutputExcel_12 = false;
		
		
		String fileName_tFileOutputExcel_12="/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx";
		int nb_line_tFileOutputExcel_12 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_12 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_12.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_12.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_12.setSheet("201");
		xlsxTool_tFileOutputExcel_12.setAppend(true,false, false);
		xlsxTool_tFileOutputExcel_12.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_12.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_12 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_12 = chm_tFileOutputExcel_12.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_12", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_12) {
			
				xlsxTool_tFileOutputExcel_12.prepareXlsxFile(fileName_tFileOutputExcel_12);
			
		}
		
		xlsxTool_tFileOutputExcel_12.setFont("");
		
		if (xlsxTool_tFileOutputExcel_12.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_12.addRow();
		
		xlsxTool_tFileOutputExcel_12.addCellValue("ITE_CODEMP");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("ITE_CODITE");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("ITE_PRECUS");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("VL_ESTOQUE_DISP");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("DT_ULTIMA_VENDA");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("DIAS_SEM_VENDA");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("CD_MARCA");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("DC_MARCA");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("CD_FORNECEDOR");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("FOR_NOMFOR");
		
		nb_line_tFileOutputExcel_12++;
		headerIsInserted_tFileOutputExcel_12 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_12 begin ] stop
 */



	
	/**
	 * [tMap_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_31", false);
		start_Hash.put("tMap_31", System.currentTimeMillis());
		
	
	currentComponent="tMap_31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_31 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_31__Struct  {
}
Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
__201Struct __201_tmp = new __201Struct();
// ###############################

        
        



        









 



/**
 * [tMap_31 begin ] stop
 */



	
	/**
	 * [tFilterRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_14", false);
		start_Hash.put("tFilterRow_14", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOf_201_0_0");
					}
				
		int tos_count_tFilterRow_14 = 0;
		
    int nb_line_tFilterRow_14 = 0;
    int nb_line_ok_tFilterRow_14 = 0;
    int nb_line_reject_tFilterRow_14 = 0;

    class Operator_tFilterRow_14 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_14(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_14 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOf_201_0_0Struct copyOfcopyOf_201_0_0_tmp = new copyOfcopyOf_201_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";
	
	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row10Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row41.ITE_CODEMP = next_tHashInput_14.ITE_CODEMP;
	row41.ITE_CODITE = next_tHashInput_14.ITE_CODITE;
	row41.ITE_PRECUS = next_tHashInput_14.ITE_PRECUS;
	row41.ESTOQUE_DISP = next_tHashInput_14.ESTOQUE_DISP;
	row41.VL_ESTOQUE_DISP = next_tHashInput_14.VL_ESTOQUE_DISP;
	row41.ESTOQUE_FISICO = next_tHashInput_14.ESTOQUE_FISICO;
	row41.VL_ESTOQUE_FISICO = next_tHashInput_14.VL_ESTOQUE_FISICO;
	row41.DT_ULTIMA_VENDA = next_tHashInput_14.DT_ULTIMA_VENDA;
	row41.DIAS_SEM_VENDA = next_tHashInput_14.DIAS_SEM_VENDA;
	row41.CD_MARCA = next_tHashInput_14.CD_MARCA;
	row41.DC_MARCA = next_tHashInput_14.DC_MARCA;
	row41.CD_FORNECEDOR = next_tHashInput_14.CD_FORNECEDOR;
	row41.FOR_NOMFOR = next_tHashInput_14.FOR_NOMFOR;

 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_18 = false;
		boolean mainRowRejected_tMap_18 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOf_201_0_0 = null;


// # Output table : 'copyOfcopyOf_201_0_0'
copyOfcopyOf_201_0_0_tmp.ITE_CODEMP = null;
copyOfcopyOf_201_0_0_tmp.ITE_CODITE = null;
copyOfcopyOf_201_0_0_tmp.ITE_PRECUS = null;
copyOfcopyOf_201_0_0_tmp.ESTOQUE_DISP = null;
copyOfcopyOf_201_0_0_tmp.VL_ESTOQUE_DISP = null;
copyOfcopyOf_201_0_0_tmp.ESTOQUE_FISICO = null;
copyOfcopyOf_201_0_0_tmp.VL_ESTOQUE_FISICO = null;
copyOfcopyOf_201_0_0_tmp.DT_ULTIMA_VENDA = null;
copyOfcopyOf_201_0_0_tmp.DIAS_SEM_VENDA = null;
copyOfcopyOf_201_0_0_tmp.CD_MARCA = null;
copyOfcopyOf_201_0_0_tmp.DC_MARCA = null;
copyOfcopyOf_201_0_0_tmp.CD_FORNECEDOR = null;
copyOfcopyOf_201_0_0_tmp.FOR_NOMFOR = null;
copyOfcopyOf_201_0_0 = copyOfcopyOf_201_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOf_201_0_0"
if(copyOfcopyOf_201_0_0 != null) { 



	
	/**
	 * [tFilterRow_14 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOf_201_0_0"
						
						);
					}
					

          row31 = null;
    Operator_tFilterRow_14 ope_tFilterRow_14 = new Operator_tFilterRow_14("&&");
            ope_tFilterRow_14.matches((copyOfcopyOf_201_0_0.ITE_CODEMP == null? false : copyOfcopyOf_201_0_0.ITE_CODEMP.compareTo("201") == 0)
                           , "ITE_CODEMP.compareTo(\"201\") == 0 failed");
            ope_tFilterRow_14.matches((copyOfcopyOf_201_0_0.ESTOQUE_DISP == null? false : copyOfcopyOf_201_0_0.ESTOQUE_DISP.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_DISP.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_14.getMatchFlag()) {
              if(row31 == null){ 
                row31 = new row31Struct();
              }
               row31.ITE_CODEMP = copyOfcopyOf_201_0_0.ITE_CODEMP;
               row31.ITE_CODITE = copyOfcopyOf_201_0_0.ITE_CODITE;
               row31.ITE_PRECUS = copyOfcopyOf_201_0_0.ITE_PRECUS;
               row31.ESTOQUE_DISP = copyOfcopyOf_201_0_0.ESTOQUE_DISP;
               row31.VL_ESTOQUE_DISP = copyOfcopyOf_201_0_0.VL_ESTOQUE_DISP;
               row31.ESTOQUE_FISICO = copyOfcopyOf_201_0_0.ESTOQUE_FISICO;
               row31.VL_ESTOQUE_FISICO = copyOfcopyOf_201_0_0.VL_ESTOQUE_FISICO;
               row31.DT_ULTIMA_VENDA = copyOfcopyOf_201_0_0.DT_ULTIMA_VENDA;
               row31.DIAS_SEM_VENDA = copyOfcopyOf_201_0_0.DIAS_SEM_VENDA;
               row31.CD_MARCA = copyOfcopyOf_201_0_0.CD_MARCA;
               row31.DC_MARCA = copyOfcopyOf_201_0_0.DC_MARCA;
               row31.CD_FORNECEDOR = copyOfcopyOf_201_0_0.CD_FORNECEDOR;
               row31.FOR_NOMFOR = copyOfcopyOf_201_0_0.FOR_NOMFOR;    
      nb_line_ok_tFilterRow_14++;
    } else {
      nb_line_reject_tFilterRow_14++;
    }

nb_line_tFilterRow_14++;

 


	tos_count_tFilterRow_14++;

/**
 * [tFilterRow_14 main ] stop
 */
	
	/**
	 * [tFilterRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";
	
	

 



/**
 * [tFilterRow_14 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tMap_31 main ] start
	 */

	

	
	
	currentComponent="tMap_31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_31 = false;
		boolean mainRowRejected_tMap_31 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
        // ###############################
        // # Output tables

__201 = null;


// # Output table : '__201'
__201_tmp.ITE_CODEMP = row31.ITE_CODEMP;
__201_tmp.ITE_CODITE = row31.ITE_CODITE;
__201_tmp.ITE_PRECUS = row31.ITE_PRECUS;
__201_tmp.ESTOQUE_DISP = row31.ESTOQUE_DISP;
__201_tmp.VL_ESTOQUE_DISP = row31.VL_ESTOQUE_DISP;
__201_tmp.DT_ULTIMA_VENDA = row31.DT_ULTIMA_VENDA;
__201_tmp.DIAS_SEM_VENDA = row31.DIAS_SEM_VENDA;
__201_tmp.CD_MARCA = row31.CD_MARCA;
__201_tmp.DC_MARCA = row31.DC_MARCA;
__201_tmp.CD_FORNECEDOR = row31.CD_FORNECEDOR;
__201_tmp.FOR_NOMFOR = row31.FOR_NOMFOR;
__201 = __201_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_31 = false;










 


	tos_count_tMap_31++;

/**
 * [tMap_31 main ] stop
 */
	
	/**
	 * [tMap_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_31";
	
	

 



/**
 * [tMap_31 process_data_begin ] stop
 */
// Start of branch "__201"
if(__201 != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"__201"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(__201.ITE_CODEMP != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.ITE_CODEMP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.ITE_CODITE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.ITE_CODITE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.ITE_PRECUS != null) {
    						
							xlsxTool_tFileOutputExcel_12.addCellValue((__201.ITE_PRECUS.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.ESTOQUE_DISP != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(__201.ESTOQUE_DISP)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.VL_ESTOQUE_DISP != null) {
    						
							xlsxTool_tFileOutputExcel_12.addCellValue((__201.VL_ESTOQUE_DISP.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.DT_ULTIMA_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(__201.DT_ULTIMA_VENDA, "dd-MM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.DIAS_SEM_VENDA != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(__201.DIAS_SEM_VENDA)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.CD_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.CD_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.DC_MARCA != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.DC_MARCA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.CD_FORNECEDOR != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.CD_FORNECEDOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(__201.FOR_NOMFOR != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(__201.FOR_NOMFOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";
	
	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";
	
	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "__201"




	
	/**
	 * [tMap_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_31";
	
	

 



/**
 * [tMap_31 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tFilterRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";
	
	

 



/**
 * [tFilterRow_14 process_data_end ] stop
 */

} // End of branch "copyOfcopyOf_201_0_0"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tFilterRow_14 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";
	
	
    globalMap.put("tFilterRow_14_NB_LINE", nb_line_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_OK", nb_line_ok_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_REJECT", nb_line_reject_tFilterRow_14);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOf_201_0_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_14", true);
end_Hash.put("tFilterRow_14", System.currentTimeMillis());




/**
 * [tFilterRow_14 end ] stop
 */

	
	/**
	 * [tMap_31 end ] start
	 */

	

	
	
	currentComponent="tMap_31";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_31", true);
end_Hash.put("tMap_31", System.currentTimeMillis());




/**
 * [tMap_31 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";
	
	

							columnIndex_tFileOutputExcel_12 = 0;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 1;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 2;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 3;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 4;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 5;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 6;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 7;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 8;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 9;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 10;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
	
	
	
			xlsxTool_tFileOutputExcel_12.writeExcel(fileName_tFileOutputExcel_12,true);
	
		if(headerIsInserted_tFileOutputExcel_12 && nb_line_tFileOutputExcel_12 > 0){
			nb_line_tFileOutputExcel_12 = nb_line_tFileOutputExcel_12 -1;
		}
		globalMap.put("tFileOutputExcel_12_NB_LINE",nb_line_tFileOutputExcel_12);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"__201");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_12", true);
end_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());




/**
 * [tFileOutputExcel_12 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tSendMail_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tFilterRow_14 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";
	
	

 



/**
 * [tFilterRow_14 finally ] stop
 */

	
	/**
	 * [tMap_31 finally ] start
	 */

	

	
	
	currentComponent="tMap_31";
	
	

 



/**
 * [tMap_31 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";
	
	

 



/**
 * [tFileOutputExcel_12 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}
	


public void tSendMail_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSendMail_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_2", false);
		start_Hash.put("tSendMail_2", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_2";
	
	
		int tos_count_tSendMail_2 = 0;
		

 



/**
 * [tSendMail_2 begin ] stop
 */
	
	/**
	 * [tSendMail_2 main ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 

	String smtpHost_tSendMail_2 = System.getenv(context.SMTP_P);
        String smtpPort_tSendMail_2 = System.getenv(context.SMTP_PORT_P);
	String from_tSendMail_2 = (System.getenv(context.EMAIL_P));
    String to_tSendMail_2 = (context.SEND_EMAIL).replace(";",",");
    String cc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_2 = ("[Ad Hoc] Relatório Produtos 30 Dias ["+context.data_execucao+"]");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();
		attachments_tSendMail_2.add("/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx");
		contentTransferEncoding_tSendMail_2.add("DEFAULT");	

	String message_tSendMail_2 = (("Olá, bom dia!\n\nSegue em anexo o relatório com a relação de produtos sem vendas há mais de 30 dias.\n\n\nAtt,\n\nPlata"
+"forma de Dados | BI\nPalácio das Ferramentas e Parafusos LTDA\nwww.palaciodasferramentas.com.br"
) == null || "".equals("Olá, bom dia!\n\nSegue em anexo o relatório com a relação de produtos sem vendas há mais de 30 dias.\n\n\nAtt,\n\nPlata"
+"forma de Dados | BI\nPalácio das Ferramentas e Parafusos LTDA\nwww.palaciodasferramentas.com.br"
)) ? "\"\"" : ("Olá, bom dia!\n\nSegue em anexo o relatório com a relação de produtos sem vendas há mais de 30 dias.\n\n\nAtt,\n\nPlata"
+"forma de Dados | BI\nPalácio das Ferramentas e Parafusos LTDA\nwww.palaciodasferramentas.com.br"
) ;
	java.util.Properties props_tSendMail_2 = System.getProperties();     
	props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
	props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
	
		props_tSendMail_2.put("mail.mime.encodefilename", "true");
		props_tSendMail_2.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_2.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_2 = javax.mail.Session.getInstance(props_tSendMail_2, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_2 = System.getenv(context.EMAIL_PASSWORD_P); 
				
				
				return new javax.mail.PasswordAuthentication(System.getenv(context.EMAIL_P), decryptedPassword_tSendMail_2); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(session_tSendMail_2);
		msg_tSendMail_2.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_2, null));
		msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_2, false));
		if (cc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_2, false));
		if (bcc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_2, false));
		msg_tSendMail_2.setSubject(subject_tSendMail_2);

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2.size(); i_tSendMail_2++) {
			java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2.get(i_tSendMail_2);
			msg_tSendMail_2.setHeader(header_tSendMail_2.get("KEY"), header_tSendMail_2.get("VALUE"));    
		}  
		msg_tSendMail_2.setSentDate(new Date());
		msg_tSendMail_2.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_2.setText(message_tSendMail_2,"ISO-8859-15", "plain");
		mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2.size(); i_tSendMail_2++){
			String filename_tSendMail_2 = attachments_tSendMail_2.get(i_tSendMail_2);
			javax.activation.FileDataSource fds_tSendMail_2 = null;
			java.io.File file_tSendMail_2 = new java.io.File(filename_tSendMail_2);
			
    		if (file_tSendMail_2.isDirectory()){
				java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2.listFiles();
				for(java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2){
					if (subFile_tSendMail_2.isFile()){
						fds_tSendMail_2 = new javax.activation.FileDataSource(subFile_tSendMail_2.getAbsolutePath());
						mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2));
						mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
						if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
					}
				}
    		}else{
				mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_2 = new javax.activation.FileDataSource(filename_tSendMail_2);
				mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2)); 
				mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
				if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
			}
		}
		// -- set the content --
		msg_tSendMail_2.setContent(mp_tSendMail_2);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_2 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_2.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_2.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_2.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_2.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_2.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_2);
		// add com.sun.mail.handlers to job imports / depenencies (TESB-27110)
		com.sun.mail.handlers.text_plain text_plain_h_tSendMail_2 = null;
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_2);
	} catch(java.lang.Exception e){
globalMap.put("tSendMail_2_ERROR_MESSAGE",e.getMessage());
  		
			throw(e);
		
	}finally{
		props_tSendMail_2.remove("mail.smtp.host");
		props_tSendMail_2.remove("mail.smtp.port");
		
		props_tSendMail_2.remove("mail.mime.encodefilename");
		
			props_tSendMail_2.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_2.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_2++;

/**
 * [tSendMail_2 main ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_2 end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 

ok_Hash.put("tSendMail_2", true);
end_Hash.put("tSendMail_2", System.currentTimeMillis());




/**
 * [tSendMail_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSendMail_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_2 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_2";
	
	

 



/**
 * [tSendMail_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


System.out.println("**************************************************************************");
System.out.println("Finalizado o processo de envio de emails :"+TalendDate.getCurrentDate());
System.out.println("**************************************************************************");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tFileDelete_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";
	
	
		int tos_count_tFileDelete_3 = 0;
		

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 

class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_3=new java.io.File("/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx");
    if(file_tFileDelete_3.exists()&& file_tFileDelete_3.isFile()){
    	if(file_tFileDelete_3.delete()){
    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_3_DELETE_PATH","/root/e_mail/relatorio_vendas_30_"+context.data_execucao+".xlsx");
 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";
	
	

 



/**
 * [tFileDelete_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
		
			conn_tDBClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return null;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return null;
				}
				public Integer ITEMPrecision(){
				    return null;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public Integer QTD_VENDA;

				public Integer getQTD_VENDA () {
					return this.QTD_VENDA;
				}

				public Boolean QTD_VENDAIsNullable(){
				    return true;
				}
				public Boolean QTD_VENDAIsKey(){
				    return false;
				}
				public Integer QTD_VENDALength(){
				    return null;
				}
				public Integer QTD_VENDAPrecision(){
				    return null;
				}
				public String QTD_VENDADefault(){
				
					return null;
				
				}
				public String QTD_VENDAComment(){
				
				    return "";
				
				}
				public String QTD_VENDAPattern(){
				
					return "";
				
				}
				public String QTD_VENDAOriginalDbColumnName(){
				
					return "QTD_VENDA";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",QTD_VENDA="+String.valueOf(QTD_VENDA));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return null;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return null;
				}
				public Integer ITEMPrecision(){
				    return null;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public Integer QTD_VENDA;

				public Integer getQTD_VENDA () {
					return this.QTD_VENDA;
				}

				public Boolean QTD_VENDAIsNullable(){
				    return true;
				}
				public Boolean QTD_VENDAIsKey(){
				    return false;
				}
				public Integer QTD_VENDALength(){
				    return null;
				}
				public Integer QTD_VENDAPrecision(){
				    return null;
				}
				public String QTD_VENDADefault(){
				
					return null;
				
				}
				public String QTD_VENDAComment(){
				
				    return "";
				
				}
				public String QTD_VENDAPattern(){
				
					return "";
				
				}
				public String QTD_VENDAOriginalDbColumnName(){
				
					return "QTD_VENDA";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",QTD_VENDA="+String.valueOf(QTD_VENDA));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return null;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return null;
				}
				public Integer ITEMPrecision(){
				    return null;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public Integer QTD_VENDA;

				public Integer getQTD_VENDA () {
					return this.QTD_VENDA;
				}

				public Boolean QTD_VENDAIsNullable(){
				    return true;
				}
				public Boolean QTD_VENDAIsKey(){
				    return false;
				}
				public Integer QTD_VENDALength(){
				    return null;
				}
				public Integer QTD_VENDAPrecision(){
				    return null;
				}
				public String QTD_VENDADefault(){
				
					return null;
				
				}
				public String QTD_VENDAComment(){
				
				    return "";
				
				}
				public String QTD_VENDAPattern(){
				
					return "";
				
				}
				public String QTD_VENDAOriginalDbColumnName(){
				
					return "QTD_VENDA";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.QTD_VENDA = readInteger(dis);
					
					this.DT_ULTIMA_VENDA = readDate(dis);
					
						this.DIAS_SEM_VENDA = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// Integer
				
						writeInteger(this.QTD_VENDA,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_VENDA,dos);
					
					// Integer
				
						writeInteger(this.DIAS_SEM_VENDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",QTD_VENDA="+String.valueOf(QTD_VENDA));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row11Struct row11 = new row11Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String COD_ITEM;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.COD_ITEM == null) {
										if (other.COD_ITEM != null) 
											return false;
								
									} else if (!this.COD_ITEM.equals(other.COD_ITEM))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";
	
	
		int tos_count_tDBInput_15 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_15 = java.util.Calendar.getInstance();
		    calendar_tDBInput_15.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_15 = calendar_tDBInput_15.getTime();
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				conn_tDBInput_15 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "\nSELECT COD_ITEM,\n       ITEM,\n       SUM(QTD_ITEM) AS QTD_VENDA,\n       MAX(DATA) AS DT_ULTIMA_VENDA,\n       DATE"
+"DIFF(CURDATE() ,MAX(DATA)) AS DIAS_SEM_VENDA\n  FROM VW_FATURAMENTO\n-- WHERE DATA >= DATE_SUB(CURTIME(), INTERVAL 31 DA"
+"Y)  \n GROUP BY COD_ITEM, ITEM;\n\n";
		    

		    globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);

		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row1.COD_ITEM = null;
							} else {
	                         		
        	row1.COD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row1.ITEM = null;
							} else {
	                         		
        	row1.ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_15, 2, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row1.QTD_VENDA = null;
							} else {
		                          
            row1.QTD_VENDA = rs_tDBInput_15.getInt(3);
            if(rs_tDBInput_15.wasNull()){
                    row1.QTD_VENDA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								row1.DT_ULTIMA_VENDA = null;
							} else {
										
				if(rs_tDBInput_15.getString(4) != null) {
					String dateString_tDBInput_15 = rs_tDBInput_15.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_15) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_15)) {
						row1.DT_ULTIMA_VENDA = rs_tDBInput_15.getTimestamp(4);
					} else {
						row1.DT_ULTIMA_VENDA = (java.util.Date) year0_tDBInput_15.clone();
					}
				} else {
					row1.DT_ULTIMA_VENDA =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_15 < 5) {
								row1.DIAS_SEM_VENDA = null;
							} else {
		                          
            row1.DIAS_SEM_VENDA = rs_tDBInput_15.getInt(5);
            if(rs_tDBInput_15.wasNull()){
                    row1.DIAS_SEM_VENDA = null;
            }
		                    }
					

 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.COD_ITEM = row1.COD_ITEM ;
out1_tmp.ITEM = row1.ITEM ;
out1_tmp.QTD_VENDA = row1.QTD_VENDA ;
out1_tmp.DT_ULTIMA_VENDA = row1.DT_ULTIMA_VENDA ;
out1_tmp.DIAS_SEM_VENDA = row1.DIAS_SEM_VENDA ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
row11 = null;			
if(out1.COD_ITEM == null){
	finder_tUniqRow_3.COD_ITEM = null;
}else{
	finder_tUniqRow_3.COD_ITEM = out1.COD_ITEM.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(out1.COD_ITEM == null){
	new_tUniqRow_3.COD_ITEM = null;
}else{
	new_tUniqRow_3.COD_ITEM = out1.COD_ITEM.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row11 == null){ 
	
	row11 = new row11Struct();
}row11.COD_ITEM = out1.COD_ITEM;			row11.ITEM = out1.ITEM;			row11.QTD_VENDA = out1.QTD_VENDA;			row11.DT_ULTIMA_VENDA = out1.DT_ULTIMA_VENDA;			row11.DIAS_SEM_VENDA = out1.DIAS_SEM_VENDA;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_2 = new row11Struct();
				
					oneRow_tHashOutput_2.COD_ITEM = row11.COD_ITEM;
					oneRow_tHashOutput_2.ITEM = row11.ITEM;
					oneRow_tHashOutput_2.QTD_VENDA = row11.QTD_VENDA;
					oneRow_tHashOutput_2.DT_ULTIMA_VENDA = row11.DT_ULTIMA_VENDA;
					oneRow_tHashOutput_2.DIAS_SEM_VENDA = row11.DIAS_SEM_VENDA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);

 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";
	
	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";
	
	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT I.ITE_CODITE CD_PRODUTO,\nI.ITE_DESITE DC_PRODUTO,\nI.ITE_DTACAD DT_CADASTRO,\nI.ITE_DTAALT DT_ULTI_ATUALIZACAO,"
+"\nI.ITE_CODOPE CD_OPERADOR,\n(SELECT LEFT(I.ITE_CODGRU, 3)\n   FROM CADGRU CL\n  WHERE CL.GRU_CODGRU = CONCAT(LEFT(I.ITE"
+"_CODGRU, 3), '000'))                               CD_LINHA,\n(SELECT CL.GRU_DESGRU\n   FROM CADGRU CL\n  WHERE CL.GRU_C"
+"ODGRU = CONCAT(LEFT(I.ITE_CODGRU, 3), '000'))                               LINHAGRUPO,\nRIGHT(I.ITE_CODGRU, 3)         "
+"                                                                      CD_GRUPO,\n(SELECT CG.GRU_DESGRU\n   FROM CADGRU C"
+"G\n  WHERE I.ITE_CODGRU = CG.GRU_CODGRU)                                                       GRUPO,\nI.ITE_REFERE REFE"
+"RENCIA,\nU.UNI_SIGUNI UNIDADE,\nITE_PESOIT PESO,\nITE_PESLIQ PESO_LIQ,\n(SELECT D.ITE_EXPALT FROM DESSIT D WHERE D.ITE_C"
+"ODITE = I.ITE_CODITE) ALTURA,\n(SELECT D.ITE_EXPLAR FROM DESSIT D WHERE D.ITE_CODITE = I.ITE_CODITE) LARGURA,\n(SELECT D"
+".ITE_EXPPRO FROM DESSIT D WHERE D.ITE_CODITE = I.ITE_CODITE) PROFUNDIDADE,\nITE_INFLAM INFLAMAVEL,\nITE_ITEATI ATIVO_VEN"
+"DA,\nITE_ATICOM  ATIVO_COMPRA,\nITE_EXPSIT EXPORTA_SITE,\nI.ITE_CODMAR CD_MARCA,\n(SELECT M.MAR_DESMAR\nFROM CADMAR M\nW"
+"HERE M.MAR_CODMAR = I.ITE_CODMAR) DC_MARCA,\nI.ITE_CODFOR CD_FORNECEDOR,\nI.ITE_CODFAB CODIGO_FABRICA,\nG.ITE_LOCFIS LOC"
+"AL_FISICO,\nI.ITE_SITPRO SITUACAO_PRODUTO,\nI.ITE_CLAIPI AS CD_NCM,\n(SELECT UPPER(C.NCM_DESCRI) FROM CADNCM C \n  WHERE"
+" C.NCM_CODNCM = I.ITE_CLAIPI\n  LIMIT 1) AS DESCRICAO_NCM,\nCASE \n        WHEN DATEDIFF(CURDATE(), I.ITE_DTACAD) <= 90 "
+"THEN 'SIM'\n        ELSE 'NÃO'\n    END AS LANCAMENTO\nFROM CADITE I\nINNER JOIN  ITEGER G ON G.ITE_CODITE = I.ITE_CODIT"
+"E\nINNER JOIN  CADUNI U ON U.UNI_CODUNI = I.ITE_CODUNI\n-- and I.ITE_CODITE in ( '75520','80639')\nGROUP BY I.ITE_CODITE"
+"";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.CD_PRODUTO = null;
							} else {
	                         		
        	row2.CD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.DC_PRODUTO = null;
							} else {
	                         		
        	row2.DC_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.DT_CADASTRO = null;
							} else {
										
				if(rs_tDBInput_1.getString(3) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row2.DT_CADASTRO = rs_tDBInput_1.getTimestamp(3);
					} else {
						row2.DT_CADASTRO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row2.DT_CADASTRO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.DT_ULTI_ATUALIZACAO = null;
							} else {
										
				if(rs_tDBInput_1.getString(4) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row2.DT_ULTI_ATUALIZACAO = rs_tDBInput_1.getTimestamp(4);
					} else {
						row2.DT_ULTI_ATUALIZACAO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row2.DT_ULTI_ATUALIZACAO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.CD_OPERADOR = null;
							} else {
	                         		
        	row2.CD_OPERADOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.CD_LINHA = null;
							} else {
	                         		
        	row2.CD_LINHA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.LINHA = null;
							} else {
	                         		
        	row2.LINHA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.CD_GRUPO = null;
							} else {
	                         		
        	row2.CD_GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.GRUPO = null;
							} else {
	                         		
        	row2.GRUPO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.REFERENCIA = null;
							} else {
	                         		
        	row2.REFERENCIA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.UNIDADE = null;
							} else {
	                         		
        	row2.UNIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.PESO = null;
							} else {
		                          
            row2.PESO = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    row2.PESO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.PESO_LIQ = null;
							} else {
		                          
            row2.PESO_LIQ = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row2.PESO_LIQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.ALTURA = null;
							} else {
		                          
            row2.ALTURA = rs_tDBInput_1.getBigDecimal(14);
            if(rs_tDBInput_1.wasNull()){
                    row2.ALTURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row2.LARGURA = null;
							} else {
		                          
            row2.LARGURA = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    row2.LARGURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row2.PROFUNDIDADE = null;
							} else {
		                          
            row2.PROFUNDIDADE = rs_tDBInput_1.getBigDecimal(16);
            if(rs_tDBInput_1.wasNull()){
                    row2.PROFUNDIDADE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row2.INFLAMAVEL = null;
							} else {
									
					tmpContent_tDBInput_1 = rs_tDBInput_1.getString(17);
                    if(tmpContent_tDBInput_1 != null && tmpContent_tDBInput_1.length() > 0) {			  	
                        row2.INFLAMAVEL = tmpContent_tDBInput_1.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_1 == null) {			  	   	
                                row2.INFLAMAVEL = null;			  			
                            } else {			  		
                                row2.INFLAMAVEL = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row2.ATIVO_VENDA = null;
							} else {
									
					tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
                    if(tmpContent_tDBInput_1 != null && tmpContent_tDBInput_1.length() > 0) {			  	
                        row2.ATIVO_VENDA = tmpContent_tDBInput_1.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_1 == null) {			  	   	
                                row2.ATIVO_VENDA = null;			  			
                            } else {			  		
                                row2.ATIVO_VENDA = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row2.ATIVO_COMPRA = null;
							} else {
									
					tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
                    if(tmpContent_tDBInput_1 != null && tmpContent_tDBInput_1.length() > 0) {			  	
                        row2.ATIVO_COMPRA = tmpContent_tDBInput_1.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_1 == null) {			  	   	
                                row2.ATIVO_COMPRA = null;			  			
                            } else {			  		
                                row2.ATIVO_COMPRA = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row2.EXPORTA_SITE = null;
							} else {
									
					tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
                    if(tmpContent_tDBInput_1 != null && tmpContent_tDBInput_1.length() > 0) {			  	
                        row2.EXPORTA_SITE = tmpContent_tDBInput_1.charAt(0);			  		
                    } else {			  				  	    
                            if(tmpContent_tDBInput_1 == null) {			  	   	
                                row2.EXPORTA_SITE = null;			  			
                            } else {			  		
                                row2.EXPORTA_SITE = '\0';			  			
                            }
                    }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row2.CD_MARCA = null;
							} else {
	                         		
        	row2.CD_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row2.DC_MARCA = null;
							} else {
	                         		
        	row2.DC_MARCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row2.CD_FORNECEDOR = null;
							} else {
	                         		
        	row2.CD_FORNECEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row2.CODIGO_FABRICA = null;
							} else {
	                         		
        	row2.CODIGO_FABRICA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row2.LOCAL_FISICO = null;
							} else {
	                         		
        	row2.LOCAL_FISICO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row2.SITUACAO_PRODUTO = null;
							} else {
	                         		
        	row2.SITUACAO_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row2.CD_NCM = null;
							} else {
	                         		
        	row2.CD_NCM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row2.DESCRICAO_NCM = null;
							} else {
	                         		
        	row2.DESCRICAO_NCM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row2.LANCAMENTO = null;
							} else {
	                         		
        	row2.LANCAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.CD_PRODUTO = row2.CD_PRODUTO ;
out2_tmp.DC_PRODUTO = row2.DC_PRODUTO ;
out2_tmp.DT_CADASTRO = row2.DT_CADASTRO ;
out2_tmp.DT_ULTI_ATUALIZACAO = row2.DT_ULTI_ATUALIZACAO ;
out2_tmp.CD_OPERADOR = row2.CD_OPERADOR ;
out2_tmp.CD_LINHA = row2.CD_LINHA ;
out2_tmp.LINHA = row2.LINHA ;
out2_tmp.CD_GRUPO = row2.CD_GRUPO ;
out2_tmp.GRUPO = row2.GRUPO ;
out2_tmp.REFERENCIA = row2.REFERENCIA ;
out2_tmp.UNIDADE = row2.UNIDADE ;
out2_tmp.PESO = row2.PESO ;
out2_tmp.PESO_LIQ = row2.PESO_LIQ ;
out2_tmp.ALTURA = row2.ALTURA ;
out2_tmp.LARGURA = row2.LARGURA ;
out2_tmp.PROFUNDIDADE = row2.PROFUNDIDADE ;
out2_tmp.INFLAMAVEL = row2.INFLAMAVEL ;
out2_tmp.ATIVO_VENDA = row2.ATIVO_VENDA ;
out2_tmp.ATIVO_COMPRA = row2.ATIVO_COMPRA ;
out2_tmp.EXPORTA_SITE = row2.EXPORTA_SITE ;
out2_tmp.CD_MARCA = row2.CD_MARCA ;
out2_tmp.DC_MARCA = row2.DC_MARCA ;
out2_tmp.CD_FORNECEDOR = row2.CD_FORNECEDOR ;
out2_tmp.CODIGO_FABRICA = row2.CODIGO_FABRICA ;
out2_tmp.LOCAL_FISICO = row2.LOCAL_FISICO ;
out2_tmp.SITUACAO_PRODUTO = row2.SITUACAO_PRODUTO ;
out2_tmp.CD_NCM = row2.CD_NCM ;
out2_tmp.DESCRICAO_NCM = row2.DESCRICAO_NCM ;
out2_tmp.LANCAMENTO = row2.LANCAMENTO ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



    
		out2Struct oneRow_tHashOutput_3 = new out2Struct();
				
					oneRow_tHashOutput_3.CD_PRODUTO = out2.CD_PRODUTO;
					oneRow_tHashOutput_3.DC_PRODUTO = out2.DC_PRODUTO;
					oneRow_tHashOutput_3.DT_CADASTRO = out2.DT_CADASTRO;
					oneRow_tHashOutput_3.DT_ULTI_ATUALIZACAO = out2.DT_ULTI_ATUALIZACAO;
					oneRow_tHashOutput_3.CD_OPERADOR = out2.CD_OPERADOR;
					oneRow_tHashOutput_3.CD_LINHA = out2.CD_LINHA;
					oneRow_tHashOutput_3.LINHA = out2.LINHA;
					oneRow_tHashOutput_3.CD_GRUPO = out2.CD_GRUPO;
					oneRow_tHashOutput_3.GRUPO = out2.GRUPO;
					oneRow_tHashOutput_3.REFERENCIA = out2.REFERENCIA;
					oneRow_tHashOutput_3.UNIDADE = out2.UNIDADE;
					oneRow_tHashOutput_3.PESO = out2.PESO;
					oneRow_tHashOutput_3.PESO_LIQ = out2.PESO_LIQ;
					oneRow_tHashOutput_3.ALTURA = out2.ALTURA;
					oneRow_tHashOutput_3.LARGURA = out2.LARGURA;
					oneRow_tHashOutput_3.PROFUNDIDADE = out2.PROFUNDIDADE;
					oneRow_tHashOutput_3.INFLAMAVEL = out2.INFLAMAVEL;
					oneRow_tHashOutput_3.ATIVO_VENDA = out2.ATIVO_VENDA;
					oneRow_tHashOutput_3.ATIVO_COMPRA = out2.ATIVO_COMPRA;
					oneRow_tHashOutput_3.EXPORTA_SITE = out2.EXPORTA_SITE;
					oneRow_tHashOutput_3.CD_MARCA = out2.CD_MARCA;
					oneRow_tHashOutput_3.DC_MARCA = out2.DC_MARCA;
					oneRow_tHashOutput_3.CD_FORNECEDOR = out2.CD_FORNECEDOR;
					oneRow_tHashOutput_3.CODIGO_FABRICA = out2.CODIGO_FABRICA;
					oneRow_tHashOutput_3.LOCAL_FISICO = out2.LOCAL_FISICO;
					oneRow_tHashOutput_3.SITUACAO_PRODUTO = out2.SITUACAO_PRODUTO;
					oneRow_tHashOutput_3.CD_NCM = out2.CD_NCM;
					oneRow_tHashOutput_3.DESCRICAO_NCM = out2.DESCRICAO_NCM;
					oneRow_tHashOutput_3.LANCAMENTO = out2.LANCAMENTO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout2Struct implements routines.system.IPersistableRow<copyOfout2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String FOR_CODFOR;

				public String getFOR_CODFOR () {
					return this.FOR_CODFOR;
				}

				public Boolean FOR_CODFORIsNullable(){
				    return true;
				}
				public Boolean FOR_CODFORIsKey(){
				    return false;
				}
				public Integer FOR_CODFORLength(){
				    return null;
				}
				public Integer FOR_CODFORPrecision(){
				    return null;
				}
				public String FOR_CODFORDefault(){
				
					return null;
				
				}
				public String FOR_CODFORComment(){
				
				    return "";
				
				}
				public String FOR_CODFORPattern(){
				
					return "";
				
				}
				public String FOR_CODFOROriginalDbColumnName(){
				
					return "FOR_CODFOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FOR_CODFOR="+FOR_CODFOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String FOR_CODFOR;

				public String getFOR_CODFOR () {
					return this.FOR_CODFOR;
				}

				public Boolean FOR_CODFORIsNullable(){
				    return true;
				}
				public Boolean FOR_CODFORIsKey(){
				    return false;
				}
				public Integer FOR_CODFORLength(){
				    return null;
				}
				public Integer FOR_CODFORPrecision(){
				    return null;
				}
				public String FOR_CODFORDefault(){
				
					return null;
				
				}
				public String FOR_CODFORComment(){
				
				    return "";
				
				}
				public String FOR_CODFORPattern(){
				
					return "";
				
				}
				public String FOR_CODFOROriginalDbColumnName(){
				
					return "FOR_CODFOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FOR_CODFOR="+FOR_CODFOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
copyOfout2Struct copyOfout2 = new copyOfout2Struct();





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout2Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select FOR_CODFOR, FOR_NOMFOR  FROM CADFOR";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.FOR_CODFOR = null;
							} else {
	                         		
        	row3.FOR_CODFOR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.FOR_NOMFOR = null;
							} else {
	                         		
        	row3.FOR_NOMFOR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfout2 = null;


// # Output table : 'copyOfout2'
copyOfout2_tmp.FOR_CODFOR = row3.FOR_CODFOR ;
copyOfout2_tmp.FOR_NOMFOR = row3.FOR_NOMFOR ;
copyOfout2 = copyOfout2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfout2"
if(copyOfout2 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout2"
						
						);
					}
					



    
		copyOfout2Struct oneRow_tHashOutput_4 = new copyOfout2Struct();
				
					oneRow_tHashOutput_4.FOR_CODFOR = copyOfout2.FOR_CODFOR;
					oneRow_tHashOutput_4.FOR_NOMFOR = copyOfout2.FOR_NOMFOR;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "copyOfout2"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return 3;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return 5;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public BigDecimal ITE_PRECUS;

				public BigDecimal getITE_PRECUS () {
					return this.ITE_PRECUS;
				}

				public Boolean ITE_PRECUSIsNullable(){
				    return true;
				}
				public Boolean ITE_PRECUSIsKey(){
				    return false;
				}
				public Integer ITE_PRECUSLength(){
				    return 12;
				}
				public Integer ITE_PRECUSPrecision(){
				    return 4;
				}
				public String ITE_PRECUSDefault(){
				
					return null;
				
				}
				public String ITE_PRECUSComment(){
				
				    return "";
				
				}
				public String ITE_PRECUSPattern(){
				
					return "";
				
				}
				public String ITE_PRECUSOriginalDbColumnName(){
				
					return "ITE_PRECUS";
				
				}

				
			    public Integer ESTOQUE_DISP;

				public Integer getESTOQUE_DISP () {
					return this.ESTOQUE_DISP;
				}

				public Boolean ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer ESTOQUE_DISPLength(){
				    return null;
				}
				public Integer ESTOQUE_DISPPrecision(){
				    return null;
				}
				public String ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String ESTOQUE_DISPOriginalDbColumnName(){
				
					return "ESTOQUE_DISP";
				
				}

				
			    public BigDecimal VL_ESTOQUE_DISP;

				public BigDecimal getVL_ESTOQUE_DISP () {
					return this.VL_ESTOQUE_DISP;
				}

				public Boolean VL_ESTOQUE_DISPIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_DISPIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_DISPLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_DISPPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_DISPDefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_DISPComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_DISPPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_DISPOriginalDbColumnName(){
				
					return "VL_ESTOQUE_DISP";
				
				}

				
			    public Integer ESTOQUE_FISICO;

				public Integer getESTOQUE_FISICO () {
					return this.ESTOQUE_FISICO;
				}

				public Boolean ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_FISICOLength(){
				    return null;
				}
				public Integer ESTOQUE_FISICOPrecision(){
				    return null;
				}
				public String ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "ESTOQUE_FISICO";
				
				}

				
			    public BigDecimal VL_ESTOQUE_FISICO;

				public BigDecimal getVL_ESTOQUE_FISICO () {
					return this.VL_ESTOQUE_FISICO;
				}

				public Boolean VL_ESTOQUE_FISICOIsNullable(){
				    return true;
				}
				public Boolean VL_ESTOQUE_FISICOIsKey(){
				    return false;
				}
				public Integer VL_ESTOQUE_FISICOLength(){
				    return 12;
				}
				public Integer VL_ESTOQUE_FISICOPrecision(){
				    return 4;
				}
				public String VL_ESTOQUE_FISICODefault(){
				
					return null;
				
				}
				public String VL_ESTOQUE_FISICOComment(){
				
				    return "";
				
				}
				public String VL_ESTOQUE_FISICOPattern(){
				
					return "";
				
				}
				public String VL_ESTOQUE_FISICOOriginalDbColumnName(){
				
					return "VL_ESTOQUE_FISICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.ITE_PRECUS = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_DISP = readInteger(dis);
					
						this.VL_ESTOQUE_DISP = (BigDecimal) dis.readObject();
					
						this.ESTOQUE_FISICO = readInteger(dis);
					
						this.VL_ESTOQUE_FISICO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ITE_PRECUS);
					
					// Integer
				
						writeInteger(this.ESTOQUE_DISP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_DISP);
					
					// Integer
				
						writeInteger(this.ESTOQUE_FISICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ESTOQUE_FISICO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",ITE_PRECUS="+String.valueOf(ITE_PRECUS));
		sb.append(",ESTOQUE_DISP="+String.valueOf(ESTOQUE_DISP));
		sb.append(",VL_ESTOQUE_DISP="+String.valueOf(VL_ESTOQUE_DISP));
		sb.append(",ESTOQUE_FISICO="+String.valueOf(ESTOQUE_FISICO));
		sb.append(",VL_ESTOQUE_FISICO="+String.valueOf(VL_ESTOQUE_FISICO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
out5Struct out5 = new out5Struct();
row15Struct row15 = new row15Struct();






	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row15Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_relatorio_vendas_30_dias_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row15Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\n SELECT IG002.ITE_CODEMP ,\n        IG002.ITE_CODITE ,\n        round(IG002.ITE_PRECUS,2)  as ITE_PRECUS,\n        IG"
+"002.ITE_SALDOS - IG002.ITE_SALEXT - IFNULL(IG002.ITE_SALREG,0) - (IFNULL(IG002.ITE_QTPD_V,0) + IFNULL(IG002.ITE_QTPD_F,0"
+") + IFNULL(IG002.ITE_QTPD_P,0)) AS ESTOQUE_DISP,\n                (round(IG002.ITE_PRECUS,2)) * (IG002.ITE_SALDOS - IG00"
+"2.ITE_SALEXT - IFNULL(IG002.ITE_SALREG,0) - (IFNULL(IG002.ITE_QTPD_V,0) + IFNULL(IG002.ITE_QTPD_F,0) + IFNULL(IG002.ITE_"
+"QTPD_P,0))) AS VL_ESTOQUE_DISP,\n        IG002.ITE_SALDOS AS ESTOQUE_FISICO,\n        IG002.ITE_SALDOS * (round(IG002.IT"
+"E_PRECUS,2)) AS VL_ESTOQUE_FISICO\n   FROM ITEGER IG002\n   where IG002.ITE_CODEMP not in ('005','004','003');\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row14.ITE_CODEMP = null;
							} else {
	                         		
        	row14.ITE_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row14.ITE_CODITE = null;
							} else {
	                         		
        	row14.ITE_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row14.ITE_PRECUS = null;
							} else {
		                          
            row14.ITE_PRECUS = rs_tDBInput_3.getBigDecimal(3);
            if(rs_tDBInput_3.wasNull()){
                    row14.ITE_PRECUS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row14.ESTOQUE_DISP = null;
							} else {
		                          
            row14.ESTOQUE_DISP = rs_tDBInput_3.getInt(4);
            if(rs_tDBInput_3.wasNull()){
                    row14.ESTOQUE_DISP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row14.VL_ESTOQUE_DISP = null;
							} else {
		                          
            row14.VL_ESTOQUE_DISP = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    row14.VL_ESTOQUE_DISP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row14.ESTOQUE_FISICO = null;
							} else {
		                          
            row14.ESTOQUE_FISICO = rs_tDBInput_3.getInt(6);
            if(rs_tDBInput_3.wasNull()){
                    row14.ESTOQUE_FISICO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row14.VL_ESTOQUE_FISICO = null;
							} else {
		                          
            row14.VL_ESTOQUE_FISICO = rs_tDBInput_3.getBigDecimal(7);
            if(rs_tDBInput_3.wasNull()){
                    row14.VL_ESTOQUE_FISICO = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.ITE_CODEMP = row14.ITE_CODEMP ;
out5_tmp.ITE_CODITE = row14.ITE_CODITE ;
out5_tmp.ITE_PRECUS = row14.ITE_PRECUS ;
out5_tmp.ESTOQUE_DISP = row14.ESTOQUE_DISP ;
out5_tmp.VL_ESTOQUE_DISP = row14.VL_ESTOQUE_DISP ;
out5_tmp.ESTOQUE_FISICO = row14.ESTOQUE_FISICO ;
out5_tmp.VL_ESTOQUE_FISICO = row14.VL_ESTOQUE_FISICO ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					

          row15 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((out5.ESTOQUE_FISICO == null? false : out5.ESTOQUE_FISICO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) > 0)
                           , "ESTOQUE_FISICO.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row15 == null){ 
                row15 = new row15Struct();
              }
               row15.ITE_CODEMP = out5.ITE_CODEMP;
               row15.ITE_CODITE = out5.ITE_CODITE;
               row15.ITE_PRECUS = out5.ITE_PRECUS;
               row15.ESTOQUE_DISP = out5.ESTOQUE_DISP;
               row15.VL_ESTOQUE_DISP = out5.VL_ESTOQUE_DISP;
               row15.ESTOQUE_FISICO = out5.ESTOQUE_FISICO;
               row15.VL_ESTOQUE_FISICO = out5.VL_ESTOQUE_FISICO;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					



    
		row15Struct oneRow_tHashOutput_6 = new row15Struct();
				
					oneRow_tHashOutput_6.ITE_CODEMP = row15.ITE_CODEMP;
					oneRow_tHashOutput_6.ITE_CODITE = row15.ITE_CODITE;
					oneRow_tHashOutput_6.ITE_PRECUS = row15.ITE_PRECUS;
					oneRow_tHashOutput_6.ESTOQUE_DISP = row15.ESTOQUE_DISP;
					oneRow_tHashOutput_6.VL_ESTOQUE_DISP = row15.VL_ESTOQUE_DISP;
					oneRow_tHashOutput_6.ESTOQUE_FISICO = row15.ESTOQUE_FISICO;
					oneRow_tHashOutput_6.VL_ESTOQUE_FISICO = row15.VL_ESTOQUE_FISICO;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COD_ITEM;

				public String getCOD_ITEM () {
					return this.COD_ITEM;
				}

				public Boolean COD_ITEMIsNullable(){
				    return true;
				}
				public Boolean COD_ITEMIsKey(){
				    return false;
				}
				public Integer COD_ITEMLength(){
				    return null;
				}
				public Integer COD_ITEMPrecision(){
				    return null;
				}
				public String COD_ITEMDefault(){
				
					return null;
				
				}
				public String COD_ITEMComment(){
				
				    return "";
				
				}
				public String COD_ITEMPattern(){
				
					return "";
				
				}
				public String COD_ITEMOriginalDbColumnName(){
				
					return "COD_ITEM";
				
				}

				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}

				public Boolean ITEMIsNullable(){
				    return true;
				}
				public Boolean ITEMIsKey(){
				    return false;
				}
				public Integer ITEMLength(){
				    return null;
				}
				public Integer ITEMPrecision(){
				    return null;
				}
				public String ITEMDefault(){
				
					return null;
				
				}
				public String ITEMComment(){
				
				    return "";
				
				}
				public String ITEMPattern(){
				
					return "";
				
				}
				public String ITEMOriginalDbColumnName(){
				
					return "ITEM";
				
				}

				
			    public Integer QTD_VENDA;

				public Integer getQTD_VENDA () {
					return this.QTD_VENDA;
				}

				public Boolean QTD_VENDAIsNullable(){
				    return true;
				}
				public Boolean QTD_VENDAIsKey(){
				    return false;
				}
				public Integer QTD_VENDALength(){
				    return null;
				}
				public Integer QTD_VENDAPrecision(){
				    return null;
				}
				public String QTD_VENDADefault(){
				
					return null;
				
				}
				public String QTD_VENDAComment(){
				
				    return "";
				
				}
				public String QTD_VENDAPattern(){
				
					return "";
				
				}
				public String QTD_VENDAOriginalDbColumnName(){
				
					return "QTD_VENDA";
				
				}

				
			    public java.util.Date DT_ULTIMA_VENDA;

				public java.util.Date getDT_ULTIMA_VENDA () {
					return this.DT_ULTIMA_VENDA;
				}

				public Boolean DT_ULTIMA_VENDAIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_VENDAIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_VENDALength(){
				    return null;
				}
				public Integer DT_ULTIMA_VENDAPrecision(){
				    return null;
				}
				public String DT_ULTIMA_VENDADefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_VENDAComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_VENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTIMA_VENDAOriginalDbColumnName(){
				
					return "DT_ULTIMA_VENDA";
				
				}

				
			    public Integer DIAS_SEM_VENDA;

				public Integer getDIAS_SEM_VENDA () {
					return this.DIAS_SEM_VENDA;
				}

				public Boolean DIAS_SEM_VENDAIsNullable(){
				    return true;
				}
				public Boolean DIAS_SEM_VENDAIsKey(){
				    return false;
				}
				public Integer DIAS_SEM_VENDALength(){
				    return null;
				}
				public Integer DIAS_SEM_VENDAPrecision(){
				    return null;
				}
				public String DIAS_SEM_VENDADefault(){
				
					return null;
				
				}
				public String DIAS_SEM_VENDAComment(){
				
				    return "";
				
				}
				public String DIAS_SEM_VENDAPattern(){
				
					return "";
				
				}
				public String DIAS_SEM_VENDAOriginalDbColumnName(){
				
					return "DIAS_SEM_VENDA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COD_ITEM == null) ? 0 : this.COD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.COD_ITEM == null) {
							if (other.COD_ITEM != null)
								return false;
						
						} else if (!this.COD_ITEM.equals(other.COD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.COD_ITEM = this.COD_ITEM;
	            other.ITEM = this.ITEM;
	            other.QTD_VENDA = this.QTD_VENDA;
	            other.DT_ULTIMA_VENDA = this.DT_ULTIMA_VENDA;
	            other.DIAS_SEM_VENDA = this.DIAS_SEM_VENDA;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.COD_ITEM = this.COD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.COD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.COD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ITEM = readString(dis,ois);
					
						this.QTD_VENDA = readInteger(dis,ois);
					
						this.DT_ULTIMA_VENDA = readDate(dis,ois);
					
						this.DIAS_SEM_VENDA = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ITEM = readString(dis,objectIn);
					
						this.QTD_VENDA = readInteger(dis,objectIn);
					
						this.DT_ULTIMA_VENDA = readDate(dis,objectIn);
					
						this.DIAS_SEM_VENDA = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ITEM, dos, oos);
					
					writeInteger(this.QTD_VENDA, dos, oos);
					
						writeDate(this.DT_ULTIMA_VENDA, dos, oos);
					
					writeInteger(this.DIAS_SEM_VENDA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.ITEM, dos, objectOut);
					
					writeInteger(this.QTD_VENDA, dos, objectOut);
					
						writeDate(this.DT_ULTIMA_VENDA, dos, objectOut);
					
					writeInteger(this.DIAS_SEM_VENDA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_ITEM="+COD_ITEM);
		sb.append(",ITEM="+ITEM);
		sb.append(",QTD_VENDA="+String.valueOf(QTD_VENDA));
		sb.append(",DT_ULTIMA_VENDA="+String.valueOf(DT_ULTIMA_VENDA));
		sb.append(",DIAS_SEM_VENDA="+String.valueOf(DIAS_SEM_VENDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_ITEM, other.COD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_10 - inputs:(after_tHashInput_4) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_10 - inputs:(row12,row21) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row11Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row21.COD_ITEM = next_tHashInput_10.COD_ITEM;
	row21.ITEM = next_tHashInput_10.ITEM;
	row21.QTD_VENDA = next_tHashInput_10.QTD_VENDA;
	row21.DT_ULTIMA_VENDA = next_tHashInput_10.DT_ULTIMA_VENDA;
	row21.DIAS_SEM_VENDA = next_tHashInput_10.DIAS_SEM_VENDA;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.COD_ITEM = row21.COD_ITEM;
				
				row21_HashRow.ITEM = row21.ITEM;
				
				row21_HashRow.QTD_VENDA = row21.QTD_VENDA;
				
				row21_HashRow.DT_ULTIMA_VENDA = row21.DT_ULTIMA_VENDA;
				
				row21_HashRow.DIAS_SEM_VENDA = row21.DIAS_SEM_VENDA;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FOR_CODFOR;

				public String getFOR_CODFOR () {
					return this.FOR_CODFOR;
				}

				public Boolean FOR_CODFORIsNullable(){
				    return true;
				}
				public Boolean FOR_CODFORIsKey(){
				    return false;
				}
				public Integer FOR_CODFORLength(){
				    return null;
				}
				public Integer FOR_CODFORPrecision(){
				    return null;
				}
				public String FOR_CODFORDefault(){
				
					return null;
				
				}
				public String FOR_CODFORComment(){
				
				    return "";
				
				}
				public String FOR_CODFORPattern(){
				
					return "";
				
				}
				public String FOR_CODFOROriginalDbColumnName(){
				
					return "FOR_CODFOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FOR_CODFOR == null) ? 0 : this.FOR_CODFOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.FOR_CODFOR == null) {
							if (other.FOR_CODFOR != null)
								return false;
						
						} else if (!this.FOR_CODFOR.equals(other.FOR_CODFOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.FOR_CODFOR = this.FOR_CODFOR;
	            other.FOR_NOMFOR = this.FOR_NOMFOR;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.FOR_CODFOR = this.FOR_CODFOR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FOR_NOMFOR = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FOR_NOMFOR = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FOR_NOMFOR, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.FOR_NOMFOR, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FOR_CODFOR="+FOR_CODFOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FOR_CODFOR, other.FOR_CODFOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];

	
			    public String FOR_CODFOR;

				public String getFOR_CODFOR () {
					return this.FOR_CODFOR;
				}

				public Boolean FOR_CODFORIsNullable(){
				    return true;
				}
				public Boolean FOR_CODFORIsKey(){
				    return false;
				}
				public Integer FOR_CODFORLength(){
				    return null;
				}
				public Integer FOR_CODFORPrecision(){
				    return null;
				}
				public String FOR_CODFORDefault(){
				
					return null;
				
				}
				public String FOR_CODFORComment(){
				
				    return "";
				
				}
				public String FOR_CODFORPattern(){
				
					return "";
				
				}
				public String FOR_CODFOROriginalDbColumnName(){
				
					return "FOR_CODFOR";
				
				}

				
			    public String FOR_NOMFOR;

				public String getFOR_NOMFOR () {
					return this.FOR_NOMFOR;
				}

				public Boolean FOR_NOMFORIsNullable(){
				    return true;
				}
				public Boolean FOR_NOMFORIsKey(){
				    return false;
				}
				public Integer FOR_NOMFORLength(){
				    return null;
				}
				public Integer FOR_NOMFORPrecision(){
				    return null;
				}
				public String FOR_NOMFORDefault(){
				
					return null;
				
				}
				public String FOR_NOMFORComment(){
				
				    return "";
				
				}
				public String FOR_NOMFORPattern(){
				
					return "";
				
				}
				public String FOR_NOMFOROriginalDbColumnName(){
				
					return "FOR_NOMFOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.FOR_CODFOR = readString(dis);
					
					this.FOR_NOMFOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FOR_CODFOR,dos);
					
					// String
				
						writeString(this.FOR_NOMFOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FOR_CODFOR="+FOR_CODFOR);
		sb.append(",FOR_NOMFOR="+FOR_NOMFOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tUniqRow_1 - inputs:(row7) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_6 - inputs:(out,row8) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String FOR_CODFOR;
					String FOR_NOMFOR;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.FOR_CODFOR == null) ? 0 : this.FOR_CODFOR.hashCode());
								
								result = prime * result + ((this.FOR_NOMFOR == null) ? 0 : this.FOR_NOMFOR.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.FOR_CODFOR == null) {
										if (other.FOR_CODFOR != null) 
											return false;
								
									} else if (!this.FOR_CODFOR.equals(other.FOR_CODFOR))
								 
										return false;
								
									if (this.FOR_NOMFOR == null) {
										if (other.FOR_NOMFOR != null) 
											return false;
								
									} else if (!this.FOR_NOMFOR.equals(other.FOR_NOMFOR))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout2Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout2Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    copyOfout2Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row7.FOR_CODFOR = next_tHashInput_2.FOR_CODFOR;
	row7.FOR_NOMFOR = next_tHashInput_2.FOR_NOMFOR;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
row8 = null;			row8 = null;			
if(row7.FOR_CODFOR == null){
	finder_tUniqRow_1.FOR_CODFOR = null;
}else{
	finder_tUniqRow_1.FOR_CODFOR = row7.FOR_CODFOR.toLowerCase();
}
if(row7.FOR_NOMFOR == null){
	finder_tUniqRow_1.FOR_NOMFOR = null;
}else{
	finder_tUniqRow_1.FOR_NOMFOR = row7.FOR_NOMFOR.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row7.FOR_CODFOR == null){
	new_tUniqRow_1.FOR_CODFOR = null;
}else{
	new_tUniqRow_1.FOR_CODFOR = row7.FOR_CODFOR.toLowerCase();
}
if(row7.FOR_NOMFOR == null){
	new_tUniqRow_1.FOR_NOMFOR = null;
}else{
	new_tUniqRow_1.FOR_NOMFOR = row7.FOR_NOMFOR.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.FOR_CODFOR = row7.FOR_CODFOR;			row8.FOR_NOMFOR = row7.FOR_NOMFOR;			if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.FOR_CODFOR = row7.FOR_CODFOR;			row8.FOR_NOMFOR = row7.FOR_NOMFOR;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.FOR_CODFOR = row8.FOR_CODFOR;
				
				row8_HashRow.FOR_NOMFOR = row8.FOR_NOMFOR;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DC_PRODUTO = readString(dis,ois);
					
						this.DT_CADASTRO = readDate(dis,ois);
					
						this.DT_ULTI_ATUALIZACAO = readDate(dis,ois);
					
						this.CD_OPERADOR = readString(dis,ois);
					
						this.CD_LINHA = readString(dis,ois);
					
						this.LINHA = readString(dis,ois);
					
						this.CD_GRUPO = readString(dis,ois);
					
						this.GRUPO = readString(dis,ois);
					
						this.REFERENCIA = readString(dis,ois);
					
						this.UNIDADE = readString(dis,ois);
					
       			    	this.PESO = (BigDecimal) ois.readObject();
					
       			    	this.PESO_LIQ = (BigDecimal) ois.readObject();
					
       			    	this.ALTURA = (BigDecimal) ois.readObject();
					
       			    	this.LARGURA = (BigDecimal) ois.readObject();
					
       			    	this.PROFUNDIDADE = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
						this.CD_MARCA = readString(dis,ois);
					
						this.DC_MARCA = readString(dis,ois);
					
						this.CD_FORNECEDOR = readString(dis,ois);
					
						this.CODIGO_FABRICA = readString(dis,ois);
					
						this.LOCAL_FISICO = readString(dis,ois);
					
						this.SITUACAO_PRODUTO = readString(dis,ois);
					
						this.CD_NCM = readString(dis,ois);
					
						this.DESCRICAO_NCM = readString(dis,ois);
					
						this.LANCAMENTO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DC_PRODUTO = readString(dis,objectIn);
					
						this.DT_CADASTRO = readDate(dis,objectIn);
					
						this.DT_ULTI_ATUALIZACAO = readDate(dis,objectIn);
					
						this.CD_OPERADOR = readString(dis,objectIn);
					
						this.CD_LINHA = readString(dis,objectIn);
					
						this.LINHA = readString(dis,objectIn);
					
						this.CD_GRUPO = readString(dis,objectIn);
					
						this.GRUPO = readString(dis,objectIn);
					
						this.REFERENCIA = readString(dis,objectIn);
					
						this.UNIDADE = readString(dis,objectIn);
					
       			    	this.PESO = (BigDecimal) objectIn.readObject();
					
       			    	this.PESO_LIQ = (BigDecimal) objectIn.readObject();
					
       			    	this.ALTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.LARGURA = (BigDecimal) objectIn.readObject();
					
       			    	this.PROFUNDIDADE = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = objectIn.readChar();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = objectIn.readChar();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = objectIn.readChar();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = objectIn.readChar();
           				}
					
						this.CD_MARCA = readString(dis,objectIn);
					
						this.DC_MARCA = readString(dis,objectIn);
					
						this.CD_FORNECEDOR = readString(dis,objectIn);
					
						this.CODIGO_FABRICA = readString(dis,objectIn);
					
						this.LOCAL_FISICO = readString(dis,objectIn);
					
						this.SITUACAO_PRODUTO = readString(dis,objectIn);
					
						this.CD_NCM = readString(dis,objectIn);
					
						this.DESCRICAO_NCM = readString(dis,objectIn);
					
						this.LANCAMENTO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DC_PRODUTO, dos, oos);
					
						writeDate(this.DT_CADASTRO, dos, oos);
					
						writeDate(this.DT_ULTI_ATUALIZACAO, dos, oos);
					
						writeString(this.CD_OPERADOR, dos, oos);
					
						writeString(this.CD_LINHA, dos, oos);
					
						writeString(this.LINHA, dos, oos);
					
						writeString(this.CD_GRUPO, dos, oos);
					
						writeString(this.GRUPO, dos, oos);
					
						writeString(this.REFERENCIA, dos, oos);
					
						writeString(this.UNIDADE, dos, oos);
					
       			    	oos.writeObject(this.PESO);
					
       			    	oos.writeObject(this.PESO_LIQ);
					
       			    	oos.writeObject(this.ALTURA);
					
       			    	oos.writeObject(this.LARGURA);
					
       			    	oos.writeObject(this.PROFUNDIDADE);
					
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
						writeString(this.CD_MARCA, dos, oos);
					
						writeString(this.DC_MARCA, dos, oos);
					
						writeString(this.CD_FORNECEDOR, dos, oos);
					
						writeString(this.CODIGO_FABRICA, dos, oos);
					
						writeString(this.LOCAL_FISICO, dos, oos);
					
						writeString(this.SITUACAO_PRODUTO, dos, oos);
					
						writeString(this.CD_NCM, dos, oos);
					
						writeString(this.DESCRICAO_NCM, dos, oos);
					
						writeString(this.LANCAMENTO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.DC_PRODUTO, dos, objectOut);
					
						writeDate(this.DT_CADASTRO, dos, objectOut);
					
						writeDate(this.DT_ULTI_ATUALIZACAO, dos, objectOut);
					
						writeString(this.CD_OPERADOR, dos, objectOut);
					
						writeString(this.CD_LINHA, dos, objectOut);
					
						writeString(this.LINHA, dos, objectOut);
					
						writeString(this.CD_GRUPO, dos, objectOut);
					
						writeString(this.GRUPO, dos, objectOut);
					
						writeString(this.REFERENCIA, dos, objectOut);
					
						writeString(this.UNIDADE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PESO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PESO_LIQ);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ALTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.LARGURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PROFUNDIDADE);
					
						if(this.INFLAMAVEL == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.INFLAMAVEL);
		            	}
					
						if(this.ATIVO_VENDA == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.ATIVO_VENDA);
		            	}
					
						if(this.ATIVO_COMPRA == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.ATIVO_COMPRA);
		            	}
					
						if(this.EXPORTA_SITE == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.EXPORTA_SITE);
		            	}
					
						writeString(this.CD_MARCA, dos, objectOut);
					
						writeString(this.DC_MARCA, dos, objectOut);
					
						writeString(this.CD_FORNECEDOR, dos, objectOut);
					
						writeString(this.CODIGO_FABRICA, dos, objectOut);
					
						writeString(this.LOCAL_FISICO, dos, objectOut);
					
						writeString(this.SITUACAO_PRODUTO, dos, objectOut);
					
						writeString(this.CD_NCM, dos, objectOut);
					
						writeString(this.DESCRICAO_NCM, dos, objectOut);
					
						writeString(this.LANCAMENTO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return true;
				}
				public Integer CD_PRODUTOLength(){
				    return 5;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public String DC_PRODUTO;

				public String getDC_PRODUTO () {
					return this.DC_PRODUTO;
				}

				public Boolean DC_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DC_PRODUTOIsKey(){
				    return false;
				}
				public Integer DC_PRODUTOLength(){
				    return 120;
				}
				public Integer DC_PRODUTOPrecision(){
				    return null;
				}
				public String DC_PRODUTODefault(){
				
					return null;
				
				}
				public String DC_PRODUTOComment(){
				
				    return "";
				
				}
				public String DC_PRODUTOPattern(){
				
					return "";
				
				}
				public String DC_PRODUTOOriginalDbColumnName(){
				
					return "DC_PRODUTO";
				
				}

				
			    public java.util.Date DT_CADASTRO;

				public java.util.Date getDT_CADASTRO () {
					return this.DT_CADASTRO;
				}

				public Boolean DT_CADASTROIsNullable(){
				    return true;
				}
				public Boolean DT_CADASTROIsKey(){
				    return false;
				}
				public Integer DT_CADASTROLength(){
				    return null;
				}
				public Integer DT_CADASTROPrecision(){
				    return null;
				}
				public String DT_CADASTRODefault(){
				
					return null;
				
				}
				public String DT_CADASTROComment(){
				
				    return "";
				
				}
				public String DT_CADASTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_CADASTROOriginalDbColumnName(){
				
					return "DT_CADASTRO";
				
				}

				
			    public java.util.Date DT_ULTI_ATUALIZACAO;

				public java.util.Date getDT_ULTI_ATUALIZACAO () {
					return this.DT_ULTI_ATUALIZACAO;
				}

				public Boolean DT_ULTI_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTI_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTI_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DT_ULTI_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DT_ULTI_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DT_ULTI_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTI_ATUALIZACAOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DT_ULTI_ATUALIZACAOOriginalDbColumnName(){
				
					return "DT_ULTI_ATUALIZACAO";
				
				}

				
			    public String CD_OPERADOR;

				public String getCD_OPERADOR () {
					return this.CD_OPERADOR;
				}

				public Boolean CD_OPERADORIsNullable(){
				    return true;
				}
				public Boolean CD_OPERADORIsKey(){
				    return false;
				}
				public Integer CD_OPERADORLength(){
				    return 3;
				}
				public Integer CD_OPERADORPrecision(){
				    return null;
				}
				public String CD_OPERADORDefault(){
				
					return null;
				
				}
				public String CD_OPERADORComment(){
				
				    return "";
				
				}
				public String CD_OPERADORPattern(){
				
					return "";
				
				}
				public String CD_OPERADOROriginalDbColumnName(){
				
					return "CD_OPERADOR";
				
				}

				
			    public String CD_LINHA;

				public String getCD_LINHA () {
					return this.CD_LINHA;
				}

				public Boolean CD_LINHAIsNullable(){
				    return true;
				}
				public Boolean CD_LINHAIsKey(){
				    return false;
				}
				public Integer CD_LINHALength(){
				    return 6;
				}
				public Integer CD_LINHAPrecision(){
				    return null;
				}
				public String CD_LINHADefault(){
				
					return null;
				
				}
				public String CD_LINHAComment(){
				
				    return "";
				
				}
				public String CD_LINHAPattern(){
				
					return "";
				
				}
				public String CD_LINHAOriginalDbColumnName(){
				
					return "CD_LINHA";
				
				}

				
			    public String LINHA;

				public String getLINHA () {
					return this.LINHA;
				}

				public Boolean LINHAIsNullable(){
				    return true;
				}
				public Boolean LINHAIsKey(){
				    return false;
				}
				public Integer LINHALength(){
				    return 120;
				}
				public Integer LINHAPrecision(){
				    return null;
				}
				public String LINHADefault(){
				
					return null;
				
				}
				public String LINHAComment(){
				
				    return "";
				
				}
				public String LINHAPattern(){
				
					return "";
				
				}
				public String LINHAOriginalDbColumnName(){
				
					return "LINHA";
				
				}

				
			    public String CD_GRUPO;

				public String getCD_GRUPO () {
					return this.CD_GRUPO;
				}

				public Boolean CD_GRUPOIsNullable(){
				    return true;
				}
				public Boolean CD_GRUPOIsKey(){
				    return false;
				}
				public Integer CD_GRUPOLength(){
				    return 3;
				}
				public Integer CD_GRUPOPrecision(){
				    return null;
				}
				public String CD_GRUPODefault(){
				
					return null;
				
				}
				public String CD_GRUPOComment(){
				
				    return "";
				
				}
				public String CD_GRUPOPattern(){
				
					return "";
				
				}
				public String CD_GRUPOOriginalDbColumnName(){
				
					return "CD_GRUPO";
				
				}

				
			    public String GRUPO;

				public String getGRUPO () {
					return this.GRUPO;
				}

				public Boolean GRUPOIsNullable(){
				    return true;
				}
				public Boolean GRUPOIsKey(){
				    return false;
				}
				public Integer GRUPOLength(){
				    return 120;
				}
				public Integer GRUPOPrecision(){
				    return null;
				}
				public String GRUPODefault(){
				
					return null;
				
				}
				public String GRUPOComment(){
				
				    return "";
				
				}
				public String GRUPOPattern(){
				
					return "";
				
				}
				public String GRUPOOriginalDbColumnName(){
				
					return "GRUPO";
				
				}

				
			    public String REFERENCIA;

				public String getREFERENCIA () {
					return this.REFERENCIA;
				}

				public Boolean REFERENCIAIsNullable(){
				    return true;
				}
				public Boolean REFERENCIAIsKey(){
				    return false;
				}
				public Integer REFERENCIALength(){
				    return 16;
				}
				public Integer REFERENCIAPrecision(){
				    return null;
				}
				public String REFERENCIADefault(){
				
					return null;
				
				}
				public String REFERENCIAComment(){
				
				    return "";
				
				}
				public String REFERENCIAPattern(){
				
					return "";
				
				}
				public String REFERENCIAOriginalDbColumnName(){
				
					return "REFERENCIA";
				
				}

				
			    public String UNIDADE;

				public String getUNIDADE () {
					return this.UNIDADE;
				}

				public Boolean UNIDADEIsNullable(){
				    return true;
				}
				public Boolean UNIDADEIsKey(){
				    return false;
				}
				public Integer UNIDADELength(){
				    return 4;
				}
				public Integer UNIDADEPrecision(){
				    return null;
				}
				public String UNIDADEDefault(){
				
					return null;
				
				}
				public String UNIDADEComment(){
				
				    return "";
				
				}
				public String UNIDADEPattern(){
				
					return "";
				
				}
				public String UNIDADEOriginalDbColumnName(){
				
					return "UNIDADE";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 15;
				}
				public Integer PESOPrecision(){
				    return 4;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal PESO_LIQ;

				public BigDecimal getPESO_LIQ () {
					return this.PESO_LIQ;
				}

				public Boolean PESO_LIQIsNullable(){
				    return true;
				}
				public Boolean PESO_LIQIsKey(){
				    return false;
				}
				public Integer PESO_LIQLength(){
				    return 15;
				}
				public Integer PESO_LIQPrecision(){
				    return 4;
				}
				public String PESO_LIQDefault(){
				
					return null;
				
				}
				public String PESO_LIQComment(){
				
				    return "";
				
				}
				public String PESO_LIQPattern(){
				
					return "";
				
				}
				public String PESO_LIQOriginalDbColumnName(){
				
					return "PESO_LIQ";
				
				}

				
			    public BigDecimal ALTURA;

				public BigDecimal getALTURA () {
					return this.ALTURA;
				}

				public Boolean ALTURAIsNullable(){
				    return true;
				}
				public Boolean ALTURAIsKey(){
				    return false;
				}
				public Integer ALTURALength(){
				    return 12;
				}
				public Integer ALTURAPrecision(){
				    return 3;
				}
				public String ALTURADefault(){
				
					return null;
				
				}
				public String ALTURAComment(){
				
				    return "";
				
				}
				public String ALTURAPattern(){
				
					return "";
				
				}
				public String ALTURAOriginalDbColumnName(){
				
					return "ALTURA";
				
				}

				
			    public BigDecimal LARGURA;

				public BigDecimal getLARGURA () {
					return this.LARGURA;
				}

				public Boolean LARGURAIsNullable(){
				    return true;
				}
				public Boolean LARGURAIsKey(){
				    return false;
				}
				public Integer LARGURALength(){
				    return 12;
				}
				public Integer LARGURAPrecision(){
				    return 3;
				}
				public String LARGURADefault(){
				
					return null;
				
				}
				public String LARGURAComment(){
				
				    return "";
				
				}
				public String LARGURAPattern(){
				
					return "";
				
				}
				public String LARGURAOriginalDbColumnName(){
				
					return "LARGURA";
				
				}

				
			    public BigDecimal PROFUNDIDADE;

				public BigDecimal getPROFUNDIDADE () {
					return this.PROFUNDIDADE;
				}

				public Boolean PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer PROFUNDIDADELength(){
				    return 12;
				}
				public Integer PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String PROFUNDIDADEOriginalDbColumnName(){
				
					return "PROFUNDIDADE";
				
				}

				
			    public Character INFLAMAVEL;

				public Character getINFLAMAVEL () {
					return this.INFLAMAVEL;
				}

				public Boolean INFLAMAVELIsNullable(){
				    return true;
				}
				public Boolean INFLAMAVELIsKey(){
				    return false;
				}
				public Integer INFLAMAVELLength(){
				    return 1;
				}
				public Integer INFLAMAVELPrecision(){
				    return null;
				}
				public String INFLAMAVELDefault(){
				
					return null;
				
				}
				public String INFLAMAVELComment(){
				
				    return "";
				
				}
				public String INFLAMAVELPattern(){
				
					return "";
				
				}
				public String INFLAMAVELOriginalDbColumnName(){
				
					return "INFLAMAVEL";
				
				}

				
			    public Character ATIVO_VENDA;

				public Character getATIVO_VENDA () {
					return this.ATIVO_VENDA;
				}

				public Boolean ATIVO_VENDAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_VENDAIsKey(){
				    return false;
				}
				public Integer ATIVO_VENDALength(){
				    return 1;
				}
				public Integer ATIVO_VENDAPrecision(){
				    return null;
				}
				public String ATIVO_VENDADefault(){
				
					return null;
				
				}
				public String ATIVO_VENDAComment(){
				
				    return "";
				
				}
				public String ATIVO_VENDAPattern(){
				
					return "";
				
				}
				public String ATIVO_VENDAOriginalDbColumnName(){
				
					return "ATIVO_VENDA";
				
				}

				
			    public Character ATIVO_COMPRA;

				public Character getATIVO_COMPRA () {
					return this.ATIVO_COMPRA;
				}

				public Boolean ATIVO_COMPRAIsNullable(){
				    return true;
				}
				public Boolean ATIVO_COMPRAIsKey(){
				    return false;
				}
				public Integer ATIVO_COMPRALength(){
				    return 1;
				}
				public Integer ATIVO_COMPRAPrecision(){
				    return null;
				}
				public String ATIVO_COMPRADefault(){
				
					return null;
				
				}
				public String ATIVO_COMPRAComment(){
				
				    return "";
				
				}
				public String ATIVO_COMPRAPattern(){
				
					return "";
				
				}
				public String ATIVO_COMPRAOriginalDbColumnName(){
				
					return "ATIVO_COMPRA";
				
				}

				
			    public Character EXPORTA_SITE;

				public Character getEXPORTA_SITE () {
					return this.EXPORTA_SITE;
				}

				public Boolean EXPORTA_SITEIsNullable(){
				    return true;
				}
				public Boolean EXPORTA_SITEIsKey(){
				    return false;
				}
				public Integer EXPORTA_SITELength(){
				    return 1;
				}
				public Integer EXPORTA_SITEPrecision(){
				    return null;
				}
				public String EXPORTA_SITEDefault(){
				
					return null;
				
				}
				public String EXPORTA_SITEComment(){
				
				    return "";
				
				}
				public String EXPORTA_SITEPattern(){
				
					return "";
				
				}
				public String EXPORTA_SITEOriginalDbColumnName(){
				
					return "EXPORTA_SITE";
				
				}

				
			    public String CD_MARCA;

				public String getCD_MARCA () {
					return this.CD_MARCA;
				}

				public Boolean CD_MARCAIsNullable(){
				    return true;
				}
				public Boolean CD_MARCAIsKey(){
				    return false;
				}
				public Integer CD_MARCALength(){
				    return 6;
				}
				public Integer CD_MARCAPrecision(){
				    return null;
				}
				public String CD_MARCADefault(){
				
					return null;
				
				}
				public String CD_MARCAComment(){
				
				    return "";
				
				}
				public String CD_MARCAPattern(){
				
					return "";
				
				}
				public String CD_MARCAOriginalDbColumnName(){
				
					return "CD_MARCA";
				
				}

				
			    public String DC_MARCA;

				public String getDC_MARCA () {
					return this.DC_MARCA;
				}

				public Boolean DC_MARCAIsNullable(){
				    return true;
				}
				public Boolean DC_MARCAIsKey(){
				    return false;
				}
				public Integer DC_MARCALength(){
				    return 30;
				}
				public Integer DC_MARCAPrecision(){
				    return null;
				}
				public String DC_MARCADefault(){
				
					return null;
				
				}
				public String DC_MARCAComment(){
				
				    return "";
				
				}
				public String DC_MARCAPattern(){
				
					return "";
				
				}
				public String DC_MARCAOriginalDbColumnName(){
				
					return "DC_MARCA";
				
				}

				
			    public String CD_FORNECEDOR;

				public String getCD_FORNECEDOR () {
					return this.CD_FORNECEDOR;
				}

				public Boolean CD_FORNECEDORIsNullable(){
				    return true;
				}
				public Boolean CD_FORNECEDORIsKey(){
				    return false;
				}
				public Integer CD_FORNECEDORLength(){
				    return 8;
				}
				public Integer CD_FORNECEDORPrecision(){
				    return null;
				}
				public String CD_FORNECEDORDefault(){
				
					return null;
				
				}
				public String CD_FORNECEDORComment(){
				
				    return "";
				
				}
				public String CD_FORNECEDORPattern(){
				
					return "";
				
				}
				public String CD_FORNECEDOROriginalDbColumnName(){
				
					return "CD_FORNECEDOR";
				
				}

				
			    public String CODIGO_FABRICA;

				public String getCODIGO_FABRICA () {
					return this.CODIGO_FABRICA;
				}

				public Boolean CODIGO_FABRICAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_FABRICAIsKey(){
				    return false;
				}
				public Integer CODIGO_FABRICALength(){
				    return 45;
				}
				public Integer CODIGO_FABRICAPrecision(){
				    return null;
				}
				public String CODIGO_FABRICADefault(){
				
					return null;
				
				}
				public String CODIGO_FABRICAComment(){
				
				    return "";
				
				}
				public String CODIGO_FABRICAPattern(){
				
					return "";
				
				}
				public String CODIGO_FABRICAOriginalDbColumnName(){
				
					return "CODIGO_FABRICA";
				
				}

				
			    public String LOCAL_FISICO;

				public String getLOCAL_FISICO () {
					return this.LOCAL_FISICO;
				}

				public Boolean LOCAL_FISICOIsNullable(){
				    return true;
				}
				public Boolean LOCAL_FISICOIsKey(){
				    return false;
				}
				public Integer LOCAL_FISICOLength(){
				    return 20;
				}
				public Integer LOCAL_FISICOPrecision(){
				    return null;
				}
				public String LOCAL_FISICODefault(){
				
					return null;
				
				}
				public String LOCAL_FISICOComment(){
				
				    return "";
				
				}
				public String LOCAL_FISICOPattern(){
				
					return "";
				
				}
				public String LOCAL_FISICOOriginalDbColumnName(){
				
					return "LOCAL_FISICO";
				
				}

				
			    public String SITUACAO_PRODUTO;

				public String getSITUACAO_PRODUTO () {
					return this.SITUACAO_PRODUTO;
				}

				public Boolean SITUACAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean SITUACAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer SITUACAO_PRODUTOLength(){
				    return 5;
				}
				public Integer SITUACAO_PRODUTOPrecision(){
				    return null;
				}
				public String SITUACAO_PRODUTODefault(){
				
					return null;
				
				}
				public String SITUACAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String SITUACAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String SITUACAO_PRODUTOOriginalDbColumnName(){
				
					return "SITUACAO_PRODUTO";
				
				}

				
			    public String CD_NCM;

				public String getCD_NCM () {
					return this.CD_NCM;
				}

				public Boolean CD_NCMIsNullable(){
				    return true;
				}
				public Boolean CD_NCMIsKey(){
				    return false;
				}
				public Integer CD_NCMLength(){
				    return 15;
				}
				public Integer CD_NCMPrecision(){
				    return null;
				}
				public String CD_NCMDefault(){
				
					return null;
				
				}
				public String CD_NCMComment(){
				
				    return "";
				
				}
				public String CD_NCMPattern(){
				
					return "";
				
				}
				public String CD_NCMOriginalDbColumnName(){
				
					return "CD_NCM";
				
				}

				
			    public String DESCRICAO_NCM;

				public String getDESCRICAO_NCM () {
					return this.DESCRICAO_NCM;
				}

				public Boolean DESCRICAO_NCMIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_NCMIsKey(){
				    return false;
				}
				public Integer DESCRICAO_NCMLength(){
				    return 400;
				}
				public Integer DESCRICAO_NCMPrecision(){
				    return null;
				}
				public String DESCRICAO_NCMDefault(){
				
					return null;
				
				}
				public String DESCRICAO_NCMComment(){
				
				    return "";
				
				}
				public String DESCRICAO_NCMPattern(){
				
					return "";
				
				}
				public String DESCRICAO_NCMOriginalDbColumnName(){
				
					return "DESCRICAO_NCM";
				
				}

				
			    public String LANCAMENTO;

				public String getLANCAMENTO () {
					return this.LANCAMENTO;
				}

				public Boolean LANCAMENTOIsNullable(){
				    return true;
				}
				public Boolean LANCAMENTOIsKey(){
				    return false;
				}
				public Integer LANCAMENTOLength(){
				    return 3;
				}
				public Integer LANCAMENTOPrecision(){
				    return null;
				}
				public String LANCAMENTODefault(){
				
					return null;
				
				}
				public String LANCAMENTOComment(){
				
				    return "";
				
				}
				public String LANCAMENTOPattern(){
				
					return "";
				
				}
				public String LANCAMENTOOriginalDbColumnName(){
				
					return "LANCAMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.CD_PRODUTO == null) {
							if (other.CD_PRODUTO != null)
								return false;
						
						} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            other.DC_PRODUTO = this.DC_PRODUTO;
	            other.DT_CADASTRO = this.DT_CADASTRO;
	            other.DT_ULTI_ATUALIZACAO = this.DT_ULTI_ATUALIZACAO;
	            other.CD_OPERADOR = this.CD_OPERADOR;
	            other.CD_LINHA = this.CD_LINHA;
	            other.LINHA = this.LINHA;
	            other.CD_GRUPO = this.CD_GRUPO;
	            other.GRUPO = this.GRUPO;
	            other.REFERENCIA = this.REFERENCIA;
	            other.UNIDADE = this.UNIDADE;
	            other.PESO = this.PESO;
	            other.PESO_LIQ = this.PESO_LIQ;
	            other.ALTURA = this.ALTURA;
	            other.LARGURA = this.LARGURA;
	            other.PROFUNDIDADE = this.PROFUNDIDADE;
	            other.INFLAMAVEL = this.INFLAMAVEL;
	            other.ATIVO_VENDA = this.ATIVO_VENDA;
	            other.ATIVO_COMPRA = this.ATIVO_COMPRA;
	            other.EXPORTA_SITE = this.EXPORTA_SITE;
	            other.CD_MARCA = this.CD_MARCA;
	            other.DC_MARCA = this.DC_MARCA;
	            other.CD_FORNECEDOR = this.CD_FORNECEDOR;
	            other.CODIGO_FABRICA = this.CODIGO_FABRICA;
	            other.LOCAL_FISICO = this.LOCAL_FISICO;
	            other.SITUACAO_PRODUTO = this.SITUACAO_PRODUTO;
	            other.CD_NCM = this.CD_NCM;
	            other.DESCRICAO_NCM = this.DESCRICAO_NCM;
	            other.LANCAMENTO = this.LANCAMENTO;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.CD_PRODUTO = this.CD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_relatorio_vendas_30_dias) {

        	try {

        		int length = 0;
		
					this.CD_PRODUTO = readString(dis);
					
					this.DC_PRODUTO = readString(dis);
					
					this.DT_CADASTRO = readDate(dis);
					
					this.DT_ULTI_ATUALIZACAO = readDate(dis);
					
					this.CD_OPERADOR = readString(dis);
					
					this.CD_LINHA = readString(dis);
					
					this.LINHA = readString(dis);
					
					this.CD_GRUPO = readString(dis);
					
					this.GRUPO = readString(dis);
					
					this.REFERENCIA = readString(dis);
					
					this.UNIDADE = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.PESO_LIQ = (BigDecimal) dis.readObject();
					
						this.ALTURA = (BigDecimal) dis.readObject();
					
						this.LARGURA = (BigDecimal) dis.readObject();
					
						this.PROFUNDIDADE = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.INFLAMAVEL = null;
           				} else {
           			    	this.INFLAMAVEL = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_VENDA = null;
           				} else {
           			    	this.ATIVO_VENDA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ATIVO_COMPRA = null;
           				} else {
           			    	this.ATIVO_COMPRA = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXPORTA_SITE = null;
           				} else {
           			    	this.EXPORTA_SITE = dis.readChar();
           				}
					
					this.CD_MARCA = readString(dis);
					
					this.DC_MARCA = readString(dis);
					
					this.CD_FORNECEDOR = readString(dis);
					
					this.CODIGO_FABRICA = readString(dis);
					
					this.LOCAL_FISICO = readString(dis);
					
					this.SITUACAO_PRODUTO = readString(dis);
					
					this.CD_NCM = readString(dis);
					
					this.DESCRICAO_NCM = readString(dis);
					
					this.LANCAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// String
				
						writeString(this.DC_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_CADASTRO,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ULTI_ATUALIZACAO,dos);
					
					// String
				
						writeString(this.CD_OPERADOR,dos);
					
					// String
				
						writeString(this.CD_LINHA,dos);
					
					// String
				
						writeString(this.LINHA,dos);
					
					// String
				
						writeString(this.CD_GRUPO,dos);
					
					// String
				
						writeString(this.GRUPO,dos);
					
					// String
				
						writeString(this.REFERENCIA,dos);
					
					// String
				
						writeString(this.UNIDADE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_LIQ);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFUNDIDADE);
					
					// Character
				
						if(this.INFLAMAVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.INFLAMAVEL);
		            	}
					
					// Character
				
						if(this.ATIVO_VENDA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_VENDA);
		            	}
					
					// Character
				
						if(this.ATIVO_COMPRA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ATIVO_COMPRA);
		            	}
					
					// Character
				
						if(this.EXPORTA_SITE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.EXPORTA_SITE);
		            	}
					
					// String
				
						writeString(this.CD_MARCA,dos);
					
					// String
				
						writeString(this.DC_MARCA,dos);
					
					// String
				
						writeString(this.CD_FORNECEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_FABRICA,dos);
					
					// String
				
						writeString(this.LOCAL_FISICO,dos);
					
					// String
				
						writeString(this.SITUACAO_PRODUTO,dos);
					
					// String
				
						writeString(this.CD_NCM,dos);
					
					// String
				
						writeString(this.DESCRICAO_NCM,dos);
					
					// String
				
						writeString(this.LANCAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PRODUTO="+CD_PRODUTO);
		sb.append(",DC_PRODUTO="+DC_PRODUTO);
		sb.append(",DT_CADASTRO="+String.valueOf(DT_CADASTRO));
		sb.append(",DT_ULTI_ATUALIZACAO="+String.valueOf(DT_ULTI_ATUALIZACAO));
		sb.append(",CD_OPERADOR="+CD_OPERADOR);
		sb.append(",CD_LINHA="+CD_LINHA);
		sb.append(",LINHA="+LINHA);
		sb.append(",CD_GRUPO="+CD_GRUPO);
		sb.append(",GRUPO="+GRUPO);
		sb.append(",REFERENCIA="+REFERENCIA);
		sb.append(",UNIDADE="+UNIDADE);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",PESO_LIQ="+String.valueOf(PESO_LIQ));
		sb.append(",ALTURA="+String.valueOf(ALTURA));
		sb.append(",LARGURA="+String.valueOf(LARGURA));
		sb.append(",PROFUNDIDADE="+String.valueOf(PROFUNDIDADE));
		sb.append(",INFLAMAVEL="+String.valueOf(INFLAMAVEL));
		sb.append(",ATIVO_VENDA="+String.valueOf(ATIVO_VENDA));
		sb.append(",ATIVO_COMPRA="+String.valueOf(ATIVO_COMPRA));
		sb.append(",EXPORTA_SITE="+String.valueOf(EXPORTA_SITE));
		sb.append(",CD_MARCA="+CD_MARCA);
		sb.append(",DC_MARCA="+DC_MARCA);
		sb.append(",CD_FORNECEDOR="+CD_FORNECEDOR);
		sb.append(",CODIGO_FABRICA="+CODIGO_FABRICA);
		sb.append(",LOCAL_FISICO="+LOCAL_FISICO);
		sb.append(",SITUACAO_PRODUTO="+SITUACAO_PRODUTO);
		sb.append(",CD_NCM="+CD_NCM);
		sb.append(",DESCRICAO_NCM="+DESCRICAO_NCM);
		sb.append(",LANCAMENTO="+LANCAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_PRODUTO, other.CD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
row9Struct row9 = new row9Struct();





	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tUniqRow_2 - inputs:(row30) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_15 - inputs:(out6,row9) outputs:(out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String CD_PRODUTO;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.CD_PRODUTO == null) {
										if (other.CD_PRODUTO != null) 
											return false;
								
									} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out2Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    out2Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row30.CD_PRODUTO = next_tHashInput_12.CD_PRODUTO;
	row30.DC_PRODUTO = next_tHashInput_12.DC_PRODUTO;
	row30.DT_CADASTRO = next_tHashInput_12.DT_CADASTRO;
	row30.DT_ULTI_ATUALIZACAO = next_tHashInput_12.DT_ULTI_ATUALIZACAO;
	row30.CD_OPERADOR = next_tHashInput_12.CD_OPERADOR;
	row30.CD_LINHA = next_tHashInput_12.CD_LINHA;
	row30.LINHA = next_tHashInput_12.LINHA;
	row30.CD_GRUPO = next_tHashInput_12.CD_GRUPO;
	row30.GRUPO = next_tHashInput_12.GRUPO;
	row30.REFERENCIA = next_tHashInput_12.REFERENCIA;
	row30.UNIDADE = next_tHashInput_12.UNIDADE;
	row30.PESO = next_tHashInput_12.PESO;
	row30.PESO_LIQ = next_tHashInput_12.PESO_LIQ;
	row30.ALTURA = next_tHashInput_12.ALTURA;
	row30.LARGURA = next_tHashInput_12.LARGURA;
	row30.PROFUNDIDADE = next_tHashInput_12.PROFUNDIDADE;
	row30.INFLAMAVEL = next_tHashInput_12.INFLAMAVEL;
	row30.ATIVO_VENDA = next_tHashInput_12.ATIVO_VENDA;
	row30.ATIVO_COMPRA = next_tHashInput_12.ATIVO_COMPRA;
	row30.EXPORTA_SITE = next_tHashInput_12.EXPORTA_SITE;
	row30.CD_MARCA = next_tHashInput_12.CD_MARCA;
	row30.DC_MARCA = next_tHashInput_12.DC_MARCA;
	row30.CD_FORNECEDOR = next_tHashInput_12.CD_FORNECEDOR;
	row30.CODIGO_FABRICA = next_tHashInput_12.CODIGO_FABRICA;
	row30.LOCAL_FISICO = next_tHashInput_12.LOCAL_FISICO;
	row30.SITUACAO_PRODUTO = next_tHashInput_12.SITUACAO_PRODUTO;
	row30.CD_NCM = next_tHashInput_12.CD_NCM;
	row30.DESCRICAO_NCM = next_tHashInput_12.DESCRICAO_NCM;
	row30.LANCAMENTO = next_tHashInput_12.LANCAMENTO;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					
row9 = null;			row9 = null;			
if(row30.CD_PRODUTO == null){
	finder_tUniqRow_2.CD_PRODUTO = null;
}else{
	finder_tUniqRow_2.CD_PRODUTO = row30.CD_PRODUTO.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(row30.CD_PRODUTO == null){
	new_tUniqRow_2.CD_PRODUTO = null;
}else{
	new_tUniqRow_2.CD_PRODUTO = row30.CD_PRODUTO.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.CD_PRODUTO = row30.CD_PRODUTO;			row9.DC_PRODUTO = row30.DC_PRODUTO;			row9.DT_CADASTRO = row30.DT_CADASTRO;			row9.DT_ULTI_ATUALIZACAO = row30.DT_ULTI_ATUALIZACAO;			row9.CD_OPERADOR = row30.CD_OPERADOR;			row9.CD_LINHA = row30.CD_LINHA;			row9.LINHA = row30.LINHA;			row9.CD_GRUPO = row30.CD_GRUPO;			row9.GRUPO = row30.GRUPO;			row9.REFERENCIA = row30.REFERENCIA;			row9.UNIDADE = row30.UNIDADE;			row9.PESO = row30.PESO;			row9.PESO_LIQ = row30.PESO_LIQ;			row9.ALTURA = row30.ALTURA;			row9.LARGURA = row30.LARGURA;			row9.PROFUNDIDADE = row30.PROFUNDIDADE;			row9.INFLAMAVEL = row30.INFLAMAVEL;			row9.ATIVO_VENDA = row30.ATIVO_VENDA;			row9.ATIVO_COMPRA = row30.ATIVO_COMPRA;			row9.EXPORTA_SITE = row30.EXPORTA_SITE;			row9.CD_MARCA = row30.CD_MARCA;			row9.DC_MARCA = row30.DC_MARCA;			row9.CD_FORNECEDOR = row30.CD_FORNECEDOR;			row9.CODIGO_FABRICA = row30.CODIGO_FABRICA;			row9.LOCAL_FISICO = row30.LOCAL_FISICO;			row9.SITUACAO_PRODUTO = row30.SITUACAO_PRODUTO;			row9.CD_NCM = row30.CD_NCM;			row9.DESCRICAO_NCM = row30.DESCRICAO_NCM;			row9.LANCAMENTO = row30.LANCAMENTO;			if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.CD_PRODUTO = row30.CD_PRODUTO;			row9.DC_PRODUTO = row30.DC_PRODUTO;			row9.DT_CADASTRO = row30.DT_CADASTRO;			row9.DT_ULTI_ATUALIZACAO = row30.DT_ULTI_ATUALIZACAO;			row9.CD_OPERADOR = row30.CD_OPERADOR;			row9.CD_LINHA = row30.CD_LINHA;			row9.LINHA = row30.LINHA;			row9.CD_GRUPO = row30.CD_GRUPO;			row9.GRUPO = row30.GRUPO;			row9.REFERENCIA = row30.REFERENCIA;			row9.UNIDADE = row30.UNIDADE;			row9.PESO = row30.PESO;			row9.PESO_LIQ = row30.PESO_LIQ;			row9.ALTURA = row30.ALTURA;			row9.LARGURA = row30.LARGURA;			row9.PROFUNDIDADE = row30.PROFUNDIDADE;			row9.INFLAMAVEL = row30.INFLAMAVEL;			row9.ATIVO_VENDA = row30.ATIVO_VENDA;			row9.ATIVO_COMPRA = row30.ATIVO_COMPRA;			row9.EXPORTA_SITE = row30.EXPORTA_SITE;			row9.CD_MARCA = row30.CD_MARCA;			row9.DC_MARCA = row30.DC_MARCA;			row9.CD_FORNECEDOR = row30.CD_FORNECEDOR;			row9.CODIGO_FABRICA = row30.CODIGO_FABRICA;			row9.LOCAL_FISICO = row30.LOCAL_FISICO;			row9.SITUACAO_PRODUTO = row30.SITUACAO_PRODUTO;			row9.CD_NCM = row30.CD_NCM;			row9.DESCRICAO_NCM = row30.DESCRICAO_NCM;			row9.LANCAMENTO = row30.LANCAMENTO;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.CD_PRODUTO = row9.CD_PRODUTO;
				
				row9_HashRow.DC_PRODUTO = row9.DC_PRODUTO;
				
				row9_HashRow.DT_CADASTRO = row9.DT_CADASTRO;
				
				row9_HashRow.DT_ULTI_ATUALIZACAO = row9.DT_ULTI_ATUALIZACAO;
				
				row9_HashRow.CD_OPERADOR = row9.CD_OPERADOR;
				
				row9_HashRow.CD_LINHA = row9.CD_LINHA;
				
				row9_HashRow.LINHA = row9.LINHA;
				
				row9_HashRow.CD_GRUPO = row9.CD_GRUPO;
				
				row9_HashRow.GRUPO = row9.GRUPO;
				
				row9_HashRow.REFERENCIA = row9.REFERENCIA;
				
				row9_HashRow.UNIDADE = row9.UNIDADE;
				
				row9_HashRow.PESO = row9.PESO;
				
				row9_HashRow.PESO_LIQ = row9.PESO_LIQ;
				
				row9_HashRow.ALTURA = row9.ALTURA;
				
				row9_HashRow.LARGURA = row9.LARGURA;
				
				row9_HashRow.PROFUNDIDADE = row9.PROFUNDIDADE;
				
				row9_HashRow.INFLAMAVEL = row9.INFLAMAVEL;
				
				row9_HashRow.ATIVO_VENDA = row9.ATIVO_VENDA;
				
				row9_HashRow.ATIVO_COMPRA = row9.ATIVO_COMPRA;
				
				row9_HashRow.EXPORTA_SITE = row9.EXPORTA_SITE;
				
				row9_HashRow.CD_MARCA = row9.CD_MARCA;
				
				row9_HashRow.DC_MARCA = row9.DC_MARCA;
				
				row9_HashRow.CD_FORNECEDOR = row9.CD_FORNECEDOR;
				
				row9_HashRow.CODIGO_FABRICA = row9.CODIGO_FABRICA;
				
				row9_HashRow.LOCAL_FISICO = row9.LOCAL_FISICO;
				
				row9_HashRow.SITUACAO_PRODUTO = row9.SITUACAO_PRODUTO;
				
				row9_HashRow.CD_NCM = row9.CD_NCM;
				
				row9_HashRow.DESCRICAO_NCM = row9.DESCRICAO_NCM;
				
				row9_HashRow.LANCAMENTO = row9.LANCAMENTO;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_relatorio_vendas_30_dias_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final relatorio_vendas_30_dias relatorio_vendas_30_diasClass = new relatorio_vendas_30_dias();

        int exitCode = relatorio_vendas_30_diasClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = relatorio_vendas_30_dias.class.getClassLoader().getResourceAsStream("palacio_ferramentas/relatorio_vendas_30_dias_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = relatorio_vendas_30_dias.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("data_execucao", "id_String");
                        if(context.getStringValue("data_execucao") == null) {
                            context.data_execucao = null;
                        } else {
                            context.data_execucao=(String) context.getProperty("data_execucao");
                        }
                        context.setContextType("EMAIL_PASSWORD_P", "id_String");
                        if(context.getStringValue("EMAIL_PASSWORD_P") == null) {
                            context.EMAIL_PASSWORD_P = null;
                        } else {
                            context.EMAIL_PASSWORD_P=(String) context.getProperty("EMAIL_PASSWORD_P");
                        }
                        context.setContextType("EMAIL_P", "id_String");
                        if(context.getStringValue("EMAIL_P") == null) {
                            context.EMAIL_P = null;
                        } else {
                            context.EMAIL_P=(String) context.getProperty("EMAIL_P");
                        }
                        context.setContextType("SEND_EMAIL", "id_String");
                        if(context.getStringValue("SEND_EMAIL") == null) {
                            context.SEND_EMAIL = null;
                        } else {
                            context.SEND_EMAIL=(String) context.getProperty("SEND_EMAIL");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("excel", "id_String");
                        if(context.getStringValue("excel") == null) {
                            context.excel = null;
                        } else {
                            context.excel=(String) context.getProperty("excel");
                        }
                        context.setContextType("SMTP_P", "id_String");
                        if(context.getStringValue("SMTP_P") == null) {
                            context.SMTP_P = null;
                        } else {
                            context.SMTP_P=(String) context.getProperty("SMTP_P");
                        }
                        context.setContextType("SMTP_PORT_P", "id_String");
                        if(context.getStringValue("SMTP_PORT_P") == null) {
                            context.SMTP_PORT_P = null;
                        } else {
                            context.SMTP_PORT_P=(String) context.getProperty("SMTP_PORT_P");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                        context.setContextType("caminho", "id_String");
                        if(context.getStringValue("caminho") == null) {
                            context.caminho = null;
                        } else {
                            context.caminho=(String) context.getProperty("caminho");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("data_execucao")) {
                context.data_execucao = (String) parentContextMap.get("data_execucao");
            }if (parentContextMap.containsKey("EMAIL_PASSWORD_P")) {
                context.EMAIL_PASSWORD_P = (String) parentContextMap.get("EMAIL_PASSWORD_P");
            }if (parentContextMap.containsKey("EMAIL_P")) {
                context.EMAIL_P = (String) parentContextMap.get("EMAIL_P");
            }if (parentContextMap.containsKey("SEND_EMAIL")) {
                context.SEND_EMAIL = (String) parentContextMap.get("SEND_EMAIL");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("excel")) {
                context.excel = (String) parentContextMap.get("excel");
            }if (parentContextMap.containsKey("SMTP_P")) {
                context.SMTP_P = (String) parentContextMap.get("SMTP_P");
            }if (parentContextMap.containsKey("SMTP_PORT_P")) {
                context.SMTP_PORT_P = (String) parentContextMap.get("SMTP_PORT_P");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }if (parentContextMap.containsKey("caminho")) {
                context.caminho = (String) parentContextMap.get("caminho");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_15Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_15) {
globalMap.put("tDBInput_15_SUBPROCESS_STATE", -1);

e_tDBInput_15.printStackTrace();

}catch (java.lang.Error e_tDBInput_15) {
globalMap.put("tDBInput_15_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_15;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_2) {
globalMap.put("tPostjob_2_SUBPROCESS_STATE", -1);

e_tPostjob_2.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : relatorio_vendas_30_dias");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1657090 characters generated by Talend Open Studio for Big Data 
 *     on the 4 de novembro de 2024 12:08:41 BRT
 ************************************************************************************************/